class funcs.TestFunction$TestThread extends java.lang.Thread
{
    private java.lang.String Device;
    private int number;
    private int type;
    private java.lang.String Dir;
    public java.io.BufferedWriter s;
    public boolean flag;
    final funcs.TestFunction this$0;

    public void <init>(funcs.TestFunction, java.lang.String)
    {
        funcs.TestFunction$TestThread this;
        funcs.TestFunction l1;
        java.lang.String name;

        this := @this: funcs.TestFunction$TestThread;
        l1 := @parameter0: funcs.TestFunction;
        name := @parameter1: java.lang.String;
        this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0> = l1;
        specialinvoke this.<java.lang.Thread: void <init>()>();
        this.<funcs.TestFunction$TestThread: boolean flag> = 0;
        this.<funcs.TestFunction$TestThread: java.lang.String Device> = name;
        return;
    }

    public void <init>(funcs.TestFunction, java.lang.String, int, int, java.lang.String)
    {
        funcs.TestFunction$TestThread this;
        funcs.TestFunction l1;
        java.lang.String name, Dir;
        int number, type;

        this := @this: funcs.TestFunction$TestThread;
        l1 := @parameter0: funcs.TestFunction;
        name := @parameter1: java.lang.String;
        number := @parameter2: int;
        type := @parameter3: int;
        Dir := @parameter4: java.lang.String;
        this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0> = l1;
        specialinvoke this.<java.lang.Thread: void <init>()>();
        this.<funcs.TestFunction$TestThread: boolean flag> = 0;
        this.<funcs.TestFunction$TestThread: java.lang.String Device> = name;
        this.<funcs.TestFunction$TestThread: int number> = number;
        this.<funcs.TestFunction$TestThread: int type> = type;
        this.<funcs.TestFunction$TestThread: java.lang.String Dir> = Dir;
        return;
    }

    public void install()
    {
        funcs.TestFunction$TestThread this;
        data.MyDevice d;
        java.lang.StringBuilder $r0, $r7;
        java.lang.String result, $r5, $r6, $r8, $r10;
        java.io.IOException e, $r14;
        funcs.TestFunction $r1, $r9;
        java.util.ArrayList $r2;
        int $i0;
        java.lang.Object $r3;
        javax.swing.DefaultListModel $r4;
        java.lang.Boolean $r11;
        boolean $z0;
        java.io.BufferedWriter $r12;
        java.io.PrintStream $r13;

        this := @this: funcs.TestFunction$TestThread;
        $r1 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r2 = $r1.<funcs.TestFunction: java.util.ArrayList AllDevices>;
        $i0 = this.<funcs.TestFunction$TestThread: int number>;
        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i0);
        d = (data.MyDevice) $r3;

     label0:
        d.<data.MyDevice: java.lang.String State> = "\u5b89\u88c5\u4e2d...";
        $r1 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r4 = $r1.<funcs.TestFunction: javax.swing.DefaultListModel list>;
        $i0 = this.<funcs.TestFunction$TestThread: int number>;
        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>(" ");
        $r5 = this.<funcs.TestFunction$TestThread: java.lang.String Device>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");
        $r5 = d.<data.MyDevice: java.lang.String Type>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    \u5b89\u88c5\u4e2d...");
        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r4.<javax.swing.DefaultListModel: java.lang.Object set(int,java.lang.Object)>($i0, $r6);
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("adb -s ");
        $r8 = this.<funcs.TestFunction$TestThread: java.lang.String Device>;
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" install ");
        $r9 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r8 = $r9.<funcs.TestFunction: java.lang.String apk_Path>;
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
        result = staticinvoke <funcs.CmdToolKit: java.lang.String readConsole(java.lang.String,java.lang.Boolean)>($r10, $r11);
        $z0 = this.<funcs.TestFunction$TestThread: boolean flag>;
        if $z0 == 0 goto label1;

        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        if $r12 == null goto label1;

        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void write(java.lang.String)>(result);
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void newLine()>();

     label1:
        $z0 = virtualinvoke result.<java.lang.String: boolean contains(java.lang.CharSequence)>("INSTALL_FAILED_ALREADY_EXISTS");
        if $z0 == 0 goto label4;

        $z0 = this.<funcs.TestFunction$TestThread: boolean flag>;
        if $z0 == 0 goto label2;

        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        if $r12 == null goto label2;

        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void write(java.lang.String)>("\u5df2\u5b58\u5728\uff0c\u5148\u5378\u8f7d");
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void newLine()>();

     label2:
        virtualinvoke this.<funcs.TestFunction$TestThread: void uninstall(java.lang.String)>("\u5b58\u5728\u65e7\u7248\u672c");
        $r1 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r4 = $r1.<funcs.TestFunction: javax.swing.DefaultListModel list>;
        $i0 = this.<funcs.TestFunction$TestThread: int number>;
        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>(" ");
        $r5 = this.<funcs.TestFunction$TestThread: java.lang.String Device>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");
        $r5 = d.<data.MyDevice: java.lang.String Type>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    \u91cd\u8bd5\u5b89\u88c5\u4e2d...");
        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r4.<javax.swing.DefaultListModel: java.lang.Object set(int,java.lang.Object)>($i0, $r6);
        d.<data.MyDevice: java.lang.String State> = "\u5b89\u88c5\u4e2d...";
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("adb -s ");
        $r8 = this.<funcs.TestFunction$TestThread: java.lang.String Device>;
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" install ");
        $r9 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r8 = $r9.<funcs.TestFunction: java.lang.String apk_Path>;
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
        result = staticinvoke <funcs.CmdToolKit: java.lang.String readConsole(java.lang.String,java.lang.Boolean)>($r10, $r11);
        $z0 = virtualinvoke result.<java.lang.String: boolean contains(java.lang.CharSequence)>("INSTALL_FAILED_ALREADY_EXISTS");
        if $z0 == 0 goto label4;

        $z0 = this.<funcs.TestFunction$TestThread: boolean flag>;
        if $z0 == 0 goto label3;

        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        if $r12 == null goto label3;

        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void write(java.lang.String)>("\u5b58\u5728\u540c\u540d\u4f46\u662f\u4e0d\u540c\u5305\u540d\u8f6f\u4ef6\uff0c\u65e0\u6cd5\u5b89\u88c5apk\uff0c\u8bf7\u624b\u52a8\u5378\u8f7d");
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void write(java.lang.String)>("\u5b89\u88c5\u6210\u529f");

     label3:
        $r13 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>("\u5b58\u5728\u540c\u540d\u4f46\u662f\u4e0d\u540c\u5305\u540d\u8f6f\u4ef6\uff0c\u65e0\u6cd5\u5b89\u88c5apk\uff0c\u8bf7\u624b\u52a8\u5378\u8f7d");

     label4:
        $z0 = virtualinvoke result.<java.lang.String: boolean contains(java.lang.CharSequence)>("Success");
        if $z0 == 0 goto label5;

        $z0 = this.<funcs.TestFunction$TestThread: boolean flag>;
        if $z0 == 0 goto label5;

        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        if $r12 == null goto label5;

        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void write(java.lang.String)>("\u5b89\u88c5\u6210\u529f");
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void newLine()>();

     label5:
        $r13 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>(result);

     label6:
        goto label8;

     label7:
        $r14 := @caughtexception;
        e = $r14;
        virtualinvoke e.<java.io.IOException: void printStackTrace()>();

     label8:
        return;

        catch java.io.IOException from label0 to label6 with label7;
    }

    public void checkinstall()
    {
        funcs.TestFunction$TestThread this;
        java.lang.StringBuilder $r0;
        java.lang.String result, $r1, $r2;
        java.io.IOException e, $r6;
        java.lang.Boolean $r3;
        funcs.TestFunction $r4;
        boolean $z0;
        java.io.PrintStream $r5;

        this := @this: funcs.TestFunction$TestThread;

     label0:
        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("adb -s ");
        $r1 = this.<funcs.TestFunction$TestThread: java.lang.String Device>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" shell ls /data/data");
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();
        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
        result = staticinvoke <funcs.CmdToolKit: java.lang.String readConsole(java.lang.String,java.lang.Boolean)>($r2, $r3);
        $r4 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r1 = $r4.<funcs.TestFunction: java.lang.String pkt_Name>;
        $z0 = virtualinvoke result.<java.lang.String: boolean contains(java.lang.CharSequence)>($r1);
        if $z0 == 0 goto label1;

        $r5 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("\u5b89\u88c5\u6210\u529f");
        goto label4;

     label1:
        $r5 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("\u5b89\u88c5\u5931\u8d25");
        $r5 = <java.lang.System: java.io.PrintStream out>;
        $r4 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r1 = $r4.<funcs.TestFunction: java.lang.String pkt_Name>;
        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r1);
        $r5 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>(result);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;
        e = $r6;
        virtualinvoke e.<java.io.IOException: void printStackTrace()>();

     label4:
        return;

        catch java.io.IOException from label0 to label2 with label3;
    }

    public void uninstall(java.lang.String)
    {
        funcs.TestFunction$TestThread this;
        java.lang.String info, result, $r5, $r6, $r8, $r10;
        data.MyDevice d;
        java.lang.StringBuilder $r0, $r7;
        java.io.IOException e, $r14;
        funcs.TestFunction $r1, $r9;
        java.util.ArrayList $r2;
        int $i0;
        java.lang.Object $r3;
        javax.swing.DefaultListModel $r4;
        java.lang.Boolean $r11;
        boolean $z0;
        java.io.BufferedWriter $r12;
        java.io.PrintStream $r13;

        this := @this: funcs.TestFunction$TestThread;
        info := @parameter0: java.lang.String;
        $r1 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r2 = $r1.<funcs.TestFunction: java.util.ArrayList AllDevices>;
        $i0 = this.<funcs.TestFunction$TestThread: int number>;
        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i0);
        d = (data.MyDevice) $r3;

     label0:
        d.<data.MyDevice: java.lang.String State> = "\u5378\u8f7d\u4e2d....";
        $r1 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r4 = $r1.<funcs.TestFunction: javax.swing.DefaultListModel list>;
        $i0 = this.<funcs.TestFunction$TestThread: int number>;
        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>(" ");
        $r5 = this.<funcs.TestFunction$TestThread: java.lang.String Device>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");
        $r5 = d.<data.MyDevice: java.lang.String Type>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    \u5378\u8f7d\u4e2d.... ");
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(info);
        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r4.<javax.swing.DefaultListModel: java.lang.Object set(int,java.lang.Object)>($i0, $r6);
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("adb -s ");
        $r8 = this.<funcs.TestFunction$TestThread: java.lang.String Device>;
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uninstall ");
        $r9 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r8 = $r9.<funcs.TestFunction: java.lang.String pkt_Name>;
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
        result = staticinvoke <funcs.CmdToolKit: java.lang.String readConsole(java.lang.String,java.lang.Boolean)>($r10, $r11);
        $z0 = this.<funcs.TestFunction$TestThread: boolean flag>;
        if $z0 == 0 goto label1;

        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        if $r12 == null goto label1;

        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void newLine()>();
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void write(java.lang.String)>("\u5378\u8f7d");
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void newLine()>();
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void write(java.lang.String)>(result);
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void newLine()>();

     label1:
        $z0 = virtualinvoke result.<java.lang.String: boolean contains(java.lang.CharSequence)>("Failure");
        if $z0 == 0 goto label3;

        $z0 = this.<funcs.TestFunction$TestThread: boolean flag>;
        if $z0 == 0 goto label2;

        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        if $r12 == null goto label2;

        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void write(java.lang.String)>("\u5378\u8f7d\u5931\u8d25");
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void newLine()>();

     label2:
        $r13 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>("\u5378\u8f7d\u5931\u8d25");
        goto label7;

     label3:
        $z0 = this.<funcs.TestFunction$TestThread: boolean flag>;
        if $z0 == 0 goto label4;

        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        if $r12 == null goto label4;

        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void write(java.lang.String)>("\u5378\u8f7d\u6210\u529f");
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void newLine()>();

     label4:
        $r13 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>("\u5378\u8f7d\u6210\u529f");

     label5:
        goto label7;

     label6:
        $r14 := @caughtexception;
        e = $r14;
        virtualinvoke e.<java.io.IOException: void printStackTrace()>();

     label7:
        return;

        catch java.io.IOException from label0 to label5 with label6;
    }

    public void functionTest()
    {
        funcs.TestFunction$TestThread this;
        data.MyDevice d;
        java.lang.StringBuilder $r0, $r7;
        java.lang.String result, $r5, $r6, $r8, $r10;
        java.io.IOException e, $r13;
        funcs.TestFunction $r1, $r9;
        java.util.ArrayList $r2;
        int $i0;
        java.lang.Object $r3;
        javax.swing.DefaultListModel $r4;
        java.lang.Boolean $r11;
        boolean $z0;
        java.io.BufferedWriter $r12;

        this := @this: funcs.TestFunction$TestThread;
        $r1 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r2 = $r1.<funcs.TestFunction: java.util.ArrayList AllDevices>;
        $i0 = this.<funcs.TestFunction$TestThread: int number>;
        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i0);
        d = (data.MyDevice) $r3;

     label0:
        d.<data.MyDevice: java.lang.String State> = "\u6d4b\u8bd5\u4e2d...";
        $r1 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r4 = $r1.<funcs.TestFunction: javax.swing.DefaultListModel list>;
        $i0 = this.<funcs.TestFunction$TestThread: int number>;
        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>(" ");
        $r5 = this.<funcs.TestFunction$TestThread: java.lang.String Device>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");
        $r5 = d.<data.MyDevice: java.lang.String Type>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    \u6d4b\u8bd5\u5305\u5b89\u88c5\u4e2d...");
        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r4.<javax.swing.DefaultListModel: java.lang.Object set(int,java.lang.Object)>($i0, $r6);
        result = "";
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("adb -s ");
        $r8 = this.<funcs.TestFunction$TestThread: java.lang.String Device>;
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" install -r ");
        $r9 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r8 = $r9.<funcs.TestFunction: java.lang.String apk_Testpath>;
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
        result = staticinvoke <funcs.CmdToolKit: java.lang.String readConsole(java.lang.String,java.lang.Boolean)>($r10, $r11);
        $z0 = this.<funcs.TestFunction$TestThread: boolean flag>;
        if $z0 == 0 goto label1;

        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        if $r12 == null goto label1;

        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void newLine()>();
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void write(java.lang.String)>("\u6d4b\u8bd5\u5305\u5b89\u88c5\uff1a");
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void newLine()>();
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void write(java.lang.String)>(result);
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void newLine()>();

     label1:
        $r1 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r4 = $r1.<funcs.TestFunction: javax.swing.DefaultListModel list>;
        $i0 = this.<funcs.TestFunction$TestThread: int number>;
        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>(" ");
        $r5 = this.<funcs.TestFunction$TestThread: java.lang.String Device>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");
        $r5 = d.<data.MyDevice: java.lang.String Type>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    \u6d4b\u8bd5\u4e2d...");
        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r4.<javax.swing.DefaultListModel: java.lang.Object set(int,java.lang.Object)>($i0, $r6);
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("adb -s ");
        $r8 = this.<funcs.TestFunction$TestThread: java.lang.String Device>;
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" shell am instrument -w ");
        $r9 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r8 = $r9.<funcs.TestFunction: java.lang.String Testpkt_Name>;
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/android.test.InstrumentationTestRunner");
        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
        result = staticinvoke <funcs.CmdToolKit: java.lang.String readConsole(java.lang.String,java.lang.Boolean)>($r10, $r11);
        $z0 = this.<funcs.TestFunction$TestThread: boolean flag>;
        if $z0 == 0 goto label2;

        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        if $r12 == null goto label2;

        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void newLine()>();
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void write(java.lang.String)>("\u6d4b\u8bd5\u7ed3\u679c\uff1a");
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void newLine()>();
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void write(java.lang.String)>(result);
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void newLine()>();

     label2:
        $r1 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r4 = $r1.<funcs.TestFunction: javax.swing.DefaultListModel list>;
        $i0 = this.<funcs.TestFunction$TestThread: int number>;
        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>(" ");
        $r5 = this.<funcs.TestFunction$TestThread: java.lang.String Device>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");
        $r5 = d.<data.MyDevice: java.lang.String Type>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    \u6d4b\u8bd5\u5305\u5378\u8f7d\u4e2d...");
        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r4.<javax.swing.DefaultListModel: java.lang.Object set(int,java.lang.Object)>($i0, $r6);
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("adb -s ");
        $r8 = this.<funcs.TestFunction$TestThread: java.lang.String Device>;
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uninstall ");
        $r9 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r8 = $r9.<funcs.TestFunction: java.lang.String Testpkt_Name>;
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
        result = staticinvoke <funcs.CmdToolKit: java.lang.String readConsole(java.lang.String,java.lang.Boolean)>($r10, $r11);
        $z0 = this.<funcs.TestFunction$TestThread: boolean flag>;
        if $z0 == 0 goto label5;

        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        if $r12 == null goto label5;

        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void newLine()>();
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void write(java.lang.String)>("\u6d4b\u8bd5\u5305\u5378\u8f7d\uff1a");
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void newLine()>();
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void write(java.lang.String)>(result);
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void newLine()>();

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;
        e = $r13;
        virtualinvoke e.<java.io.IOException: void printStackTrace()>();

     label5:
        return;

        catch java.io.IOException from label0 to label3 with label4;
    }

    public void MonkeyTest()
    {
        funcs.TestFunction$TestThread this;
        data.MyDevice d;
        java.lang.StringBuilder $r0, $r7;
        java.lang.String result, $r5, $r6, $r8, $r10;
        java.io.IOException e, $r13;
        funcs.TestFunction $r1, $r9;
        java.util.ArrayList $r2;
        int $i0;
        java.lang.Object $r3;
        javax.swing.DefaultListModel $r4;
        java.lang.Boolean $r11;
        boolean $z0;
        java.io.BufferedWriter $r12;

        this := @this: funcs.TestFunction$TestThread;
        $r1 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r2 = $r1.<funcs.TestFunction: java.util.ArrayList AllDevices>;
        $i0 = this.<funcs.TestFunction$TestThread: int number>;
        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i0);
        d = (data.MyDevice) $r3;

     label0:
        d.<data.MyDevice: java.lang.String State> = "\u6d4b\u8bd5\u4e2d...";
        $r1 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r4 = $r1.<funcs.TestFunction: javax.swing.DefaultListModel list>;
        $i0 = this.<funcs.TestFunction$TestThread: int number>;
        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>(" ");
        $r5 = this.<funcs.TestFunction$TestThread: java.lang.String Device>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");
        $r5 = d.<data.MyDevice: java.lang.String Type>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    Monkey\u6d4b\u8bd5\u4e2d...");
        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r4.<javax.swing.DefaultListModel: java.lang.Object set(int,java.lang.Object)>($i0, $r6);
        result = "";
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("adb -s ");
        $r8 = this.<funcs.TestFunction$TestThread: java.lang.String Device>;
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" shell monkey -p ");
        $r9 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r8 = $r9.<funcs.TestFunction: java.lang.String pkt_Name>;
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -v 500");
        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
        result = staticinvoke <funcs.CmdToolKit: java.lang.String readConsole(java.lang.String,java.lang.Boolean)>($r10, $r11);
        $z0 = this.<funcs.TestFunction$TestThread: boolean flag>;
        if $z0 == 0 goto label3;

        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        if $r12 == null goto label3;

        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void newLine()>();
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void write(java.lang.String)>("Monkey\u6d4b\u8bd5\u7ed3\u679c\uff1a");
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void newLine()>();
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void write(java.lang.String)>(result);
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void newLine()>();

     label1:
        goto label3;

     label2:
        $r13 := @caughtexception;
        e = $r13;
        virtualinvoke e.<java.io.IOException: void printStackTrace()>();

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public void MonkeyRunnerTest()
    {
        funcs.TestFunction$TestThread this;
        data.MyDevice d;
        java.lang.StringBuilder $r0, $r7;
        java.lang.String result, $r5, $r6, $r9, $r10;
        java.io.IOException e, $r13;
        funcs.TestFunction $r1, $r8;
        java.util.ArrayList $r2;
        int $i0;
        java.lang.Object $r3;
        javax.swing.DefaultListModel $r4;
        java.lang.Boolean $r11;
        boolean $z0;
        java.io.BufferedWriter $r12;

        this := @this: funcs.TestFunction$TestThread;
        $r1 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r2 = $r1.<funcs.TestFunction: java.util.ArrayList AllDevices>;
        $i0 = this.<funcs.TestFunction$TestThread: int number>;
        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i0);
        d = (data.MyDevice) $r3;

     label0:
        d.<data.MyDevice: java.lang.String State> = "\u6d4b\u8bd5\u4e2d...";
        $r1 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r4 = $r1.<funcs.TestFunction: javax.swing.DefaultListModel list>;
        $i0 = this.<funcs.TestFunction$TestThread: int number>;
        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>(" ");
        $r5 = this.<funcs.TestFunction$TestThread: java.lang.String Device>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");
        $r5 = d.<data.MyDevice: java.lang.String Type>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    MonkeyRunner\u6d4b\u8bd5\u4e2d...");
        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r4.<javax.swing.DefaultListModel: java.lang.Object set(int,java.lang.Object)>($i0, $r6);
        result = "";
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("monkeyrunner ");
        $r8 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r9 = $r8.<funcs.TestFunction: java.lang.String apk_Testpath>;
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
        result = staticinvoke <funcs.CmdToolKit: java.lang.String readConsole(java.lang.String,java.lang.Boolean)>($r10, $r11);
        $z0 = this.<funcs.TestFunction$TestThread: boolean flag>;
        if $z0 == 0 goto label3;

        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        if $r12 == null goto label3;

        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void newLine()>();
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void write(java.lang.String)>("MonkeyRunner\u6d4b\u8bd5\u7ed3\u679c\uff1a");
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void newLine()>();
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void write(java.lang.String)>(result);
        $r12 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r12.<java.io.BufferedWriter: void newLine()>();

     label1:
        goto label3;

     label2:
        $r13 := @caughtexception;
        e = $r13;
        virtualinvoke e.<java.io.IOException: void printStackTrace()>();

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public void run()
    {
        funcs.TestFunction$TestThread this;
        java.io.PrintStream $r0;
        java.lang.StringBuilder $r1, $r5, $r17;
        java.lang.String resultFile, $r3, $r4, $r18;
        java.io.File file, $r6;
        java.io.FileOutputStream $r2;
        java.lang.Exception ex, $r9;
        data.MyDevice d;
        java.io.IOException e, $r20;
        boolean $z0;
        java.io.BufferedWriter $r7, $r19;
        java.io.OutputStreamWriter $r8;
        int $i0, $i1;
        funcs.TestFunction $r10;
        java.lang.Boolean[][] $r11;
        java.lang.Boolean[] $r12;
        java.lang.Boolean $r13;
        java.util.ArrayList $r14;
        java.lang.Object $r15;
        javax.swing.DefaultListModel $r16;
        funcs.TestQueues $r21;

        this := @this: funcs.TestFunction$TestThread;
        $r0 = <java.lang.System: java.io.PrintStream out>;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("*********************  \u5f53\u524d\u7684\u8bbe\u5907 \uff1a ");
        $r3 = this.<funcs.TestFunction$TestThread: java.lang.String Device>;
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>($r4);
        $r5 = new java.lang.StringBuilder;
        $r3 = this.<funcs.TestFunction$TestThread: java.lang.String Dir>;
        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);
        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);
        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");
        $r4 = this.<funcs.TestFunction$TestThread: java.lang.String Device>;
        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt");
        resultFile = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        $r6 = new java.io.File;
        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(resultFile);
        file = $r6;

     label0:
        $z0 = virtualinvoke file.<java.io.File: boolean exists()>();
        if $z0 != 0 goto label1;

        virtualinvoke file.<java.io.File: boolean createNewFile()>();
        goto label2;

     label1:
        virtualinvoke file.<java.io.File: boolean delete()>();
        virtualinvoke file.<java.io.File: boolean createNewFile()>();

     label2:
        $r7 = new java.io.BufferedWriter;
        $r8 = new java.io.OutputStreamWriter;
        $r2 = new java.io.FileOutputStream;
        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File)>(file);
        specialinvoke $r8.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r2);
        specialinvoke $r7.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r8);
        this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s> = $r7;
        this.<funcs.TestFunction$TestThread: boolean flag> = 1;

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;
        ex = $r9;
        virtualinvoke ex.<java.lang.Exception: void printStackTrace()>();
        this.<funcs.TestFunction$TestThread: boolean flag> = 0;

     label5:
        $i0 = this.<funcs.TestFunction$TestThread: int type>;
        if $i0 != 1 goto label8;

        $r10 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r11 = $r10.<funcs.TestFunction: java.lang.Boolean[][] isCheck>;
        $i1 = this.<funcs.TestFunction$TestThread: int number>;
        $r12 = $r11[$i1];
        $r13 = $r12[0];
        $z0 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>();
        if $z0 == 0 goto label6;

        virtualinvoke this.<funcs.TestFunction$TestThread: void install()>();

     label6:
        $r10 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r11 = $r10.<funcs.TestFunction: java.lang.Boolean[][] isCheck>;
        $i1 = this.<funcs.TestFunction$TestThread: int number>;
        $r12 = $r11[$i1];
        $r13 = $r12[1];
        $z0 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>();
        if $z0 == 0 goto label7;

        virtualinvoke this.<funcs.TestFunction$TestThread: void functionTest()>();

     label7:
        $r10 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r11 = $r10.<funcs.TestFunction: java.lang.Boolean[][] isCheck>;
        $i1 = this.<funcs.TestFunction$TestThread: int number>;
        $r12 = $r11[$i1];
        $r13 = $r12[2];
        $z0 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>();
        if $z0 == 0 goto label12;

        virtualinvoke this.<funcs.TestFunction$TestThread: void uninstall(java.lang.String)>("");
        goto label12;

     label8:
        $i0 = this.<funcs.TestFunction$TestThread: int type>;
        if $i0 != 2 goto label11;

        $r10 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r11 = $r10.<funcs.TestFunction: java.lang.Boolean[][] isCheck>;
        $i1 = this.<funcs.TestFunction$TestThread: int number>;
        $r12 = $r11[$i1];
        $r13 = $r12[0];
        $z0 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>();
        if $z0 == 0 goto label9;

        virtualinvoke this.<funcs.TestFunction$TestThread: void install()>();

     label9:
        $r10 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r11 = $r10.<funcs.TestFunction: java.lang.Boolean[][] isCheck>;
        $i1 = this.<funcs.TestFunction$TestThread: int number>;
        $r12 = $r11[$i1];
        $r13 = $r12[1];
        $z0 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>();
        if $z0 == 0 goto label10;

        virtualinvoke this.<funcs.TestFunction$TestThread: void MonkeyRunnerTest()>();

     label10:
        $r10 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r11 = $r10.<funcs.TestFunction: java.lang.Boolean[][] isCheck>;
        $i1 = this.<funcs.TestFunction$TestThread: int number>;
        $r12 = $r11[$i1];
        $r13 = $r12[2];
        $z0 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>();
        if $z0 == 0 goto label12;

        virtualinvoke this.<funcs.TestFunction$TestThread: void uninstall(java.lang.String)>("");
        goto label12;

     label11:
        $i0 = this.<funcs.TestFunction$TestThread: int type>;
        if $i0 != 3 goto label12;

        virtualinvoke this.<funcs.TestFunction$TestThread: void install()>();
        virtualinvoke this.<funcs.TestFunction$TestThread: void MonkeyTest()>();
        virtualinvoke this.<funcs.TestFunction$TestThread: void uninstall(java.lang.String)>("");

     label12:
        $r10 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r14 = $r10.<funcs.TestFunction: java.util.ArrayList AllDevices>;
        $i1 = this.<funcs.TestFunction$TestThread: int number>;
        $r15 = virtualinvoke $r14.<java.util.ArrayList: java.lang.Object get(int)>($i1);
        d = (data.MyDevice) $r15;
        d.<data.MyDevice: java.lang.String State> = "Online";
        $r10 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r16 = $r10.<funcs.TestFunction: javax.swing.DefaultListModel list>;
        $i1 = this.<funcs.TestFunction$TestThread: int number>;
        $r17 = new java.lang.StringBuilder;
        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>(" ");
        $r18 = this.<funcs.TestFunction$TestThread: java.lang.String Device>;
        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);
        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");
        $r18 = d.<data.MyDevice: java.lang.String Type>;
        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);
        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    \u5b8c\u6210");
        $r3 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r16.<javax.swing.DefaultListModel: java.lang.Object set(int,java.lang.Object)>($i1, $r3);

     label13:
        $r19 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r19.<java.io.BufferedWriter: void close()>();

     label14:
        goto label16;

     label15:
        $r20 := @caughtexception;
        e = $r20;
        virtualinvoke e.<java.io.IOException: void printStackTrace()>();

     label16:
        $r21 = <funcs.TestFunction: funcs.TestQueues testqueues>;
        $r4 = this.<funcs.TestFunction$TestThread: java.lang.String Device>;
        virtualinvoke $r21.<funcs.TestQueues: void next(java.lang.String)>($r4);
        $i0 = <funcs.TestFunction: int TestCount>;
        $i0 = $i0 - 1;
        <funcs.TestFunction: int TestCount> = $i0;
        return;

        catch java.lang.Exception from label0 to label3 with label4;
        catch java.io.IOException from label13 to label14 with label15;
    }

    public void TestStop()
    {
        funcs.TestFunction$TestThread this;
        data.MyDevice d;
        java.lang.StringBuilder $r0;
        java.io.IOException e, $r8;
        funcs.TestFunction $r1;
        java.util.ArrayList $r2;
        int $i0;
        java.lang.Object $r3;
        javax.swing.DefaultListModel $r4;
        java.lang.String $r5, $r6;
        java.io.BufferedWriter $r7;

        this := @this: funcs.TestFunction$TestThread;
        $r1 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r2 = $r1.<funcs.TestFunction: java.util.ArrayList AllDevices>;
        $i0 = this.<funcs.TestFunction$TestThread: int number>;
        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i0);
        d = (data.MyDevice) $r3;
        d.<data.MyDevice: java.lang.String State> = "Online";
        $r1 = this.<funcs.TestFunction$TestThread: funcs.TestFunction this$0>;
        $r4 = $r1.<funcs.TestFunction: javax.swing.DefaultListModel list>;
        $i0 = this.<funcs.TestFunction$TestThread: int number>;
        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>(" ");
        $r5 = this.<funcs.TestFunction$TestThread: java.lang.String Device>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");
        $r5 = d.<data.MyDevice: java.lang.String Type>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    \u5df2\u7ec8\u6b62");
        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r4.<javax.swing.DefaultListModel: java.lang.Object set(int,java.lang.Object)>($i0, $r6);

     label0:
        $r7 = this.<funcs.TestFunction$TestThread: java.io.BufferedWriter s>;
        virtualinvoke $r7.<java.io.BufferedWriter: void close()>();

     label1:
        goto label3;

     label2:
        $r8 := @caughtexception;
        e = $r8;
        virtualinvoke e.<java.io.IOException: void printStackTrace()>();

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }
}
