public class org.apache.fop.fo.expr.AbsFunction extends org.apache.fop.fo.expr.FunctionBase
{

    public void <init>()
    {
        org.apache.fop.fo.expr.AbsFunction this;

        this := @this: org.apache.fop.fo.expr.AbsFunction;
        specialinvoke this.<org.apache.fop.fo.expr.FunctionBase: void <init>()>();
        return;
    }

    public int nbArgs()
    {
        org.apache.fop.fo.expr.AbsFunction this;

        this := @this: org.apache.fop.fo.expr.AbsFunction;
        return 1;
    }

    public org.apache.fop.fo.properties.Property eval(org.apache.fop.fo.properties.Property[], org.apache.fop.fo.expr.PropertyInfo) throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.fo.expr.AbsFunction this;
        org.apache.fop.fo.properties.Property[] args;
        org.apache.fop.fo.expr.PropertyInfo propInfo;
        org.apache.fop.datatypes.Numeric num, $r2;
        org.apache.fop.fo.properties.Property $r0;
        org.apache.fop.fo.expr.PropertyException $r1;

        this := @this: org.apache.fop.fo.expr.AbsFunction;
        args := @parameter0: org.apache.fop.fo.properties.Property[];
        propInfo := @parameter1: org.apache.fop.fo.expr.PropertyInfo;
        $r0 = args[0];
        num = virtualinvoke $r0.<org.apache.fop.fo.properties.Property: org.apache.fop.datatypes.Numeric getNumeric()>();
        if num != null goto label0;

        $r1 = new org.apache.fop.fo.expr.PropertyException;
        specialinvoke $r1.<org.apache.fop.fo.expr.PropertyException: void <init>(java.lang.String)>("Non numeric operand to abs function");
        throw $r1;

     label0:
        $r2 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric abs(org.apache.fop.datatypes.Numeric)>(num);
        $r0 = (org.apache.fop.fo.properties.Property) $r2;
        return $r0;
    }
}
