class org.apache.fop.layoutmgr.PageBreaker$1 extends java.lang.Object implements org.apache.fop.layoutmgr.PageBreakingAlgorithm$PageBreakingLayoutListener
{
    private final org.apache.fop.layoutmgr.PageBreaker this$0;

    void <init>(org.apache.fop.layoutmgr.PageBreaker)
    {
        org.apache.fop.layoutmgr.PageBreaker$1 this;
        org.apache.fop.layoutmgr.PageBreaker this$0;

        this := @this: org.apache.fop.layoutmgr.PageBreaker$1;
        this$0 := @parameter0: org.apache.fop.layoutmgr.PageBreaker;
        this.<org.apache.fop.layoutmgr.PageBreaker$1: org.apache.fop.layoutmgr.PageBreaker this$0> = this$0;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }

    public void notifyOverflow(int, org.apache.fop.fo.FObj)
    {
        org.apache.fop.layoutmgr.PageBreaker$1 this;
        int part, $i0;
        org.apache.fop.fo.FObj obj;
        org.apache.fop.layoutmgr.Page p;
        org.apache.fop.fo.pagination.RegionBody body;
        java.lang.String err, $r6, $r7;
        org.apache.fop.layoutmgr.PageBreaker $r0;
        org.apache.fop.layoutmgr.PageProvider $r1;
        org.apache.fop.fo.pagination.SimplePageMaster $r2;
        org.apache.fop.fo.pagination.Region $r3;
        java.lang.StringBuffer $r4;
        org.apache.fop.area.PageViewport $r5;
        java.lang.RuntimeException $r8;
        org.apache.commons.logging.Log $r9;

        this := @this: org.apache.fop.layoutmgr.PageBreaker$1;
        part := @parameter0: int;
        obj := @parameter1: org.apache.fop.fo.FObj;
        $r0 = this.<org.apache.fop.layoutmgr.PageBreaker$1: org.apache.fop.layoutmgr.PageBreaker this$0>;
        $r1 = staticinvoke <org.apache.fop.layoutmgr.PageBreaker: org.apache.fop.layoutmgr.PageProvider access$000(org.apache.fop.layoutmgr.PageBreaker)>($r0);
        p = virtualinvoke $r1.<org.apache.fop.layoutmgr.PageProvider: org.apache.fop.layoutmgr.Page getPage(boolean,int,int)>(0, part, 1);
        $r2 = virtualinvoke p.<org.apache.fop.layoutmgr.Page: org.apache.fop.fo.pagination.SimplePageMaster getSimplePageMaster()>();
        $r3 = virtualinvoke $r2.<org.apache.fop.fo.pagination.SimplePageMaster: org.apache.fop.fo.pagination.Region getRegion(int)>(36);
        body = (org.apache.fop.fo.pagination.RegionBody) $r3;
        $r4 = new java.lang.StringBuffer;
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Content of the region-body on page ");
        $r5 = virtualinvoke p.<org.apache.fop.layoutmgr.Page: org.apache.fop.area.PageViewport getPageViewport()>();
        $r6 = virtualinvoke $r5.<org.apache.fop.area.PageViewport: java.lang.String getPageNumberString()>();
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" overflows the available area in block-progression dimension.");
        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();
        err = staticinvoke <org.apache.fop.fo.FONode: java.lang.String decorateWithContextInfo(java.lang.String,org.apache.fop.fo.FONode)>($r7, obj);
        $i0 = virtualinvoke body.<org.apache.fop.fo.pagination.RegionBody: int getOverflow()>();
        if $i0 != 42 goto label0;

        $r8 = new java.lang.RuntimeException;
        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>(err);
        throw $r8;

     label0:
        $r9 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        interfaceinvoke $r9.<org.apache.commons.logging.Log: void warn(java.lang.Object)>(err);
        return;
    }
}
