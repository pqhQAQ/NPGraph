public class org.apache.fop.pdf.BitmapImage extends java.lang.Object implements org.apache.fop.pdf.PDFImage
{
    private int height;
    private int width;
    private int bitsPerComponent;
    private org.apache.fop.pdf.PDFDeviceColorSpace colorSpace;
    private byte[] bitmaps;
    private org.apache.fop.pdf.PDFReference maskRef;
    private org.apache.fop.pdf.PDFColor transparent;
    private java.lang.String key;
    private org.apache.fop.pdf.PDFDocument pdfDoc;

    public void <init>(java.lang.String, int, int, byte[], java.lang.String)
    {
        org.apache.fop.pdf.BitmapImage this;
        java.lang.String k, mask;
        int width, height;
        byte[] data;
        org.apache.fop.pdf.PDFDeviceColorSpace $r0;
        org.apache.fop.pdf.PDFReference $r1;

        this := @this: org.apache.fop.pdf.BitmapImage;
        k := @parameter0: java.lang.String;
        width := @parameter1: int;
        height := @parameter2: int;
        data := @parameter3: byte[];
        mask := @parameter4: java.lang.String;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<org.apache.fop.pdf.BitmapImage: org.apache.fop.pdf.PDFColor transparent> = null;
        this.<org.apache.fop.pdf.BitmapImage: java.lang.String key> = k;
        this.<org.apache.fop.pdf.BitmapImage: int height> = height;
        this.<org.apache.fop.pdf.BitmapImage: int width> = width;
        this.<org.apache.fop.pdf.BitmapImage: int bitsPerComponent> = 8;
        $r0 = new org.apache.fop.pdf.PDFDeviceColorSpace;
        specialinvoke $r0.<org.apache.fop.pdf.PDFDeviceColorSpace: void <init>(int)>(2);
        this.<org.apache.fop.pdf.BitmapImage: org.apache.fop.pdf.PDFDeviceColorSpace colorSpace> = $r0;
        this.<org.apache.fop.pdf.BitmapImage: byte[] bitmaps> = data;
        if mask == null goto label0;

        $r1 = new org.apache.fop.pdf.PDFReference;
        specialinvoke $r1.<org.apache.fop.pdf.PDFReference: void <init>(java.lang.String)>(mask);
        this.<org.apache.fop.pdf.BitmapImage: org.apache.fop.pdf.PDFReference maskRef> = $r1;

     label0:
        return;
    }

    public void setup(org.apache.fop.pdf.PDFDocument)
    {
        org.apache.fop.pdf.BitmapImage this;
        org.apache.fop.pdf.PDFDocument doc;

        this := @this: org.apache.fop.pdf.BitmapImage;
        doc := @parameter0: org.apache.fop.pdf.PDFDocument;
        this.<org.apache.fop.pdf.BitmapImage: org.apache.fop.pdf.PDFDocument pdfDoc> = doc;
        return;
    }

    public java.lang.String getKey()
    {
        org.apache.fop.pdf.BitmapImage this;
        java.lang.String $r0;

        this := @this: org.apache.fop.pdf.BitmapImage;
        $r0 = this.<org.apache.fop.pdf.BitmapImage: java.lang.String key>;
        return $r0;
    }

    public int getWidth()
    {
        org.apache.fop.pdf.BitmapImage this;
        int $i0;

        this := @this: org.apache.fop.pdf.BitmapImage;
        $i0 = this.<org.apache.fop.pdf.BitmapImage: int width>;
        return $i0;
    }

    public int getHeight()
    {
        org.apache.fop.pdf.BitmapImage this;
        int $i0;

        this := @this: org.apache.fop.pdf.BitmapImage;
        $i0 = this.<org.apache.fop.pdf.BitmapImage: int height>;
        return $i0;
    }

    public void setColorSpace(org.apache.fop.pdf.PDFDeviceColorSpace)
    {
        org.apache.fop.pdf.BitmapImage this;
        org.apache.fop.pdf.PDFDeviceColorSpace cs;

        this := @this: org.apache.fop.pdf.BitmapImage;
        cs := @parameter0: org.apache.fop.pdf.PDFDeviceColorSpace;
        this.<org.apache.fop.pdf.BitmapImage: org.apache.fop.pdf.PDFDeviceColorSpace colorSpace> = cs;
        return;
    }

    public org.apache.fop.pdf.PDFDeviceColorSpace getColorSpace()
    {
        org.apache.fop.pdf.BitmapImage this;
        org.apache.fop.pdf.PDFDeviceColorSpace $r0;

        this := @this: org.apache.fop.pdf.BitmapImage;
        $r0 = this.<org.apache.fop.pdf.BitmapImage: org.apache.fop.pdf.PDFDeviceColorSpace colorSpace>;
        return $r0;
    }

    public int getBitsPerComponent()
    {
        org.apache.fop.pdf.BitmapImage this;
        int $i0;

        this := @this: org.apache.fop.pdf.BitmapImage;
        $i0 = this.<org.apache.fop.pdf.BitmapImage: int bitsPerComponent>;
        return $i0;
    }

    public void setTransparent(org.apache.fop.pdf.PDFColor)
    {
        org.apache.fop.pdf.BitmapImage this;
        org.apache.fop.pdf.PDFColor t;

        this := @this: org.apache.fop.pdf.BitmapImage;
        t := @parameter0: org.apache.fop.pdf.PDFColor;
        this.<org.apache.fop.pdf.BitmapImage: org.apache.fop.pdf.PDFColor transparent> = t;
        return;
    }

    public boolean isTransparent()
    {
        org.apache.fop.pdf.BitmapImage this;
        org.apache.fop.pdf.PDFColor $r0;
        boolean $z0;

        this := @this: org.apache.fop.pdf.BitmapImage;
        $r0 = this.<org.apache.fop.pdf.BitmapImage: org.apache.fop.pdf.PDFColor transparent>;
        if $r0 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public org.apache.fop.pdf.PDFColor getTransparentColor()
    {
        org.apache.fop.pdf.BitmapImage this;
        org.apache.fop.pdf.PDFColor $r0;

        this := @this: org.apache.fop.pdf.BitmapImage;
        $r0 = this.<org.apache.fop.pdf.BitmapImage: org.apache.fop.pdf.PDFColor transparent>;
        return $r0;
    }

    public java.lang.String getMask()
    {
        org.apache.fop.pdf.BitmapImage this;

        this := @this: org.apache.fop.pdf.BitmapImage;
        return null;
    }

    public org.apache.fop.pdf.PDFReference getSoftMaskReference()
    {
        org.apache.fop.pdf.BitmapImage this;
        org.apache.fop.pdf.PDFReference $r0;

        this := @this: org.apache.fop.pdf.BitmapImage;
        $r0 = this.<org.apache.fop.pdf.BitmapImage: org.apache.fop.pdf.PDFReference maskRef>;
        return $r0;
    }

    public boolean isInverted()
    {
        org.apache.fop.pdf.BitmapImage this;

        this := @this: org.apache.fop.pdf.BitmapImage;
        return 0;
    }

    public void outputContents(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.fop.pdf.BitmapImage this;
        java.io.OutputStream out;
        byte[] $r0;

        this := @this: org.apache.fop.pdf.BitmapImage;
        out := @parameter0: java.io.OutputStream;
        $r0 = this.<org.apache.fop.pdf.BitmapImage: byte[] bitmaps>;
        virtualinvoke out.<java.io.OutputStream: void write(byte[])>($r0);
        return;
    }

    public void populateXObjectDictionary(org.apache.fop.pdf.PDFDictionary)
    {
        org.apache.fop.pdf.BitmapImage this;
        org.apache.fop.pdf.PDFDictionary dict;

        this := @this: org.apache.fop.pdf.BitmapImage;
        dict := @parameter0: org.apache.fop.pdf.PDFDictionary;
        return;
    }

    public org.apache.fop.pdf.PDFICCStream getICCStream()
    {
        org.apache.fop.pdf.BitmapImage this;

        this := @this: org.apache.fop.pdf.BitmapImage;
        return null;
    }

    public boolean isPS()
    {
        org.apache.fop.pdf.BitmapImage this;

        this := @this: org.apache.fop.pdf.BitmapImage;
        return 0;
    }

    public java.lang.String getFilterHint()
    {
        org.apache.fop.pdf.BitmapImage this;

        this := @this: org.apache.fop.pdf.BitmapImage;
        return "image";
    }

    public org.apache.fop.pdf.PDFFilter getPDFFilter()
    {
        org.apache.fop.pdf.BitmapImage this;

        this := @this: org.apache.fop.pdf.BitmapImage;
        return null;
    }
}
