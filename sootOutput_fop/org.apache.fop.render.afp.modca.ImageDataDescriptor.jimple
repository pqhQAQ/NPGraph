public class org.apache.fop.render.afp.modca.ImageDataDescriptor extends org.apache.fop.render.afp.modca.AbstractAFPObject
{
    private int _xresol;
    private int _yresol;
    private int _width;
    private int _height;

    public void <init>(int, int, int, int)
    {
        org.apache.fop.render.afp.modca.ImageDataDescriptor this;
        int xresol, yresol, width, height;

        this := @this: org.apache.fop.render.afp.modca.ImageDataDescriptor;
        xresol := @parameter0: int;
        yresol := @parameter1: int;
        width := @parameter2: int;
        height := @parameter3: int;
        specialinvoke this.<org.apache.fop.render.afp.modca.AbstractAFPObject: void <init>()>();
        this.<org.apache.fop.render.afp.modca.ImageDataDescriptor: int _xresol> = 0;
        this.<org.apache.fop.render.afp.modca.ImageDataDescriptor: int _yresol> = 0;
        this.<org.apache.fop.render.afp.modca.ImageDataDescriptor: int _width> = 0;
        this.<org.apache.fop.render.afp.modca.ImageDataDescriptor: int _height> = 0;
        this.<org.apache.fop.render.afp.modca.ImageDataDescriptor: int _xresol> = xresol;
        this.<org.apache.fop.render.afp.modca.ImageDataDescriptor: int _yresol> = yresol;
        this.<org.apache.fop.render.afp.modca.ImageDataDescriptor: int _width> = width;
        this.<org.apache.fop.render.afp.modca.ImageDataDescriptor: int _height> = height;
        return;
    }

    public void writeDataStream(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.fop.render.afp.modca.ImageDataDescriptor this;
        java.io.OutputStream os;
        byte[] data, l, x, y, w, h, $r0;
        int $i0;
        byte $b1;

        this := @this: org.apache.fop.render.afp.modca.ImageDataDescriptor;
        os := @parameter0: java.io.OutputStream;
        $r0 = newarray (byte)[22];
        $r0[0] = 90;
        $r0[1] = 0;
        $r0[2] = 32;
        $r0[3] = -45;
        $r0[4] = -90;
        $r0[5] = -5;
        $r0[6] = 0;
        $r0[7] = 0;
        $r0[8] = 0;
        $r0[9] = 0;
        $r0[10] = 0;
        $r0[11] = 0;
        $r0[12] = 0;
        $r0[13] = 0;
        $r0[14] = 0;
        $r0[15] = 0;
        $r0[16] = 0;
        $r0[17] = 0;
        $r0[18] = -9;
        $r0[19] = 2;
        $r0[20] = 1;
        $r0[21] = 11;
        data = $r0;
        $i0 = lengthof data;
        $i0 = $i0 - 1;
        l = staticinvoke <org.apache.fop.render.afp.tools.BinaryUtils: byte[] convert(int,int)>($i0, 2);
        $b1 = l[0];
        data[1] = $b1;
        $b1 = l[1];
        data[2] = $b1;
        $i0 = this.<org.apache.fop.render.afp.modca.ImageDataDescriptor: int _xresol>;
        x = staticinvoke <org.apache.fop.render.afp.tools.BinaryUtils: byte[] convert(int,int)>($i0, 2);
        $b1 = x[0];
        data[10] = $b1;
        $b1 = x[1];
        data[11] = $b1;
        $i0 = this.<org.apache.fop.render.afp.modca.ImageDataDescriptor: int _yresol>;
        y = staticinvoke <org.apache.fop.render.afp.tools.BinaryUtils: byte[] convert(int,int)>($i0, 2);
        $b1 = y[0];
        data[12] = $b1;
        $b1 = y[1];
        data[13] = $b1;
        $i0 = this.<org.apache.fop.render.afp.modca.ImageDataDescriptor: int _width>;
        w = staticinvoke <org.apache.fop.render.afp.tools.BinaryUtils: byte[] convert(int,int)>($i0, 2);
        $b1 = w[0];
        data[14] = $b1;
        $b1 = w[1];
        data[15] = $b1;
        $i0 = this.<org.apache.fop.render.afp.modca.ImageDataDescriptor: int _height>;
        h = staticinvoke <org.apache.fop.render.afp.tools.BinaryUtils: byte[] convert(int,int)>($i0, 2);
        $b1 = h[0];
        data[16] = $b1;
        $b1 = h[1];
        data[17] = $b1;
        virtualinvoke os.<java.io.OutputStream: void write(byte[])>(data);
        return;
    }
}
