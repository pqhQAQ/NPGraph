public class org.apache.fop.render.pcl.PCLGraphics2D extends org.apache.xmlgraphics.java2d.AbstractGraphics2D
{
    protected org.apache.fop.render.pcl.PCLGenerator gen;
    private boolean failOnUnsupportedFeature;
    private boolean clippingDisabled;
    private java.awt.Graphics2D fmg;

    public void <init>(org.apache.fop.render.pcl.PCLGenerator)
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        org.apache.fop.render.pcl.PCLGenerator gen;
        java.awt.image.BufferedImage bi, $r0;
        java.awt.Graphics2D $r1;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        gen := @parameter0: org.apache.fop.render.pcl.PCLGenerator;
        specialinvoke this.<org.apache.xmlgraphics.java2d.AbstractGraphics2D: void <init>(boolean)>(1);
        this.<org.apache.fop.render.pcl.PCLGraphics2D: boolean failOnUnsupportedFeature> = 1;
        this.<org.apache.fop.render.pcl.PCLGraphics2D: boolean clippingDisabled> = 0;
        $r0 = new java.awt.image.BufferedImage;
        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>(1, 1, 2);
        bi = $r0;
        $r1 = virtualinvoke bi.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();
        this.<org.apache.fop.render.pcl.PCLGraphics2D: java.awt.Graphics2D fmg> = $r1;
        this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen> = gen;
        return;
    }

    public void <init>(org.apache.fop.render.pcl.PCLGraphics2D)
    {
        org.apache.fop.render.pcl.PCLGraphics2D this, g;
        java.awt.image.BufferedImage bi, $r0;
        java.awt.Graphics2D $r1;
        org.apache.fop.render.pcl.PCLGenerator $r2;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        g := @parameter0: org.apache.fop.render.pcl.PCLGraphics2D;
        specialinvoke this.<org.apache.xmlgraphics.java2d.AbstractGraphics2D: void <init>(boolean)>(1);
        this.<org.apache.fop.render.pcl.PCLGraphics2D: boolean failOnUnsupportedFeature> = 1;
        this.<org.apache.fop.render.pcl.PCLGraphics2D: boolean clippingDisabled> = 0;
        $r0 = new java.awt.image.BufferedImage;
        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>(1, 1, 2);
        bi = $r0;
        $r1 = virtualinvoke bi.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();
        this.<org.apache.fop.render.pcl.PCLGraphics2D: java.awt.Graphics2D fmg> = $r1;
        $r2 = g.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen> = $r2;
        return;
    }

    public java.awt.Graphics create()
    {
        org.apache.fop.render.pcl.PCLGraphics2D this, $r0, copy;
        org.apache.xmlgraphics.java2d.GraphicContext $r1;
        java.lang.Object $r2;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        $r0 = new org.apache.fop.render.pcl.PCLGraphics2D;
        specialinvoke $r0.<org.apache.fop.render.pcl.PCLGraphics2D: void <init>(org.apache.fop.render.pcl.PCLGraphics2D)>(this);
        copy = $r0;
        $r1 = virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.xmlgraphics.java2d.GraphicContext getGraphicContext()>();
        $r2 = virtualinvoke $r1.<org.apache.xmlgraphics.java2d.GraphicContext: java.lang.Object clone()>();
        $r1 = (org.apache.xmlgraphics.java2d.GraphicContext) $r2;
        virtualinvoke copy.<org.apache.fop.render.pcl.PCLGraphics2D: void setGraphicContext(org.apache.xmlgraphics.java2d.GraphicContext)>($r1);
        return copy;
    }

    public void dispose()
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen> = null;
        return;
    }

    public void setGraphicContext(org.apache.xmlgraphics.java2d.GraphicContext)
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        org.apache.xmlgraphics.java2d.GraphicContext c;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        c := @parameter0: org.apache.xmlgraphics.java2d.GraphicContext;
        this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.xmlgraphics.java2d.GraphicContext gc> = c;
        return;
    }

    public void setClippingDisabled(boolean)
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        boolean value;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        value := @parameter0: boolean;
        this.<org.apache.fop.render.pcl.PCLGraphics2D: boolean clippingDisabled> = value;
        return;
    }

    public void handleIOException(java.io.IOException)
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        java.io.IOException ioe;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        ioe := @parameter0: java.io.IOException;
        virtualinvoke ioe.<java.io.IOException: void printStackTrace()>();
        return;
    }

    protected void handleUnsupportedFeature(java.lang.String)
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        java.lang.String msg;
        boolean $z0;
        java.lang.UnsupportedOperationException $r0;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        msg := @parameter0: java.lang.String;
        $z0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: boolean failOnUnsupportedFeature>;
        if $z0 == 0 goto label0;

        $r0 = new java.lang.UnsupportedOperationException;
        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(msg);
        throw $r0;

     label0:
        return;
    }

    public java.awt.GraphicsConfiguration getDeviceConfiguration()
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        java.awt.GraphicsEnvironment $r0;
        java.awt.GraphicsDevice $r1;
        java.awt.GraphicsConfiguration $r2;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        $r0 = staticinvoke <java.awt.GraphicsEnvironment: java.awt.GraphicsEnvironment getLocalGraphicsEnvironment()>();
        $r1 = virtualinvoke $r0.<java.awt.GraphicsEnvironment: java.awt.GraphicsDevice getDefaultScreenDevice()>();
        $r2 = virtualinvoke $r1.<java.awt.GraphicsDevice: java.awt.GraphicsConfiguration getDefaultConfiguration()>();
        return $r2;
    }

    protected void applyStroke(java.awt.Stroke) throws java.io.IOException
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        java.awt.Stroke stroke;
        java.awt.BasicStroke bs;
        float[] da;
        int len, idx, ec, lj, $i0;
        float patternLen, perc, ml, lw, $f0, $f1, $f2;
        java.awt.geom.Point2D$Double ptLen, ptSrc, $r6;
        double transLen, transDist, $d0, $d1, $d2;
        java.awt.geom.Point2D ptDest;
        boolean $z0;
        org.apache.fop.render.pcl.PCLGenerator $r0, $r1, $r4;
        java.lang.String $r2, $r5;
        java.lang.StringBuffer $r3;
        java.awt.geom.AffineTransform $r7;
        java.io.PrintStream $r9;
        java.lang.Class $r10;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        stroke := @parameter0: java.awt.Stroke;
        $z0 = stroke instanceof java.awt.BasicStroke;
        if $z0 == 0 goto label19;

        bs = (java.awt.BasicStroke) stroke;
        da = virtualinvoke bs.<java.awt.BasicStroke: float[] getDashArray()>();
        if da == null goto label7;

        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>("UL1,");
        $i0 = lengthof da;
        len = staticinvoke <java.lang.Math: int min(int,int)>(20, $i0);
        patternLen = 0.0F;
        idx = 0;

     label0:
        if idx >= len goto label1;

        $f0 = da[idx];
        patternLen = patternLen + $f0;
        idx = idx + 1;
        goto label0;

     label1:
        if len != 1 goto label2;

        patternLen = patternLen * 2.0F;

     label2:
        idx = 0;

     label3:
        if idx >= len goto label5;

        $f1 = da[idx];
        $f1 = $f1 * 100.0F;
        perc = $f1 / patternLen;
        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        $r1 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        $d0 = (double) perc;
        $r2 = virtualinvoke $r1.<org.apache.fop.render.pcl.PCLGenerator: java.lang.String formatDouble2(double)>($d0);
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>($r2);
        $i0 = lengthof da;
        $i0 = $i0 - 1;
        if idx >= $i0 goto label4;

        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>(",");

     label4:
        idx = idx + 1;
        goto label3;

     label5:
        if len != 1 goto label6;

        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");
        $r4 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        $f2 = da[0];
        $f2 = $f2 * 100.0F;
        $f2 = $f2 / patternLen;
        $d1 = (double) $f2;
        $r5 = virtualinvoke $r4.<org.apache.fop.render.pcl.PCLGenerator: java.lang.String formatDouble2(double)>($d1);
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>($r2);

     label6:
        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>(";");
        $r6 = new java.awt.geom.Point2D$Double;
        $d0 = (double) patternLen;
        specialinvoke $r6.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d0, 0.0);
        ptLen = $r6;
        $r7 = virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: java.awt.geom.AffineTransform getTransform()>();
        virtualinvoke $r7.<java.awt.geom.AffineTransform: java.awt.geom.Point2D deltaTransform(java.awt.geom.Point2D,java.awt.geom.Point2D)>(ptLen, ptLen);
        $d2 = virtualinvoke ptLen.<java.awt.geom.Point2D: double distance(double,double)>(0.0, 0.0);
        transLen = staticinvoke <org.apache.fop.util.UnitConv: double pt2mm(double)>($d2);
        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("LT1,");
        $r4 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        $r5 = virtualinvoke $r4.<org.apache.fop.render.pcl.PCLGenerator: java.lang.String formatDouble4(double)>(transLen);
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",1;");
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>($r2);
        goto label8;

     label7:
        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>("LT;");

     label8:
        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>("LA1");
        ec = virtualinvoke bs.<java.awt.BasicStroke: int getEndCap()>();
        tableswitch(ec)
        {
            case 0: goto label9;
            case 1: goto label10;
            case 2: goto label11;
            default: goto label12;
        };

     label9:
        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>(",1");
        goto label13;

     label10:
        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>(",4");
        goto label13;

     label11:
        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>(",2");
        goto label13;

     label12:
        $r9 = <java.lang.System: java.io.PrintStream err>;
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported line cap: ");
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(ec);
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r2);

     label13:
        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>(",2");
        lj = virtualinvoke bs.<java.awt.BasicStroke: int getLineJoin()>();
        tableswitch(lj)
        {
            case 0: goto label14;
            case 1: goto label15;
            case 2: goto label16;
            default: goto label17;
        };

     label14:
        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>(",1");
        goto label18;

     label15:
        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>(",4");
        goto label18;

     label16:
        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>(",5");
        goto label18;

     label17:
        $r9 = <java.lang.System: java.io.PrintStream err>;
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported line join: ");
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(lj);
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r2);

     label18:
        ml = virtualinvoke bs.<java.awt.BasicStroke: float getMiterLimit()>();
        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",3");
        $r4 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        $d1 = (double) ml;
        $r5 = virtualinvoke $r4.<org.apache.fop.render.pcl.PCLGenerator: java.lang.String formatDouble4(double)>($d1);
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>($r2);
        lw = virtualinvoke bs.<java.awt.BasicStroke: float getLineWidth()>();
        $r6 = new java.awt.geom.Point2D$Double;
        $d0 = (double) lw;
        specialinvoke $r6.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d0, 0.0);
        ptSrc = $r6;
        $r7 = virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: java.awt.geom.AffineTransform getTransform()>();
        ptDest = virtualinvoke $r7.<java.awt.geom.AffineTransform: java.awt.geom.Point2D deltaTransform(java.awt.geom.Point2D,java.awt.geom.Point2D)>(ptSrc, null);
        $d2 = virtualinvoke ptDest.<java.awt.geom.Point2D: double distance(double,double)>(0.0, 0.0);
        transDist = staticinvoke <org.apache.fop.util.UnitConv: double pt2mm(double)>($d2);
        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";PW");
        $r4 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        $r5 = virtualinvoke $r4.<org.apache.fop.render.pcl.PCLGenerator: java.lang.String formatDouble4(double)>(transDist);
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>($r2);
        goto label20;

     label19:
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported Stroke: ");
        $r10 = virtualinvoke stroke.<java.lang.Object: java.lang.Class getClass()>();
        $r5 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void handleUnsupportedFeature(java.lang.String)>($r2);

     label20:
        return;
    }

    protected void applyPaint(java.awt.Paint) throws java.io.IOException
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        java.awt.Paint paint;
        java.awt.Color col;
        int shade;
        boolean $z0;
        org.apache.fop.render.pcl.PCLGenerator $r0;
        java.lang.StringBuffer $r1;
        java.lang.String $r2, $r4;
        java.lang.Class $r3;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        paint := @parameter0: java.awt.Paint;
        $z0 = paint instanceof java.awt.Color;
        if $z0 == 0 goto label0;

        col = (java.awt.Color) paint;
        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        shade = virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: int convertToPCLShade(java.awt.Color)>(col);
        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("TR0;FT10,");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(shade);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>($r2);
        goto label1;

     label0:
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported Paint: ");
        $r3 = virtualinvoke paint.<java.lang.Object: java.lang.Class getClass()>();
        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void handleUnsupportedFeature(java.lang.String)>($r2);

     label1:
        return;
    }

    private void writeClip(java.awt.Shape) throws java.io.IOException
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        java.awt.Shape imclip;
        java.lang.StringBuffer $r0;
        boolean $z0;
        java.lang.String $r1;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        imclip := @parameter0: java.awt.Shape;
        $z0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: boolean clippingDisabled>;
        if $z0 == 0 goto label0;

        return;

     label0:
        if imclip != null goto label1;

        goto label2;

     label1:
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Clipping is not supported. Shape: ");
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(imclip);
        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void handleUnsupportedFeature(java.lang.String)>($r1);

     label2:
        return;
    }

    public void draw(java.awt.Shape)
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        java.awt.Shape s, imclip;
        java.awt.geom.AffineTransform trans;
        java.awt.geom.PathIterator iter;
        java.io.IOException ioe, $r6;
        java.awt.Color $r0, $r1, $r3;
        boolean $z0;
        java.lang.StringBuffer $r2;
        java.lang.String $r4;
        java.awt.Stroke $r5;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        s := @parameter0: java.awt.Shape;

     label0:
        trans = virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: java.awt.geom.AffineTransform getTransform()>();
        imclip = virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: java.awt.Shape getClip()>();
        specialinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void writeClip(java.awt.Shape)>(imclip);
        $r0 = <java.awt.Color: java.awt.Color black>;
        $r1 = virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: java.awt.Color getColor()>();
        $z0 = virtualinvoke $r0.<java.awt.Color: boolean equals(java.lang.Object)>($r1);
        if $z0 != 0 goto label1;

        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Only black is supported as stroke color: ");
        $r3 = virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: java.awt.Color getColor()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);
        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void handleUnsupportedFeature(java.lang.String)>($r4);

     label1:
        $r5 = virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: java.awt.Stroke getStroke()>();
        virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void applyStroke(java.awt.Stroke)>($r5);
        iter = interfaceinvoke s.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>(trans);
        virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void processPathIteratorStroke(java.awt.geom.PathIterator)>(iter);
        specialinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void writeClip(java.awt.Shape)>(null);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;
        ioe = $r6;
        virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void handleIOException(java.io.IOException)>(ioe);

     label4:
        return;

        catch java.io.IOException from label0 to label2 with label3;
    }

    public void fill(java.awt.Shape)
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        java.awt.Shape s, imclip;
        java.awt.geom.AffineTransform trans;
        java.awt.geom.PathIterator iter;
        java.io.IOException ioe, $r1;
        java.awt.Paint $r0;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        s := @parameter0: java.awt.Shape;

     label0:
        trans = virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: java.awt.geom.AffineTransform getTransform()>();
        imclip = virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: java.awt.Shape getClip()>();
        specialinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void writeClip(java.awt.Shape)>(imclip);
        $r0 = virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: java.awt.Paint getPaint()>();
        virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void applyPaint(java.awt.Paint)>($r0);
        iter = interfaceinvoke s.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>(trans);
        virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void processPathIteratorFill(java.awt.geom.PathIterator)>(iter);
        specialinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void writeClip(java.awt.Shape)>(null);

     label1:
        goto label3;

     label2:
        $r1 := @caughtexception;
        ioe = $r1;
        virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void handleIOException(java.io.IOException)>(ioe);

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public void processPathIteratorStroke(java.awt.geom.PathIterator) throws java.io.IOException
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        java.awt.geom.PathIterator iter;
        double[] vals;
        boolean penDown, $z0;
        double x, y, originX, originY, $d0, $d1, $d2, $d3;
        java.lang.StringBuffer sb, $r1;
        int type;
        org.apache.fop.render.pcl.PCLGenerator $r0;
        java.lang.String $r2;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        iter := @parameter0: java.awt.geom.PathIterator;
        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>("\n");
        vals = newarray (double)[6];
        penDown = 0;
        x = 0.0;
        y = 0.0;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>(256);
        sb = $r1;
        specialinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void penUp(java.lang.StringBuffer)>(sb);

     label0:
        $z0 = interfaceinvoke iter.<java.awt.geom.PathIterator: boolean isDone()>();
        if $z0 != 0 goto label10;

        type = interfaceinvoke iter.<java.awt.geom.PathIterator: int currentSegment(double[])>(vals);
        if type != 4 goto label1;

        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>("PM;");
        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        $r2 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>($r2);
        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>("PM2;EP;");
        virtualinvoke sb.<java.lang.StringBuffer: void setLength(int)>(0);
        interfaceinvoke iter.<java.awt.geom.PathIterator: void next()>();
        goto label0;

     label1:
        if type != 0 goto label2;

        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        $r2 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>($r2);
        virtualinvoke sb.<java.lang.StringBuffer: void setLength(int)>(0);
        if penDown == 0 goto label3;

        specialinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void penUp(java.lang.StringBuffer)>(sb);
        penDown = 0;
        goto label3;

     label2:
        if penDown != 0 goto label3;

        specialinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void penDown(java.lang.StringBuffer)>(sb);
        penDown = 1;

     label3:
        tableswitch(type)
        {
            case 0: goto label5;
            case 1: goto label6;
            case 2: goto label8;
            case 3: goto label7;
            case 4: goto label4;
            default: goto label9;
        };

     label4:
        goto label9;

     label5:
        x = vals[0];
        y = vals[1];
        specialinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void plotAbsolute(double,double,java.lang.StringBuffer)>(x, y, sb);
        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        $r2 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>($r2);
        virtualinvoke sb.<java.lang.StringBuffer: void setLength(int)>(0);
        goto label9;

     label6:
        x = vals[0];
        y = vals[1];
        specialinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void plotAbsolute(double,double,java.lang.StringBuffer)>(x, y, sb);
        goto label9;

     label7:
        x = vals[4];
        y = vals[5];
        $d0 = vals[0];
        $d1 = vals[1];
        $d2 = vals[2];
        $d3 = vals[3];
        specialinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void bezierAbsolute(double,double,double,double,double,double,java.lang.StringBuffer)>($d0, $d1, $d2, $d3, x, y, sb);
        goto label9;

     label8:
        originX = x;
        originY = y;
        x = vals[2];
        y = vals[3];
        $d2 = vals[0];
        $d3 = vals[1];
        specialinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void quadraticBezierAbsolute(double,double,double,double,double,double,java.lang.StringBuffer)>(originX, originY, $d2, $d3, x, y, sb);
        goto label9;

     label9:
        interfaceinvoke iter.<java.awt.geom.PathIterator: void next()>();
        goto label0;

     label10:
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");
        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        $r2 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>($r2);
        return;
    }

    public void processPathIteratorFill(java.awt.geom.PathIterator) throws java.io.IOException
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        java.awt.geom.PathIterator iter;
        double[] vals;
        boolean penDown, pendingPM0, $z0;
        double x, y, originX, originY, $d0, $d1, $d2, $d3;
        java.lang.StringBuffer sb, $r1;
        int type, $i0;
        org.apache.fop.render.pcl.PCLGenerator $r0;
        java.lang.IllegalStateException $r2;
        java.lang.String $r3;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        iter := @parameter0: java.awt.geom.PathIterator;
        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>("\n");
        vals = newarray (double)[6];
        penDown = 0;
        x = 0.0;
        y = 0.0;
        pendingPM0 = 1;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>(256);
        sb = $r1;
        specialinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void penUp(java.lang.StringBuffer)>(sb);

     label0:
        $z0 = interfaceinvoke iter.<java.awt.geom.PathIterator: boolean isDone()>();
        if $z0 != 0 goto label11;

        type = interfaceinvoke iter.<java.awt.geom.PathIterator: int currentSegment(double[])>(vals);
        if type != 4 goto label1;

        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PM1;");
        interfaceinvoke iter.<java.awt.geom.PathIterator: void next()>();
        goto label0;

     label1:
        if type != 0 goto label2;

        if penDown == 0 goto label3;

        specialinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void penUp(java.lang.StringBuffer)>(sb);
        penDown = 0;
        goto label3;

     label2:
        if penDown != 0 goto label3;

        specialinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void penDown(java.lang.StringBuffer)>(sb);
        penDown = 1;

     label3:
        tableswitch(type)
        {
            case 0: goto label4;
            case 1: goto label5;
            case 2: goto label7;
            case 3: goto label6;
            default: goto label8;
        };

     label4:
        x = vals[0];
        y = vals[1];
        specialinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void plotAbsolute(double,double,java.lang.StringBuffer)>(x, y, sb);
        goto label9;

     label5:
        x = vals[0];
        y = vals[1];
        specialinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void plotAbsolute(double,double,java.lang.StringBuffer)>(x, y, sb);
        goto label9;

     label6:
        x = vals[4];
        y = vals[5];
        $d0 = vals[0];
        $d1 = vals[1];
        $d2 = vals[2];
        $d3 = vals[3];
        specialinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void bezierAbsolute(double,double,double,double,double,double,java.lang.StringBuffer)>($d0, $d1, $d2, $d3, x, y, sb);
        goto label9;

     label7:
        originX = x;
        originY = y;
        x = vals[2];
        y = vals[3];
        $d2 = vals[0];
        $d3 = vals[1];
        specialinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void quadraticBezierAbsolute(double,double,double,double,double,double,java.lang.StringBuffer)>(originX, originY, $d2, $d3, x, y, sb);
        goto label9;

     label8:
        $r2 = new java.lang.IllegalStateException;
        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Must not get here");
        throw $r2;

     label9:
        if pendingPM0 == 0 goto label10;

        pendingPM0 = 0;
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PM;");

     label10:
        interfaceinvoke iter.<java.awt.geom.PathIterator: void next()>();
        goto label0;

     label11:
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PM2;");
        $i0 = interfaceinvoke iter.<java.awt.geom.PathIterator: int getWindingRule()>();
        specialinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void fillPolygon(int,java.lang.StringBuffer)>($i0, sb);
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");
        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        $r3 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r0.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>($r3);
        return;
    }

    private void fillPolygon(int, java.lang.StringBuffer)
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        int windingRule;
        java.lang.StringBuffer sb, $r0;
        byte fillMethod, $b0;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        windingRule := @parameter0: int;
        sb := @parameter1: java.lang.StringBuffer;
        if windingRule != 0 goto label0;

        $b0 = 0;
        goto label1;

     label0:
        $b0 = 1;

     label1:
        fillMethod = $b0;
        $r0 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FP");
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(fillMethod);
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");
        return;
    }

    private void plotAbsolute(double, double, java.lang.StringBuffer)
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        double x, y;
        java.lang.StringBuffer sb, $r0;
        org.apache.fop.render.pcl.PCLGenerator $r1;
        java.lang.String $r2;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        x := @parameter0: double;
        y := @parameter1: double;
        sb := @parameter2: java.lang.StringBuffer;
        $r0 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PA");
        $r1 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        $r2 = virtualinvoke $r1.<org.apache.fop.render.pcl.PCLGenerator: java.lang.String formatDouble4(double)>(x);
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");
        $r1 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        $r2 = virtualinvoke $r1.<org.apache.fop.render.pcl.PCLGenerator: java.lang.String formatDouble4(double)>(y);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");
        return;
    }

    private void bezierAbsolute(double, double, double, double, double, double, java.lang.StringBuffer)
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        double x1, y1, x2, y2, x3, y3;
        java.lang.StringBuffer sb, $r0;
        org.apache.fop.render.pcl.PCLGenerator $r1;
        java.lang.String $r2;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        x1 := @parameter0: double;
        y1 := @parameter1: double;
        x2 := @parameter2: double;
        y2 := @parameter3: double;
        x3 := @parameter4: double;
        y3 := @parameter5: double;
        sb := @parameter6: java.lang.StringBuffer;
        $r0 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("BZ");
        $r1 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        $r2 = virtualinvoke $r1.<org.apache.fop.render.pcl.PCLGenerator: java.lang.String formatDouble4(double)>(x1);
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");
        $r1 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        $r2 = virtualinvoke $r1.<org.apache.fop.render.pcl.PCLGenerator: java.lang.String formatDouble4(double)>(y1);
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");
        $r1 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        $r2 = virtualinvoke $r1.<org.apache.fop.render.pcl.PCLGenerator: java.lang.String formatDouble4(double)>(x2);
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");
        $r1 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        $r2 = virtualinvoke $r1.<org.apache.fop.render.pcl.PCLGenerator: java.lang.String formatDouble4(double)>(y2);
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");
        $r1 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        $r2 = virtualinvoke $r1.<org.apache.fop.render.pcl.PCLGenerator: java.lang.String formatDouble4(double)>(x3);
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");
        $r1 = this.<org.apache.fop.render.pcl.PCLGraphics2D: org.apache.fop.render.pcl.PCLGenerator gen>;
        $r2 = virtualinvoke $r1.<org.apache.fop.render.pcl.PCLGenerator: java.lang.String formatDouble4(double)>(y3);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");
        return;
    }

    private void quadraticBezierAbsolute(double, double, double, double, double, double, java.lang.StringBuffer)
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        double originX, originY, x1, y1, x2, y2, nx1, ny1, nx2, ny2, $d0, $d1;
        java.lang.StringBuffer sb;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        originX := @parameter0: double;
        originY := @parameter1: double;
        x1 := @parameter2: double;
        y1 := @parameter3: double;
        x2 := @parameter4: double;
        y2 := @parameter5: double;
        sb := @parameter6: java.lang.StringBuffer;
        $d0 = x1 - originX;
        $d1 = 0.6666666666666666 * $d0;
        nx1 = originX + $d1;
        $d0 = y1 - originY;
        $d1 = 0.6666666666666666 * $d0;
        ny1 = originY + $d1;
        $d0 = x2 - originX;
        $d1 = 0.3333333333333333 * $d0;
        nx2 = nx1 + $d1;
        $d0 = y2 - originY;
        $d1 = 0.3333333333333333 * $d0;
        ny2 = ny1 + $d1;
        specialinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void bezierAbsolute(double,double,double,double,double,double,java.lang.StringBuffer)>(nx1, ny1, nx2, ny2, x2, y2, sb);
        return;
    }

    private void penDown(java.lang.StringBuffer)
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        java.lang.StringBuffer sb;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        sb := @parameter0: java.lang.StringBuffer;
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PD;");
        return;
    }

    private void penUp(java.lang.StringBuffer)
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        java.lang.StringBuffer sb;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        sb := @parameter0: java.lang.StringBuffer;
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PU;");
        return;
    }

    public void drawString(java.lang.String, float, float)
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        java.lang.String s;
        float x, y;
        java.awt.Font awtFont;
        java.awt.font.FontRenderContext frc;
        java.awt.font.GlyphVector gv;
        java.awt.Shape glyphOutline;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        s := @parameter0: java.lang.String;
        x := @parameter1: float;
        y := @parameter2: float;
        awtFont = virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: java.awt.Font getFont()>();
        frc = virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: java.awt.font.FontRenderContext getFontRenderContext()>();
        gv = virtualinvoke awtFont.<java.awt.Font: java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext,java.lang.String)>(frc, s);
        glyphOutline = virtualinvoke gv.<java.awt.font.GlyphVector: java.awt.Shape getOutline(float,float)>(x, y);
        virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void fill(java.awt.Shape)>(glyphOutline);
        return;
    }

    public void drawString(java.text.AttributedCharacterIterator, float, float)
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        java.text.AttributedCharacterIterator iterator;
        float x, y;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        iterator := @parameter0: java.text.AttributedCharacterIterator;
        x := @parameter1: float;
        y := @parameter2: float;
        virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void handleUnsupportedFeature(java.lang.String)>("drawString NYI");
        return;
    }

    public void drawRenderedImage(java.awt.image.RenderedImage, java.awt.geom.AffineTransform)
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        java.awt.image.RenderedImage img;
        java.awt.geom.AffineTransform xform;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        img := @parameter0: java.awt.image.RenderedImage;
        xform := @parameter1: java.awt.geom.AffineTransform;
        virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void handleUnsupportedFeature(java.lang.String)>("Bitmap images are not supported");
        return;
    }

    public void drawRenderableImage(java.awt.image.renderable.RenderableImage, java.awt.geom.AffineTransform)
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        java.awt.image.renderable.RenderableImage img;
        java.awt.geom.AffineTransform xform;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        img := @parameter0: java.awt.image.renderable.RenderableImage;
        xform := @parameter1: java.awt.geom.AffineTransform;
        virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void handleUnsupportedFeature(java.lang.String)>("Bitmap images are not supported");
        return;
    }

    public boolean drawImage(java.awt.Image, int, int, int, int, java.awt.image.ImageObserver)
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        java.awt.Image img;
        int x, y, width, height;
        java.awt.image.ImageObserver observer;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        img := @parameter0: java.awt.Image;
        x := @parameter1: int;
        y := @parameter2: int;
        width := @parameter3: int;
        height := @parameter4: int;
        observer := @parameter5: java.awt.image.ImageObserver;
        virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void handleUnsupportedFeature(java.lang.String)>("Bitmap images are not supported");
        return 0;
    }

    public boolean drawImage(java.awt.Image, int, int, java.awt.image.ImageObserver)
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        java.awt.Image img;
        int x, y;
        java.awt.image.ImageObserver observer;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        img := @parameter0: java.awt.Image;
        x := @parameter1: int;
        y := @parameter2: int;
        observer := @parameter3: java.awt.image.ImageObserver;
        virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void handleUnsupportedFeature(java.lang.String)>("Bitmap images are not supported");
        return 0;
    }

    public void copyArea(int, int, int, int, int, int)
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        int x, y, width, height, dx, dy;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        x := @parameter0: int;
        y := @parameter1: int;
        width := @parameter2: int;
        height := @parameter3: int;
        dx := @parameter4: int;
        dy := @parameter5: int;
        virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void handleUnsupportedFeature(java.lang.String)>("copyArea NYI");
        return;
    }

    public void setXORMode(java.awt.Color)
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        java.awt.Color c1;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        c1 := @parameter0: java.awt.Color;
        virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2D: void handleUnsupportedFeature(java.lang.String)>("setXORMode NYI");
        return;
    }

    protected java.awt.image.BufferedImage buildBufferedImage(java.awt.Dimension)
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        java.awt.Dimension size;
        java.awt.image.BufferedImage $r0;
        int $i0, $i1;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        size := @parameter0: java.awt.Dimension;
        $r0 = new java.awt.image.BufferedImage;
        $i0 = size.<java.awt.Dimension: int width>;
        $i1 = size.<java.awt.Dimension: int height>;
        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, 10);
        return $r0;
    }

    public java.awt.FontMetrics getFontMetrics(java.awt.Font)
    {
        org.apache.fop.render.pcl.PCLGraphics2D this;
        java.awt.Font f;
        java.awt.Graphics2D $r0;
        java.awt.FontMetrics $r1;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2D;
        f := @parameter0: java.awt.Font;
        $r0 = this.<org.apache.fop.render.pcl.PCLGraphics2D: java.awt.Graphics2D fmg>;
        $r1 = virtualinvoke $r0.<java.awt.Graphics2D: java.awt.FontMetrics getFontMetrics(java.awt.Font)>(f);
        return $r1;
    }
}
