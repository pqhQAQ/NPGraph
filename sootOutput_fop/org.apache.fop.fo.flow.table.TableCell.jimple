public class org.apache.fop.fo.flow.table.TableCell extends org.apache.fop.fo.flow.table.TableFObj
{
    private org.apache.fop.fo.properties.CommonBorderPaddingBackground commonBorderPaddingBackground;
    private org.apache.fop.fo.properties.LengthRangeProperty blockProgressionDimension;
    private int columnNumber;
    private int displayAlign;
    private int emptyCells;
    private int endsRow;
    private int numberColumnsSpanned;
    private int numberRowsSpanned;
    private int startsRow;
    private org.apache.fop.datatypes.Length width;
    private boolean blockItemFound;

    public void <init>(org.apache.fop.fo.FONode)
    {
        org.apache.fop.fo.flow.table.TableCell this;
        org.apache.fop.fo.FONode parent;

        this := @this: org.apache.fop.fo.flow.table.TableCell;
        parent := @parameter0: org.apache.fop.fo.FONode;
        specialinvoke this.<org.apache.fop.fo.flow.table.TableFObj: void <init>(org.apache.fop.fo.FONode)>(parent);
        this.<org.apache.fop.fo.flow.table.TableCell: boolean blockItemFound> = 0;
        return;
    }

    public void bind(org.apache.fop.fo.PropertyList) throws org.apache.fop.apps.FOPException
    {
        org.apache.fop.fo.flow.table.TableCell this;
        org.apache.fop.fo.PropertyList pList;
        org.apache.fop.fo.properties.CommonBorderPaddingBackground $r0;
        org.apache.fop.fo.properties.Property $r1;
        org.apache.fop.fo.properties.LengthRangeProperty $r2;
        int $i0, $i1;
        boolean $z0;
        org.apache.fop.fo.FONode $r3;
        org.apache.fop.fo.flow.table.TableBody $r4;
        org.apache.fop.datatypes.Numeric $r5;
        org.apache.fop.datatypes.Length $r6;

        this := @this: org.apache.fop.fo.flow.table.TableCell;
        pList := @parameter0: org.apache.fop.fo.PropertyList;
        specialinvoke this.<org.apache.fop.fo.flow.table.TableFObj: void bind(org.apache.fop.fo.PropertyList)>(pList);
        $r0 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.CommonBorderPaddingBackground getBorderPaddingBackgroundProps()>();
        this.<org.apache.fop.fo.flow.table.TableCell: org.apache.fop.fo.properties.CommonBorderPaddingBackground commonBorderPaddingBackground> = $r0;
        $r1 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(17);
        $r2 = virtualinvoke $r1.<org.apache.fop.fo.properties.Property: org.apache.fop.fo.properties.LengthRangeProperty getLengthRange()>();
        this.<org.apache.fop.fo.flow.table.TableCell: org.apache.fop.fo.properties.LengthRangeProperty blockProgressionDimension> = $r2;
        $r1 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(81);
        $i0 = virtualinvoke $r1.<org.apache.fop.fo.properties.Property: int getEnum()>();
        this.<org.apache.fop.fo.flow.table.TableCell: int displayAlign> = $i0;
        $r1 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(84);
        $i0 = virtualinvoke $r1.<org.apache.fop.fo.properties.Property: int getEnum()>();
        this.<org.apache.fop.fo.flow.table.TableCell: int emptyCells> = $i0;
        $r1 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(213);
        $i0 = virtualinvoke $r1.<org.apache.fop.fo.properties.Property: int getEnum()>();
        this.<org.apache.fop.fo.flow.table.TableCell: int startsRow> = $i0;
        $z0 = virtualinvoke this.<org.apache.fop.fo.flow.table.TableCell: boolean startsRow()>();
        if $z0 == 0 goto label0;

        $r3 = virtualinvoke this.<org.apache.fop.fo.flow.table.TableCell: org.apache.fop.fo.FONode getParent()>();
        $i1 = virtualinvoke $r3.<org.apache.fop.fo.FONode: int getNameId()>();
        if $i1 == 54 goto label0;

        $r3 = virtualinvoke this.<org.apache.fop.fo.flow.table.TableCell: org.apache.fop.fo.FONode getParent()>();
        $r4 = (org.apache.fop.fo.flow.table.TableBody) $r3;
        virtualinvoke $r4.<org.apache.fop.fo.flow.table.TableBody: void signalNewRow()>();

     label0:
        $r1 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(86);
        $i0 = virtualinvoke $r1.<org.apache.fop.fo.properties.Property: int getEnum()>();
        this.<org.apache.fop.fo.flow.table.TableCell: int endsRow> = $i0;
        $r1 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(70);
        $r5 = virtualinvoke $r1.<org.apache.fop.fo.properties.Property: org.apache.fop.datatypes.Numeric getNumeric()>();
        $i0 = interfaceinvoke $r5.<org.apache.fop.datatypes.Numeric: int getValue()>();
        this.<org.apache.fop.fo.flow.table.TableCell: int columnNumber> = $i0;
        $r1 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(149);
        $r5 = virtualinvoke $r1.<org.apache.fop.fo.properties.Property: org.apache.fop.datatypes.Numeric getNumeric()>();
        $i0 = interfaceinvoke $r5.<org.apache.fop.datatypes.Numeric: int getValue()>();
        this.<org.apache.fop.fo.flow.table.TableCell: int numberColumnsSpanned> = $i0;
        $r1 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(150);
        $r5 = virtualinvoke $r1.<org.apache.fop.fo.properties.Property: org.apache.fop.datatypes.Numeric getNumeric()>();
        $i0 = interfaceinvoke $r5.<org.apache.fop.datatypes.Numeric: int getValue()>();
        this.<org.apache.fop.fo.flow.table.TableCell: int numberRowsSpanned> = $i0;
        $r1 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(242);
        $r6 = virtualinvoke $r1.<org.apache.fop.fo.properties.Property: org.apache.fop.datatypes.Length getLength()>();
        this.<org.apache.fop.fo.flow.table.TableCell: org.apache.fop.datatypes.Length width> = $r6;
        return;
    }

    public void startOfNode() throws org.apache.fop.apps.FOPException
    {
        org.apache.fop.fo.flow.table.TableCell this;
        org.apache.fop.fo.FOEventHandler $r0;

        this := @this: org.apache.fop.fo.flow.table.TableCell;
        specialinvoke this.<org.apache.fop.fo.flow.table.TableFObj: void startOfNode()>();
        $r0 = virtualinvoke this.<org.apache.fop.fo.flow.table.TableCell: org.apache.fop.fo.FOEventHandler getFOEventHandler()>();
        virtualinvoke $r0.<org.apache.fop.fo.FOEventHandler: void startCell(org.apache.fop.fo.flow.table.TableCell)>(this);
        return;
    }

    public void endOfNode() throws org.apache.fop.apps.FOPException
    {
        org.apache.fop.fo.flow.table.TableCell this;
        boolean $z0;
        org.apache.fop.apps.FOUserAgent $r0;
        org.apache.fop.fo.FONode $r1;
        org.apache.commons.logging.Log $r2;
        int $i0;
        org.apache.fop.fo.FOEventHandler $r3;

        this := @this: org.apache.fop.fo.flow.table.TableCell;
        $z0 = this.<org.apache.fop.fo.flow.table.TableCell: boolean blockItemFound>;
        if $z0 != 0 goto label1;

        $r0 = virtualinvoke this.<org.apache.fop.fo.flow.table.TableCell: org.apache.fop.apps.FOUserAgent getUserAgent()>();
        $z0 = virtualinvoke $r0.<org.apache.fop.apps.FOUserAgent: boolean validateStrictly()>();
        if $z0 == 0 goto label0;

        virtualinvoke this.<org.apache.fop.fo.flow.table.TableCell: void missingChildElementError(java.lang.String)>("marker* (%block;)+");
        goto label1;

     label0:
        $r1 = this.<org.apache.fop.fo.flow.table.TableCell: org.apache.fop.fo.FONode firstChild>;
        if $r1 == null goto label1;

        $r2 = <org.apache.fop.fo.flow.table.TableCell: org.apache.commons.logging.Log log>;
        interfaceinvoke $r2.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("fo:table-cell content that is not enclosed by a fo:block will be dropped/ignored.");

     label1:
        $z0 = virtualinvoke this.<org.apache.fop.fo.flow.table.TableCell: boolean startsRow()>();
        if $z0 != 0 goto label2;

        $z0 = virtualinvoke this.<org.apache.fop.fo.flow.table.TableCell: boolean endsRow()>();
        if $z0 == 0 goto label3;

     label2:
        $r1 = virtualinvoke this.<org.apache.fop.fo.flow.table.TableCell: org.apache.fop.fo.FONode getParent()>();
        $i0 = virtualinvoke $r1.<org.apache.fop.fo.FONode: int getNameId()>();
        if $i0 != 54 goto label3;

        $r2 = <org.apache.fop.fo.flow.table.TableCell: org.apache.commons.logging.Log log>;
        interfaceinvoke $r2.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("starts-row/ends-row for fo:table-cells non-applicable for children of an fo:table-row.");

     label3:
        $r3 = virtualinvoke this.<org.apache.fop.fo.flow.table.TableCell: org.apache.fop.fo.FOEventHandler getFOEventHandler()>();
        virtualinvoke $r3.<org.apache.fop.fo.FOEventHandler: void endCell(org.apache.fop.fo.flow.table.TableCell)>(this);
        return;
    }

    protected void validateChildNode(org.xml.sax.Locator, java.lang.String, java.lang.String) throws org.apache.fop.fo.ValidationException
    {
        org.apache.fop.fo.flow.table.TableCell this;
        org.xml.sax.Locator loc;
        java.lang.String nsURI, localName, $r0;
        boolean $z0;

        this := @this: org.apache.fop.fo.flow.table.TableCell;
        loc := @parameter0: org.xml.sax.Locator;
        nsURI := @parameter1: java.lang.String;
        localName := @parameter2: java.lang.String;
        $r0 = "http://www.w3.org/1999/XSL/Format";
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(nsURI);
        if $z0 == 0 goto label0;

        $z0 = virtualinvoke localName.<java.lang.String: boolean equals(java.lang.Object)>("marker");
        if $z0 == 0 goto label0;

        $z0 = this.<org.apache.fop.fo.flow.table.TableCell: boolean blockItemFound>;
        if $z0 == 0 goto label2;

        virtualinvoke this.<org.apache.fop.fo.flow.table.TableCell: void nodesOutOfOrderError(org.xml.sax.Locator,java.lang.String,java.lang.String)>(loc, "fo:marker", "(%block;)");
        goto label2;

     label0:
        $z0 = virtualinvoke this.<org.apache.fop.fo.flow.table.TableCell: boolean isBlockItem(java.lang.String,java.lang.String)>(nsURI, localName);
        if $z0 != 0 goto label1;

        virtualinvoke this.<org.apache.fop.fo.flow.table.TableCell: void invalidChildError(org.xml.sax.Locator,java.lang.String,java.lang.String)>(loc, nsURI, localName);
        goto label2;

     label1:
        this.<org.apache.fop.fo.flow.table.TableCell: boolean blockItemFound> = 1;

     label2:
        return;
    }

    protected void setCollapsedBorders()
    {
        org.apache.fop.fo.flow.table.TableCell this;

        this := @this: org.apache.fop.fo.flow.table.TableCell;
        virtualinvoke this.<org.apache.fop.fo.flow.table.TableCell: void createBorder(int)>(0);
        virtualinvoke this.<org.apache.fop.fo.flow.table.TableCell: void createBorder(int)>(1);
        virtualinvoke this.<org.apache.fop.fo.flow.table.TableCell: void createBorder(int)>(2);
        virtualinvoke this.<org.apache.fop.fo.flow.table.TableCell: void createBorder(int)>(3);
        return;
    }

    public boolean generatesReferenceAreas()
    {
        org.apache.fop.fo.flow.table.TableCell this;

        this := @this: org.apache.fop.fo.flow.table.TableCell;
        return 1;
    }

    public org.apache.fop.fo.properties.CommonBorderPaddingBackground getCommonBorderPaddingBackground()
    {
        org.apache.fop.fo.flow.table.TableCell this;
        org.apache.fop.fo.properties.CommonBorderPaddingBackground $r0;

        this := @this: org.apache.fop.fo.flow.table.TableCell;
        $r0 = this.<org.apache.fop.fo.flow.table.TableCell: org.apache.fop.fo.properties.CommonBorderPaddingBackground commonBorderPaddingBackground>;
        return $r0;
    }

    public int getColumnNumber()
    {
        org.apache.fop.fo.flow.table.TableCell this;
        int $i0;

        this := @this: org.apache.fop.fo.flow.table.TableCell;
        $i0 = this.<org.apache.fop.fo.flow.table.TableCell: int columnNumber>;
        return $i0;
    }

    public boolean showEmptyCells()
    {
        org.apache.fop.fo.flow.table.TableCell this;
        int $i0;
        boolean $z0;

        this := @this: org.apache.fop.fo.flow.table.TableCell;
        $i0 = this.<org.apache.fop.fo.flow.table.TableCell: int emptyCells>;
        if $i0 != 130 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public int getNumberColumnsSpanned()
    {
        org.apache.fop.fo.flow.table.TableCell this;
        int $i0;

        this := @this: org.apache.fop.fo.flow.table.TableCell;
        $i0 = this.<org.apache.fop.fo.flow.table.TableCell: int numberColumnsSpanned>;
        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, 1);
        return $i0;
    }

    public int getNumberRowsSpanned()
    {
        org.apache.fop.fo.flow.table.TableCell this;
        int $i0;

        this := @this: org.apache.fop.fo.flow.table.TableCell;
        $i0 = this.<org.apache.fop.fo.flow.table.TableCell: int numberRowsSpanned>;
        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, 1);
        return $i0;
    }

    public org.apache.fop.fo.properties.LengthRangeProperty getBlockProgressionDimension()
    {
        org.apache.fop.fo.flow.table.TableCell this;
        org.apache.fop.fo.properties.LengthRangeProperty $r0;

        this := @this: org.apache.fop.fo.flow.table.TableCell;
        $r0 = this.<org.apache.fop.fo.flow.table.TableCell: org.apache.fop.fo.properties.LengthRangeProperty blockProgressionDimension>;
        return $r0;
    }

    public int getDisplayAlign()
    {
        org.apache.fop.fo.flow.table.TableCell this;
        int $i0;

        this := @this: org.apache.fop.fo.flow.table.TableCell;
        $i0 = this.<org.apache.fop.fo.flow.table.TableCell: int displayAlign>;
        return $i0;
    }

    public org.apache.fop.datatypes.Length getWidth()
    {
        org.apache.fop.fo.flow.table.TableCell this;
        org.apache.fop.datatypes.Length $r0;

        this := @this: org.apache.fop.fo.flow.table.TableCell;
        $r0 = this.<org.apache.fop.fo.flow.table.TableCell: org.apache.fop.datatypes.Length width>;
        return $r0;
    }

    public boolean startsRow()
    {
        org.apache.fop.fo.flow.table.TableCell this;
        int $i0;
        boolean $z0;

        this := @this: org.apache.fop.fo.flow.table.TableCell;
        $i0 = this.<org.apache.fop.fo.flow.table.TableCell: int startsRow>;
        if $i0 != 149 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean endsRow()
    {
        org.apache.fop.fo.flow.table.TableCell this;
        int $i0;
        boolean $z0;

        this := @this: org.apache.fop.fo.flow.table.TableCell;
        $i0 = this.<org.apache.fop.fo.flow.table.TableCell: int endsRow>;
        if $i0 != 149 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.lang.String getLocalName()
    {
        org.apache.fop.fo.flow.table.TableCell this;

        this := @this: org.apache.fop.fo.flow.table.TableCell;
        return "table-cell";
    }

    public final int getNameId()
    {
        org.apache.fop.fo.flow.table.TableCell this;

        this := @this: org.apache.fop.fo.flow.table.TableCell;
        return 50;
    }
}
