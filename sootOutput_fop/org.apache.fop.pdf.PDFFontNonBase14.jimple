public abstract class org.apache.fop.pdf.PDFFontNonBase14 extends org.apache.fop.pdf.PDFFont
{

    public void <init>(java.lang.String, org.apache.fop.fonts.FontType, java.lang.String, java.lang.Object)
    {
        org.apache.fop.pdf.PDFFontNonBase14 this;
        java.lang.String fontname, basefont;
        org.apache.fop.fonts.FontType subtype;
        java.lang.Object encoding;

        this := @this: org.apache.fop.pdf.PDFFontNonBase14;
        fontname := @parameter0: java.lang.String;
        subtype := @parameter1: org.apache.fop.fonts.FontType;
        basefont := @parameter2: java.lang.String;
        encoding := @parameter3: java.lang.Object;
        specialinvoke this.<org.apache.fop.pdf.PDFFont: void <init>(java.lang.String,org.apache.fop.fonts.FontType,java.lang.String,java.lang.Object)>(fontname, subtype, basefont, encoding);
        return;
    }

    public void setWidthMetrics(int, int, org.apache.fop.pdf.PDFArray)
    {
        org.apache.fop.pdf.PDFFontNonBase14 this;
        int firstChar, lastChar;
        org.apache.fop.pdf.PDFArray widths;
        java.lang.Integer $r0;

        this := @this: org.apache.fop.pdf.PDFFontNonBase14;
        firstChar := @parameter0: int;
        lastChar := @parameter1: int;
        widths := @parameter2: org.apache.fop.pdf.PDFArray;
        $r0 = new java.lang.Integer;
        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(firstChar);
        virtualinvoke this.<org.apache.fop.pdf.PDFFontNonBase14: void put(java.lang.String,java.lang.Object)>("FirstChar", $r0);
        $r0 = new java.lang.Integer;
        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(lastChar);
        virtualinvoke this.<org.apache.fop.pdf.PDFFontNonBase14: void put(java.lang.String,java.lang.Object)>("LastChar", $r0);
        virtualinvoke this.<org.apache.fop.pdf.PDFFontNonBase14: void put(java.lang.String,java.lang.Object)>("Widths", widths);
        return;
    }

    public void setDescriptor(org.apache.fop.pdf.PDFFontDescriptor)
    {
        org.apache.fop.pdf.PDFFontNonBase14 this;
        org.apache.fop.pdf.PDFFontDescriptor descriptor;

        this := @this: org.apache.fop.pdf.PDFFontNonBase14;
        descriptor := @parameter0: org.apache.fop.pdf.PDFFontDescriptor;
        virtualinvoke this.<org.apache.fop.pdf.PDFFontNonBase14: void put(java.lang.String,java.lang.Object)>("FontDescriptor", descriptor);
        return;
    }

    public org.apache.fop.pdf.PDFFontDescriptor getDescriptor()
    {
        org.apache.fop.pdf.PDFFontNonBase14 this;
        java.lang.Object $r0;
        org.apache.fop.pdf.PDFFontDescriptor $r1;

        this := @this: org.apache.fop.pdf.PDFFontNonBase14;
        $r0 = virtualinvoke this.<org.apache.fop.pdf.PDFFontNonBase14: java.lang.Object get(java.lang.String)>("FontDescriptor");
        $r1 = (org.apache.fop.pdf.PDFFontDescriptor) $r0;
        return $r1;
    }

    public void setToUnicode(org.apache.fop.pdf.PDFCMap)
    {
        org.apache.fop.pdf.PDFFontNonBase14 this;
        org.apache.fop.pdf.PDFCMap cmap;

        this := @this: org.apache.fop.pdf.PDFFontNonBase14;
        cmap := @parameter0: org.apache.fop.pdf.PDFCMap;
        virtualinvoke this.<org.apache.fop.pdf.PDFFontNonBase14: void put(java.lang.String,java.lang.Object)>("ToUnicode", cmap);
        return;
    }

    protected void validate()
    {
        org.apache.fop.pdf.PDFFontNonBase14 this;
        java.lang.StringBuffer $r0;
        org.apache.fop.pdf.PDFDocument $r1, $r6;
        org.apache.fop.pdf.PDFProfile $r2, $r7;
        boolean $z0;
        org.apache.fop.pdf.PDFFontDescriptor $r3;
        org.apache.fop.pdf.AbstractPDFStream $r4;
        org.apache.fop.pdf.PDFConformanceException $r5;
        java.lang.String $r8;

        this := @this: org.apache.fop.pdf.PDFFontNonBase14;
        $r1 = virtualinvoke this.<org.apache.fop.pdf.PDFFontNonBase14: org.apache.fop.pdf.PDFDocument getDocumentSafely()>();
        $r2 = virtualinvoke $r1.<org.apache.fop.pdf.PDFDocument: org.apache.fop.pdf.PDFProfile getProfile()>();
        $z0 = virtualinvoke $r2.<org.apache.fop.pdf.PDFProfile: boolean isFontEmbeddingRequired()>();
        if $z0 == 0 goto label0;

        $r3 = virtualinvoke this.<org.apache.fop.pdf.PDFFontNonBase14: org.apache.fop.pdf.PDFFontDescriptor getDescriptor()>();
        $r4 = virtualinvoke $r3.<org.apache.fop.pdf.PDFFontDescriptor: org.apache.fop.pdf.AbstractPDFStream getFontFile()>();
        if $r4 != null goto label0;

        $r5 = new org.apache.fop.pdf.PDFConformanceException;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("For ");
        $r6 = virtualinvoke this.<org.apache.fop.pdf.PDFFontNonBase14: org.apache.fop.pdf.PDFDocument getDocumentSafely()>();
        $r7 = virtualinvoke $r6.<org.apache.fop.pdf.PDFDocument: org.apache.fop.pdf.PDFProfile getProfile()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", all fonts have to be embedded!");
        $r8 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r5.<org.apache.fop.pdf.PDFConformanceException: void <init>(java.lang.String)>($r8);
        throw $r5;

     label0:
        return;
    }
}
