class org.apache.fop.image.loader.batik.PreloaderSVG$Loader extends java.lang.Object
{
    private final org.apache.fop.image.loader.batik.PreloaderSVG this$0;

    void <init>(org.apache.fop.image.loader.batik.PreloaderSVG)
    {
        org.apache.fop.image.loader.batik.PreloaderSVG$Loader this;
        org.apache.fop.image.loader.batik.PreloaderSVG this$0;

        this := @this: org.apache.fop.image.loader.batik.PreloaderSVG$Loader;
        this$0 := @parameter0: org.apache.fop.image.loader.batik.PreloaderSVG;
        this.<org.apache.fop.image.loader.batik.PreloaderSVG$Loader: org.apache.fop.image.loader.batik.PreloaderSVG this$0> = this$0;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }

    private org.apache.xmlgraphics.image.loader.ImageInfo getImage(java.lang.String, javax.xml.transform.Source, org.apache.xmlgraphics.image.loader.ImageContext)
    {
        org.apache.fop.image.loader.batik.PreloaderSVG$Loader this;
        java.lang.String uri, $r4, $r5;
        javax.xml.transform.Source src;
        org.apache.xmlgraphics.image.loader.ImageContext context;
        org.apache.fop.util.UnclosableInputStream in, $r1;
        javax.xml.transform.dom.DOMSource domSrc;
        org.w3c.dom.svg.SVGDocument doc;
        int length, $i0;
        org.apache.batik.dom.svg.SAXSVGDocumentFactory factory, $r3;
        org.apache.xmlgraphics.image.loader.ImageInfo info;
        java.lang.NoClassDefFoundError ncdfe, $r7;
        java.io.IOException l6, e, $r8, $r11, $r13;
        boolean $z0;
        org.w3c.dom.Node $r0;
        java.io.InputStream $r2;
        org.apache.fop.image.loader.batik.PreloaderSVG $r9;
        org.apache.commons.logging.Log $r10;
        java.lang.StringBuffer $r12;

        this := @this: org.apache.fop.image.loader.batik.PreloaderSVG$Loader;
        uri := @parameter0: java.lang.String;
        src := @parameter1: javax.xml.transform.Source;
        context := @parameter2: org.apache.xmlgraphics.image.loader.ImageContext;
        in = null;

     label0:
        $z0 = src instanceof javax.xml.transform.dom.DOMSource;
        if $z0 == 0 goto label1;

        domSrc = (javax.xml.transform.dom.DOMSource) src;
        $r0 = virtualinvoke domSrc.<javax.xml.transform.dom.DOMSource: org.w3c.dom.Node getNode()>();
        doc = (org.w3c.dom.svg.SVGDocument) $r0;
        goto label2;

     label1:
        $r1 = new org.apache.fop.util.UnclosableInputStream;
        $r2 = staticinvoke <org.apache.xmlgraphics.image.loader.util.ImageUtil: java.io.InputStream needInputStream(javax.xml.transform.Source)>(src);
        specialinvoke $r1.<org.apache.fop.util.UnclosableInputStream: void <init>(java.io.InputStream)>($r2);
        in = $r1;
        length = virtualinvoke in.<java.io.InputStream: int available()>();
        $i0 = length + 1;
        virtualinvoke in.<java.io.InputStream: void mark(int)>($i0);
        $r3 = new org.apache.batik.dom.svg.SAXSVGDocumentFactory;
        $r4 = staticinvoke <org.apache.fop.image.loader.batik.PreloaderSVG: java.lang.String getParserName()>();
        specialinvoke $r3.<org.apache.batik.dom.svg.SAXSVGDocumentFactory: void <init>(java.lang.String)>($r4);
        factory = $r3;
        $r5 = interfaceinvoke src.<javax.xml.transform.Source: java.lang.String getSystemId()>();
        doc = virtualinvoke factory.<org.apache.batik.dom.svg.SAXSVGDocumentFactory: org.w3c.dom.svg.SVGDocument createSVGDocument(java.lang.String,java.io.InputStream)>($r5, in);

     label2:
        info = specialinvoke this.<org.apache.fop.image.loader.batik.PreloaderSVG$Loader: org.apache.xmlgraphics.image.loader.ImageInfo createImageInfo(java.lang.String,org.apache.xmlgraphics.image.loader.ImageContext,org.w3c.dom.svg.SVGDocument)>(uri, context, doc);

     label3:
        return info;

     label4:
        $r7 := @caughtexception;
        ncdfe = $r7;
        if in == null goto label8;

     label5:
        virtualinvoke in.<java.io.InputStream: void reset()>();

     label6:
        goto label8;

     label7:
        $r8 := @caughtexception;
        l6 = $r8;

     label8:
        $r9 = this.<org.apache.fop.image.loader.batik.PreloaderSVG$Loader: org.apache.fop.image.loader.batik.PreloaderSVG this$0>;
        staticinvoke <org.apache.fop.image.loader.batik.PreloaderSVG: boolean access$202(org.apache.fop.image.loader.batik.PreloaderSVG,boolean)>($r9, 0);
        $r10 = staticinvoke <org.apache.fop.image.loader.batik.PreloaderSVG: org.apache.commons.logging.Log access$300()>();
        interfaceinvoke $r10.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>("Batik not in class path", ncdfe);
        return null;

     label9:
        $r11 := @caughtexception;
        e = $r11;
        $r10 = staticinvoke <org.apache.fop.image.loader.batik.PreloaderSVG: org.apache.commons.logging.Log access$300()>();
        $r12 = new java.lang.StringBuffer;
        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();
        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error while trying to load stream as an SVG file: ");
        $r4 = virtualinvoke e.<java.io.IOException: java.lang.String getMessage()>();
        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);
        $r5 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r10.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r5);

     label10:
        virtualinvoke in.<java.io.InputStream: void reset()>();

     label11:
        goto label13;

     label12:
        $r13 := @caughtexception;
        l6 = $r13;

     label13:
        return null;

        catch java.lang.NoClassDefFoundError from label0 to label3 with label4;
        catch java.io.IOException from label5 to label6 with label7;
        catch java.io.IOException from label0 to label3 with label9;
        catch java.io.IOException from label10 to label11 with label12;
    }

    private org.apache.xmlgraphics.image.loader.ImageInfo createImageInfo(java.lang.String, org.apache.xmlgraphics.image.loader.ImageContext, org.w3c.dom.svg.SVGDocument)
    {
        org.apache.fop.image.loader.batik.PreloaderSVG$Loader this;
        java.lang.String uri, s;
        org.apache.xmlgraphics.image.loader.ImageContext context;
        org.w3c.dom.svg.SVGDocument doc;
        org.w3c.dom.svg.SVGSVGElement e;
        float pxUnitToMillimeter, width, height, $f0, $f1;
        java.awt.geom.AffineTransform $r0;
        org.apache.fop.svg.SVGUserAgent userAg, $r1;
        org.apache.batik.bridge.BridgeContext ctx, $r2;
        org.apache.batik.parser.UnitProcessor$Context uctx;
        int widthMpt, heightMpt, $i0;
        org.apache.xmlgraphics.image.loader.ImageInfo info, $r3;
        org.apache.xmlgraphics.image.loader.ImageSize size, $r4;
        org.apache.xmlgraphics.image.loader.impl.ImageXMLDOM xmlImage, $r5;
        double $d0, $d1, $d2;
        long $l1;
        java.util.Map $r6;
        java.lang.Object $r7;

        this := @this: org.apache.fop.image.loader.batik.PreloaderSVG$Loader;
        uri := @parameter0: java.lang.String;
        context := @parameter1: org.apache.xmlgraphics.image.loader.ImageContext;
        doc := @parameter2: org.w3c.dom.svg.SVGDocument;
        e = interfaceinvoke doc.<org.w3c.dom.svg.SVGDocument: org.w3c.dom.svg.SVGSVGElement getRootElement()>();
        $f0 = interfaceinvoke context.<org.apache.xmlgraphics.image.loader.ImageContext: float getSourceResolution()>();
        pxUnitToMillimeter = 25.4F / $f0;
        $r1 = new org.apache.fop.svg.SVGUserAgent;
        $r0 = new java.awt.geom.AffineTransform;
        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>()>();
        specialinvoke $r1.<org.apache.fop.svg.SVGUserAgent: void <init>(float,java.awt.geom.AffineTransform)>(pxUnitToMillimeter, $r0);
        userAg = $r1;
        $r2 = new org.apache.batik.bridge.BridgeContext;
        specialinvoke $r2.<org.apache.batik.bridge.BridgeContext: void <init>(org.apache.batik.bridge.UserAgent)>(userAg);
        ctx = $r2;
        uctx = staticinvoke <org.apache.batik.bridge.UnitProcessor: org.apache.batik.parser.UnitProcessor$Context createContext(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(ctx, e);
        s = interfaceinvoke e.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "width");
        $i0 = virtualinvoke s.<java.lang.String: int length()>();
        if $i0 != 0 goto label0;

        s = "100%";

     label0:
        width = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgHorizontalLengthToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(s, "width", uctx);
        s = interfaceinvoke e.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "height");
        $i0 = virtualinvoke s.<java.lang.String: int length()>();
        if $i0 != 0 goto label1;

        s = "100%";

     label1:
        height = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgVerticalLengthToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(s, "height", uctx);
        $d0 = (double) width;
        $f1 = interfaceinvoke context.<org.apache.xmlgraphics.image.loader.ImageContext: float getSourceResolution()>();
        $d1 = (double) $f1;
        $d0 = staticinvoke <org.apache.fop.image.loader.batik.PreloaderSVG: double access$400(double,double)>($d0, $d1);
        $l1 = staticinvoke <java.lang.Math: long round(double)>($d0);
        widthMpt = (int) $l1;
        $d0 = (double) height;
        $f1 = interfaceinvoke context.<org.apache.xmlgraphics.image.loader.ImageContext: float getSourceResolution()>();
        $d1 = (double) $f1;
        $d0 = staticinvoke <org.apache.fop.image.loader.batik.PreloaderSVG: double access$400(double,double)>($d0, $d1);
        $l1 = staticinvoke <java.lang.Math: long round(double)>($d0);
        heightMpt = (int) $l1;
        $r3 = new org.apache.xmlgraphics.image.loader.ImageInfo;
        specialinvoke $r3.<org.apache.xmlgraphics.image.loader.ImageInfo: void <init>(java.lang.String,java.lang.String)>(uri, "image/svg+xml");
        info = $r3;
        $r4 = new org.apache.xmlgraphics.image.loader.ImageSize;
        specialinvoke $r4.<org.apache.xmlgraphics.image.loader.ImageSize: void <init>()>();
        size = $r4;
        virtualinvoke size.<org.apache.xmlgraphics.image.loader.ImageSize: void setSizeInMillipoints(int,int)>(widthMpt, heightMpt);
        $f0 = interfaceinvoke context.<org.apache.xmlgraphics.image.loader.ImageContext: float getSourceResolution()>();
        $d2 = (double) $f0;
        virtualinvoke size.<org.apache.xmlgraphics.image.loader.ImageSize: void setResolution(double)>($d2);
        virtualinvoke size.<org.apache.xmlgraphics.image.loader.ImageSize: void calcPixelsFromSize()>();
        virtualinvoke info.<org.apache.xmlgraphics.image.loader.ImageInfo: void setSize(org.apache.xmlgraphics.image.loader.ImageSize)>(size);
        $r5 = new org.apache.xmlgraphics.image.loader.impl.ImageXMLDOM;
        specialinvoke $r5.<org.apache.xmlgraphics.image.loader.impl.ImageXMLDOM: void <init>(org.apache.xmlgraphics.image.loader.ImageInfo,org.w3c.dom.Document,java.lang.String)>(info, doc, "http://www.w3.org/2000/svg");
        xmlImage = $r5;
        $r6 = virtualinvoke info.<org.apache.xmlgraphics.image.loader.ImageInfo: java.util.Map getCustomObjects()>();
        $r7 = <org.apache.xmlgraphics.image.loader.ImageInfo: java.lang.Object ORIGINAL_IMAGE>;
        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, xmlImage);
        return info;
    }

    private boolean isSupportedSource(javax.xml.transform.Source)
    {
        org.apache.fop.image.loader.batik.PreloaderSVG$Loader this;
        javax.xml.transform.Source src;
        javax.xml.transform.dom.DOMSource domSrc;
        boolean $z0;
        org.w3c.dom.Node $r0;

        this := @this: org.apache.fop.image.loader.batik.PreloaderSVG$Loader;
        src := @parameter0: javax.xml.transform.Source;
        $z0 = src instanceof javax.xml.transform.dom.DOMSource;
        if $z0 == 0 goto label0;

        domSrc = (javax.xml.transform.dom.DOMSource) src;
        $r0 = virtualinvoke domSrc.<javax.xml.transform.dom.DOMSource: org.w3c.dom.Node getNode()>();
        $z0 = $r0 instanceof org.w3c.dom.svg.SVGDocument;
        return $z0;

     label0:
        $z0 = staticinvoke <org.apache.xmlgraphics.image.loader.util.ImageUtil: boolean hasInputStream(javax.xml.transform.Source)>(src);
        return $z0;
    }

    static boolean access$000(org.apache.fop.image.loader.batik.PreloaderSVG$Loader, javax.xml.transform.Source)
    {
        org.apache.fop.image.loader.batik.PreloaderSVG$Loader x0;
        javax.xml.transform.Source x1;
        boolean $z0;

        x0 := @parameter0: org.apache.fop.image.loader.batik.PreloaderSVG$Loader;
        x1 := @parameter1: javax.xml.transform.Source;
        $z0 = specialinvoke x0.<org.apache.fop.image.loader.batik.PreloaderSVG$Loader: boolean isSupportedSource(javax.xml.transform.Source)>(x1);
        return $z0;
    }

    static org.apache.xmlgraphics.image.loader.ImageInfo access$100(org.apache.fop.image.loader.batik.PreloaderSVG$Loader, java.lang.String, javax.xml.transform.Source, org.apache.xmlgraphics.image.loader.ImageContext)
    {
        org.apache.fop.image.loader.batik.PreloaderSVG$Loader x0;
        java.lang.String x1;
        javax.xml.transform.Source x2;
        org.apache.xmlgraphics.image.loader.ImageContext x3;
        org.apache.xmlgraphics.image.loader.ImageInfo $r0;

        x0 := @parameter0: org.apache.fop.image.loader.batik.PreloaderSVG$Loader;
        x1 := @parameter1: java.lang.String;
        x2 := @parameter2: javax.xml.transform.Source;
        x3 := @parameter3: org.apache.xmlgraphics.image.loader.ImageContext;
        $r0 = specialinvoke x0.<org.apache.fop.image.loader.batik.PreloaderSVG$Loader: org.apache.xmlgraphics.image.loader.ImageInfo getImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)>(x1, x2, x3);
        return $r0;
    }
}
