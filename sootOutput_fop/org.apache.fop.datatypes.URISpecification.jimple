public class org.apache.fop.datatypes.URISpecification extends java.lang.Object
{
    private static final java.lang.String PUNCT;
    private static final java.lang.String RESERVED;
    private static final char[] HEX_DIGITS;

    public void <init>()
    {
        org.apache.fop.datatypes.URISpecification this;

        this := @this: org.apache.fop.datatypes.URISpecification;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }

    public static java.lang.String getURL(java.lang.String)
    {
        java.lang.String href, href, $r0;
        boolean $z0;
        int $i0, $i1;

        href := @parameter0: java.lang.String;
        href = virtualinvoke href.<java.lang.String: java.lang.String trim()>();
        $z0 = virtualinvoke href.<java.lang.String: boolean startsWith(java.lang.String)>("url(");
        if $z0 == 0 goto label1;

        $i0 = virtualinvoke href.<java.lang.String: int indexOf(java.lang.String)>(")");
        if $i0 == -1 goto label1;

        $i1 = virtualinvoke href.<java.lang.String: int lastIndexOf(java.lang.String)>(")");
        $r0 = virtualinvoke href.<java.lang.String: java.lang.String substring(int,int)>(4, $i1);
        href = virtualinvoke $r0.<java.lang.String: java.lang.String trim()>();
        $z0 = virtualinvoke href.<java.lang.String: boolean startsWith(java.lang.String)>("\'");
        if $z0 == 0 goto label0;

        $z0 = virtualinvoke href.<java.lang.String: boolean endsWith(java.lang.String)>("\'");
        if $z0 == 0 goto label0;

        $i1 = virtualinvoke href.<java.lang.String: int length()>();
        $i1 = $i1 - 1;
        href = virtualinvoke href.<java.lang.String: java.lang.String substring(int,int)>(1, $i1);
        goto label1;

     label0:
        $z0 = virtualinvoke href.<java.lang.String: boolean startsWith(java.lang.String)>("\"");
        if $z0 == 0 goto label1;

        $z0 = virtualinvoke href.<java.lang.String: boolean endsWith(java.lang.String)>("\"");
        if $z0 == 0 goto label1;

        $i1 = virtualinvoke href.<java.lang.String: int length()>();
        $i1 = $i1 - 1;
        href = virtualinvoke href.<java.lang.String: java.lang.String substring(int,int)>(1, $i1);

     label1:
        return href;
    }

    private static boolean isValidURIChar(char)
    {
        char ch;

        ch := @parameter0: char;
        return 1;
    }

    private static boolean isDigit(char)
    {
        char ch;
        boolean $z0;

        ch := @parameter0: char;
        if ch < 48 goto label0;

        if ch > 57 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private static boolean isAlpha(char)
    {
        char ch;
        boolean $z0;

        ch := @parameter0: char;
        if ch < 65 goto label0;

        if ch <= 90 goto label1;

     label0:
        if ch < 65 goto label2;

        if ch > 122 goto label2;

     label1:
        $z0 = 1;
        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private static boolean isHexDigit(char)
    {
        char ch;
        boolean $z0;

        ch := @parameter0: char;
        if ch < 48 goto label0;

        if ch <= 57 goto label2;

     label0:
        if ch < 65 goto label1;

        if ch <= 70 goto label2;

     label1:
        if ch < 97 goto label3;

        if ch > 102 goto label3;

     label2:
        $z0 = 1;
        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private static boolean isReserved(char)
    {
        char ch;
        java.lang.String $r0;
        int $i0;

        ch := @parameter0: char;
        $r0 = ",;:$&+=?/[]@";
        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(ch);
        if $i0 < 0 goto label0;

        return 1;

     label0:
        if 35 != ch goto label1;

        return 1;

     label1:
        return 0;
    }

    private static boolean isUnreserved(char)
    {
        char ch;
        boolean $z0;
        java.lang.String $r0;
        int $i0;

        ch := @parameter0: char;
        $z0 = staticinvoke <org.apache.fop.datatypes.URISpecification: boolean isDigit(char)>(ch);
        if $z0 != 0 goto label0;

        $z0 = staticinvoke <org.apache.fop.datatypes.URISpecification: boolean isAlpha(char)>(ch);
        if $z0 == 0 goto label1;

     label0:
        return 1;

     label1:
        $r0 = "_-!.~\'()*";
        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(ch);
        if $i0 < 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private static void appendEscape(java.lang.StringBuffer, byte)
    {
        java.lang.StringBuffer sb, $r0;
        byte b, $b0;
        char[] $r1;
        char $c1;

        sb := @parameter0: java.lang.StringBuffer;
        b := @parameter1: byte;
        $r0 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(37);
        $r1 = <org.apache.fop.datatypes.URISpecification: char[] HEX_DIGITS>;
        $b0 = b >> 4;
        $b0 = $b0 & 15;
        $c1 = $r1[$b0];
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);
        $r1 = <org.apache.fop.datatypes.URISpecification: char[] HEX_DIGITS>;
        $b0 = b >> 0;
        $b0 = $b0 & 15;
        $c1 = $r1[$b0];
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);
        return;
    }

    public static java.lang.String escapeURI(java.lang.String)
    {
        java.lang.String uri, uri, $r1;
        java.lang.StringBuffer sb, $r0;
        int i, c, j, cj, $i0;
        char ch, $c1;
        byte[] utf8;
        java.io.UnsupportedEncodingException e, $r2;
        boolean $z0;
        byte $b2;
        java.lang.Error $r3;

        uri := @parameter0: java.lang.String;
        uri = staticinvoke <org.apache.fop.datatypes.URISpecification: java.lang.String getURL(java.lang.String)>(uri);
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        sb = $r0;
        i = 0;
        c = virtualinvoke uri.<java.lang.String: int length()>();

     label0:
        if i >= c goto label8;

        ch = virtualinvoke uri.<java.lang.String: char charAt(int)>(i);
        if ch != 37 goto label1;

        $i0 = c - 3;
        if i >= $i0 goto label1;

        $i0 = i + 1;
        $c1 = virtualinvoke uri.<java.lang.String: char charAt(int)>($i0);
        $z0 = staticinvoke <org.apache.fop.datatypes.URISpecification: boolean isHexDigit(char)>($c1);
        if $z0 == 0 goto label1;

        $i0 = i + 2;
        $c1 = virtualinvoke uri.<java.lang.String: char charAt(int)>($i0);
        $z0 = staticinvoke <org.apache.fop.datatypes.URISpecification: boolean isHexDigit(char)>($c1);
        if $z0 == 0 goto label1;

        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(ch);
        goto label7;

     label1:
        $z0 = staticinvoke <org.apache.fop.datatypes.URISpecification: boolean isReserved(char)>(ch);
        if $z0 != 0 goto label2;

        $z0 = staticinvoke <org.apache.fop.datatypes.URISpecification: boolean isUnreserved(char)>(ch);
        if $z0 == 0 goto label3;

     label2:
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(ch);
        goto label7;

     label3:
        $r1 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(ch);
        utf8 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");
        j = 0;
        cj = lengthof utf8;

     label4:
        if j >= cj goto label5;

        $b2 = utf8[j];
        staticinvoke <org.apache.fop.datatypes.URISpecification: void appendEscape(java.lang.StringBuffer,byte)>(sb, $b2);
        j = j + 1;
        goto label4;

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;
        e = $r2;
        $r3 = new java.lang.Error;
        specialinvoke $r3.<java.lang.Error: void <init>(java.lang.String)>("Incompatible JVM. UTF-8 not supported.");
        throw $r3;

     label7:
        i = i + 1;
        goto label0;

     label8:
        $r1 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r1;

        catch java.io.UnsupportedEncodingException from label3 to label5 with label6;
    }

    static void <clinit>()
    {
        char[] $r0;

        $r0 = newarray (char)[16];
        $r0[0] = 48;
        $r0[1] = 49;
        $r0[2] = 50;
        $r0[3] = 51;
        $r0[4] = 52;
        $r0[5] = 53;
        $r0[6] = 54;
        $r0[7] = 55;
        $r0[8] = 56;
        $r0[9] = 57;
        $r0[10] = 65;
        $r0[11] = 66;
        $r0[12] = 67;
        $r0[13] = 68;
        $r0[14] = 69;
        $r0[15] = 70;
        <org.apache.fop.datatypes.URISpecification: char[] HEX_DIGITS> = $r0;
        return;
    }
}
