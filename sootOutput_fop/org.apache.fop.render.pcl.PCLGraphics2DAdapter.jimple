public class org.apache.fop.render.pcl.PCLGraphics2DAdapter extends org.apache.fop.render.AbstractGraphics2DAdapter
{
    private static org.apache.commons.logging.Log log;
    static java.lang.Class class$org$apache$fop$render$pcl$PCLGraphics2DAdapter;

    public void <init>()
    {
        org.apache.fop.render.pcl.PCLGraphics2DAdapter this;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2DAdapter;
        specialinvoke this.<org.apache.fop.render.AbstractGraphics2DAdapter: void <init>()>();
        return;
    }

    public void paintImage(org.apache.xmlgraphics.java2d.Graphics2DImagePainter, org.apache.fop.render.RendererContext, int, int, int, int) throws java.io.IOException
    {
        org.apache.fop.render.pcl.PCLGraphics2DAdapter this;
        org.apache.xmlgraphics.java2d.Graphics2DImagePainter painter;
        org.apache.fop.render.RendererContext context;
        int x, y, width, height, resolution, $i0;
        org.apache.fop.render.pcl.PCLRendererContext pclContext;
        org.apache.fop.render.pcl.PCLRenderer pcl;
        org.apache.fop.render.pcl.PCLGenerator gen, tempGen, $r2;
        java.awt.Dimension dim, $r18;
        float imw, imh, $f0, $f1, $f2, $f3;
        boolean painted, paintAsBitmap, $z0, $z1, $z2;
        org.apache.commons.io.output.ByteArrayOutputStream baout, $r1;
        org.apache.xmlgraphics.java2d.GraphicContext ctx, $r3;
        java.awt.geom.AffineTransform prepareHPGL2, $r5;
        org.apache.fop.render.pcl.PCLGraphics2D graphics, $r6;
        java.awt.geom.Rectangle2D$Double area, $r7;
        double scale, $d0, $d1, $d2, $d3, $d4;
        java.lang.UnsupportedOperationException uoe, $r12;
        java.awt.image.BufferedImage bi;
        org.apache.fop.render.AbstractRenderer $r0;
        java.lang.Object $r4;
        java.lang.StringBuffer $r8;
        java.lang.String $r9, $r10;
        java.io.OutputStream $r11;
        org.apache.commons.logging.Log $r13;
        org.apache.fop.apps.FOUserAgent $r14;

        this := @this: org.apache.fop.render.pcl.PCLGraphics2DAdapter;
        painter := @parameter0: org.apache.xmlgraphics.java2d.Graphics2DImagePainter;
        context := @parameter1: org.apache.fop.render.RendererContext;
        x := @parameter2: int;
        y := @parameter3: int;
        width := @parameter4: int;
        height := @parameter5: int;
        pclContext = staticinvoke <org.apache.fop.render.pcl.PCLRendererContext: org.apache.fop.render.pcl.PCLRendererContext wrapRendererContext(org.apache.fop.render.RendererContext)>(context);
        $r0 = virtualinvoke context.<org.apache.fop.render.RendererContext: org.apache.fop.render.AbstractRenderer getRenderer()>();
        pcl = (org.apache.fop.render.pcl.PCLRenderer) $r0;
        gen = pcl.<org.apache.fop.render.pcl.PCLRenderer: org.apache.fop.render.pcl.PCLGenerator gen>;
        dim = interfaceinvoke painter.<org.apache.xmlgraphics.java2d.Graphics2DImagePainter: java.awt.Dimension getImageSize()>();
        $d0 = virtualinvoke dim.<java.awt.Dimension: double getWidth()>();
        imw = (float) $d0;
        $d0 = virtualinvoke dim.<java.awt.Dimension: double getHeight()>();
        imh = (float) $d0;
        painted = 0;
        paintAsBitmap = virtualinvoke pclContext.<org.apache.fop.render.pcl.PCLRendererContext: boolean paintAsBitmap()>();
        if paintAsBitmap != 0 goto label3;

        $r1 = new org.apache.commons.io.output.ByteArrayOutputStream;
        specialinvoke $r1.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();
        baout = $r1;
        $r2 = new org.apache.fop.render.pcl.PCLGenerator;
        $i0 = virtualinvoke gen.<org.apache.fop.render.pcl.PCLGenerator: int getMaximumBitmapResolution()>();
        specialinvoke $r2.<org.apache.fop.render.pcl.PCLGenerator: void <init>(java.io.OutputStream,int)>(baout, $i0);
        tempGen = $r2;

     label0:
        $r3 = virtualinvoke pcl.<org.apache.fop.render.pcl.PCLRenderer: org.apache.xmlgraphics.java2d.GraphicContext getGraphicContext()>();
        $r4 = virtualinvoke $r3.<org.apache.xmlgraphics.java2d.GraphicContext: java.lang.Object clone()>();
        ctx = (org.apache.xmlgraphics.java2d.GraphicContext) $r4;
        $r5 = new java.awt.geom.AffineTransform;
        specialinvoke $r5.<java.awt.geom.AffineTransform: void <init>()>();
        prepareHPGL2 = $r5;
        virtualinvoke prepareHPGL2.<java.awt.geom.AffineTransform: void scale(double,double)>(0.001, 0.001);
        virtualinvoke ctx.<org.apache.xmlgraphics.java2d.GraphicContext: void setTransform(java.awt.geom.AffineTransform)>(prepareHPGL2);
        $r6 = new org.apache.fop.render.pcl.PCLGraphics2D;
        specialinvoke $r6.<org.apache.fop.render.pcl.PCLGraphics2D: void <init>(org.apache.fop.render.pcl.PCLGenerator)>(tempGen);
        graphics = $r6;
        virtualinvoke graphics.<org.apache.fop.render.pcl.PCLGraphics2D: void setGraphicContext(org.apache.xmlgraphics.java2d.GraphicContext)>(ctx);
        $z0 = virtualinvoke pclContext.<org.apache.fop.render.pcl.PCLRendererContext: boolean isClippingDisabled()>();
        virtualinvoke graphics.<org.apache.fop.render.pcl.PCLGraphics2D: void setClippingDisabled(boolean)>($z0);
        $r7 = new java.awt.geom.Rectangle2D$Double;
        $d1 = (double) imw;
        $d2 = (double) imh;
        specialinvoke $r7.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(0.0, 0.0, $d1, $d2);
        area = $r7;
        interfaceinvoke painter.<org.apache.xmlgraphics.java2d.Graphics2DImagePainter: void paint(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(graphics, area);
        virtualinvoke pcl.<org.apache.fop.render.pcl.PCLRenderer: void saveGraphicsState()>();
        $f0 = (float) x;
        $f1 = (float) y;
        virtualinvoke pcl.<org.apache.fop.render.pcl.PCLRenderer: void setCursorPos(float,float)>($f0, $f1);
        $r8 = new java.lang.StringBuffer;
        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*c");
        $f2 = (float) width;
        $f2 = $f2 / 100.0F;
        $d3 = (double) $f2;
        $r9 = virtualinvoke gen.<org.apache.fop.render.pcl.PCLGenerator: java.lang.String formatDouble4(double)>($d3);
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("x");
        $f2 = (float) height;
        $f2 = $f2 / 100.0F;
        $d3 = (double) $f2;
        $r9 = virtualinvoke gen.<org.apache.fop.render.pcl.PCLGenerator: java.lang.String formatDouble4(double)>($d3);
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Y");
        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke gen.<org.apache.fop.render.pcl.PCLGenerator: void writeCommand(java.lang.String)>($r10);
        virtualinvoke gen.<org.apache.fop.render.pcl.PCLGenerator: void writeCommand(java.lang.String)>("*c0T");
        virtualinvoke gen.<org.apache.fop.render.pcl.PCLGenerator: void enterHPGL2Mode(boolean)>(0);
        virtualinvoke gen.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>("\nIN;");
        virtualinvoke gen.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>("SP1;");
        $d0 = (double) imw;
        $d4 = (double) imw;
        $d4 = $d4 * 0.025;
        $d4 = staticinvoke <org.apache.fop.util.UnitConv: double mm2pt(double)>($d4);
        scale = $d0 / $d4;
        $r8 = new java.lang.StringBuffer;
        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SC0,");
        $r9 = virtualinvoke gen.<org.apache.fop.render.pcl.PCLGenerator: java.lang.String formatDouble4(double)>(scale);
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",0,-");
        $r9 = virtualinvoke gen.<org.apache.fop.render.pcl.PCLGenerator: java.lang.String formatDouble4(double)>(scale);
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",2;");
        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke gen.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>($r10);
        virtualinvoke gen.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>("IR0,100,0,100;");
        virtualinvoke gen.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>("PU;PA0,0;\n");
        $r11 = virtualinvoke gen.<org.apache.fop.render.pcl.PCLGenerator: java.io.OutputStream getOutputStream()>();
        virtualinvoke baout.<org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>($r11);
        virtualinvoke gen.<org.apache.fop.render.pcl.PCLGenerator: void writeText(java.lang.String)>("\n");
        virtualinvoke gen.<org.apache.fop.render.pcl.PCLGenerator: void enterPCLMode(boolean)>(0);
        virtualinvoke pcl.<org.apache.fop.render.pcl.PCLRenderer: void restoreGraphicsState()>();
        painted = 1;

     label1:
        goto label3;

     label2:
        $r12 := @caughtexception;
        uoe = $r12;
        $r13 = <org.apache.fop.render.pcl.PCLGraphics2DAdapter: org.apache.commons.logging.Log log>;
        $r8 = new java.lang.StringBuffer;
        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot paint graphic natively. Falling back to bitmap painting. Reason: ");
        $r9 = virtualinvoke uoe.<java.lang.UnsupportedOperationException: java.lang.String getMessage()>();
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);
        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r13.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r10);

     label3:
        if painted != 0 goto label6;

        $r14 = virtualinvoke context.<org.apache.fop.render.RendererContext: org.apache.fop.apps.FOUserAgent getUserAgent()>();
        $f3 = virtualinvoke $r14.<org.apache.fop.apps.FOUserAgent: float getTargetResolution()>();
        resolution = staticinvoke <java.lang.Math: int round(float)>($f3);
        $z1 = virtualinvoke pclContext.<org.apache.fop.render.pcl.PCLRendererContext: boolean isColorCanvas()>();
        if $z1 != 0 goto label4;

        $z1 = 1;
        goto label5;

     label4:
        $z1 = 0;

     label5:
        bi = virtualinvoke this.<org.apache.fop.render.pcl.PCLGraphics2DAdapter: java.awt.image.BufferedImage paintToBufferedImage(org.apache.xmlgraphics.java2d.Graphics2DImagePainter,org.apache.fop.render.RendererContext$RendererContextWrapper,int,boolean,boolean)>(painter, pclContext, resolution, $z1, 0);
        $f0 = (float) x;
        $f1 = (float) y;
        virtualinvoke pcl.<org.apache.fop.render.pcl.PCLRenderer: void setCursorPos(float,float)>($f0, $f1);
        $r18 = new java.awt.Dimension;
        specialinvoke $r18.<java.awt.Dimension: void <init>(int,int)>(width, height);
        $z2 = virtualinvoke pclContext.<org.apache.fop.render.pcl.PCLRendererContext: boolean isSourceTransparency()>();
        virtualinvoke gen.<org.apache.fop.render.pcl.PCLGenerator: void paintBitmap(java.awt.image.RenderedImage,java.awt.Dimension,boolean)>(bi, $r18, $z2);

     label6:
        return;

        catch java.lang.UnsupportedOperationException from label0 to label1 with label2;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException l1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        l1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(l1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.apache.commons.logging.Log $r1;

        $r0 = <org.apache.fop.render.pcl.PCLGraphics2DAdapter: java.lang.Class class$org$apache$fop$render$pcl$PCLGraphics2DAdapter>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.fop.render.pcl.PCLGraphics2DAdapter: java.lang.Class class$(java.lang.String)>("org.apache.fop.render.pcl.PCLGraphics2DAdapter");
        <org.apache.fop.render.pcl.PCLGraphics2DAdapter: java.lang.Class class$org$apache$fop$render$pcl$PCLGraphics2DAdapter> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.fop.render.pcl.PCLGraphics2DAdapter: java.lang.Class class$org$apache$fop$render$pcl$PCLGraphics2DAdapter>;

     label1:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r0);
        <org.apache.fop.render.pcl.PCLGraphics2DAdapter: org.apache.commons.logging.Log log> = $r1;
        return;
    }
}
