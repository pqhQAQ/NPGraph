public class org.apache.fop.render.pcl.DefaultMonochromeBitmapConverter extends java.lang.Object implements org.apache.fop.render.pcl.MonochromeBitmapConverter
{

    public void <init>()
    {
        org.apache.fop.render.pcl.DefaultMonochromeBitmapConverter this;

        this := @this: org.apache.fop.render.pcl.DefaultMonochromeBitmapConverter;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }

    public void setHint(java.lang.String, java.lang.String)
    {
        org.apache.fop.render.pcl.DefaultMonochromeBitmapConverter this;
        java.lang.String name, value;

        this := @this: org.apache.fop.render.pcl.DefaultMonochromeBitmapConverter;
        name := @parameter0: java.lang.String;
        value := @parameter1: java.lang.String;
        return;
    }

    public java.awt.image.RenderedImage convertToMonochrome(java.awt.image.BufferedImage)
    {
        org.apache.fop.render.pcl.DefaultMonochromeBitmapConverter this;
        java.awt.image.BufferedImage img, $r0, buf;
        java.awt.RenderingHints hints, $r1;
        java.awt.image.ColorConvertOp op, $r5;
        int $i0, $i1;
        java.awt.RenderingHints$Key $r2;
        java.lang.Object $r3;
        java.awt.color.ColorSpace $r6;

        this := @this: org.apache.fop.render.pcl.DefaultMonochromeBitmapConverter;
        img := @parameter0: java.awt.image.BufferedImage;
        $r0 = new java.awt.image.BufferedImage;
        $i0 = virtualinvoke img.<java.awt.image.BufferedImage: int getWidth()>();
        $i1 = virtualinvoke img.<java.awt.image.BufferedImage: int getHeight()>();
        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, 12);
        buf = $r0;
        $r1 = new java.awt.RenderingHints;
        specialinvoke $r1.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);
        hints = $r1;
        $r2 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_DITHERING>;
        $r3 = <java.awt.RenderingHints: java.lang.Object VALUE_DITHER_ENABLE>;
        virtualinvoke hints.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);
        $r5 = new java.awt.image.ColorConvertOp;
        $r6 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1003);
        specialinvoke $r5.<java.awt.image.ColorConvertOp: void <init>(java.awt.color.ColorSpace,java.awt.RenderingHints)>($r6, hints);
        op = $r5;
        virtualinvoke op.<java.awt.image.ColorConvertOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>(img, buf);
        return buf;
    }
}
