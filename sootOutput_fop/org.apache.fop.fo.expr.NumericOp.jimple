public class org.apache.fop.fo.expr.NumericOp extends java.lang.Object
{

    public void <init>()
    {
        org.apache.fop.fo.expr.NumericOp this;

        this := @this: org.apache.fop.fo.expr.NumericOp;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }

    public static org.apache.fop.datatypes.Numeric addition(org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.Numeric) throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.datatypes.Numeric op1, op2, $r0;
        boolean $z0;
        org.apache.fop.fo.expr.RelativeNumericProperty $r1;

        op1 := @parameter0: org.apache.fop.datatypes.Numeric;
        op2 := @parameter1: org.apache.fop.datatypes.Numeric;
        $z0 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: boolean isAbsolute()>();
        if $z0 == 0 goto label0;

        $z0 = interfaceinvoke op2.<org.apache.fop.datatypes.Numeric: boolean isAbsolute()>();
        if $z0 == 0 goto label0;

        $r0 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric addition2(org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.PercentBaseContext)>(op1, op2, null);
        return $r0;

     label0:
        $r1 = new org.apache.fop.fo.expr.RelativeNumericProperty;
        specialinvoke $r1.<org.apache.fop.fo.expr.RelativeNumericProperty: void <init>(int,org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.Numeric)>(1, op1, op2);
        return $r1;
    }

    public static org.apache.fop.datatypes.Numeric addition2(org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.PercentBaseContext) throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.datatypes.Numeric op1, op2, $r1;
        org.apache.fop.datatypes.PercentBaseContext context;
        int $i0, $i1, $i2;
        org.apache.fop.fo.expr.PropertyException $r0;
        double $d0, $d1;

        op1 := @parameter0: org.apache.fop.datatypes.Numeric;
        op2 := @parameter1: org.apache.fop.datatypes.Numeric;
        context := @parameter2: org.apache.fop.datatypes.PercentBaseContext;
        $i0 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: int getDimension()>();
        $i1 = interfaceinvoke op2.<org.apache.fop.datatypes.Numeric: int getDimension()>();
        if $i0 == $i1 goto label0;

        $r0 = new org.apache.fop.fo.expr.PropertyException;
        specialinvoke $r0.<org.apache.fop.fo.expr.PropertyException: void <init>(java.lang.String)>("Can\'t subtract Numerics of different dimensions");
        throw $r0;

     label0:
        $d0 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: double getNumericValue(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $d1 = interfaceinvoke op2.<org.apache.fop.datatypes.Numeric: double getNumericValue(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $d0 = $d0 + $d1;
        $i2 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: int getDimension()>();
        $r1 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric numeric(double,int)>($d0, $i2);
        return $r1;
    }

    public static org.apache.fop.datatypes.Numeric subtraction(org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.Numeric) throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.datatypes.Numeric op1, op2, $r0;
        boolean $z0;
        org.apache.fop.fo.expr.RelativeNumericProperty $r1;

        op1 := @parameter0: org.apache.fop.datatypes.Numeric;
        op2 := @parameter1: org.apache.fop.datatypes.Numeric;
        $z0 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: boolean isAbsolute()>();
        if $z0 == 0 goto label0;

        $z0 = interfaceinvoke op2.<org.apache.fop.datatypes.Numeric: boolean isAbsolute()>();
        if $z0 == 0 goto label0;

        $r0 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric subtraction2(org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.PercentBaseContext)>(op1, op2, null);
        return $r0;

     label0:
        $r1 = new org.apache.fop.fo.expr.RelativeNumericProperty;
        specialinvoke $r1.<org.apache.fop.fo.expr.RelativeNumericProperty: void <init>(int,org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.Numeric)>(2, op1, op2);
        return $r1;
    }

    public static org.apache.fop.datatypes.Numeric subtraction2(org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.PercentBaseContext) throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.datatypes.Numeric op1, op2, $r1;
        org.apache.fop.datatypes.PercentBaseContext context;
        int $i0, $i1, $i2;
        org.apache.fop.fo.expr.PropertyException $r0;
        double $d0, $d1;

        op1 := @parameter0: org.apache.fop.datatypes.Numeric;
        op2 := @parameter1: org.apache.fop.datatypes.Numeric;
        context := @parameter2: org.apache.fop.datatypes.PercentBaseContext;
        $i0 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: int getDimension()>();
        $i1 = interfaceinvoke op2.<org.apache.fop.datatypes.Numeric: int getDimension()>();
        if $i0 == $i1 goto label0;

        $r0 = new org.apache.fop.fo.expr.PropertyException;
        specialinvoke $r0.<org.apache.fop.fo.expr.PropertyException: void <init>(java.lang.String)>("Can\'t subtract Numerics of different dimensions");
        throw $r0;

     label0:
        $d0 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: double getNumericValue(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $d1 = interfaceinvoke op2.<org.apache.fop.datatypes.Numeric: double getNumericValue(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $d0 = $d0 - $d1;
        $i2 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: int getDimension()>();
        $r1 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric numeric(double,int)>($d0, $i2);
        return $r1;
    }

    public static org.apache.fop.datatypes.Numeric multiply(org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.Numeric) throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.datatypes.Numeric op1, op2, $r0;
        boolean $z0;
        org.apache.fop.fo.expr.RelativeNumericProperty $r1;

        op1 := @parameter0: org.apache.fop.datatypes.Numeric;
        op2 := @parameter1: org.apache.fop.datatypes.Numeric;
        $z0 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: boolean isAbsolute()>();
        if $z0 == 0 goto label0;

        $z0 = interfaceinvoke op2.<org.apache.fop.datatypes.Numeric: boolean isAbsolute()>();
        if $z0 == 0 goto label0;

        $r0 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric multiply2(org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.PercentBaseContext)>(op1, op2, null);
        return $r0;

     label0:
        $r1 = new org.apache.fop.fo.expr.RelativeNumericProperty;
        specialinvoke $r1.<org.apache.fop.fo.expr.RelativeNumericProperty: void <init>(int,org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.Numeric)>(3, op1, op2);
        return $r1;
    }

    public static org.apache.fop.datatypes.Numeric multiply2(org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.PercentBaseContext) throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.datatypes.Numeric op1, op2, $r0;
        org.apache.fop.datatypes.PercentBaseContext context;
        double $d0, $d1;
        int $i0, $i1;

        op1 := @parameter0: org.apache.fop.datatypes.Numeric;
        op2 := @parameter1: org.apache.fop.datatypes.Numeric;
        context := @parameter2: org.apache.fop.datatypes.PercentBaseContext;
        $d0 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: double getNumericValue(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $d1 = interfaceinvoke op2.<org.apache.fop.datatypes.Numeric: double getNumericValue(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $d0 = $d0 * $d1;
        $i0 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: int getDimension()>();
        $i1 = interfaceinvoke op2.<org.apache.fop.datatypes.Numeric: int getDimension()>();
        $i0 = $i0 + $i1;
        $r0 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric numeric(double,int)>($d0, $i0);
        return $r0;
    }

    public static org.apache.fop.datatypes.Numeric divide(org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.Numeric) throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.datatypes.Numeric op1, op2, $r0;
        boolean $z0;
        org.apache.fop.fo.expr.RelativeNumericProperty $r1;

        op1 := @parameter0: org.apache.fop.datatypes.Numeric;
        op2 := @parameter1: org.apache.fop.datatypes.Numeric;
        $z0 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: boolean isAbsolute()>();
        if $z0 == 0 goto label0;

        $z0 = interfaceinvoke op2.<org.apache.fop.datatypes.Numeric: boolean isAbsolute()>();
        if $z0 == 0 goto label0;

        $r0 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric divide2(org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.PercentBaseContext)>(op1, op2, null);
        return $r0;

     label0:
        $r1 = new org.apache.fop.fo.expr.RelativeNumericProperty;
        specialinvoke $r1.<org.apache.fop.fo.expr.RelativeNumericProperty: void <init>(int,org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.Numeric)>(4, op1, op2);
        return $r1;
    }

    public static org.apache.fop.datatypes.Numeric divide2(org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.PercentBaseContext) throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.datatypes.Numeric op1, op2, $r0;
        org.apache.fop.datatypes.PercentBaseContext context;
        double $d0, $d1;
        int $i0, $i1;

        op1 := @parameter0: org.apache.fop.datatypes.Numeric;
        op2 := @parameter1: org.apache.fop.datatypes.Numeric;
        context := @parameter2: org.apache.fop.datatypes.PercentBaseContext;
        $d0 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: double getNumericValue(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $d1 = interfaceinvoke op2.<org.apache.fop.datatypes.Numeric: double getNumericValue(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $d0 = $d0 / $d1;
        $i0 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: int getDimension()>();
        $i1 = interfaceinvoke op2.<org.apache.fop.datatypes.Numeric: int getDimension()>();
        $i0 = $i0 - $i1;
        $r0 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric numeric(double,int)>($d0, $i0);
        return $r0;
    }

    public static org.apache.fop.datatypes.Numeric modulo(org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.Numeric) throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.datatypes.Numeric op1, op2, $r0;
        boolean $z0;
        org.apache.fop.fo.expr.RelativeNumericProperty $r1;

        op1 := @parameter0: org.apache.fop.datatypes.Numeric;
        op2 := @parameter1: org.apache.fop.datatypes.Numeric;
        $z0 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: boolean isAbsolute()>();
        if $z0 == 0 goto label0;

        $z0 = interfaceinvoke op2.<org.apache.fop.datatypes.Numeric: boolean isAbsolute()>();
        if $z0 == 0 goto label0;

        $r0 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric modulo2(org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.PercentBaseContext)>(op1, op2, null);
        return $r0;

     label0:
        $r1 = new org.apache.fop.fo.expr.RelativeNumericProperty;
        specialinvoke $r1.<org.apache.fop.fo.expr.RelativeNumericProperty: void <init>(int,org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.Numeric)>(5, op1, op2);
        return $r1;
    }

    public static org.apache.fop.datatypes.Numeric modulo2(org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.PercentBaseContext) throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.datatypes.Numeric op1, op2, $r0;
        org.apache.fop.datatypes.PercentBaseContext context;
        double $d0, $d1;
        int $i0;

        op1 := @parameter0: org.apache.fop.datatypes.Numeric;
        op2 := @parameter1: org.apache.fop.datatypes.Numeric;
        context := @parameter2: org.apache.fop.datatypes.PercentBaseContext;
        $d0 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: double getNumericValue(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $d1 = interfaceinvoke op2.<org.apache.fop.datatypes.Numeric: double getNumericValue(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $d0 = $d0 % $d1;
        $i0 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: int getDimension()>();
        $r0 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric numeric(double,int)>($d0, $i0);
        return $r0;
    }

    public static org.apache.fop.datatypes.Numeric abs(org.apache.fop.datatypes.Numeric) throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.datatypes.Numeric op, $r0;
        boolean $z0;
        org.apache.fop.fo.expr.RelativeNumericProperty $r1;

        op := @parameter0: org.apache.fop.datatypes.Numeric;
        $z0 = interfaceinvoke op.<org.apache.fop.datatypes.Numeric: boolean isAbsolute()>();
        if $z0 == 0 goto label0;

        $r0 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric abs2(org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.PercentBaseContext)>(op, null);
        return $r0;

     label0:
        $r1 = new org.apache.fop.fo.expr.RelativeNumericProperty;
        specialinvoke $r1.<org.apache.fop.fo.expr.RelativeNumericProperty: void <init>(int,org.apache.fop.datatypes.Numeric)>(7, op);
        return $r1;
    }

    public static org.apache.fop.datatypes.Numeric abs2(org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.PercentBaseContext) throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.datatypes.Numeric op, $r0;
        org.apache.fop.datatypes.PercentBaseContext context;
        double $d0;
        int $i0;

        op := @parameter0: org.apache.fop.datatypes.Numeric;
        context := @parameter1: org.apache.fop.datatypes.PercentBaseContext;
        $d0 = interfaceinvoke op.<org.apache.fop.datatypes.Numeric: double getNumericValue(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $d0 = staticinvoke <java.lang.Math: double abs(double)>($d0);
        $i0 = interfaceinvoke op.<org.apache.fop.datatypes.Numeric: int getDimension()>();
        $r0 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric numeric(double,int)>($d0, $i0);
        return $r0;
    }

    public static org.apache.fop.datatypes.Numeric negate(org.apache.fop.datatypes.Numeric) throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.datatypes.Numeric op, $r0;
        boolean $z0;
        org.apache.fop.fo.expr.RelativeNumericProperty $r1;

        op := @parameter0: org.apache.fop.datatypes.Numeric;
        $z0 = interfaceinvoke op.<org.apache.fop.datatypes.Numeric: boolean isAbsolute()>();
        if $z0 == 0 goto label0;

        $r0 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric negate2(org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.PercentBaseContext)>(op, null);
        return $r0;

     label0:
        $r1 = new org.apache.fop.fo.expr.RelativeNumericProperty;
        specialinvoke $r1.<org.apache.fop.fo.expr.RelativeNumericProperty: void <init>(int,org.apache.fop.datatypes.Numeric)>(6, op);
        return $r1;
    }

    public static org.apache.fop.datatypes.Numeric negate2(org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.PercentBaseContext) throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.datatypes.Numeric op, $r0;
        org.apache.fop.datatypes.PercentBaseContext context;
        double $d0;
        int $i0;

        op := @parameter0: org.apache.fop.datatypes.Numeric;
        context := @parameter1: org.apache.fop.datatypes.PercentBaseContext;
        $d0 = interfaceinvoke op.<org.apache.fop.datatypes.Numeric: double getNumericValue(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $d0 = neg $d0;
        $i0 = interfaceinvoke op.<org.apache.fop.datatypes.Numeric: int getDimension()>();
        $r0 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric numeric(double,int)>($d0, $i0);
        return $r0;
    }

    public static org.apache.fop.datatypes.Numeric max(org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.Numeric) throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.datatypes.Numeric op1, op2, $r0;
        boolean $z0;
        org.apache.fop.fo.expr.RelativeNumericProperty $r1;

        op1 := @parameter0: org.apache.fop.datatypes.Numeric;
        op2 := @parameter1: org.apache.fop.datatypes.Numeric;
        $z0 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: boolean isAbsolute()>();
        if $z0 == 0 goto label0;

        $z0 = interfaceinvoke op2.<org.apache.fop.datatypes.Numeric: boolean isAbsolute()>();
        if $z0 == 0 goto label0;

        $r0 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric max2(org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.PercentBaseContext)>(op1, op2, null);
        return $r0;

     label0:
        $r1 = new org.apache.fop.fo.expr.RelativeNumericProperty;
        specialinvoke $r1.<org.apache.fop.fo.expr.RelativeNumericProperty: void <init>(int,org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.Numeric)>(8, op1, op2);
        return $r1;
    }

    public static org.apache.fop.datatypes.Numeric max2(org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.PercentBaseContext) throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.datatypes.Numeric op1, op2, $r1;
        org.apache.fop.datatypes.PercentBaseContext context;
        int $i0, $i1;
        org.apache.fop.fo.expr.PropertyException $r0;
        double $d0, $d1;
        byte $b2;

        op1 := @parameter0: org.apache.fop.datatypes.Numeric;
        op2 := @parameter1: org.apache.fop.datatypes.Numeric;
        context := @parameter2: org.apache.fop.datatypes.PercentBaseContext;
        $i0 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: int getDimension()>();
        $i1 = interfaceinvoke op2.<org.apache.fop.datatypes.Numeric: int getDimension()>();
        if $i0 == $i1 goto label0;

        $r0 = new org.apache.fop.fo.expr.PropertyException;
        specialinvoke $r0.<org.apache.fop.fo.expr.PropertyException: void <init>(java.lang.String)>("Arguments to max() must have same dimensions");
        throw $r0;

     label0:
        $d0 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: double getNumericValue(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $d1 = interfaceinvoke op2.<org.apache.fop.datatypes.Numeric: double getNumericValue(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $b2 = $d0 cmpl $d1;
        if $b2 <= 0 goto label1;

        $r1 = op1;
        goto label2;

     label1:
        $r1 = op2;

     label2:
        return $r1;
    }

    public static org.apache.fop.datatypes.Numeric min(org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.Numeric) throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.datatypes.Numeric op1, op2, $r0;
        boolean $z0;
        org.apache.fop.fo.expr.RelativeNumericProperty $r1;

        op1 := @parameter0: org.apache.fop.datatypes.Numeric;
        op2 := @parameter1: org.apache.fop.datatypes.Numeric;
        $z0 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: boolean isAbsolute()>();
        if $z0 == 0 goto label0;

        $z0 = interfaceinvoke op2.<org.apache.fop.datatypes.Numeric: boolean isAbsolute()>();
        if $z0 == 0 goto label0;

        $r0 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric min2(org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.PercentBaseContext)>(op1, op2, null);
        return $r0;

     label0:
        $r1 = new org.apache.fop.fo.expr.RelativeNumericProperty;
        specialinvoke $r1.<org.apache.fop.fo.expr.RelativeNumericProperty: void <init>(int,org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.Numeric)>(9, op1, op2);
        return $r1;
    }

    public static org.apache.fop.datatypes.Numeric min2(org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.PercentBaseContext) throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.datatypes.Numeric op1, op2, $r1;
        org.apache.fop.datatypes.PercentBaseContext context;
        int $i0, $i1;
        org.apache.fop.fo.expr.PropertyException $r0;
        double $d0, $d1;
        byte $b2;

        op1 := @parameter0: org.apache.fop.datatypes.Numeric;
        op2 := @parameter1: org.apache.fop.datatypes.Numeric;
        context := @parameter2: org.apache.fop.datatypes.PercentBaseContext;
        $i0 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: int getDimension()>();
        $i1 = interfaceinvoke op2.<org.apache.fop.datatypes.Numeric: int getDimension()>();
        if $i0 == $i1 goto label0;

        $r0 = new org.apache.fop.fo.expr.PropertyException;
        specialinvoke $r0.<org.apache.fop.fo.expr.PropertyException: void <init>(java.lang.String)>("Arguments to min() must have same dimensions");
        throw $r0;

     label0:
        $d0 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: double getNumericValue(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $d1 = interfaceinvoke op2.<org.apache.fop.datatypes.Numeric: double getNumericValue(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $b2 = $d0 cmpg $d1;
        if $b2 > 0 goto label1;

        $r1 = op1;
        goto label2;

     label1:
        $r1 = op2;

     label2:
        return $r1;
    }

    private static org.apache.fop.datatypes.Numeric numeric(double, int)
    {
        double value;
        int dimension;
        org.apache.fop.fo.expr.NumericProperty $r0;

        value := @parameter0: double;
        dimension := @parameter1: int;
        $r0 = new org.apache.fop.fo.expr.NumericProperty;
        specialinvoke $r0.<org.apache.fop.fo.expr.NumericProperty: void <init>(double,int)>(value, dimension);
        return $r0;
    }
}
