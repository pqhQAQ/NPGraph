public class org.apache.fop.render.XMLHandlerConfigurator extends org.apache.fop.render.AbstractRendererConfigurator
{
    protected static org.apache.commons.logging.Log log;
    static java.lang.Class class$org$apache$fop$render$XMLHandlerConfigurator;

    public void <init>(org.apache.fop.apps.FOUserAgent)
    {
        org.apache.fop.render.XMLHandlerConfigurator this;
        org.apache.fop.apps.FOUserAgent userAgent;

        this := @this: org.apache.fop.render.XMLHandlerConfigurator;
        userAgent := @parameter0: org.apache.fop.apps.FOUserAgent;
        specialinvoke this.<org.apache.fop.render.AbstractRendererConfigurator: void <init>(org.apache.fop.apps.FOUserAgent)>(userAgent);
        return;
    }

    private org.apache.avalon.framework.configuration.Configuration getHandlerConfig(org.apache.avalon.framework.configuration.Configuration, java.lang.String)
    {
        org.apache.fop.render.XMLHandlerConfigurator this;
        org.apache.avalon.framework.configuration.Configuration cfg, handlerConfig, $r0;
        java.lang.String namespace, $r1, $r5, $r6;
        org.apache.avalon.framework.configuration.Configuration[] children;
        int i, $i0;
        org.apache.avalon.framework.configuration.ConfigurationException l6, $r2;
        boolean $z0;
        org.apache.commons.logging.Log $r3;
        java.lang.StringBuffer $r4;

        this := @this: org.apache.fop.render.XMLHandlerConfigurator;
        cfg := @parameter0: org.apache.avalon.framework.configuration.Configuration;
        namespace := @parameter1: java.lang.String;
        if cfg == null goto label0;

        if namespace != null goto label1;

     label0:
        return null;

     label1:
        handlerConfig = null;
        children = interfaceinvoke cfg.<org.apache.avalon.framework.configuration.Configuration: org.apache.avalon.framework.configuration.Configuration[] getChildren(java.lang.String)>("xml-handler");
        i = 0;

     label2:
        $i0 = lengthof children;
        if i >= $i0 goto label8;

     label3:
        $r0 = children[i];
        $r1 = interfaceinvoke $r0.<org.apache.avalon.framework.configuration.Configuration: java.lang.String getAttribute(java.lang.String)>("namespace");
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(namespace);
        if $z0 == 0 goto label5;

        handlerConfig = children[i];

     label4:
        goto label8;

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;
        l6 = $r2;

     label7:
        i = i + 1;
        goto label2;

     label8:
        $r3 = <org.apache.fop.render.XMLHandlerConfigurator: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label11;

        $r3 = <org.apache.fop.render.XMLHandlerConfigurator: org.apache.commons.logging.Log log>;
        $r4 = new java.lang.StringBuffer;
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();
        if handlerConfig != null goto label9;

        $r5 = "No";
        goto label10;

     label9:
        $r5 = "";

     label10:
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("XML handler configuration found for namespace ");
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(namespace);
        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r6);

     label11:
        return handlerConfig;

        catch org.apache.avalon.framework.configuration.ConfigurationException from label3 to label4 with label6;
    }

    public void configure(org.apache.fop.render.RendererContext, java.lang.String) throws org.apache.fop.apps.FOPException
    {
        org.apache.fop.render.XMLHandlerConfigurator this;
        org.apache.fop.render.RendererContext context;
        java.lang.String ns;
        org.apache.avalon.framework.configuration.Configuration cfg;
        org.apache.fop.render.AbstractRenderer $r0;

        this := @this: org.apache.fop.render.XMLHandlerConfigurator;
        context := @parameter0: org.apache.fop.render.RendererContext;
        ns := @parameter1: java.lang.String;
        $r0 = virtualinvoke context.<org.apache.fop.render.RendererContext: org.apache.fop.render.AbstractRenderer getRenderer()>();
        cfg = virtualinvoke this.<org.apache.fop.render.XMLHandlerConfigurator: org.apache.avalon.framework.configuration.Configuration getRendererConfig(org.apache.fop.render.Renderer)>($r0);
        if cfg == null goto label0;

        cfg = specialinvoke this.<org.apache.fop.render.XMLHandlerConfigurator: org.apache.avalon.framework.configuration.Configuration getHandlerConfig(org.apache.avalon.framework.configuration.Configuration,java.lang.String)>(cfg, ns);
        if cfg == null goto label0;

        virtualinvoke context.<org.apache.fop.render.RendererContext: void setProperty(java.lang.String,java.lang.Object)>("cfg", cfg);

     label0:
        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException l1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        l1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(l1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.apache.commons.logging.Log $r1;

        $r0 = <org.apache.fop.render.XMLHandlerConfigurator: java.lang.Class class$org$apache$fop$render$XMLHandlerConfigurator>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.fop.render.XMLHandlerConfigurator: java.lang.Class class$(java.lang.String)>("org.apache.fop.render.XMLHandlerConfigurator");
        <org.apache.fop.render.XMLHandlerConfigurator: java.lang.Class class$org$apache$fop$render$XMLHandlerConfigurator> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.fop.render.XMLHandlerConfigurator: java.lang.Class class$org$apache$fop$render$XMLHandlerConfigurator>;

     label1:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r0);
        <org.apache.fop.render.XMLHandlerConfigurator: org.apache.commons.logging.Log log> = $r1;
        return;
    }
}
