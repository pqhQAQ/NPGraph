public class org.apache.fop.pdf.PDFText extends org.apache.fop.pdf.PDFObject
{
    private static final char[] DIGITS;
    private java.lang.String text;

    public void <init>()
    {
        org.apache.fop.pdf.PDFText this;

        this := @this: org.apache.fop.pdf.PDFText;
        specialinvoke this.<org.apache.fop.pdf.PDFObject: void <init>()>();
        return;
    }

    public java.lang.String getText()
    {
        org.apache.fop.pdf.PDFText this;
        java.lang.String $r0;

        this := @this: org.apache.fop.pdf.PDFText;
        $r0 = this.<org.apache.fop.pdf.PDFText: java.lang.String text>;
        return $r0;
    }

    public void setText(java.lang.String)
    {
        org.apache.fop.pdf.PDFText this;
        java.lang.String text;

        this := @this: org.apache.fop.pdf.PDFText;
        text := @parameter0: java.lang.String;
        this.<org.apache.fop.pdf.PDFText: java.lang.String text> = text;
        return;
    }

    protected java.lang.String toPDFString()
    {
        org.apache.fop.pdf.PDFText this;
        java.lang.StringBuffer sb, $r2;
        java.lang.String $r0, $r3;
        java.lang.IllegalArgumentException $r1;

        this := @this: org.apache.fop.pdf.PDFText;
        $r0 = virtualinvoke this.<org.apache.fop.pdf.PDFText: java.lang.String getText()>();
        if $r0 != null goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The text of this PDFText must not be empty");
        throw $r1;

     label0:
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>(64);
        sb = $r2;
        $r3 = virtualinvoke this.<org.apache.fop.pdf.PDFText: java.lang.String getObjectID()>();
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");
        $r3 = virtualinvoke this.<org.apache.fop.pdf.PDFText: java.lang.String getText()>();
        $r3 = staticinvoke <org.apache.fop.pdf.PDFText: java.lang.String escapeText(java.lang.String)>($r3);
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nendobj\n");
        $r0 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r0;
    }

    public static final java.lang.String escapeText(java.lang.String)
    {
        java.lang.String text, $r0;

        text := @parameter0: java.lang.String;
        $r0 = staticinvoke <org.apache.fop.pdf.PDFText: java.lang.String escapeText(java.lang.String,boolean)>(text, 0);
        return $r0;
    }

    public static final java.lang.String escapeText(java.lang.String, boolean)
    {
        java.lang.String text, $r2, $r4;
        boolean forceHexMode, unicode, hexMode;
        int i, c, l, $i0, $i2;
        byte[] uniBytes;
        java.io.UnsupportedEncodingException uee, $r0;
        java.lang.StringBuffer result, $r3;
        char ch, high, low, $c1;
        org.apache.avalon.framework.CascadingRuntimeException $r1;
        java.lang.IllegalStateException $r5;

        text := @parameter0: java.lang.String;
        forceHexMode := @parameter1: boolean;
        if text == null goto label16;

        $i0 = virtualinvoke text.<java.lang.String: int length()>();
        if $i0 <= 0 goto label16;

        unicode = 0;
        hexMode = 0;
        if forceHexMode == 0 goto label0;

        hexMode = 1;
        goto label3;

     label0:
        i = 0;
        c = virtualinvoke text.<java.lang.String: int length()>();

     label1:
        if i >= c goto label3;

        $c1 = virtualinvoke text.<java.lang.String: char charAt(int)>(i);
        if $c1 < 128 goto label2;

        unicode = 1;
        hexMode = 1;
        goto label3;

     label2:
        i = i + 1;
        goto label1;

     label3:
        if hexMode == 0 goto label8;

     label4:
        uniBytes = virtualinvoke text.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-16");

     label5:
        goto label7;

     label6:
        $r0 := @caughtexception;
        uee = $r0;
        $r1 = new org.apache.avalon.framework.CascadingRuntimeException;
        specialinvoke $r1.<org.apache.avalon.framework.CascadingRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Incompatible VM", uee);
        throw $r1;

     label7:
        $r2 = staticinvoke <org.apache.fop.pdf.PDFText: java.lang.String toHex(byte[])>(uniBytes);
        return $r2;

     label8:
        $r3 = new java.lang.StringBuffer;
        $i2 = virtualinvoke text.<java.lang.String: int length()>();
        $i2 = $i2 * 2;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>(int)>($i2);
        result = $r3;
        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");
        l = virtualinvoke text.<java.lang.String: int length()>();
        if unicode == 0 goto label11;

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\376\\377");
        i = 0;

     label9:
        if i >= l goto label10;

        ch = virtualinvoke text.<java.lang.String: char charAt(int)>(i);
        $c1 = ch & 65280;
        high = $c1 >>> 8;
        low = ch & 255;
        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\");
        $r4 = staticinvoke <java.lang.Integer: java.lang.String toOctalString(int)>(high);
        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);
        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\");
        $r4 = staticinvoke <java.lang.Integer: java.lang.String toOctalString(int)>(low);
        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);
        i = i + 1;
        goto label9;

     label10:
        goto label15;

     label11:
        i = 0;

     label12:
        if i >= l goto label15;

        ch = virtualinvoke text.<java.lang.String: char charAt(int)>(i);
        if ch >= 256 goto label13;

        staticinvoke <org.apache.fop.pdf.PDFText: void escapeStringChar(char,java.lang.StringBuffer)>(ch, result);
        goto label14;

     label13:
        $r5 = new java.lang.IllegalStateException;
        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can only treat text in 8-bit ASCII/PDFEncoding");
        throw $r5;

     label14:
        i = i + 1;
        goto label12;

     label15:
        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");
        $r2 = virtualinvoke result.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r2;

     label16:
        return "()";

        catch java.io.UnsupportedEncodingException from label4 to label5 with label6;
    }

    public static final java.lang.String toHex(byte[], boolean)
    {
        byte[] data;
        boolean brackets;
        java.lang.StringBuffer $r0, sb;
        int i, $i0, $i1;
        char[] $r1;
        byte $b2;
        char $c3;
        java.lang.String $r2;

        data := @parameter0: byte[];
        brackets := @parameter1: boolean;
        $r0 = new java.lang.StringBuffer;
        $i0 = lengthof data;
        $i0 = $i0 * 2;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>($i0);
        sb = $r0;
        if brackets == 0 goto label0;

        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<");

     label0:
        i = 0;

     label1:
        $i1 = lengthof data;
        if i >= $i1 goto label2;

        $r1 = <org.apache.fop.pdf.PDFText: char[] DIGITS>;
        $b2 = data[i];
        $b2 = $b2 >>> 4;
        $b2 = $b2 & 15;
        $c3 = $r1[$b2];
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);
        $r1 = <org.apache.fop.pdf.PDFText: char[] DIGITS>;
        $b2 = data[i];
        $b2 = $b2 & 15;
        $c3 = $r1[$b2];
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);
        i = i + 1;
        goto label1;

     label2:
        if brackets == 0 goto label3;

        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

     label3:
        $r2 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r2;
    }

    public static final java.lang.String toHex(byte[])
    {
        byte[] data;
        java.lang.String $r0;

        data := @parameter0: byte[];
        $r0 = staticinvoke <org.apache.fop.pdf.PDFText: java.lang.String toHex(byte[],boolean)>(data, 1);
        return $r0;
    }

    public static final byte[] toUTF16(java.lang.String)
    {
        java.lang.String text;
        java.io.UnsupportedEncodingException uee, $r1;
        byte[] $r0;
        org.apache.avalon.framework.CascadingRuntimeException $r2;

        text := @parameter0: java.lang.String;

     label0:
        $r0 = virtualinvoke text.<java.lang.String: byte[] getBytes(java.lang.String)>("UnicodeBig");

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        uee = $r1;
        $r2 = new org.apache.avalon.framework.CascadingRuntimeException;
        specialinvoke $r2.<org.apache.avalon.framework.CascadingRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Incompatible VM", uee);
        throw $r2;

        catch java.io.UnsupportedEncodingException from label0 to label1 with label2;
    }

    public static final java.lang.String toUnicodeHex(char)
    {
        char c, $c2;
        java.lang.StringBuffer $r0, buf;
        char[] a, $r1, $r5;
        byte[] uniBytes;
        java.io.UnsupportedEncodingException uee, $r3;
        int i, $i0;
        java.lang.String $r2;
        org.apache.avalon.framework.CascadingRuntimeException $r4;
        byte $b1;

        c := @parameter0: char;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(4);
        buf = $r0;

     label0:
        $r1 = newarray (char)[1];
        $r1[0] = c;
        a = $r1;
        $r2 = new java.lang.String;
        specialinvoke $r2.<java.lang.String: void <init>(char[])>(a);
        uniBytes = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-16BE");

     label1:
        goto label3;

     label2:
        $r3 := @caughtexception;
        uee = $r3;
        $r4 = new org.apache.avalon.framework.CascadingRuntimeException;
        specialinvoke $r4.<org.apache.avalon.framework.CascadingRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Incompatible VM", uee);
        throw $r4;

     label3:
        i = 0;

     label4:
        $i0 = lengthof uniBytes;
        if i >= $i0 goto label5;

        $r5 = <org.apache.fop.pdf.PDFText: char[] DIGITS>;
        $b1 = uniBytes[i];
        $b1 = $b1 >>> 4;
        $b1 = $b1 & 15;
        $c2 = $r5[$b1];
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);
        $r5 = <org.apache.fop.pdf.PDFText: char[] DIGITS>;
        $b1 = uniBytes[i];
        $b1 = $b1 & 15;
        $c2 = $r5[$b1];
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);
        i = i + 1;
        goto label4;

     label5:
        $r2 = virtualinvoke buf.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r2;

        catch java.io.UnsupportedEncodingException from label0 to label1 with label2;
    }

    public static final java.lang.String escapeString(java.lang.String)
    {
        java.lang.String s, $r1;
        java.lang.StringBuffer sb, $r0;
        int i, $i0, $i1;
        char c;

        s := @parameter0: java.lang.String;
        if s == null goto label0;

        $i0 = virtualinvoke s.<java.lang.String: int length()>();
        if $i0 != 0 goto label1;

     label0:
        return "()";

     label1:
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(64);
        sb = $r0;
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");
        i = 0;

     label2:
        $i1 = virtualinvoke s.<java.lang.String: int length()>();
        if i >= $i1 goto label3;

        c = virtualinvoke s.<java.lang.String: char charAt(int)>(i);
        staticinvoke <org.apache.fop.pdf.PDFText: void escapeStringChar(char,java.lang.StringBuffer)>(c, sb);
        i = i + 1;
        goto label2;

     label3:
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");
        $r1 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r1;
    }

    public static final void escapeStringChar(char, java.lang.StringBuffer)
    {
        char c;
        java.lang.StringBuffer target;
        java.lang.String $r1;

        c := @parameter0: char;
        target := @parameter1: java.lang.StringBuffer;
        if c <= 127 goto label0;

        virtualinvoke target.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\");
        $r1 = staticinvoke <java.lang.Integer: java.lang.String toOctalString(int)>(c);
        virtualinvoke target.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);
        goto label10;

     label0:
        lookupswitch(c)
        {
            case 8: goto label4;
            case 9: goto label3;
            case 10: goto label1;
            case 12: goto label5;
            case 13: goto label2;
            case 40: goto label7;
            case 41: goto label8;
            case 92: goto label6;
            default: goto label9;
        };

     label1:
        virtualinvoke target.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\n");
        goto label10;

     label2:
        virtualinvoke target.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\r");
        goto label10;

     label3:
        virtualinvoke target.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\t");
        goto label10;

     label4:
        virtualinvoke target.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\b");
        goto label10;

     label5:
        virtualinvoke target.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\f");
        goto label10;

     label6:
        virtualinvoke target.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\\\");
        goto label10;

     label7:
        virtualinvoke target.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\(");
        goto label10;

     label8:
        virtualinvoke target.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\)");
        goto label10;

     label9:
        virtualinvoke target.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c);

     label10:
        return;
    }

    public static final byte[] escapeByteArray(byte[])
    {
        byte[] data, $r1;
        java.io.ByteArrayOutputStream $r0, bout;
        int i, $i0, $i1;
        byte b;

        data := @parameter0: byte[];
        $r0 = new java.io.ByteArrayOutputStream;
        $i0 = lengthof data;
        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>(int)>($i0);
        bout = $r0;
        virtualinvoke bout.<java.io.ByteArrayOutputStream: void write(int)>(40);
        i = 0;

     label0:
        $i1 = lengthof data;
        if i >= $i1 goto label11;

        b = data[i];
        lookupswitch(b)
        {
            case 8: goto label4;
            case 9: goto label3;
            case 10: goto label1;
            case 12: goto label5;
            case 13: goto label2;
            case 40: goto label7;
            case 41: goto label8;
            case 92: goto label6;
            default: goto label9;
        };

     label1:
        virtualinvoke bout.<java.io.ByteArrayOutputStream: void write(int)>(92);
        virtualinvoke bout.<java.io.ByteArrayOutputStream: void write(int)>(110);
        goto label10;

     label2:
        virtualinvoke bout.<java.io.ByteArrayOutputStream: void write(int)>(92);
        virtualinvoke bout.<java.io.ByteArrayOutputStream: void write(int)>(114);
        goto label10;

     label3:
        virtualinvoke bout.<java.io.ByteArrayOutputStream: void write(int)>(92);
        virtualinvoke bout.<java.io.ByteArrayOutputStream: void write(int)>(116);
        goto label10;

     label4:
        virtualinvoke bout.<java.io.ByteArrayOutputStream: void write(int)>(92);
        virtualinvoke bout.<java.io.ByteArrayOutputStream: void write(int)>(98);
        goto label10;

     label5:
        virtualinvoke bout.<java.io.ByteArrayOutputStream: void write(int)>(92);
        virtualinvoke bout.<java.io.ByteArrayOutputStream: void write(int)>(102);
        goto label10;

     label6:
        virtualinvoke bout.<java.io.ByteArrayOutputStream: void write(int)>(92);
        virtualinvoke bout.<java.io.ByteArrayOutputStream: void write(int)>(92);
        goto label10;

     label7:
        virtualinvoke bout.<java.io.ByteArrayOutputStream: void write(int)>(92);
        virtualinvoke bout.<java.io.ByteArrayOutputStream: void write(int)>(40);
        goto label10;

     label8:
        virtualinvoke bout.<java.io.ByteArrayOutputStream: void write(int)>(92);
        virtualinvoke bout.<java.io.ByteArrayOutputStream: void write(int)>(41);
        goto label10;

     label9:
        virtualinvoke bout.<java.io.ByteArrayOutputStream: void write(int)>(b);

     label10:
        i = i + 1;
        goto label0;

     label11:
        virtualinvoke bout.<java.io.ByteArrayOutputStream: void write(int)>(41);
        $r1 = virtualinvoke bout.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();
        return $r1;
    }

    static void <clinit>()
    {
        char[] $r0;

        $r0 = newarray (char)[16];
        $r0[0] = 48;
        $r0[1] = 49;
        $r0[2] = 50;
        $r0[3] = 51;
        $r0[4] = 52;
        $r0[5] = 53;
        $r0[6] = 54;
        $r0[7] = 55;
        $r0[8] = 56;
        $r0[9] = 57;
        $r0[10] = 65;
        $r0[11] = 66;
        $r0[12] = 67;
        $r0[13] = 68;
        $r0[14] = 69;
        $r0[15] = 70;
        <org.apache.fop.pdf.PDFText: char[] DIGITS> = $r0;
        return;
    }
}
