public class org.apache.fop.svg.PDFGraphics2D extends org.apache.xmlgraphics.java2d.AbstractGraphics2D
{
    private static final java.awt.geom.AffineTransform IDENTITY_TRANSFORM;
    private static final int DEC;
    static final int OPAQUE;
    protected org.apache.fop.pdf.PDFDocument pdfDoc;
    protected org.apache.fop.pdf.PDFResourceContext resourceContext;
    protected java.lang.String pageRef;
    protected org.apache.fop.pdf.PDFState graphicsState;
    protected int baseLevel;
    protected int nativeCount;
    protected org.apache.fop.fonts.FontInfo fontInfo;
    protected org.apache.fop.fonts.Font ovFontState;
    protected java.io.StringWriter currentStream;
    protected java.lang.String currentFontName;
    protected float currentFontSize;
    protected java.io.OutputStream outputStream;
    private java.awt.Graphics2D fmg;

    public void <init>(boolean, org.apache.fop.fonts.FontInfo, org.apache.fop.pdf.PDFDocument, org.apache.fop.pdf.PDFResourceContext, java.lang.String, java.lang.String, float)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        boolean textAsShapes;
        org.apache.fop.fonts.FontInfo fi;
        org.apache.fop.pdf.PDFDocument doc;
        org.apache.fop.pdf.PDFResourceContext page;
        java.lang.String pref, font;
        float size;
        org.apache.fop.pdf.PDFState $r0;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        textAsShapes := @parameter0: boolean;
        fi := @parameter1: org.apache.fop.fonts.FontInfo;
        doc := @parameter2: org.apache.fop.pdf.PDFDocument;
        page := @parameter3: org.apache.fop.pdf.PDFResourceContext;
        pref := @parameter4: java.lang.String;
        font := @parameter5: java.lang.String;
        size := @parameter6: float;
        specialinvoke this.<org.apache.fop.svg.PDFGraphics2D: void <init>(boolean)>(textAsShapes);
        this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc> = doc;
        this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFResourceContext resourceContext> = page;
        this.<org.apache.fop.svg.PDFGraphics2D: java.lang.String currentFontName> = font;
        this.<org.apache.fop.svg.PDFGraphics2D: float currentFontSize> = size;
        this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.fonts.FontInfo fontInfo> = fi;
        this.<org.apache.fop.svg.PDFGraphics2D: java.lang.String pageRef> = pref;
        $r0 = new org.apache.fop.pdf.PDFState;
        specialinvoke $r0.<org.apache.fop.pdf.PDFState: void <init>()>();
        this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFState graphicsState> = $r0;
        return;
    }

    protected void <init>(boolean)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        boolean textAsShapes;
        java.awt.image.BufferedImage bi, $r1;
        java.io.StringWriter $r0;
        java.awt.Graphics2D $r2;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        textAsShapes := @parameter0: boolean;
        specialinvoke this.<org.apache.xmlgraphics.java2d.AbstractGraphics2D: void <init>(boolean)>(textAsShapes);
        this.<org.apache.fop.svg.PDFGraphics2D: int baseLevel> = 0;
        this.<org.apache.fop.svg.PDFGraphics2D: int nativeCount> = 0;
        this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.fonts.Font ovFontState> = null;
        $r0 = new java.io.StringWriter;
        specialinvoke $r0.<java.io.StringWriter: void <init>()>();
        this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream> = $r0;
        this.<org.apache.fop.svg.PDFGraphics2D: java.io.OutputStream outputStream> = null;
        $r1 = new java.awt.image.BufferedImage;
        specialinvoke $r1.<java.awt.image.BufferedImage: void <init>(int,int,int)>(1, 1, 2);
        bi = $r1;
        $r2 = virtualinvoke bi.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();
        this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Graphics2D fmg> = $r2;
        return;
    }

    public void <init>(org.apache.fop.svg.PDFGraphics2D)
    {
        org.apache.fop.svg.PDFGraphics2D this, g;
        java.awt.image.BufferedImage bi, $r1;
        java.io.StringWriter $r0;
        java.awt.Graphics2D $r2;
        org.apache.fop.pdf.PDFDocument $r3;
        org.apache.fop.pdf.PDFResourceContext $r4;
        java.lang.String $r5;
        float $f0;
        org.apache.fop.fonts.FontInfo $r6;
        org.apache.fop.pdf.PDFState $r7;
        int $i0;
        java.io.OutputStream $r8;
        org.apache.fop.fonts.Font $r9;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        g := @parameter0: org.apache.fop.svg.PDFGraphics2D;
        specialinvoke this.<org.apache.xmlgraphics.java2d.AbstractGraphics2D: void <init>(org.apache.xmlgraphics.java2d.AbstractGraphics2D)>(g);
        this.<org.apache.fop.svg.PDFGraphics2D: int baseLevel> = 0;
        this.<org.apache.fop.svg.PDFGraphics2D: int nativeCount> = 0;
        this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.fonts.Font ovFontState> = null;
        $r0 = new java.io.StringWriter;
        specialinvoke $r0.<java.io.StringWriter: void <init>()>();
        this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream> = $r0;
        this.<org.apache.fop.svg.PDFGraphics2D: java.io.OutputStream outputStream> = null;
        $r1 = new java.awt.image.BufferedImage;
        specialinvoke $r1.<java.awt.image.BufferedImage: void <init>(int,int,int)>(1, 1, 2);
        bi = $r1;
        $r2 = virtualinvoke bi.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();
        this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Graphics2D fmg> = $r2;
        $r3 = g.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc> = $r3;
        $r4 = g.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFResourceContext resourceContext>;
        this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFResourceContext resourceContext> = $r4;
        $r5 = g.<org.apache.fop.svg.PDFGraphics2D: java.lang.String currentFontName>;
        this.<org.apache.fop.svg.PDFGraphics2D: java.lang.String currentFontName> = $r5;
        $f0 = g.<org.apache.fop.svg.PDFGraphics2D: float currentFontSize>;
        this.<org.apache.fop.svg.PDFGraphics2D: float currentFontSize> = $f0;
        $r6 = g.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.fonts.FontInfo fontInfo>;
        this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.fonts.FontInfo fontInfo> = $r6;
        $r5 = g.<org.apache.fop.svg.PDFGraphics2D: java.lang.String pageRef>;
        this.<org.apache.fop.svg.PDFGraphics2D: java.lang.String pageRef> = $r5;
        $r7 = g.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFState graphicsState>;
        this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFState graphicsState> = $r7;
        $r0 = g.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream> = $r0;
        $i0 = g.<org.apache.fop.svg.PDFGraphics2D: int nativeCount>;
        this.<org.apache.fop.svg.PDFGraphics2D: int nativeCount> = $i0;
        $r8 = g.<org.apache.fop.svg.PDFGraphics2D: java.io.OutputStream outputStream>;
        this.<org.apache.fop.svg.PDFGraphics2D: java.io.OutputStream outputStream> = $r8;
        $r9 = g.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.fonts.Font ovFontState>;
        this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.fonts.Font ovFontState> = $r9;
        return;
    }

    public java.awt.Graphics create()
    {
        org.apache.fop.svg.PDFGraphics2D this, $r0;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        $r0 = new org.apache.fop.svg.PDFGraphics2D;
        specialinvoke $r0.<org.apache.fop.svg.PDFGraphics2D: void <init>(org.apache.fop.svg.PDFGraphics2D)>(this);
        return $r0;
    }

    protected void handleIOException(java.io.IOException)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.io.IOException ioe;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        ioe := @parameter0: java.io.IOException;
        virtualinvoke ioe.<java.io.IOException: void printStackTrace()>();
        return;
    }

    protected void preparePainting()
    {
        org.apache.fop.svg.PDFGraphics2D this;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        return;
    }

    public void setPDFState(org.apache.fop.pdf.PDFState)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        org.apache.fop.pdf.PDFState state, $r0;
        int $i0;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        state := @parameter0: org.apache.fop.pdf.PDFState;
        this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFState graphicsState> = state;
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFState graphicsState>;
        $i0 = virtualinvoke $r0.<org.apache.fop.pdf.PDFState: int getStackLevel()>();
        this.<org.apache.fop.svg.PDFGraphics2D: int baseLevel> = $i0;
        return;
    }

    public void setOutputStream(java.io.OutputStream)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.io.OutputStream os;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        os := @parameter0: java.io.OutputStream;
        this.<org.apache.fop.svg.PDFGraphics2D: java.io.OutputStream outputStream> = os;
        return;
    }

    public java.lang.String getString()
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.io.StringWriter $r0;
        java.lang.String $r1;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r1 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();
        return $r1;
    }

    public java.lang.StringBuffer getBuffer()
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.io.StringWriter $r0;
        java.lang.StringBuffer $r1;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r1 = virtualinvoke $r0.<java.io.StringWriter: java.lang.StringBuffer getBuffer()>();
        return $r1;
    }

    public void setGraphicContext(org.apache.xmlgraphics.java2d.GraphicContext)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        org.apache.xmlgraphics.java2d.GraphicContext c;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        c := @parameter0: org.apache.xmlgraphics.java2d.GraphicContext;
        this.<org.apache.fop.svg.PDFGraphics2D: org.apache.xmlgraphics.java2d.GraphicContext gc> = c;
        specialinvoke this.<org.apache.fop.svg.PDFGraphics2D: void setPrivateHints()>();
        return;
    }

    private void setPrivateHints()
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.awt.RenderingHints$Key $r0;
        java.lang.Object $r1;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        $r0 = <org.apache.batik.ext.awt.RenderingHintsKeyExt: java.awt.RenderingHints$Key KEY_AVOID_TILE_PAINTING>;
        $r1 = <org.apache.batik.ext.awt.RenderingHintsKeyExt: java.lang.Object VALUE_AVOID_TILE_PAINTING_ON>;
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r0, $r1);
        return;
    }

    public void setOverrideFontState(org.apache.fop.fonts.Font)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        org.apache.fop.fonts.Font infont;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        infont := @parameter0: org.apache.fop.fonts.Font;
        this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.fonts.Font ovFontState> = infont;
        return;
    }

    private void concatMatrix(double[])
    {
        org.apache.fop.svg.PDFGraphics2D this;
        double[] matrix;
        java.lang.StringBuffer $r0;
        java.io.StringWriter $r1;
        double $d0;
        java.lang.String $r2, $r3;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        matrix := @parameter0: double[];
        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $d0 = matrix[0];
        $r2 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d0, 8);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d0 = matrix[1];
        $r2 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d0, 8);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d0 = matrix[2];
        $r2 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d0, 8);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d0 = matrix[3];
        $r2 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d0, 8);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d0 = matrix[4];
        $r2 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d0, 8);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d0 = matrix[5];
        $r2 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d0, 8);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" cm\n");
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r1.<java.io.StringWriter: void write(java.lang.String)>($r3);
        return;
    }

    private void concatMatrix(java.awt.geom.AffineTransform)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.awt.geom.AffineTransform transform;
        double[] matrix;
        boolean $z0;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        transform := @parameter0: java.awt.geom.AffineTransform;
        $z0 = virtualinvoke transform.<java.awt.geom.AffineTransform: boolean isIdentity()>();
        if $z0 != 0 goto label0;

        matrix = newarray (double)[6];
        virtualinvoke transform.<java.awt.geom.AffineTransform: void getMatrix(double[])>(matrix);
        specialinvoke this.<org.apache.fop.svg.PDFGraphics2D: void concatMatrix(double[])>(matrix);

     label0:
        return;
    }

    protected java.awt.geom.AffineTransform getBaseTransform()
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.awt.geom.AffineTransform $r0, at, $r2;
        org.apache.fop.pdf.PDFState $r1;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        $r0 = new java.awt.geom.AffineTransform;
        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFState graphicsState>;
        $r2 = virtualinvoke $r1.<org.apache.fop.pdf.PDFState: java.awt.geom.AffineTransform getTransform()>();
        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r2);
        at = $r0;
        return at;
    }

    public void addLink(java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.lang.String, int)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.awt.geom.Rectangle2D bounds;
        java.awt.geom.AffineTransform trans, at;
        java.lang.String dest, pdfdest, $r6;
        int linkType;
        java.awt.Shape b;
        java.awt.Rectangle rect;
        org.apache.fop.pdf.PDFDocument $r0, $r4;
        org.apache.fop.pdf.PDFProfile $r1;
        boolean $z0;
        java.lang.StringBuffer $r2;
        org.apache.fop.pdf.PDFResourceContext $r3;
        org.apache.fop.pdf.PDFFactory $r5;
        org.apache.fop.pdf.PDFLink $r7;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        bounds := @parameter0: java.awt.geom.Rectangle2D;
        trans := @parameter1: java.awt.geom.AffineTransform;
        dest := @parameter2: java.lang.String;
        linkType := @parameter3: int;
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        $r1 = virtualinvoke $r0.<org.apache.fop.pdf.PDFDocument: org.apache.fop.pdf.PDFProfile getProfile()>();
        $z0 = virtualinvoke $r1.<org.apache.fop.pdf.PDFProfile: boolean isAnnotationAllowed()>();
        if $z0 != 0 goto label0;

        return;

     label0:
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void preparePainting()>();
        at = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.geom.AffineTransform getTransform()>();
        b = virtualinvoke at.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(bounds);
        b = virtualinvoke trans.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(b);
        if b == null goto label2;

        rect = interfaceinvoke b.<java.awt.Shape: java.awt.Rectangle getBounds()>();
        if linkType == 0 goto label1;

        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/FitR ");
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(dest);
        pdfdest = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        $r3 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFResourceContext resourceContext>;
        $r4 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        $r5 = virtualinvoke $r4.<org.apache.fop.pdf.PDFDocument: org.apache.fop.pdf.PDFFactory getFactory()>();
        $r6 = this.<org.apache.fop.svg.PDFGraphics2D: java.lang.String pageRef>;
        $r7 = virtualinvoke $r5.<org.apache.fop.pdf.PDFFactory: org.apache.fop.pdf.PDFLink makeLink(java.awt.geom.Rectangle2D,java.lang.String,java.lang.String)>(rect, $r6, pdfdest);
        virtualinvoke $r3.<org.apache.fop.pdf.PDFResourceContext: void addAnnotation(org.apache.fop.pdf.PDFObject)>($r7);
        goto label2;

     label1:
        $r3 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFResourceContext resourceContext>;
        $r4 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        $r5 = virtualinvoke $r4.<org.apache.fop.pdf.PDFDocument: org.apache.fop.pdf.PDFFactory getFactory()>();
        $r7 = virtualinvoke $r5.<org.apache.fop.pdf.PDFFactory: org.apache.fop.pdf.PDFLink makeLink(java.awt.geom.Rectangle2D,java.lang.String,int,float)>(rect, dest, linkType, 0.0F);
        virtualinvoke $r3.<org.apache.fop.pdf.PDFResourceContext: void addAnnotation(org.apache.fop.pdf.PDFObject)>($r7);

     label2:
        return;
    }

    void addNativeImage(org.apache.xmlgraphics.image.loader.Image, float, float, float, float)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        org.apache.xmlgraphics.image.loader.Image image;
        float x, y, width, height;
        java.lang.String key, $r10, $r11;
        org.apache.fop.render.pdf.AbstractImageAdapter pdfImage;
        org.apache.fop.pdf.PDFImageXObject xObject;
        java.io.IOException l9, $r16;
        java.awt.geom.AffineTransform at, $r17;
        org.apache.xmlgraphics.image.loader.ImageInfo $r0;
        java.lang.StringBuffer $r1, $r8;
        int $i0;
        boolean $z0;
        org.apache.fop.render.pdf.ImageRawJPEGAdapter $r3;
        org.apache.xmlgraphics.image.loader.impl.ImageRawJPEG $r4;
        org.apache.fop.render.pdf.ImageRawCCITTFaxAdapter $r5;
        org.apache.xmlgraphics.image.loader.impl.ImageRawCCITTFax $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.Class $r9;
        org.apache.fop.pdf.PDFDocument $r12;
        org.apache.fop.pdf.PDFResourceContext $r13;
        java.io.OutputStream $r14, $r15;
        double $d0, $d1;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        image := @parameter0: org.apache.xmlgraphics.image.loader.Image;
        x := @parameter1: float;
        y := @parameter2: float;
        width := @parameter3: float;
        height := @parameter4: float;
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void preparePainting()>();
        $r0 = interfaceinvoke image.<org.apache.xmlgraphics.image.loader.Image: org.apache.xmlgraphics.image.loader.ImageInfo getInfo()>();
        key = virtualinvoke $r0.<org.apache.xmlgraphics.image.loader.ImageInfo: java.lang.String getOriginalURI()>();
        if key != null goto label0;

        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("__AddNative_");
        $i0 = virtualinvoke this.<java.lang.Object: int hashCode()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_");
        $i0 = this.<org.apache.fop.svg.PDFGraphics2D: int nativeCount>;
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);
        key = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        $i0 = this.<org.apache.fop.svg.PDFGraphics2D: int nativeCount>;
        $i0 = $i0 + 1;
        this.<org.apache.fop.svg.PDFGraphics2D: int nativeCount> = $i0;

     label0:
        $z0 = image instanceof org.apache.xmlgraphics.image.loader.impl.ImageRawJPEG;
        if $z0 == 0 goto label1;

        $r3 = new org.apache.fop.render.pdf.ImageRawJPEGAdapter;
        $r4 = (org.apache.xmlgraphics.image.loader.impl.ImageRawJPEG) image;
        specialinvoke $r3.<org.apache.fop.render.pdf.ImageRawJPEGAdapter: void <init>(org.apache.xmlgraphics.image.loader.impl.ImageRawJPEG,java.lang.String)>($r4, key);
        pdfImage = $r3;
        goto label3;

     label1:
        $z0 = image instanceof org.apache.xmlgraphics.image.loader.impl.ImageRawCCITTFax;
        if $z0 == 0 goto label2;

        $r5 = new org.apache.fop.render.pdf.ImageRawCCITTFaxAdapter;
        $r6 = (org.apache.xmlgraphics.image.loader.impl.ImageRawCCITTFax) image;
        specialinvoke $r5.<org.apache.fop.render.pdf.ImageRawCCITTFaxAdapter: void <init>(org.apache.xmlgraphics.image.loader.impl.ImageRawCCITTFax,java.lang.String)>($r6, key);
        pdfImage = $r5;
        goto label3;

     label2:
        $r7 = new java.lang.IllegalArgumentException;
        $r8 = new java.lang.StringBuffer;
        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported Image subclass: ");
        $r9 = virtualinvoke image.<java.lang.Object: java.lang.Class getClass()>();
        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);
        $r11 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);
        throw $r7;

     label3:
        $r12 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        $r13 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFResourceContext resourceContext>;
        xObject = virtualinvoke $r12.<org.apache.fop.pdf.PDFDocument: org.apache.fop.pdf.PDFImageXObject addImage(org.apache.fop.pdf.PDFResourceContext,org.apache.fop.pdf.PDFImage)>($r13, pdfImage);
        $r14 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.OutputStream outputStream>;
        if $r14 == null goto label7;

     label4:
        $r12 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        $r15 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.OutputStream outputStream>;
        virtualinvoke $r12.<org.apache.fop.pdf.PDFDocument: void output(java.io.OutputStream)>($r15);

     label5:
        goto label7;

     label6:
        $r16 := @caughtexception;
        l9 = $r16;

     label7:
        $r17 = new java.awt.geom.AffineTransform;
        specialinvoke $r17.<java.awt.geom.AffineTransform: void <init>()>();
        at = $r17;
        $d0 = (double) x;
        $d1 = (double) y;
        virtualinvoke at.<java.awt.geom.AffineTransform: void translate(double,double)>($d0, $d1);
        specialinvoke this.<org.apache.fop.svg.PDFGraphics2D: void useXObject(org.apache.fop.pdf.PDFXObject,java.awt.geom.AffineTransform,float,float)>(xObject, at, width, height);
        return;

        catch java.io.IOException from label4 to label5 with label6;
    }

    public boolean drawImage(java.awt.Image, int, int, java.awt.image.ImageObserver)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.awt.Image img;
        int x, y, width, height;
        java.awt.image.ImageObserver observer;
        boolean $z0;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        img := @parameter0: java.awt.Image;
        x := @parameter1: int;
        y := @parameter2: int;
        observer := @parameter3: java.awt.image.ImageObserver;
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void preparePainting()>();
        width = virtualinvoke img.<java.awt.Image: int getWidth(java.awt.image.ImageObserver)>(observer);
        height = virtualinvoke img.<java.awt.Image: int getHeight(java.awt.image.ImageObserver)>(observer);
        if width == -1 goto label0;

        if height != -1 goto label1;

     label0:
        return 0;

     label1:
        $z0 = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: boolean drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)>(img, x, y, width, height, observer);
        return $z0;
    }

    private java.awt.image.BufferedImage buildBufferedImage(java.awt.Dimension)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.awt.Dimension size;
        java.awt.image.BufferedImage $r0;
        int $i0, $i1;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        size := @parameter0: java.awt.Dimension;
        $r0 = new java.awt.image.BufferedImage;
        $i0 = size.<java.awt.Dimension: int width>;
        $i1 = size.<java.awt.Dimension: int height>;
        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, 2);
        return $r0;
    }

    public boolean drawImage(java.awt.Image, int, int, int, int, java.awt.image.ImageObserver)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.awt.Image img;
        int x, y, width, height, $i0, $i1, $i2;
        java.awt.image.ImageObserver observer;
        java.lang.String key, $r1;
        org.apache.fop.pdf.PDFXObject xObject;
        java.awt.Dimension size, $r3;
        java.awt.image.BufferedImage buf;
        java.awt.Graphics2D g;
        java.awt.geom.AffineTransform at, $r11;
        java.lang.StringBuffer $r0;
        org.apache.fop.pdf.PDFDocument $r2;
        java.awt.AlphaComposite $r4;
        java.awt.Color $r5;
        java.awt.Rectangle $r6;
        org.apache.xmlgraphics.java2d.GraphicContext $r7;
        java.awt.Composite $r8;
        boolean $z0;
        org.apache.fop.pdf.PDFResourceContext $r9;
        org.apache.fop.pdf.PDFResources $r10;
        double $d0, $d1;
        float $f0, $f1;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        img := @parameter0: java.awt.Image;
        x := @parameter1: int;
        y := @parameter2: int;
        width := @parameter3: int;
        height := @parameter4: int;
        observer := @parameter5: java.awt.image.ImageObserver;
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void preparePainting()>();
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("TempImage:");
        $r1 = virtualinvoke img.<java.lang.Object: java.lang.String toString()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);
        key = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        $r2 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        xObject = virtualinvoke $r2.<org.apache.fop.pdf.PDFDocument: org.apache.fop.pdf.PDFXObject getXObject(java.lang.String)>(key);
        if xObject != null goto label1;

        $r3 = new java.awt.Dimension;
        specialinvoke $r3.<java.awt.Dimension: void <init>(int,int)>(width, height);
        size = $r3;
        buf = specialinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.image.BufferedImage buildBufferedImage(java.awt.Dimension)>(size);
        g = virtualinvoke buf.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();
        $r4 = <java.awt.AlphaComposite: java.awt.AlphaComposite SrcOver>;
        virtualinvoke g.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r4);
        $r5 = new java.awt.Color;
        specialinvoke $r5.<java.awt.Color: void <init>(int,int,int,int)>(1, 1, 1, 0);
        virtualinvoke g.<java.awt.Graphics2D: void setBackground(java.awt.Color)>($r5);
        $r5 = new java.awt.Color;
        specialinvoke $r5.<java.awt.Color: void <init>(int,int,int,int)>(1, 1, 1, 0);
        virtualinvoke g.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r5);
        virtualinvoke g.<java.awt.Graphics2D: void fillRect(int,int,int,int)>(0, 0, width, height);
        $r6 = new java.awt.Rectangle;
        $i0 = virtualinvoke buf.<java.awt.image.BufferedImage: int getWidth()>();
        $i1 = virtualinvoke buf.<java.awt.image.BufferedImage: int getHeight()>();
        specialinvoke $r6.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, $i0, $i1);
        virtualinvoke g.<java.awt.Graphics2D: void clip(java.awt.Shape)>($r6);
        $r7 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.xmlgraphics.java2d.GraphicContext gc>;
        $r8 = virtualinvoke $r7.<org.apache.xmlgraphics.java2d.GraphicContext: java.awt.Composite getComposite()>();
        virtualinvoke g.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r8);
        $i2 = virtualinvoke buf.<java.awt.image.BufferedImage: int getWidth()>();
        $i0 = virtualinvoke buf.<java.awt.image.BufferedImage: int getHeight()>();
        $z0 = virtualinvoke g.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)>(img, 0, 0, $i2, $i0, observer);
        if $z0 != 0 goto label0;

        return 0;

     label0:
        virtualinvoke g.<java.awt.Graphics2D: void dispose()>();
        xObject = specialinvoke this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFXObject addRenderedImage(java.lang.String,java.awt.image.RenderedImage)>(key, buf);
        goto label2;

     label1:
        $r9 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFResourceContext resourceContext>;
        $r10 = virtualinvoke $r9.<org.apache.fop.pdf.PDFResourceContext: org.apache.fop.pdf.PDFResources getPDFResources()>();
        virtualinvoke $r10.<org.apache.fop.pdf.PDFResources: void addXObject(org.apache.fop.pdf.PDFXObject)>(xObject);

     label2:
        $r11 = new java.awt.geom.AffineTransform;
        specialinvoke $r11.<java.awt.geom.AffineTransform: void <init>()>();
        at = $r11;
        $d0 = (double) x;
        $d1 = (double) y;
        virtualinvoke at.<java.awt.geom.AffineTransform: void translate(double,double)>($d0, $d1);
        $f0 = (float) width;
        $f1 = (float) height;
        specialinvoke this.<org.apache.fop.svg.PDFGraphics2D: void useXObject(org.apache.fop.pdf.PDFXObject,java.awt.geom.AffineTransform,float,float)>(xObject, at, $f0, $f1);
        return 1;
    }

    public void dispose()
    {
        org.apache.fop.svg.PDFGraphics2D this;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc> = null;
        this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.fonts.FontInfo fontInfo> = null;
        this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream> = null;
        this.<org.apache.fop.svg.PDFGraphics2D: java.lang.String currentFontName> = null;
        return;
    }

    public void draw(java.awt.Shape)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.awt.Shape s, imclip, ss;
        java.awt.Color c;
        java.awt.geom.AffineTransform trans, $r5;
        double[] tranvals;
        boolean newClip, newTransform, $z0;
        java.awt.Paint paint;
        java.awt.geom.PathIterator iter;
        int $i0, $i1;
        org.apache.fop.pdf.PDFState $r0;
        java.io.StringWriter $r1;
        java.awt.Stroke $r2, $r4;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        s := @parameter0: java.awt.Shape;
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void preparePainting()>();
        c = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Color getColor()>();
        $i0 = virtualinvoke c.<java.awt.Color: int getAlpha()>();
        if $i0 != 0 goto label0;

        return;

     label0:
        trans = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.geom.AffineTransform getTransform()>();
        tranvals = newarray (double)[6];
        virtualinvoke trans.<java.awt.geom.AffineTransform: void getMatrix(double[])>(tranvals);
        imclip = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Shape getClip()>();
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFState graphicsState>;
        newClip = virtualinvoke $r0.<org.apache.fop.pdf.PDFState: boolean checkClip(java.awt.Shape)>(imclip);
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFState graphicsState>;
        $z0 = virtualinvoke $r0.<org.apache.fop.pdf.PDFState: boolean checkTransform(java.awt.geom.AffineTransform)>(trans);
        if $z0 == 0 goto label1;

        $z0 = virtualinvoke trans.<java.awt.geom.AffineTransform: boolean isIdentity()>();
        if $z0 != 0 goto label1;

        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        newTransform = $z0;
        if newClip != 0 goto label3;

        if newTransform == 0 goto label5;

     label3:
        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r1.<java.io.StringWriter: void write(java.lang.String)>("q\n");
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFState graphicsState>;
        virtualinvoke $r0.<org.apache.fop.pdf.PDFState: void push()>();
        if newTransform == 0 goto label4;

        specialinvoke this.<org.apache.fop.svg.PDFGraphics2D: void concatMatrix(double[])>(tranvals);

     label4:
        if newClip == 0 goto label5;

        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void writeClip(java.awt.Shape)>(imclip);

     label5:
        $i1 = virtualinvoke c.<java.awt.Color: int getAlpha()>();
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void applyAlpha(int,int)>(255, $i1);
        c = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Color getColor()>();
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void applyColor(java.awt.Color,boolean)>(c, 0);
        c = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Color getBackground()>();
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void applyColor(java.awt.Color,boolean)>(c, 1);
        paint = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Paint getPaint()>();
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFState graphicsState>;
        $z0 = virtualinvoke $r0.<org.apache.fop.pdf.PDFState: boolean setPaint(java.awt.Paint)>(paint);
        if $z0 == 0 goto label8;

        $z0 = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: boolean applyPaint(java.awt.Paint,boolean)>(paint, 0);
        if $z0 != 0 goto label8;

        $r2 = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Stroke getStroke()>();
        ss = interfaceinvoke $r2.<java.awt.Stroke: java.awt.Shape createStrokedShape(java.awt.Shape)>(s);
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: boolean applyUnknownPaint(java.awt.Paint,java.awt.Shape)>(paint, ss);
        if newClip != 0 goto label6;

        if newTransform == 0 goto label7;

     label6:
        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r1.<java.io.StringWriter: void write(java.lang.String)>("Q\n");
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFState graphicsState>;
        virtualinvoke $r0.<org.apache.fop.pdf.PDFState: org.apache.fop.pdf.PDFState$Data pop()>();

     label7:
        return;

     label8:
        $r4 = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Stroke getStroke()>();
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void applyStroke(java.awt.Stroke)>($r4);
        $r5 = <org.apache.fop.svg.PDFGraphics2D: java.awt.geom.AffineTransform IDENTITY_TRANSFORM>;
        iter = interfaceinvoke s.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>($r5);
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void processPathIterator(java.awt.geom.PathIterator)>(iter);
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void doDrawing(boolean,boolean,boolean)>(0, 1, 0);
        if newClip != 0 goto label9;

        if newTransform == 0 goto label10;

     label9:
        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r1.<java.io.StringWriter: void write(java.lang.String)>("Q\n");
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFState graphicsState>;
        virtualinvoke $r0.<org.apache.fop.pdf.PDFState: org.apache.fop.pdf.PDFState$Data pop()>();

     label10:
        return;
    }

    protected void writeClip(java.awt.Shape)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.awt.Shape s;
        java.awt.geom.AffineTransform $r0;
        java.awt.geom.PathIterator iter;
        java.io.StringWriter $r1;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        s := @parameter0: java.awt.Shape;
        if s != null goto label0;

        return;

     label0:
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void preparePainting()>();
        $r0 = <org.apache.fop.svg.PDFGraphics2D: java.awt.geom.AffineTransform IDENTITY_TRANSFORM>;
        iter = interfaceinvoke s.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>($r0);
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void processPathIterator(java.awt.geom.PathIterator)>(iter);
        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r1.<java.io.StringWriter: void write(java.lang.String)>("W\n");
        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r1.<java.io.StringWriter: void write(java.lang.String)>("n\n");
        return;
    }

    protected void applyColor(java.awt.Color, boolean)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.awt.Color col, c;
        boolean fill, $z0;
        org.apache.fop.pdf.PDFColor currentColour, $r0;
        float[] cComps, $r9;
        double[] cmyk, blackMagenta;
        int i, $i0, $i1, $i2, $i3;
        org.apache.fop.pdf.PDFDocument $r1, $r5;
        java.io.StringWriter $r2;
        java.lang.String $r3;
        java.awt.color.ColorSpace $r4;
        org.apache.fop.pdf.PDFProfile $r6;
        org.apache.fop.pdf.PDFAMode $r7;
        org.apache.fop.pdf.PDFConformanceException $r8;
        float $f0;
        double $d0, $d1, $d2, $d3;
        java.lang.UnsupportedOperationException $r10;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        col := @parameter0: java.awt.Color;
        fill := @parameter1: boolean;
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void preparePainting()>();
        c = col;
        $z0 = col instanceof org.apache.fop.util.ColorExt;
        if $z0 == 0 goto label0;

        $r0 = new org.apache.fop.pdf.PDFColor;
        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        specialinvoke $r0.<org.apache.fop.pdf.PDFColor: void <init>(org.apache.fop.pdf.PDFDocument,java.awt.Color)>($r1, col);
        currentColour = $r0;
        $r2 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r3 = virtualinvoke currentColour.<org.apache.fop.pdf.PDFColor: java.lang.String getColorSpaceOut(boolean)>(fill);
        virtualinvoke $r2.<java.io.StringWriter: void write(java.lang.String)>($r3);
        goto label9;

     label0:
        $r4 = virtualinvoke c.<java.awt.Color: java.awt.color.ColorSpace getColorSpace()>();
        $i0 = virtualinvoke $r4.<java.awt.color.ColorSpace: int getType()>();
        if $i0 != 5 goto label1;

        $r0 = new org.apache.fop.pdf.PDFColor;
        $i1 = virtualinvoke c.<java.awt.Color: int getRed()>();
        $i2 = virtualinvoke c.<java.awt.Color: int getGreen()>();
        $i3 = virtualinvoke c.<java.awt.Color: int getBlue()>();
        specialinvoke $r0.<org.apache.fop.pdf.PDFColor: void <init>(int,int,int)>($i1, $i2, $i3);
        currentColour = $r0;
        $r2 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r3 = virtualinvoke currentColour.<org.apache.fop.pdf.PDFColor: java.lang.String getColorSpaceOut(boolean)>(fill);
        virtualinvoke $r2.<java.io.StringWriter: void write(java.lang.String)>($r3);
        goto label9;

     label1:
        $r4 = virtualinvoke c.<java.awt.Color: java.awt.color.ColorSpace getColorSpace()>();
        $i0 = virtualinvoke $r4.<java.awt.color.ColorSpace: int getType()>();
        if $i0 != 9 goto label5;

        $r5 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        $r6 = virtualinvoke $r5.<org.apache.fop.pdf.PDFDocument: org.apache.fop.pdf.PDFProfile getProfile()>();
        $r7 = virtualinvoke $r6.<org.apache.fop.pdf.PDFProfile: org.apache.fop.pdf.PDFAMode getPDFAMode()>();
        $z0 = virtualinvoke $r7.<org.apache.fop.pdf.PDFAMode: boolean isPDFA1LevelB()>();
        if $z0 == 0 goto label2;

        $r8 = new org.apache.fop.pdf.PDFConformanceException;
        specialinvoke $r8.<org.apache.fop.pdf.PDFConformanceException: void <init>(java.lang.String)>("PDF/A-1 does not allow mixing DeviceRGB and DeviceCMYK.");
        throw $r8;

     label2:
        $r9 = newarray (float)[3];
        cComps = virtualinvoke c.<java.awt.Color: float[] getColorComponents(float[])>($r9);
        cmyk = newarray (double)[3];
        i = 0;

     label3:
        if i >= 3 goto label4;

        $f0 = cComps[i];
        $d0 = (double) $f0;
        cmyk[i] = $d0;
        i = i + 1;
        goto label3;

     label4:
        $r0 = new org.apache.fop.pdf.PDFColor;
        $d0 = cmyk[0];
        $d1 = cmyk[1];
        $d2 = cmyk[2];
        $d3 = cmyk[3];
        specialinvoke $r0.<org.apache.fop.pdf.PDFColor: void <init>(double,double,double,double)>($d0, $d1, $d2, $d3);
        currentColour = $r0;
        $r2 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r3 = virtualinvoke currentColour.<org.apache.fop.pdf.PDFColor: java.lang.String getColorSpaceOut(boolean)>(fill);
        virtualinvoke $r2.<java.io.StringWriter: void write(java.lang.String)>($r3);
        goto label9;

     label5:
        $r4 = virtualinvoke c.<java.awt.Color: java.awt.color.ColorSpace getColorSpace()>();
        $i0 = virtualinvoke $r4.<java.awt.color.ColorSpace: int getType()>();
        if $i0 != 12 goto label8;

        $r9 = newarray (float)[1];
        cComps = virtualinvoke c.<java.awt.Color: float[] getColorComponents(float[])>($r9);
        blackMagenta = newarray (double)[1];
        i = 0;

     label6:
        if i >= 1 goto label7;

        $f0 = cComps[i];
        $d0 = (double) $f0;
        blackMagenta[i] = $d0;
        i = i + 1;
        goto label6;

     label7:
        goto label9;

     label8:
        $r10 = new java.lang.UnsupportedOperationException;
        specialinvoke $r10.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Color Space not supported by PDFGraphics2D");
        throw $r10;

     label9:
        return;
    }

    protected boolean applyPaint(java.awt.Paint, boolean)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.awt.Paint paint;
        boolean fill, $z0, $z1;
        java.awt.GradientPaint gpaint;
        org.apache.batik.ext.awt.LinearGradientPaint gp, $r1;
        org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum cycle, $r9, $r10;
        java.awt.Color[] cols, $r7;
        float[] fractions, $r6;
        java.awt.geom.AffineTransform transform, $r11, $r12, $r13;
        java.util.ArrayList theMatrix, theCoords, theExtend, theDomain, theEncode, theBounds, someColors, $r14;
        double[] mat;
        int idx, count, $i0, $i1, $i2, $i3, $i4, $i6;
        java.awt.geom.Point2D p1, p2, ac, af, $r2, $r3, $r4, $r5;
        java.awt.Color c1, cc, $r8;
        org.apache.fop.pdf.PDFColor color1, $r17, $r24;
        org.apache.fop.pdf.PDFDeviceColorSpace aColorSpace, colSpace, $r18;
        org.apache.fop.pdf.PDFPattern myPat;
        org.apache.batik.ext.awt.RadialGradientPaint rgp;
        double ar, dx, dy, d, scale, $d0, $d1, $d2, $d3, $d4;
        float offset, $f0, $f1, $f2, $f3, $f4;
        org.apache.batik.gvt.PatternPaint pp;
        java.lang.Double $r15;
        java.lang.Boolean $r16;
        org.apache.fop.pdf.PDFDocument $r19;
        org.apache.fop.pdf.PDFFactory $r20;
        org.apache.fop.pdf.PDFResourceContext $r21;
        java.io.StringWriter $r22;
        java.lang.String $r23;
        byte $b5;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        paint := @parameter0: java.awt.Paint;
        fill := @parameter1: boolean;
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void preparePainting()>();
        $z0 = paint instanceof java.awt.Color;
        if $z0 == 0 goto label0;

        return 1;

     label0:
        $z0 = paint instanceof java.awt.GradientPaint;
        if $z0 == 0 goto label3;

        gpaint = (java.awt.GradientPaint) paint;
        $r1 = new org.apache.batik.ext.awt.LinearGradientPaint;
        $r2 = virtualinvoke gpaint.<java.awt.GradientPaint: java.awt.geom.Point2D getPoint1()>();
        $d0 = virtualinvoke $r2.<java.awt.geom.Point2D: double getX()>();
        $f0 = (float) $d0;
        $r3 = virtualinvoke gpaint.<java.awt.GradientPaint: java.awt.geom.Point2D getPoint1()>();
        $d1 = virtualinvoke $r3.<java.awt.geom.Point2D: double getY()>();
        $f1 = (float) $d1;
        $r4 = virtualinvoke gpaint.<java.awt.GradientPaint: java.awt.geom.Point2D getPoint2()>();
        $d2 = virtualinvoke $r4.<java.awt.geom.Point2D: double getX()>();
        $f2 = (float) $d2;
        $r5 = virtualinvoke gpaint.<java.awt.GradientPaint: java.awt.geom.Point2D getPoint2()>();
        $d3 = virtualinvoke $r5.<java.awt.geom.Point2D: double getY()>();
        $f3 = (float) $d3;
        $r6 = newarray (float)[2];
        $r6[0] = 0.0F;
        $r6[1] = 1.0F;
        $r7 = newarray (java.awt.Color)[2];
        $r8 = virtualinvoke gpaint.<java.awt.GradientPaint: java.awt.Color getColor1()>();
        $r7[0] = $r8;
        $r8 = virtualinvoke gpaint.<java.awt.GradientPaint: java.awt.Color getColor2()>();
        $r7[1] = $r8;
        $z1 = virtualinvoke gpaint.<java.awt.GradientPaint: boolean isCyclic()>();
        if $z1 == 0 goto label1;

        $r9 = <org.apache.batik.ext.awt.LinearGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum REPEAT>;
        goto label2;

     label1:
        $r9 = <org.apache.batik.ext.awt.LinearGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum NO_CYCLE>;

     label2:
        specialinvoke $r1.<org.apache.batik.ext.awt.LinearGradientPaint: void <init>(float,float,float,float,float[],java.awt.Color[],org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum)>($f0, $f1, $f2, $f3, $r6, $r7, $r9);
        paint = $r1;

     label3:
        $z0 = paint instanceof org.apache.batik.ext.awt.LinearGradientPaint;
        if $z0 == 0 goto label11;

        gp = (org.apache.batik.ext.awt.LinearGradientPaint) paint;
        cycle = virtualinvoke gp.<org.apache.batik.ext.awt.LinearGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum getCycleMethod()>();
        $r10 = <org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum NO_CYCLE>;
        if cycle == $r10 goto label4;

        return 0;

     label4:
        cols = virtualinvoke gp.<org.apache.batik.ext.awt.LinearGradientPaint: java.awt.Color[] getColors()>();
        fractions = virtualinvoke gp.<org.apache.batik.ext.awt.LinearGradientPaint: float[] getFractions()>();
        $r11 = new java.awt.geom.AffineTransform;
        $r12 = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.geom.AffineTransform getBaseTransform()>();
        specialinvoke $r11.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r12);
        transform = $r11;
        $r13 = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.geom.AffineTransform getTransform()>();
        virtualinvoke transform.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r13);
        $r13 = virtualinvoke gp.<org.apache.batik.ext.awt.LinearGradientPaint: java.awt.geom.AffineTransform getTransform()>();
        virtualinvoke transform.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r13);
        $r14 = new java.util.ArrayList;
        specialinvoke $r14.<java.util.ArrayList: void <init>()>();
        theMatrix = $r14;
        mat = newarray (double)[6];
        virtualinvoke transform.<java.awt.geom.AffineTransform: void getMatrix(double[])>(mat);
        idx = 0;

     label5:
        $i0 = lengthof mat;
        if idx >= $i0 goto label6;

        $r15 = new java.lang.Double;
        $d1 = mat[idx];
        specialinvoke $r15.<java.lang.Double: void <init>(double)>($d1);
        interfaceinvoke theMatrix.<java.util.List: boolean add(java.lang.Object)>($r15);
        idx = idx + 1;
        goto label5;

     label6:
        p1 = virtualinvoke gp.<org.apache.batik.ext.awt.LinearGradientPaint: java.awt.geom.Point2D getStartPoint()>();
        p2 = virtualinvoke gp.<org.apache.batik.ext.awt.LinearGradientPaint: java.awt.geom.Point2D getEndPoint()>();
        $r14 = new java.util.ArrayList;
        specialinvoke $r14.<java.util.ArrayList: void <init>()>();
        theCoords = $r14;
        $r15 = new java.lang.Double;
        $d1 = virtualinvoke p1.<java.awt.geom.Point2D: double getX()>();
        specialinvoke $r15.<java.lang.Double: void <init>(double)>($d1);
        interfaceinvoke theCoords.<java.util.List: boolean add(java.lang.Object)>($r15);
        $r15 = new java.lang.Double;
        $d1 = virtualinvoke p1.<java.awt.geom.Point2D: double getY()>();
        specialinvoke $r15.<java.lang.Double: void <init>(double)>($d1);
        interfaceinvoke theCoords.<java.util.List: boolean add(java.lang.Object)>($r15);
        $r15 = new java.lang.Double;
        $d1 = virtualinvoke p2.<java.awt.geom.Point2D: double getX()>();
        specialinvoke $r15.<java.lang.Double: void <init>(double)>($d1);
        interfaceinvoke theCoords.<java.util.List: boolean add(java.lang.Object)>($r15);
        $r15 = new java.lang.Double;
        $d1 = virtualinvoke p2.<java.awt.geom.Point2D: double getY()>();
        specialinvoke $r15.<java.lang.Double: void <init>(double)>($d1);
        interfaceinvoke theCoords.<java.util.List: boolean add(java.lang.Object)>($r15);
        $r14 = new java.util.ArrayList;
        specialinvoke $r14.<java.util.ArrayList: void <init>()>();
        theExtend = $r14;
        $r16 = new java.lang.Boolean;
        specialinvoke $r16.<java.lang.Boolean: void <init>(boolean)>(1);
        interfaceinvoke theExtend.<java.util.List: boolean add(java.lang.Object)>($r16);
        $r16 = new java.lang.Boolean;
        specialinvoke $r16.<java.lang.Boolean: void <init>(boolean)>(1);
        interfaceinvoke theExtend.<java.util.List: boolean add(java.lang.Object)>($r16);
        $r14 = new java.util.ArrayList;
        specialinvoke $r14.<java.util.ArrayList: void <init>()>();
        theDomain = $r14;
        $r15 = new java.lang.Double;
        specialinvoke $r15.<java.lang.Double: void <init>(double)>(0.0);
        interfaceinvoke theDomain.<java.util.List: boolean add(java.lang.Object)>($r15);
        $r15 = new java.lang.Double;
        specialinvoke $r15.<java.lang.Double: void <init>(double)>(1.0);
        interfaceinvoke theDomain.<java.util.List: boolean add(java.lang.Object)>($r15);
        $r14 = new java.util.ArrayList;
        specialinvoke $r14.<java.util.ArrayList: void <init>()>();
        theEncode = $r14;
        $r15 = new java.lang.Double;
        specialinvoke $r15.<java.lang.Double: void <init>(double)>(0.0);
        interfaceinvoke theEncode.<java.util.List: boolean add(java.lang.Object)>($r15);
        $r15 = new java.lang.Double;
        specialinvoke $r15.<java.lang.Double: void <init>(double)>(1.0);
        interfaceinvoke theEncode.<java.util.List: boolean add(java.lang.Object)>($r15);
        $r15 = new java.lang.Double;
        specialinvoke $r15.<java.lang.Double: void <init>(double)>(0.0);
        interfaceinvoke theEncode.<java.util.List: boolean add(java.lang.Object)>($r15);
        $r15 = new java.lang.Double;
        specialinvoke $r15.<java.lang.Double: void <init>(double)>(1.0);
        interfaceinvoke theEncode.<java.util.List: boolean add(java.lang.Object)>($r15);
        $r14 = new java.util.ArrayList;
        specialinvoke $r14.<java.util.ArrayList: void <init>()>();
        theBounds = $r14;
        $r14 = new java.util.ArrayList;
        specialinvoke $r14.<java.util.ArrayList: void <init>()>();
        someColors = $r14;
        count = 0;

     label7:
        $i0 = lengthof cols;
        if count >= $i0 goto label10;

        c1 = cols[count];
        $i1 = virtualinvoke c1.<java.awt.Color: int getAlpha()>();
        if $i1 == 255 goto label8;

        return 0;

     label8:
        $r17 = new org.apache.fop.pdf.PDFColor;
        $i2 = virtualinvoke c1.<java.awt.Color: int getRed()>();
        $i3 = virtualinvoke c1.<java.awt.Color: int getGreen()>();
        $i4 = virtualinvoke c1.<java.awt.Color: int getBlue()>();
        specialinvoke $r17.<org.apache.fop.pdf.PDFColor: void <init>(int,int,int)>($i2, $i3, $i4);
        color1 = $r17;
        interfaceinvoke someColors.<java.util.List: boolean add(java.lang.Object)>(color1);
        if count <= 0 goto label9;

        $i0 = lengthof cols;
        $i0 = $i0 - 1;
        if count >= $i0 goto label9;

        $r15 = new java.lang.Double;
        $f1 = fractions[count];
        $d1 = (double) $f1;
        specialinvoke $r15.<java.lang.Double: void <init>(double)>($d1);
        interfaceinvoke theBounds.<java.util.List: boolean add(java.lang.Object)>($r15);

     label9:
        count = count + 1;
        goto label7;

     label10:
        $r18 = new org.apache.fop.pdf.PDFDeviceColorSpace;
        specialinvoke $r18.<org.apache.fop.pdf.PDFDeviceColorSpace: void <init>(int)>(2);
        aColorSpace = $r18;
        $r19 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        $r20 = virtualinvoke $r19.<org.apache.fop.pdf.PDFDocument: org.apache.fop.pdf.PDFFactory getFactory()>();
        $r21 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFResourceContext resourceContext>;
        myPat = virtualinvoke $r20.<org.apache.fop.pdf.PDFFactory: org.apache.fop.pdf.PDFPattern makeGradient(org.apache.fop.pdf.PDFResourceContext,boolean,org.apache.fop.pdf.PDFDeviceColorSpace,java.util.List,java.util.List,java.util.List,java.util.List)>($r21, 0, aColorSpace, someColors, theBounds, theCoords, theMatrix);
        $r22 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r23 = virtualinvoke myPat.<org.apache.fop.pdf.PDFPattern: java.lang.String getColorSpaceOut(boolean)>(fill);
        virtualinvoke $r22.<java.io.StringWriter: void write(java.lang.String)>($r23);
        return 1;

     label11:
        $z0 = paint instanceof org.apache.batik.ext.awt.RadialGradientPaint;
        if $z0 == 0 goto label21;

        rgp = (org.apache.batik.ext.awt.RadialGradientPaint) paint;
        cycle = virtualinvoke rgp.<org.apache.batik.ext.awt.RadialGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum getCycleMethod()>();
        $r10 = <org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum NO_CYCLE>;
        if cycle == $r10 goto label12;

        return 0;

     label12:
        $r11 = new java.awt.geom.AffineTransform;
        $r12 = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.geom.AffineTransform getBaseTransform()>();
        specialinvoke $r11.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r12);
        transform = $r11;
        $r13 = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.geom.AffineTransform getTransform()>();
        virtualinvoke transform.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r13);
        $r13 = virtualinvoke rgp.<org.apache.batik.ext.awt.RadialGradientPaint: java.awt.geom.AffineTransform getTransform()>();
        virtualinvoke transform.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r13);
        $r14 = new java.util.ArrayList;
        specialinvoke $r14.<java.util.ArrayList: void <init>()>();
        theMatrix = $r14;
        mat = newarray (double)[6];
        virtualinvoke transform.<java.awt.geom.AffineTransform: void getMatrix(double[])>(mat);
        idx = 0;

     label13:
        $i0 = lengthof mat;
        if idx >= $i0 goto label14;

        $r15 = new java.lang.Double;
        $d1 = mat[idx];
        specialinvoke $r15.<java.lang.Double: void <init>(double)>($d1);
        interfaceinvoke theMatrix.<java.util.List: boolean add(java.lang.Object)>($r15);
        idx = idx + 1;
        goto label13;

     label14:
        $f4 = virtualinvoke rgp.<org.apache.batik.ext.awt.RadialGradientPaint: float getRadius()>();
        ar = (double) $f4;
        ac = virtualinvoke rgp.<org.apache.batik.ext.awt.RadialGradientPaint: java.awt.geom.Point2D getCenterPoint()>();
        af = virtualinvoke rgp.<org.apache.batik.ext.awt.RadialGradientPaint: java.awt.geom.Point2D getFocusPoint()>();
        $r14 = new java.util.ArrayList;
        specialinvoke $r14.<java.util.ArrayList: void <init>()>();
        theCoords = $r14;
        $d4 = virtualinvoke af.<java.awt.geom.Point2D: double getX()>();
        $d0 = virtualinvoke ac.<java.awt.geom.Point2D: double getX()>();
        dx = $d4 - $d0;
        $d4 = virtualinvoke af.<java.awt.geom.Point2D: double getY()>();
        $d0 = virtualinvoke ac.<java.awt.geom.Point2D: double getY()>();
        dy = $d4 - $d0;
        $d4 = dx * dx;
        $d0 = dy * dy;
        $d4 = $d4 + $d0;
        d = staticinvoke <java.lang.Math: double sqrt(double)>($d4);
        $b5 = d cmpl ar;
        if $b5 <= 0 goto label15;

        $d4 = ar * 0.9999;
        scale = $d4 / d;
        dx = dx * scale;
        dy = dy * scale;

     label15:
        $r15 = new java.lang.Double;
        $d1 = virtualinvoke ac.<java.awt.geom.Point2D: double getX()>();
        $d1 = $d1 + dx;
        specialinvoke $r15.<java.lang.Double: void <init>(double)>($d1);
        interfaceinvoke theCoords.<java.util.List: boolean add(java.lang.Object)>($r15);
        $r15 = new java.lang.Double;
        $d1 = virtualinvoke ac.<java.awt.geom.Point2D: double getY()>();
        $d1 = $d1 + dy;
        specialinvoke $r15.<java.lang.Double: void <init>(double)>($d1);
        interfaceinvoke theCoords.<java.util.List: boolean add(java.lang.Object)>($r15);
        $r15 = new java.lang.Double;
        specialinvoke $r15.<java.lang.Double: void <init>(double)>(0.0);
        interfaceinvoke theCoords.<java.util.List: boolean add(java.lang.Object)>($r15);
        $r15 = new java.lang.Double;
        $d1 = virtualinvoke ac.<java.awt.geom.Point2D: double getX()>();
        specialinvoke $r15.<java.lang.Double: void <init>(double)>($d1);
        interfaceinvoke theCoords.<java.util.List: boolean add(java.lang.Object)>($r15);
        $r15 = new java.lang.Double;
        $d1 = virtualinvoke ac.<java.awt.geom.Point2D: double getY()>();
        specialinvoke $r15.<java.lang.Double: void <init>(double)>($d1);
        interfaceinvoke theCoords.<java.util.List: boolean add(java.lang.Object)>($r15);
        $r15 = new java.lang.Double;
        specialinvoke $r15.<java.lang.Double: void <init>(double)>(ar);
        interfaceinvoke theCoords.<java.util.List: boolean add(java.lang.Object)>($r15);
        cols = virtualinvoke rgp.<org.apache.batik.ext.awt.RadialGradientPaint: java.awt.Color[] getColors()>();
        $r14 = new java.util.ArrayList;
        specialinvoke $r14.<java.util.ArrayList: void <init>()>();
        someColors = $r14;
        count = 0;

     label16:
        $i0 = lengthof cols;
        if count >= $i0 goto label18;

        cc = cols[count];
        $i1 = virtualinvoke cc.<java.awt.Color: int getAlpha()>();
        if $i1 == 255 goto label17;

        return 0;

     label17:
        $r24 = new org.apache.fop.pdf.PDFColor;
        $i3 = virtualinvoke cc.<java.awt.Color: int getRed()>();
        $i4 = virtualinvoke cc.<java.awt.Color: int getGreen()>();
        $i6 = virtualinvoke cc.<java.awt.Color: int getBlue()>();
        specialinvoke $r24.<org.apache.fop.pdf.PDFColor: void <init>(int,int,int)>($i3, $i4, $i6);
        interfaceinvoke someColors.<java.util.List: boolean add(java.lang.Object)>($r24);
        count = count + 1;
        goto label16;

     label18:
        fractions = virtualinvoke rgp.<org.apache.batik.ext.awt.RadialGradientPaint: float[] getFractions()>();
        $r14 = new java.util.ArrayList;
        specialinvoke $r14.<java.util.ArrayList: void <init>()>();
        theBounds = $r14;
        count = 1;

     label19:
        $i0 = lengthof fractions;
        $i0 = $i0 - 1;
        if count >= $i0 goto label20;

        offset = fractions[count];
        $r15 = new java.lang.Double;
        $d1 = (double) offset;
        specialinvoke $r15.<java.lang.Double: void <init>(double)>($d1);
        interfaceinvoke theBounds.<java.util.List: boolean add(java.lang.Object)>($r15);
        count = count + 1;
        goto label19;

     label20:
        $r18 = new org.apache.fop.pdf.PDFDeviceColorSpace;
        specialinvoke $r18.<org.apache.fop.pdf.PDFDeviceColorSpace: void <init>(int)>(2);
        colSpace = $r18;
        $r19 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        $r20 = virtualinvoke $r19.<org.apache.fop.pdf.PDFDocument: org.apache.fop.pdf.PDFFactory getFactory()>();
        $r21 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFResourceContext resourceContext>;
        myPat = virtualinvoke $r20.<org.apache.fop.pdf.PDFFactory: org.apache.fop.pdf.PDFPattern makeGradient(org.apache.fop.pdf.PDFResourceContext,boolean,org.apache.fop.pdf.PDFDeviceColorSpace,java.util.List,java.util.List,java.util.List,java.util.List)>($r21, 1, colSpace, someColors, theBounds, theCoords, theMatrix);
        $r22 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r23 = virtualinvoke myPat.<org.apache.fop.pdf.PDFPattern: java.lang.String getColorSpaceOut(boolean)>(fill);
        virtualinvoke $r22.<java.io.StringWriter: void write(java.lang.String)>($r23);
        return 1;

     label21:
        $z0 = paint instanceof org.apache.batik.gvt.PatternPaint;
        if $z0 == 0 goto label22;

        pp = (org.apache.batik.gvt.PatternPaint) paint;
        $z0 = specialinvoke this.<org.apache.fop.svg.PDFGraphics2D: boolean createPattern(org.apache.batik.gvt.PatternPaint,boolean)>(pp, fill);
        return $z0;

     label22:
        return 0;
    }

    private boolean createPattern(org.apache.batik.gvt.PatternPaint, boolean)
    {
        org.apache.fop.svg.PDFGraphics2D this, pattGraphic, $r4;
        org.apache.batik.gvt.PatternPaint pp;
        boolean fill, $z0;
        org.apache.fop.fonts.FontInfo specialFontInfo, $r0;
        org.apache.fop.pdf.PDFResources res;
        org.apache.fop.pdf.PDFResourceContext context, $r3, $r17;
        org.apache.batik.gvt.GraphicsNode gn;
        java.awt.geom.Rectangle2D rect;
        java.util.ArrayList bbox, theMatrix, $r11;
        java.awt.geom.AffineTransform transform, $r13, $r14, $r15;
        double[] mat;
        int idx, $i0;
        org.apache.fop.pdf.PDFPattern myPat;
        org.apache.fop.pdf.PDFAnnotList annots;
        java.io.IOException l16, $r22;
        org.apache.fop.pdf.PDFDocument $r1, $r5, $r16;
        org.apache.fop.pdf.PDFFactory $r2;
        java.lang.String $r6, $r20;
        org.apache.xmlgraphics.java2d.GraphicContext $r7, $r8;
        java.awt.RenderingHints $r9;
        java.io.OutputStream $r10, $r21;
        java.lang.Double $r12;
        double $d0, $d1, $d2, $d3;
        java.lang.StringBuffer $r18;
        java.io.StringWriter $r19;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        pp := @parameter0: org.apache.batik.gvt.PatternPaint;
        fill := @parameter1: boolean;
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void preparePainting()>();
        $r0 = new org.apache.fop.fonts.FontInfo;
        specialinvoke $r0.<org.apache.fop.fonts.FontInfo: void <init>()>();
        specialFontInfo = $r0;
        staticinvoke <org.apache.fop.fonts.FontSetup: void setup(org.apache.fop.fonts.FontInfo,java.util.List,org.apache.fop.fonts.FontResolver)>(specialFontInfo, null, null);
        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        $r2 = virtualinvoke $r1.<org.apache.fop.pdf.PDFDocument: org.apache.fop.pdf.PDFFactory getFactory()>();
        res = virtualinvoke $r2.<org.apache.fop.pdf.PDFFactory: org.apache.fop.pdf.PDFResources makeResources()>();
        $r3 = new org.apache.fop.pdf.PDFResourceContext;
        specialinvoke $r3.<org.apache.fop.pdf.PDFResourceContext: void <init>(org.apache.fop.pdf.PDFResources)>(res);
        context = $r3;
        $r4 = new org.apache.fop.svg.PDFGraphics2D;
        $z0 = this.<org.apache.fop.svg.PDFGraphics2D: boolean textAsShapes>;
        $r5 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        $r6 = this.<org.apache.fop.svg.PDFGraphics2D: java.lang.String pageRef>;
        specialinvoke $r4.<org.apache.fop.svg.PDFGraphics2D: void <init>(boolean,org.apache.fop.fonts.FontInfo,org.apache.fop.pdf.PDFDocument,org.apache.fop.pdf.PDFResourceContext,java.lang.String,java.lang.String,float)>($z0, specialFontInfo, $r5, context, $r6, "", 0.0F);
        pattGraphic = $r4;
        $r7 = new org.apache.xmlgraphics.java2d.GraphicContext;
        specialinvoke $r7.<org.apache.xmlgraphics.java2d.GraphicContext: void <init>()>();
        virtualinvoke pattGraphic.<org.apache.fop.svg.PDFGraphics2D: void setGraphicContext(org.apache.xmlgraphics.java2d.GraphicContext)>($r7);
        $r8 = pattGraphic.<org.apache.fop.svg.PDFGraphics2D: org.apache.xmlgraphics.java2d.GraphicContext gc>;
        virtualinvoke $r8.<org.apache.xmlgraphics.java2d.GraphicContext: void validateTransformStack()>();
        $r9 = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.RenderingHints getRenderingHints()>();
        virtualinvoke pattGraphic.<org.apache.fop.svg.PDFGraphics2D: void setRenderingHints(java.util.Map)>($r9);
        $r10 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.OutputStream outputStream>;
        virtualinvoke pattGraphic.<org.apache.fop.svg.PDFGraphics2D: void setOutputStream(java.io.OutputStream)>($r10);
        gn = virtualinvoke pp.<org.apache.batik.gvt.PatternPaint: org.apache.batik.gvt.GraphicsNode getGraphicsNode()>();
        interfaceinvoke gn.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.Rectangle2D getBounds()>();
        rect = virtualinvoke pp.<org.apache.batik.gvt.PatternPaint: java.awt.geom.Rectangle2D getPatternRect()>();
        interfaceinvoke gn.<org.apache.batik.gvt.GraphicsNode: void paint(java.awt.Graphics2D)>(pattGraphic);
        $r11 = new java.util.ArrayList;
        specialinvoke $r11.<java.util.ArrayList: void <init>()>();
        bbox = $r11;
        $r12 = new java.lang.Double;
        $d0 = virtualinvoke rect.<java.awt.geom.Rectangle2D: double getX()>();
        specialinvoke $r12.<java.lang.Double: void <init>(double)>($d0);
        interfaceinvoke bbox.<java.util.List: boolean add(java.lang.Object)>($r12);
        $r12 = new java.lang.Double;
        $d0 = virtualinvoke rect.<java.awt.geom.Rectangle2D: double getHeight()>();
        $d1 = virtualinvoke rect.<java.awt.geom.Rectangle2D: double getY()>();
        $d0 = $d0 + $d1;
        specialinvoke $r12.<java.lang.Double: void <init>(double)>($d0);
        interfaceinvoke bbox.<java.util.List: boolean add(java.lang.Object)>($r12);
        $r12 = new java.lang.Double;
        $d0 = virtualinvoke rect.<java.awt.geom.Rectangle2D: double getWidth()>();
        $d1 = virtualinvoke rect.<java.awt.geom.Rectangle2D: double getX()>();
        $d0 = $d0 + $d1;
        specialinvoke $r12.<java.lang.Double: void <init>(double)>($d0);
        interfaceinvoke bbox.<java.util.List: boolean add(java.lang.Object)>($r12);
        $r12 = new java.lang.Double;
        $d0 = virtualinvoke rect.<java.awt.geom.Rectangle2D: double getY()>();
        specialinvoke $r12.<java.lang.Double: void <init>(double)>($d0);
        interfaceinvoke bbox.<java.util.List: boolean add(java.lang.Object)>($r12);
        $r13 = new java.awt.geom.AffineTransform;
        $r14 = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.geom.AffineTransform getBaseTransform()>();
        specialinvoke $r13.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r14);
        transform = $r13;
        $r15 = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.geom.AffineTransform getTransform()>();
        virtualinvoke transform.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r15);
        $r15 = virtualinvoke pp.<org.apache.batik.gvt.PatternPaint: java.awt.geom.AffineTransform getPatternTransform()>();
        virtualinvoke transform.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r15);
        $r11 = new java.util.ArrayList;
        specialinvoke $r11.<java.util.ArrayList: void <init>()>();
        theMatrix = $r11;
        mat = newarray (double)[6];
        virtualinvoke transform.<java.awt.geom.AffineTransform: void getMatrix(double[])>(mat);
        idx = 0;

     label0:
        $i0 = lengthof mat;
        if idx >= $i0 goto label1;

        $r12 = new java.lang.Double;
        $d0 = mat[idx];
        specialinvoke $r12.<java.lang.Double: void <init>(double)>($d0);
        interfaceinvoke theMatrix.<java.util.List: boolean add(java.lang.Object)>($r12);
        idx = idx + 1;
        goto label0;

     label1:
        $r16 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        virtualinvoke res.<org.apache.fop.pdf.PDFResources: void addFonts(org.apache.fop.pdf.PDFDocument,org.apache.fop.fonts.FontInfo)>($r16, specialFontInfo);
        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        $r2 = virtualinvoke $r1.<org.apache.fop.pdf.PDFDocument: org.apache.fop.pdf.PDFFactory getFactory()>();
        $r17 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFResourceContext resourceContext>;
        $d2 = virtualinvoke rect.<java.awt.geom.Rectangle2D: double getWidth()>();
        $d3 = virtualinvoke rect.<java.awt.geom.Rectangle2D: double getHeight()>();
        $r18 = virtualinvoke pattGraphic.<org.apache.fop.svg.PDFGraphics2D: java.lang.StringBuffer getBuffer()>();
        myPat = virtualinvoke $r2.<org.apache.fop.pdf.PDFFactory: org.apache.fop.pdf.PDFPattern makePattern(org.apache.fop.pdf.PDFResourceContext,int,org.apache.fop.pdf.PDFResources,int,int,java.util.List,double,double,java.util.List,java.util.List,java.lang.StringBuffer)>($r17, 1, res, 1, 1, bbox, $d2, $d3, theMatrix, null, $r18);
        $r19 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r20 = virtualinvoke myPat.<org.apache.fop.pdf.PDFPattern: java.lang.String getColorSpaceOut(boolean)>(fill);
        virtualinvoke $r19.<java.io.StringWriter: void write(java.lang.String)>($r20);
        annots = virtualinvoke context.<org.apache.fop.pdf.PDFResourceContext: org.apache.fop.pdf.PDFAnnotList getAnnotations()>();
        if annots == null goto label2;

        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        virtualinvoke $r1.<org.apache.fop.pdf.PDFDocument: void addObject(org.apache.fop.pdf.PDFObject)>(annots);

     label2:
        $r21 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.OutputStream outputStream>;
        if $r21 == null goto label6;

     label3:
        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        $r10 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.OutputStream outputStream>;
        virtualinvoke $r1.<org.apache.fop.pdf.PDFDocument: void output(java.io.OutputStream)>($r10);

     label4:
        goto label6;

     label5:
        $r22 := @caughtexception;
        l16 = $r22;

     label6:
        return 1;

        catch java.io.IOException from label3 to label4 with label5;
    }

    protected boolean applyUnknownPaint(java.awt.Paint, java.awt.Shape)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.awt.Paint paint;
        java.awt.Shape shape, clip, $r0;
        java.awt.geom.Rectangle2D usrBounds, usrClipBounds;
        double usrX, usrY, usrW, usrH, $d0;
        java.awt.geom.AffineTransform at;
        java.awt.Rectangle devShapeBounds, devClipBounds, devBounds;
        int devX, devY, devW, devH, rgbIdx, maskIdx, y, x, val, $i0, $i1, $i2, rgbIdx, rgbIdx;
        java.awt.color.ColorSpace rgbCS;
        java.awt.image.DirectColorModel rgbCM, $r1;
        java.awt.PaintContext pctx;
        org.apache.fop.pdf.PDFXObject imageInfo;
        java.awt.image.Raster r;
        java.awt.image.WritableRaster wr;
        java.awt.image.ColorModel pcm;
        java.awt.image.BufferedImage bi, $r9;
        byte[] rgb, mask;
        int[] line;
        java.lang.String maskRef, $r5, $r6, $r13;
        org.apache.fop.pdf.BitmapImage fopimg, $r11;
        org.apache.fop.pdf.PDFImageXObject xobj;
        java.io.IOException l40, l39, $r18, $r20;
        boolean $z0, $z1;
        java.awt.RenderingHints $r2;
        org.apache.fop.pdf.PDFDocument $r3;
        java.lang.StringBuffer $r4, $r12;
        org.apache.fop.pdf.PDFResourceContext $r7, $r15;
        org.apache.fop.pdf.PDFResources $r8;
        byte $b3;
        org.apache.fop.pdf.PDFDeviceColorSpace $r14;
        java.io.OutputStream $r16, $r17;
        org.apache.fop.pdf.PDFColor $r19;
        java.io.StringWriter $r21;
        org.apache.fop.pdf.PDFName $r22;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        paint := @parameter0: java.awt.Paint;
        shape := @parameter1: java.awt.Shape;
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void preparePainting()>();
        clip = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Shape getClip()>();
        usrBounds = interfaceinvoke shape.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();
        if clip == null goto label1;

        usrClipBounds = interfaceinvoke clip.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();
        $z0 = virtualinvoke usrClipBounds.<java.awt.geom.Rectangle2D: boolean intersects(java.awt.geom.Rectangle2D)>(usrBounds);
        if $z0 != 0 goto label0;

        return 1;

     label0:
        staticinvoke <java.awt.geom.Rectangle2D: void intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>(usrBounds, usrClipBounds, usrBounds);

     label1:
        usrX = virtualinvoke usrBounds.<java.awt.geom.Rectangle2D: double getX()>();
        usrY = virtualinvoke usrBounds.<java.awt.geom.Rectangle2D: double getY()>();
        usrW = virtualinvoke usrBounds.<java.awt.geom.Rectangle2D: double getWidth()>();
        usrH = virtualinvoke usrBounds.<java.awt.geom.Rectangle2D: double getHeight()>();
        at = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.geom.AffineTransform getTransform()>();
        $r0 = virtualinvoke at.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(shape);
        devShapeBounds = interfaceinvoke $r0.<java.awt.Shape: java.awt.Rectangle getBounds()>();
        if clip == null goto label3;

        $r0 = virtualinvoke at.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(clip);
        devClipBounds = interfaceinvoke $r0.<java.awt.Shape: java.awt.Rectangle getBounds()>();
        $z0 = virtualinvoke devClipBounds.<java.awt.Rectangle: boolean intersects(java.awt.Rectangle)>(devShapeBounds);
        if $z0 != 0 goto label2;

        return 1;

     label2:
        devBounds = virtualinvoke devShapeBounds.<java.awt.Rectangle: java.awt.Rectangle intersection(java.awt.Rectangle)>(devClipBounds);
        goto label4;

     label3:
        devBounds = devShapeBounds;

     label4:
        devX = devBounds.<java.awt.Rectangle: int x>;
        devY = devBounds.<java.awt.Rectangle: int y>;
        devW = devBounds.<java.awt.Rectangle: int width>;
        devH = devBounds.<java.awt.Rectangle: int height>;
        rgbCS = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1000);
        $r1 = new java.awt.image.DirectColorModel;
        specialinvoke $r1.<java.awt.image.DirectColorModel: void <init>(java.awt.color.ColorSpace,int,int,int,int,int,boolean,int)>(rgbCS, 32, 16711680, 65280, 255, -16777216, 0, 0);
        rgbCM = $r1;
        $r2 = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.RenderingHints getRenderingHints()>();
        pctx = interfaceinvoke paint.<java.awt.Paint: java.awt.PaintContext createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)>(rgbCM, devBounds, usrBounds, at, $r2);
        $r3 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        $r4 = new java.lang.StringBuffer;
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("TempImage:");
        $r5 = virtualinvoke pctx.<java.lang.Object: java.lang.String toString()>();
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();
        imageInfo = virtualinvoke $r3.<org.apache.fop.pdf.PDFDocument: org.apache.fop.pdf.PDFXObject getXObject(java.lang.String)>($r6);
        if imageInfo == null goto label5;

        $r7 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFResourceContext resourceContext>;
        $r8 = virtualinvoke $r7.<org.apache.fop.pdf.PDFResourceContext: org.apache.fop.pdf.PDFResources getPDFResources()>();
        virtualinvoke $r8.<org.apache.fop.pdf.PDFResources: void addXObject(org.apache.fop.pdf.PDFXObject)>(imageInfo);
        goto label22;

     label5:
        r = interfaceinvoke pctx.<java.awt.PaintContext: java.awt.image.Raster getRaster(int,int,int,int)>(devX, devY, devW, devH);
        wr = (java.awt.image.WritableRaster) r;
        wr = virtualinvoke wr.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableTranslatedChild(int,int)>(0, 0);
        pcm = interfaceinvoke pctx.<java.awt.PaintContext: java.awt.image.ColorModel getColorModel()>();
        $r9 = new java.awt.image.BufferedImage;
        $z1 = virtualinvoke pcm.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();
        specialinvoke $r9.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>(pcm, wr, $z1, null);
        bi = $r9;
        $i0 = devW * devH;
        $i0 = $i0 * 3;
        rgb = newarray (byte)[$i0];
        line = newarray (int)[devW];
        rgbIdx = 0;
        $z0 = virtualinvoke pcm.<java.awt.image.ColorModel: boolean hasAlpha()>();
        if $z0 == 0 goto label10;

        $i0 = devW * devH;
        mask = newarray (byte)[$i0];
        maskIdx = 0;
        y = 0;

     label6:
        if y >= devH goto label9;

        virtualinvoke bi.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(0, y, devW, 1, line, 0, devW);
        x = 0;

     label7:
        if x >= devW goto label8;

        val = line[x];
        $i1 = maskIdx;
        maskIdx = maskIdx + 1;
        $i2 = val >>> 24;
        $b3 = (byte) $i2;
        mask[$i1] = $b3;
        rgbIdx = rgbIdx + 1;
        $i2 = val >> 16;
        $i2 = $i2 & 255;
        $b3 = (byte) $i2;
        rgb[rgbIdx] = $b3;
        rgbIdx = rgbIdx + 1;
        $i2 = val >> 8;
        $i2 = $i2 & 255;
        $b3 = (byte) $i2;
        rgb[rgbIdx] = $b3;
        rgbIdx = rgbIdx + 1;
        $i2 = val & 255;
        $b3 = (byte) $i2;
        rgb[rgbIdx] = $b3;
        x = x + 1;
        goto label7;

     label8:
        y = y + 1;
        goto label6;

     label9:
        goto label14;

     label10:
        mask = null;
        y = 0;

     label11:
        if y >= devH goto label14;

        virtualinvoke bi.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(0, y, devW, 1, line, 0, devW);
        x = 0;

     label12:
        if x >= devW goto label13;

        val = line[x];
        rgbIdx = rgbIdx + 1;
        $i2 = val >> 16;
        $i2 = $i2 & 255;
        $b3 = (byte) $i2;
        rgb[rgbIdx] = $b3;
        rgbIdx = rgbIdx + 1;
        $i2 = val >> 8;
        $i2 = $i2 & 255;
        $b3 = (byte) $i2;
        rgb[rgbIdx] = $b3;
        rgbIdx = rgbIdx + 1;
        $i2 = val & 255;
        $b3 = (byte) $i2;
        rgb[rgbIdx] = $b3;
        x = x + 1;
        goto label12;

     label13:
        y = y + 1;
        goto label11;

     label14:
        maskRef = null;
        if mask == null goto label18;

        $r11 = new org.apache.fop.pdf.BitmapImage;
        $r12 = new java.lang.StringBuffer;
        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();
        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("TempImageMask:");
        $r13 = virtualinvoke pctx.<java.lang.Object: java.lang.String toString()>();
        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);
        $r5 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r11.<org.apache.fop.pdf.BitmapImage: void <init>(java.lang.String,int,int,byte[],java.lang.String)>($r5, devW, devH, mask, null);
        fopimg = $r11;
        $r14 = new org.apache.fop.pdf.PDFDeviceColorSpace;
        specialinvoke $r14.<org.apache.fop.pdf.PDFDeviceColorSpace: void <init>(int)>(1);
        virtualinvoke fopimg.<org.apache.fop.pdf.BitmapImage: void setColorSpace(org.apache.fop.pdf.PDFDeviceColorSpace)>($r14);
        $r3 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        $r15 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFResourceContext resourceContext>;
        xobj = virtualinvoke $r3.<org.apache.fop.pdf.PDFDocument: org.apache.fop.pdf.PDFImageXObject addImage(org.apache.fop.pdf.PDFResourceContext,org.apache.fop.pdf.PDFImage)>($r15, fopimg);
        maskRef = virtualinvoke xobj.<org.apache.fop.pdf.PDFImageXObject: java.lang.String referencePDF()>();
        $r16 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.OutputStream outputStream>;
        if $r16 == null goto label18;

     label15:
        $r3 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        $r17 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.OutputStream outputStream>;
        virtualinvoke $r3.<org.apache.fop.pdf.PDFDocument: void output(java.io.OutputStream)>($r17);

     label16:
        goto label18;

     label17:
        $r18 := @caughtexception;
        l40 = $r18;

     label18:
        $r11 = new org.apache.fop.pdf.BitmapImage;
        $r12 = new java.lang.StringBuffer;
        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();
        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("TempImage:");
        $r13 = virtualinvoke pctx.<java.lang.Object: java.lang.String toString()>();
        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);
        $r5 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r11.<org.apache.fop.pdf.BitmapImage: void <init>(java.lang.String,int,int,byte[],java.lang.String)>($r5, devW, devH, rgb, maskRef);
        fopimg = $r11;
        $r19 = new org.apache.fop.pdf.PDFColor;
        specialinvoke $r19.<org.apache.fop.pdf.PDFColor: void <init>(int,int,int)>(255, 255, 255);
        virtualinvoke fopimg.<org.apache.fop.pdf.BitmapImage: void setTransparent(org.apache.fop.pdf.PDFColor)>($r19);
        $r3 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        $r15 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFResourceContext resourceContext>;
        imageInfo = virtualinvoke $r3.<org.apache.fop.pdf.PDFDocument: org.apache.fop.pdf.PDFImageXObject addImage(org.apache.fop.pdf.PDFResourceContext,org.apache.fop.pdf.PDFImage)>($r15, fopimg);
        $r16 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.OutputStream outputStream>;
        if $r16 == null goto label22;

     label19:
        $r3 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        $r17 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.OutputStream outputStream>;
        virtualinvoke $r3.<org.apache.fop.pdf.PDFDocument: void output(java.io.OutputStream)>($r17);

     label20:
        goto label22;

     label21:
        $r20 := @caughtexception;
        l39 = $r20;

     label22:
        $r21 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r21.<java.io.StringWriter: void write(java.lang.String)>("q\n");
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void writeClip(java.awt.Shape)>(shape);
        $r21 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r4 = new java.lang.StringBuffer;
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>(usrW);
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" 0 0 ");
        $d0 = neg usrH;
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0);
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>(usrX);
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d0 = usrY + usrH;
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0);
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" cm\n");
        $r22 = virtualinvoke imageInfo.<org.apache.fop.pdf.PDFXObject: org.apache.fop.pdf.PDFName getName()>();
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r22);
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Do\nQ\n");
        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r21.<java.io.StringWriter: void write(java.lang.String)>($r6);
        return 1;

        catch java.io.IOException from label15 to label16 with label17;
        catch java.io.IOException from label19 to label20 with label21;
    }

    protected void applyStroke(java.awt.Stroke)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.awt.Stroke stroke;
        java.awt.BasicStroke bs;
        float[] da;
        int count, ec, lj, $i0;
        float offset, lw, ml, $f0;
        boolean $z0;
        java.io.StringWriter $r0;
        double $d0, $d1;
        java.lang.String $r1, $r3;
        java.lang.StringBuffer $r2;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        stroke := @parameter0: java.awt.Stroke;
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void preparePainting()>();
        $z0 = stroke instanceof java.awt.BasicStroke;
        if $z0 == 0 goto label12;

        bs = (java.awt.BasicStroke) stroke;
        da = virtualinvoke bs.<java.awt.BasicStroke: float[] getDashArray()>();
        if da == null goto label3;

        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>("[");
        count = 0;

     label0:
        $i0 = lengthof da;
        if count >= $i0 goto label2;

        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $f0 = da[count];
        $d0 = (double) $f0;
        $r1 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double)>($d0);
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>($r1);
        $i0 = lengthof da;
        $i0 = $i0 - 1;
        if count >= $i0 goto label1;

        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>(" ");

     label1:
        count = count + 1;
        goto label0;

     label2:
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>("] ");
        offset = virtualinvoke bs.<java.awt.BasicStroke: float getDashPhase()>();
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $d1 = (double) offset;
        $r3 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double)>($d1);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" d\n");
        $r1 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>($r1);

     label3:
        ec = virtualinvoke bs.<java.awt.BasicStroke: int getEndCap()>();
        tableswitch(ec)
        {
            case 0: goto label4;
            case 1: goto label5;
            case 2: goto label6;
            default: goto label7;
        };

     label4:
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>("0 J\n");
        goto label7;

     label5:
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>("1 J\n");
        goto label7;

     label6:
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>("2 J\n");

     label7:
        lj = virtualinvoke bs.<java.awt.BasicStroke: int getLineJoin()>();
        tableswitch(lj)
        {
            case 0: goto label8;
            case 1: goto label9;
            case 2: goto label10;
            default: goto label11;
        };

     label8:
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>("0 j\n");
        goto label11;

     label9:
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>("1 j\n");
        goto label11;

     label10:
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>("2 j\n");

     label11:
        lw = virtualinvoke bs.<java.awt.BasicStroke: float getLineWidth()>();
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $d1 = (double) lw;
        $r3 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double)>($d1);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" w\n");
        $r1 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>($r1);
        ml = virtualinvoke bs.<java.awt.BasicStroke: float getMiterLimit()>();
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $d1 = (double) ml;
        $r3 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double)>($d1);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" M\n");
        $r1 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>($r1);

     label12:
        return;
    }

    public void drawRenderedImage(java.awt.image.RenderedImage, java.awt.geom.AffineTransform)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.awt.image.RenderedImage img;
        java.awt.geom.AffineTransform xform;
        java.lang.StringBuffer $r0;
        java.lang.String key, $r1;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        img := @parameter0: java.awt.image.RenderedImage;
        xform := @parameter1: java.awt.geom.AffineTransform;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("TempImage:");
        $r1 = virtualinvoke img.<java.lang.Object: java.lang.String toString()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);
        key = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void drawInnerRenderedImage(java.lang.String,java.awt.image.RenderedImage,java.awt.geom.AffineTransform)>(key, img, xform);
        return;
    }

    public void drawInnerRenderedImage(java.lang.String, java.awt.image.RenderedImage, java.awt.geom.AffineTransform)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.lang.String key;
        java.awt.image.RenderedImage img;
        java.awt.geom.AffineTransform xform;
        org.apache.fop.pdf.PDFXObject xObject;
        org.apache.fop.pdf.PDFDocument $r0;
        org.apache.fop.pdf.PDFResourceContext $r1;
        org.apache.fop.pdf.PDFResources $r2;
        int $i0, $i1;
        float $f0, $f1;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        key := @parameter0: java.lang.String;
        img := @parameter1: java.awt.image.RenderedImage;
        xform := @parameter2: java.awt.geom.AffineTransform;
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void preparePainting()>();
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        xObject = virtualinvoke $r0.<org.apache.fop.pdf.PDFDocument: org.apache.fop.pdf.PDFXObject getXObject(java.lang.String)>(key);
        if xObject != null goto label0;

        xObject = specialinvoke this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFXObject addRenderedImage(java.lang.String,java.awt.image.RenderedImage)>(key, img);
        goto label1;

     label0:
        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFResourceContext resourceContext>;
        $r2 = virtualinvoke $r1.<org.apache.fop.pdf.PDFResourceContext: org.apache.fop.pdf.PDFResources getPDFResources()>();
        virtualinvoke $r2.<org.apache.fop.pdf.PDFResources: void addXObject(org.apache.fop.pdf.PDFXObject)>(xObject);

     label1:
        $i0 = interfaceinvoke img.<java.awt.image.RenderedImage: int getWidth()>();
        $f0 = (float) $i0;
        $i1 = interfaceinvoke img.<java.awt.image.RenderedImage: int getHeight()>();
        $f1 = (float) $i1;
        specialinvoke this.<org.apache.fop.svg.PDFGraphics2D: void useXObject(org.apache.fop.pdf.PDFXObject,java.awt.geom.AffineTransform,float,float)>(xObject, xform, $f0, $f1);
        return;
    }

    private void useXObject(org.apache.fop.pdf.PDFXObject, java.awt.geom.AffineTransform, float, float)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        org.apache.fop.pdf.PDFXObject xObject;
        java.awt.geom.AffineTransform xform, $r1;
        float width, height;
        java.awt.Shape imclip;
        java.lang.String w, h, $r4;
        java.io.StringWriter $r0;
        double $d0;
        java.lang.StringBuffer $r2;
        org.apache.fop.pdf.PDFName $r3;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        xObject := @parameter0: org.apache.fop.pdf.PDFXObject;
        xform := @parameter1: java.awt.geom.AffineTransform;
        width := @parameter2: float;
        height := @parameter3: float;
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>("q\n");
        $r1 = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.geom.AffineTransform getTransform()>();
        specialinvoke this.<org.apache.fop.svg.PDFGraphics2D: void concatMatrix(java.awt.geom.AffineTransform)>($r1);
        imclip = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Shape getClip()>();
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void writeClip(java.awt.Shape)>(imclip);
        specialinvoke this.<org.apache.fop.svg.PDFGraphics2D: void concatMatrix(java.awt.geom.AffineTransform)>(xform);
        $d0 = (double) width;
        w = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d0, 8);
        $d0 = (double) height;
        h = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d0, 8);
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(w);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" 0 0 -");
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(h);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" 0 ");
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(h);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" cm\n");
        $r3 = virtualinvoke xObject.<org.apache.fop.pdf.PDFXObject: org.apache.fop.pdf.PDFName getName()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Do\nQ\n");
        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>($r4);
        return;
    }

    private org.apache.fop.pdf.PDFXObject addRenderedImage(java.lang.String, java.awt.image.RenderedImage)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.lang.String key;
        java.awt.image.RenderedImage img;
        org.apache.xmlgraphics.image.loader.ImageInfo $r0, info;
        org.apache.xmlgraphics.image.loader.ImageSize size, $r1;
        org.apache.xmlgraphics.image.loader.impl.ImageRendered imgRend, $r2;
        org.apache.fop.render.pdf.ImageRenderedAdapter adapter, $r3;
        org.apache.fop.pdf.PDFImageXObject xObject;
        java.io.IOException l8, $r8;
        int $i0, $i1;
        org.apache.fop.pdf.PDFDocument $r4;
        org.apache.fop.pdf.PDFResourceContext $r5;
        java.io.OutputStream $r6, $r7;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        key := @parameter0: java.lang.String;
        img := @parameter1: java.awt.image.RenderedImage;
        $r0 = new org.apache.xmlgraphics.image.loader.ImageInfo;
        specialinvoke $r0.<org.apache.xmlgraphics.image.loader.ImageInfo: void <init>(java.lang.String,java.lang.String)>(null, "image/unknown");
        info = $r0;
        $r1 = new org.apache.xmlgraphics.image.loader.ImageSize;
        $i0 = interfaceinvoke img.<java.awt.image.RenderedImage: int getWidth()>();
        $i1 = interfaceinvoke img.<java.awt.image.RenderedImage: int getHeight()>();
        specialinvoke $r1.<org.apache.xmlgraphics.image.loader.ImageSize: void <init>(int,int,double)>($i0, $i1, 72.0);
        size = $r1;
        virtualinvoke info.<org.apache.xmlgraphics.image.loader.ImageInfo: void setSize(org.apache.xmlgraphics.image.loader.ImageSize)>(size);
        $r2 = new org.apache.xmlgraphics.image.loader.impl.ImageRendered;
        specialinvoke $r2.<org.apache.xmlgraphics.image.loader.impl.ImageRendered: void <init>(org.apache.xmlgraphics.image.loader.ImageInfo,java.awt.image.RenderedImage,java.awt.Color)>(info, img, null);
        imgRend = $r2;
        $r3 = new org.apache.fop.render.pdf.ImageRenderedAdapter;
        specialinvoke $r3.<org.apache.fop.render.pdf.ImageRenderedAdapter: void <init>(org.apache.xmlgraphics.image.loader.impl.ImageRendered,java.lang.String)>(imgRend, key);
        adapter = $r3;
        $r4 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        $r5 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFResourceContext resourceContext>;
        xObject = virtualinvoke $r4.<org.apache.fop.pdf.PDFDocument: org.apache.fop.pdf.PDFImageXObject addImage(org.apache.fop.pdf.PDFResourceContext,org.apache.fop.pdf.PDFImage)>($r5, adapter);
        $r6 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.OutputStream outputStream>;
        if $r6 == null goto label3;

     label0:
        $r4 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        $r7 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.OutputStream outputStream>;
        virtualinvoke $r4.<org.apache.fop.pdf.PDFDocument: void output(java.io.OutputStream)>($r7);

     label1:
        goto label3;

     label2:
        $r8 := @caughtexception;
        l8 = $r8;

     label3:
        return xObject;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public void drawRenderableImage(java.awt.image.renderable.RenderableImage, java.awt.geom.AffineTransform)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.awt.image.renderable.RenderableImage img;
        java.awt.geom.AffineTransform xform;
        java.awt.image.RenderedImage $r0;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        img := @parameter0: java.awt.image.renderable.RenderableImage;
        xform := @parameter1: java.awt.geom.AffineTransform;
        $r0 = interfaceinvoke img.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createDefaultRendering()>();
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)>($r0, xform);
        return;
    }

    public void drawString(java.lang.String, float, float)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.lang.String s, startText, endText, $r7, $r8, $r11;
        float x, y;
        java.awt.geom.AffineTransform fontTransform, trans, localTransform, $r9;
        java.awt.Font gFont;
        org.apache.fop.fonts.Font fontState, $r0, $r2, $r4;
        java.awt.Color c;
        java.util.Map kerning;
        boolean kerningAvailable, useMultiByte, $z0;
        double[] vals, lt;
        java.awt.Shape imclip;
        int l, i, $i0, $i1, $i3, $i4;
        char ch, $c2, $c5, $c6;
        org.apache.fop.fonts.FontInfo $r1;
        org.apache.fop.fonts.FontTriplet $r3;
        java.io.StringWriter $r5, $r12;
        java.awt.Paint $r6;
        double $d0, $d1, $d2;
        java.lang.StringBuffer $r10;
        java.lang.Integer $r13, $r14;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        s := @parameter0: java.lang.String;
        x := @parameter1: float;
        y := @parameter2: float;
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void preparePainting()>();
        fontTransform = null;
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.fonts.Font ovFontState>;
        if $r0 != null goto label0;

        gFont = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Font getFont()>();
        fontTransform = virtualinvoke gFont.<java.awt.Font: java.awt.geom.AffineTransform getTransform()>();
        fontState = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.fonts.Font getInternalFontForAWTFont(java.awt.Font)>(gFont);
        goto label1;

     label0:
        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.fonts.FontInfo fontInfo>;
        $r2 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.fonts.Font ovFontState>;
        $r3 = virtualinvoke $r2.<org.apache.fop.fonts.Font: org.apache.fop.fonts.FontTriplet getFontTriplet()>();
        $r4 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.fonts.Font ovFontState>;
        $i0 = virtualinvoke $r4.<org.apache.fop.fonts.Font: int getFontSize()>();
        fontState = virtualinvoke $r1.<org.apache.fop.fonts.FontInfo: org.apache.fop.fonts.Font getFontInstance(org.apache.fop.fonts.FontTriplet,int)>($r3, $i0);
        this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.fonts.Font ovFontState> = null;

     label1:
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void updateCurrentFont(org.apache.fop.fonts.Font)>(fontState);
        $r5 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r5.<java.io.StringWriter: void write(java.lang.String)>("q\n");
        c = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Color getColor()>();
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void applyColor(java.awt.Color,boolean)>(c, 1);
        $r6 = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Paint getPaint()>();
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: boolean applyPaint(java.awt.Paint,boolean)>($r6, 1);
        $i1 = virtualinvoke c.<java.awt.Color: int getAlpha()>();
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void applyAlpha(int,int)>($i1, 255);
        kerning = virtualinvoke fontState.<org.apache.fop.fonts.Font: java.util.Map getKerning()>();
        if kerning == null goto label2;

        $z0 = interfaceinvoke kerning.<java.util.Map: boolean isEmpty()>();
        if $z0 != 0 goto label2;

        $z0 = 1;
        goto label3;

     label2:
        $z0 = 0;

     label3:
        kerningAvailable = $z0;
        $r7 = this.<org.apache.fop.svg.PDFGraphics2D: java.lang.String currentFontName>;
        useMultiByte = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: boolean isMultiByteFont(java.lang.String)>($r7);
        if useMultiByte == 0 goto label4;

        $r8 = "<";
        goto label5;

     label4:
        $r8 = "(";

     label5:
        startText = $r8;
        if useMultiByte == 0 goto label6;

        $r8 = "> ";
        goto label7;

     label6:
        $r8 = ") ";

     label7:
        endText = $r8;
        trans = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.geom.AffineTransform getTransform()>();
        vals = newarray (double)[6];
        virtualinvoke trans.<java.awt.geom.AffineTransform: void getMatrix(double[])>(vals);
        specialinvoke this.<org.apache.fop.svg.PDFGraphics2D: void concatMatrix(double[])>(vals);
        imclip = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Shape getClip()>();
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void writeClip(java.awt.Shape)>(imclip);
        $r5 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r5.<java.io.StringWriter: void write(java.lang.String)>("BT\n");
        $r9 = new java.awt.geom.AffineTransform;
        specialinvoke $r9.<java.awt.geom.AffineTransform: void <init>()>();
        localTransform = $r9;
        $d0 = (double) x;
        $d1 = (double) y;
        virtualinvoke localTransform.<java.awt.geom.AffineTransform: void translate(double,double)>($d0, $d1);
        if fontTransform == null goto label8;

        virtualinvoke localTransform.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>(fontTransform);

     label8:
        virtualinvoke localTransform.<java.awt.geom.AffineTransform: void scale(double,double)>(1.0, -1.0);
        lt = newarray (double)[6];
        virtualinvoke localTransform.<java.awt.geom.AffineTransform: void getMatrix(double[])>(lt);
        $r5 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r10 = new java.lang.StringBuffer;
        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();
        $d2 = lt[0];
        $r11 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double)>($d2);
        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);
        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d2 = lt[1];
        $r11 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double)>($d2);
        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);
        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d2 = lt[2];
        $r11 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double)>($d2);
        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);
        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d2 = lt[3];
        $r11 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double)>($d2);
        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);
        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d2 = lt[4];
        $r11 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double)>($d2);
        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);
        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d2 = lt[5];
        $r11 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double)>($d2);
        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);
        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Tm [");
        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(startText);
        $r7 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r5.<java.io.StringWriter: void write(java.lang.String)>($r7);
        l = virtualinvoke s.<java.lang.String: int length()>();
        i = 0;

     label9:
        if i >= l goto label16;

        $c2 = virtualinvoke s.<java.lang.String: char charAt(int)>(i);
        ch = virtualinvoke fontState.<org.apache.fop.fonts.Font: char mapChar(char)>($c2);
        if useMultiByte != 0 goto label13;

        if ch <= 127 goto label10;

        $r5 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r5.<java.io.StringWriter: void write(java.lang.String)>("\\");
        $r5 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r7 = staticinvoke <java.lang.Integer: java.lang.String toOctalString(int)>(ch);
        virtualinvoke $r5.<java.io.StringWriter: void write(java.lang.String)>($r7);
        goto label14;

     label10:
        lookupswitch(ch)
        {
            case 40: goto label11;
            case 41: goto label11;
            case 92: goto label11;
            default: goto label12;
        };

     label11:
        $r5 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r5.<java.io.StringWriter: void write(java.lang.String)>("\\");
        goto label12;

     label12:
        $r5 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r5.<java.io.StringWriter: void write(int)>(ch);
        goto label14;

     label13:
        $r5 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r7 = staticinvoke <org.apache.fop.pdf.PDFText: java.lang.String toUnicodeHex(char)>(ch);
        virtualinvoke $r5.<java.io.StringWriter: void write(java.lang.String)>($r7);

     label14:
        if kerningAvailable == 0 goto label15;

        $i3 = i + 1;
        if $i3 >= l goto label15;

        $r12 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r13 = new java.lang.Integer;
        specialinvoke $r13.<java.lang.Integer: void <init>(int)>(ch);
        $r14 = new java.lang.Integer;
        $i4 = i + 1;
        $c5 = virtualinvoke s.<java.lang.String: char charAt(int)>($i4);
        $c6 = virtualinvoke fontState.<org.apache.fop.fonts.Font: char mapChar(char)>($c5);
        specialinvoke $r14.<java.lang.Integer: void <init>(int)>($c6);
        specialinvoke this.<org.apache.fop.svg.PDFGraphics2D: void addKerning(java.io.StringWriter,java.lang.Integer,java.lang.Integer,java.util.Map,java.lang.String,java.lang.String)>($r12, $r13, $r14, kerning, startText, endText);

     label15:
        i = i + 1;
        goto label9;

     label16:
        $r5 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r5.<java.io.StringWriter: void write(java.lang.String)>(endText);
        $r5 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r5.<java.io.StringWriter: void write(java.lang.String)>("] TJ\n");
        $r5 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r5.<java.io.StringWriter: void write(java.lang.String)>("ET\n");
        $r5 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r5.<java.io.StringWriter: void write(java.lang.String)>("Q\n");
        return;
    }

    protected void applyAlpha(int, int)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        int fillAlpha, strokeAlpha;
        java.util.HashMap vals, $r1;
        java.lang.Float $r0;
        org.apache.fop.pdf.PDFGState gstate, $r6;
        float $f0;
        org.apache.fop.pdf.PDFDocument $r3;
        org.apache.fop.pdf.PDFFactory $r4;
        org.apache.fop.pdf.PDFState $r5;
        org.apache.fop.pdf.PDFResourceContext $r7;
        java.io.StringWriter $r8;
        java.lang.StringBuffer $r9;
        java.lang.String $r10, $r11;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        fillAlpha := @parameter0: int;
        strokeAlpha := @parameter1: int;
        if fillAlpha != 255 goto label0;

        if strokeAlpha == 255 goto label3;

     label0:
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void checkTransparencyAllowed()>();
        $r1 = new java.util.HashMap;
        specialinvoke $r1.<java.util.HashMap: void <init>()>();
        vals = $r1;
        if fillAlpha == 255 goto label1;

        $r0 = new java.lang.Float;
        $f0 = (float) fillAlpha;
        $f0 = $f0 / 255.0F;
        specialinvoke $r0.<java.lang.Float: void <init>(float)>($f0);
        interfaceinvoke vals.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ca", $r0);

     label1:
        if strokeAlpha == 255 goto label2;

        $r0 = new java.lang.Float;
        $f0 = (float) strokeAlpha;
        $f0 = $f0 / 255.0F;
        specialinvoke $r0.<java.lang.Float: void <init>(float)>($f0);
        interfaceinvoke vals.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("CA", $r0);

     label2:
        $r3 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        $r4 = virtualinvoke $r3.<org.apache.fop.pdf.PDFDocument: org.apache.fop.pdf.PDFFactory getFactory()>();
        $r5 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFState graphicsState>;
        $r6 = virtualinvoke $r5.<org.apache.fop.pdf.PDFState: org.apache.fop.pdf.PDFGState getGState()>();
        gstate = virtualinvoke $r4.<org.apache.fop.pdf.PDFFactory: org.apache.fop.pdf.PDFGState makeGState(java.util.Map,org.apache.fop.pdf.PDFGState)>(vals, $r6);
        $r7 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFResourceContext resourceContext>;
        virtualinvoke $r7.<org.apache.fop.pdf.PDFResourceContext: void addGState(org.apache.fop.pdf.PDFGState)>(gstate);
        $r8 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r9 = new java.lang.StringBuffer;
        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");
        $r10 = virtualinvoke gstate.<org.apache.fop.pdf.PDFGState: java.lang.String getName()>();
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" gs\n");
        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r8.<java.io.StringWriter: void write(java.lang.String)>($r11);

     label3:
        return;
    }

    protected void updateCurrentFont(org.apache.fop.fonts.Font)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        org.apache.fop.fonts.Font font;
        java.lang.String name, $r0;
        float size, $f0, $f1;
        int $i0;
        boolean $z0;
        byte $b1;
        java.io.StringWriter $r1;
        java.lang.StringBuffer $r2;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        font := @parameter0: org.apache.fop.fonts.Font;
        name = virtualinvoke font.<org.apache.fop.fonts.Font: java.lang.String getFontName()>();
        $i0 = virtualinvoke font.<org.apache.fop.fonts.Font: int getFontSize()>();
        $f0 = (float) $i0;
        size = $f0 / 1000.0F;
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.lang.String currentFontName>;
        $z0 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>($r0);
        if $z0 == 0 goto label0;

        $f1 = this.<org.apache.fop.svg.PDFGraphics2D: float currentFontSize>;
        $b1 = size cmpl $f1;
        if $b1 == 0 goto label1;

     label0:
        this.<org.apache.fop.svg.PDFGraphics2D: java.lang.String currentFontName> = name;
        this.<org.apache.fop.svg.PDFGraphics2D: float currentFontSize> = size;
        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(name);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>(size);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Tf\n");
        $r0 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r1.<java.io.StringWriter: void write(java.lang.String)>($r0);

     label1:
        return;
    }

    protected org.apache.fop.fonts.Font getInternalFontForAWTFont(java.awt.Font)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.awt.Font awtFont;
        java.lang.String n, style, $r0;
        float siz, $f0;
        short weight, $s0;
        org.apache.fop.fonts.FontTriplet triplet;
        org.apache.fop.fonts.Font fontState;
        boolean $z0;
        org.apache.fop.fonts.FontInfo $r1;
        double $d0;
        int $i1;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        awtFont := @parameter0: java.awt.Font;
        n = virtualinvoke awtFont.<java.awt.Font: java.lang.String getFamily()>();
        $z0 = virtualinvoke n.<java.lang.String: boolean equals(java.lang.Object)>("sanserif");
        if $z0 == 0 goto label0;

        n = "sans-serif";

     label0:
        siz = virtualinvoke awtFont.<java.awt.Font: float getSize2D()>();
        $z0 = virtualinvoke awtFont.<java.awt.Font: boolean isItalic()>();
        if $z0 == 0 goto label1;

        $r0 = "italic";
        goto label2;

     label1:
        $r0 = "normal";

     label2:
        style = $r0;
        $z0 = virtualinvoke awtFont.<java.awt.Font: boolean isBold()>();
        if $z0 == 0 goto label3;

        $s0 = 700;
        goto label4;

     label3:
        $s0 = 400;

     label4:
        weight = $s0;
        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.fonts.FontInfo fontInfo>;
        triplet = virtualinvoke $r1.<org.apache.fop.fonts.FontInfo: org.apache.fop.fonts.FontTriplet fontLookup(java.lang.String,java.lang.String,int)>(n, style, weight);
        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.fonts.FontInfo fontInfo>;
        $f0 = siz * 1000.0F;
        $d0 = (double) $f0;
        $d0 = $d0 + 0.5;
        $i1 = (int) $d0;
        fontState = virtualinvoke $r1.<org.apache.fop.fonts.FontInfo: org.apache.fop.fonts.Font getFontInstance(org.apache.fop.fonts.FontTriplet,int)>(triplet, $i1);
        return fontState;
    }

    protected boolean isMultiByteFont(java.lang.String)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.lang.String name;
        org.apache.fop.fonts.Typeface f, $r4;
        org.apache.fop.fonts.FontInfo $r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        boolean $z0;
        org.apache.fop.fonts.LazyFont $r3;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        name := @parameter0: java.lang.String;
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.fonts.FontInfo fontInfo>;
        $r1 = virtualinvoke $r0.<org.apache.fop.fonts.FontInfo: java.util.Map getFonts()>();
        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(name);
        f = (org.apache.fop.fonts.Typeface) $r2;
        $z0 = f instanceof org.apache.fop.fonts.LazyFont;
        if $z0 == 0 goto label0;

        $r3 = (org.apache.fop.fonts.LazyFont) f;
        $r4 = virtualinvoke $r3.<org.apache.fop.fonts.LazyFont: org.apache.fop.fonts.Typeface getRealFont()>();
        $z0 = $r4 instanceof org.apache.fop.fonts.CIDFont;
        if $z0 == 0 goto label1;

        return 1;

     label0:
        $z0 = f instanceof org.apache.fop.fonts.CIDFont;
        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void addKerning(java.io.StringWriter, java.lang.Integer, java.lang.Integer, java.util.Map, java.lang.String, java.lang.String)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.io.StringWriter buf, $r1;
        java.lang.Integer ch1, ch2, width;
        java.util.Map kerning, kernPair;
        java.lang.String startText, endText, $r3;
        java.lang.Object $r0;
        java.lang.StringBuffer $r2;
        int $i0;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        buf := @parameter0: java.io.StringWriter;
        ch1 := @parameter1: java.lang.Integer;
        ch2 := @parameter2: java.lang.Integer;
        kerning := @parameter3: java.util.Map;
        startText := @parameter4: java.lang.String;
        endText := @parameter5: java.lang.String;
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void preparePainting()>();
        $r0 = interfaceinvoke kerning.<java.util.Map: java.lang.Object get(java.lang.Object)>(ch1);
        kernPair = (java.util.Map) $r0;
        if kernPair == null goto label0;

        $r0 = interfaceinvoke kernPair.<java.util.Map: java.lang.Object get(java.lang.Object)>(ch2);
        width = (java.lang.Integer) $r0;
        if width == null goto label0;

        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(endText);
        $i0 = virtualinvoke width.<java.lang.Integer: int intValue()>();
        $i0 = neg $i0;
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(startText);
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r1.<java.io.StringWriter: void write(java.lang.String)>($r3);

     label0:
        return;
    }

    public void drawString(java.text.AttributedCharacterIterator, float, float)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.text.AttributedCharacterIterator iterator;
        float x, y, $f0, $f1;
        null_type fontState;
        java.awt.Shape imclip;
        java.awt.Color c;
        boolean fill, stroke, $z0;
        java.awt.Stroke currentStroke;
        byte textr, $b0;
        java.awt.geom.AffineTransform trans;
        double[] vals;
        char ch;
        java.lang.String name, $r3, $r4;
        int size, $i1;
        java.awt.Paint $r0;
        java.io.StringWriter $r1;
        java.lang.StringBuffer $r2;
        double $d0, $d1, $d2;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        iterator := @parameter0: java.text.AttributedCharacterIterator;
        x := @parameter1: float;
        y := @parameter2: float;
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void preparePainting()>();
        fontState = null;
        imclip = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Shape getClip()>();
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void writeClip(java.awt.Shape)>(imclip);
        c = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Color getColor()>();
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void applyColor(java.awt.Color,boolean)>(c, 1);
        $r0 = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Paint getPaint()>();
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: boolean applyPaint(java.awt.Paint,boolean)>($r0, 1);
        fill = 1;
        stroke = 0;
        currentStroke = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Stroke getStroke()>();
        stroke = 1;
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void applyStroke(java.awt.Stroke)>(currentStroke);
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void applyColor(java.awt.Color,boolean)>(c, 0);
        $r0 = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Paint getPaint()>();
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: boolean applyPaint(java.awt.Paint,boolean)>($r0, 0);
        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r1.<java.io.StringWriter: void write(java.lang.String)>("BT\n");
        textr = 0;
        if fill == 0 goto label0;

        if stroke == 0 goto label0;

        textr = 2;
        goto label1;

     label0:
        if stroke == 0 goto label1;

        textr = 1;

     label1:
        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(textr);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Tr\n");
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r1.<java.io.StringWriter: void write(java.lang.String)>($r3);
        trans = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.geom.AffineTransform getTransform()>();
        $d0 = (double) x;
        $d1 = (double) y;
        virtualinvoke trans.<java.awt.geom.AffineTransform: void translate(double,double)>($d0, $d1);
        vals = newarray (double)[6];
        virtualinvoke trans.<java.awt.geom.AffineTransform: void getMatrix(double[])>(vals);
        ch = interfaceinvoke iterator.<java.text.AttributedCharacterIterator: char first()>();

     label2:
        if ch == 65535 goto label5;

        name = virtualinvoke fontState.<org.apache.fop.fonts.Font: java.lang.String getFontName()>();
        size = virtualinvoke fontState.<org.apache.fop.fonts.Font: int getFontSize()>();
        $r3 = this.<org.apache.fop.svg.PDFGraphics2D: java.lang.String currentFontName>;
        $z0 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>($r3);
        if $z0 == 0 goto label3;

        $f0 = (float) size;
        $f1 = this.<org.apache.fop.svg.PDFGraphics2D: float currentFontSize>;
        $b0 = $f0 cmpl $f1;
        if $b0 == 0 goto label4;

     label3:
        this.<org.apache.fop.svg.PDFGraphics2D: java.lang.String currentFontName> = name;
        $f1 = (float) size;
        this.<org.apache.fop.svg.PDFGraphics2D: float currentFontSize> = $f1;
        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(name);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $i1 = size / 1000;
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Tf\n");
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r1.<java.io.StringWriter: void write(java.lang.String)>($r3);

     label4:
        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $d2 = vals[0];
        $r4 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d2, 8);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d2 = vals[1];
        $r4 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d2, 8);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d2 = vals[2];
        $r4 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d2, 8);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d2 = vals[3];
        $r4 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d2, 8);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d2 = vals[4];
        $r4 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d2, 8);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d2 = vals[5];
        $r4 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d2, 8);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Tm (");
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(ch);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") Tj\n");
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r1.<java.io.StringWriter: void write(java.lang.String)>($r3);
        ch = interfaceinvoke iterator.<java.text.AttributedCharacterIterator: char next()>();
        goto label2;

     label5:
        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r1.<java.io.StringWriter: void write(java.lang.String)>("ET\n");
        return;
    }

    public void fill(java.awt.Shape)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.awt.Shape s, imclip;
        java.awt.Color c;
        java.awt.geom.AffineTransform trans, $r3;
        double[] tranvals;
        boolean newClip, newTransform, $z0, $z1, $z2, $z3;
        java.awt.Paint paint;
        java.awt.geom.PathIterator iter;
        int $i0, $i1, $i2;
        org.apache.fop.pdf.PDFState $r0;
        java.io.StringWriter $r1;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        s := @parameter0: java.awt.Shape;
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void preparePainting()>();
        c = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Color getBackground()>();
        $i0 = virtualinvoke c.<java.awt.Color: int getAlpha()>();
        if $i0 != 0 goto label0;

        c = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Color getColor()>();
        $i0 = virtualinvoke c.<java.awt.Color: int getAlpha()>();
        if $i0 != 0 goto label0;

        return;

     label0:
        trans = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.geom.AffineTransform getTransform()>();
        tranvals = newarray (double)[6];
        virtualinvoke trans.<java.awt.geom.AffineTransform: void getMatrix(double[])>(tranvals);
        imclip = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Shape getClip()>();
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFState graphicsState>;
        newClip = virtualinvoke $r0.<org.apache.fop.pdf.PDFState: boolean checkClip(java.awt.Shape)>(imclip);
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFState graphicsState>;
        $z0 = virtualinvoke $r0.<org.apache.fop.pdf.PDFState: boolean checkTransform(java.awt.geom.AffineTransform)>(trans);
        if $z0 == 0 goto label1;

        $z0 = virtualinvoke trans.<java.awt.geom.AffineTransform: boolean isIdentity()>();
        if $z0 != 0 goto label1;

        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        newTransform = $z0;
        if newClip != 0 goto label3;

        if newTransform == 0 goto label5;

     label3:
        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r1.<java.io.StringWriter: void write(java.lang.String)>("q\n");
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFState graphicsState>;
        virtualinvoke $r0.<org.apache.fop.pdf.PDFState: void push()>();
        if newTransform == 0 goto label4;

        specialinvoke this.<org.apache.fop.svg.PDFGraphics2D: void concatMatrix(double[])>(tranvals);

     label4:
        if newClip == 0 goto label5;

        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void writeClip(java.awt.Shape)>(imclip);

     label5:
        $i1 = virtualinvoke c.<java.awt.Color: int getAlpha()>();
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void applyAlpha(int,int)>($i1, 255);
        c = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Color getColor()>();
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void applyColor(java.awt.Color,boolean)>(c, 1);
        c = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Color getBackground()>();
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void applyColor(java.awt.Color,boolean)>(c, 0);
        paint = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Paint getPaint()>();
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFState graphicsState>;
        $z0 = virtualinvoke $r0.<org.apache.fop.pdf.PDFState: boolean setPaint(java.awt.Paint)>(paint);
        if $z0 == 0 goto label8;

        $z0 = virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: boolean applyPaint(java.awt.Paint,boolean)>(paint, 1);
        if $z0 != 0 goto label8;

        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: boolean applyUnknownPaint(java.awt.Paint,java.awt.Shape)>(paint, s);
        if newClip != 0 goto label6;

        if newTransform == 0 goto label7;

     label6:
        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r1.<java.io.StringWriter: void write(java.lang.String)>("Q\n");
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFState graphicsState>;
        virtualinvoke $r0.<org.apache.fop.pdf.PDFState: org.apache.fop.pdf.PDFState$Data pop()>();

     label7:
        return;

     label8:
        $r3 = <org.apache.fop.svg.PDFGraphics2D: java.awt.geom.AffineTransform IDENTITY_TRANSFORM>;
        iter = interfaceinvoke s.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>($r3);
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void processPathIterator(java.awt.geom.PathIterator)>(iter);
        $z1 = 1;
        $z2 = 0;
        $i2 = interfaceinvoke iter.<java.awt.geom.PathIterator: int getWindingRule()>();
        if $i2 != 0 goto label9;

        $z3 = 1;
        goto label10;

     label9:
        $z3 = 0;

     label10:
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void doDrawing(boolean,boolean,boolean)>($z1, $z2, $z3);
        if newClip != 0 goto label11;

        if newTransform == 0 goto label12;

     label11:
        $r1 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r1.<java.io.StringWriter: void write(java.lang.String)>("Q\n");
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFState graphicsState>;
        virtualinvoke $r0.<org.apache.fop.pdf.PDFState: org.apache.fop.pdf.PDFState$Data pop()>();

     label12:
        return;
    }

    protected void checkTransparencyAllowed()
    {
        org.apache.fop.svg.PDFGraphics2D this;
        org.apache.fop.pdf.PDFDocument $r0;
        org.apache.fop.pdf.PDFProfile $r1;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: org.apache.fop.pdf.PDFDocument pdfDoc>;
        $r1 = virtualinvoke $r0.<org.apache.fop.pdf.PDFDocument: org.apache.fop.pdf.PDFProfile getProfile()>();
        virtualinvoke $r1.<org.apache.fop.pdf.PDFProfile: void verifyTransparencyAllowed(java.lang.String)>("Java2D graphics");
        return;
    }

    public void processPathIterator(java.awt.geom.PathIterator)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.awt.geom.PathIterator iter;
        double[] vals;
        int type;
        boolean $z0;
        java.io.StringWriter $r0;
        java.lang.StringBuffer $r1;
        double $d0;
        java.lang.String $r2, $r3;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        iter := @parameter0: java.awt.geom.PathIterator;

     label0:
        $z0 = interfaceinvoke iter.<java.awt.geom.PathIterator: boolean isDone()>();
        if $z0 != 0 goto label7;

        vals = newarray (double)[6];
        type = interfaceinvoke iter.<java.awt.geom.PathIterator: int currentSegment(double[])>(vals);
        tableswitch(type)
        {
            case 0: goto label3;
            case 1: goto label2;
            case 2: goto label4;
            case 3: goto label1;
            case 4: goto label5;
            default: goto label6;
        };

     label1:
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $d0 = vals[0];
        $r2 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d0, 8);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d0 = vals[1];
        $r2 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d0, 8);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d0 = vals[2];
        $r2 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d0, 8);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d0 = vals[3];
        $r2 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d0, 8);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d0 = vals[4];
        $r2 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d0, 8);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d0 = vals[5];
        $r2 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d0, 8);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" c\n");
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>($r3);
        goto label6;

     label2:
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $d0 = vals[0];
        $r2 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d0, 8);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d0 = vals[1];
        $r2 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d0, 8);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" l\n");
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>($r3);
        goto label6;

     label3:
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $d0 = vals[0];
        $r2 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d0, 8);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d0 = vals[1];
        $r2 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d0, 8);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" m\n");
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>($r3);
        goto label6;

     label4:
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $d0 = vals[0];
        $r2 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d0, 8);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d0 = vals[1];
        $r2 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d0, 8);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d0 = vals[2];
        $r2 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d0, 8);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d0 = vals[3];
        $r2 = staticinvoke <org.apache.fop.pdf.PDFNumber: java.lang.String doubleOut(double,int)>($d0, 8);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" y\n");
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>($r3);
        goto label6;

     label5:
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>("h\n");
        goto label6;

     label6:
        interfaceinvoke iter.<java.awt.geom.PathIterator: void next()>();
        goto label0;

     label7:
        return;
    }

    protected void doDrawing(boolean, boolean, boolean)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        boolean fill, stroke, nonzero;
        java.io.StringWriter $r0;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        fill := @parameter0: boolean;
        stroke := @parameter1: boolean;
        nonzero := @parameter2: boolean;
        virtualinvoke this.<org.apache.fop.svg.PDFGraphics2D: void preparePainting()>();
        if fill == 0 goto label3;

        if stroke == 0 goto label1;

        if nonzero == 0 goto label0;

        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>("B*\n");
        goto label4;

     label0:
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>("B\n");
        goto label4;

     label1:
        if nonzero == 0 goto label2;

        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>("f*\n");
        goto label4;

     label2:
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>("f\n");
        goto label4;

     label3:
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.io.StringWriter currentStream>;
        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>("S\n");

     label4:
        return;
    }

    public java.awt.GraphicsConfiguration getDeviceConfiguration()
    {
        org.apache.fop.svg.PDFGraphics2D this;
        org.apache.fop.svg.PDFGraphicsConfiguration $r0;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        $r0 = new org.apache.fop.svg.PDFGraphicsConfiguration;
        specialinvoke $r0.<org.apache.fop.svg.PDFGraphicsConfiguration: void <init>()>();
        return $r0;
    }

    public java.awt.FontMetrics getFontMetrics(java.awt.Font)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.awt.Font f;
        java.awt.Graphics2D $r0;
        java.awt.FontMetrics $r1;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        f := @parameter0: java.awt.Font;
        $r0 = this.<org.apache.fop.svg.PDFGraphics2D: java.awt.Graphics2D fmg>;
        $r1 = virtualinvoke $r0.<java.awt.Graphics2D: java.awt.FontMetrics getFontMetrics(java.awt.Font)>(f);
        return $r1;
    }

    public void setXORMode(java.awt.Color)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        java.awt.Color c1;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        c1 := @parameter0: java.awt.Color;
        return;
    }

    public void copyArea(int, int, int, int, int, int)
    {
        org.apache.fop.svg.PDFGraphics2D this;
        int x, y, width, height, dx, dy;

        this := @this: org.apache.fop.svg.PDFGraphics2D;
        x := @parameter0: int;
        y := @parameter1: int;
        width := @parameter2: int;
        height := @parameter3: int;
        dx := @parameter4: int;
        dy := @parameter5: int;
        return;
    }

    static void <clinit>()
    {
        java.awt.geom.AffineTransform $r0;

        $r0 = new java.awt.geom.AffineTransform;
        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>()>();
        <org.apache.fop.svg.PDFGraphics2D: java.awt.geom.AffineTransform IDENTITY_TRANSFORM> = $r0;
        return;
    }
}
