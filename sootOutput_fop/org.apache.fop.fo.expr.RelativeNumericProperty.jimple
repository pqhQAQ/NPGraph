public class org.apache.fop.fo.expr.RelativeNumericProperty extends org.apache.fop.fo.properties.Property implements org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.Length
{
    public static final int ADDITION;
    public static final int SUBTRACTION;
    public static final int MULTIPLY;
    public static final int DIVIDE;
    public static final int MODULO;
    public static final int NEGATE;
    public static final int ABS;
    public static final int MAX;
    public static final int MIN;
    private static java.lang.String operations;
    private int operation;
    private org.apache.fop.datatypes.Numeric op1;
    private org.apache.fop.datatypes.Numeric op2;
    private int dimension;

    public void <init>(int, org.apache.fop.datatypes.Numeric, org.apache.fop.datatypes.Numeric)
    {
        org.apache.fop.fo.expr.RelativeNumericProperty this;
        int operation, $i0, $i1;
        org.apache.fop.datatypes.Numeric op1, op2;

        this := @this: org.apache.fop.fo.expr.RelativeNumericProperty;
        operation := @parameter0: int;
        op1 := @parameter1: org.apache.fop.datatypes.Numeric;
        op2 := @parameter2: org.apache.fop.datatypes.Numeric;
        specialinvoke this.<org.apache.fop.fo.properties.Property: void <init>()>();
        this.<org.apache.fop.fo.expr.RelativeNumericProperty: int operation> = operation;
        this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op1> = op1;
        this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op2> = op2;
        lookupswitch(operation)
        {
            case 3: goto label0;
            case 4: goto label1;
            default: goto label2;
        };

     label0:
        $i0 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: int getDimension()>();
        $i1 = interfaceinvoke op2.<org.apache.fop.datatypes.Numeric: int getDimension()>();
        $i0 = $i0 + $i1;
        this.<org.apache.fop.fo.expr.RelativeNumericProperty: int dimension> = $i0;
        goto label3;

     label1:
        $i0 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: int getDimension()>();
        $i1 = interfaceinvoke op2.<org.apache.fop.datatypes.Numeric: int getDimension()>();
        $i0 = $i0 - $i1;
        this.<org.apache.fop.fo.expr.RelativeNumericProperty: int dimension> = $i0;
        goto label3;

     label2:
        $i0 = interfaceinvoke op1.<org.apache.fop.datatypes.Numeric: int getDimension()>();
        this.<org.apache.fop.fo.expr.RelativeNumericProperty: int dimension> = $i0;

     label3:
        return;
    }

    public void <init>(int, org.apache.fop.datatypes.Numeric)
    {
        org.apache.fop.fo.expr.RelativeNumericProperty this;
        int operation, $i0;
        org.apache.fop.datatypes.Numeric op;

        this := @this: org.apache.fop.fo.expr.RelativeNumericProperty;
        operation := @parameter0: int;
        op := @parameter1: org.apache.fop.datatypes.Numeric;
        specialinvoke this.<org.apache.fop.fo.properties.Property: void <init>()>();
        this.<org.apache.fop.fo.expr.RelativeNumericProperty: int operation> = operation;
        this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op1> = op;
        $i0 = interfaceinvoke op.<org.apache.fop.datatypes.Numeric: int getDimension()>();
        this.<org.apache.fop.fo.expr.RelativeNumericProperty: int dimension> = $i0;
        return;
    }

    private org.apache.fop.datatypes.Numeric getResolved(org.apache.fop.datatypes.PercentBaseContext) throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.fo.expr.RelativeNumericProperty this;
        org.apache.fop.datatypes.PercentBaseContext context;
        int $i0, $i1;
        org.apache.fop.datatypes.Numeric $r0, $r1;
        org.apache.fop.fo.expr.PropertyException $r2;
        java.lang.StringBuffer $r3;
        java.lang.String $r4;

        this := @this: org.apache.fop.fo.expr.RelativeNumericProperty;
        context := @parameter0: org.apache.fop.datatypes.PercentBaseContext;
        $i0 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: int operation>;
        tableswitch($i0)
        {
            case 1: goto label0;
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label3;
            case 5: goto label4;
            case 6: goto label5;
            case 7: goto label6;
            case 8: goto label7;
            case 9: goto label8;
            default: goto label9;
        };

     label0:
        $r0 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op1>;
        $r1 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op2>;
        $r0 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric addition2(org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.PercentBaseContext)>($r0, $r1, context);
        return $r0;

     label1:
        $r0 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op1>;
        $r1 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op2>;
        $r0 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric subtraction2(org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.PercentBaseContext)>($r0, $r1, context);
        return $r0;

     label2:
        $r0 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op1>;
        $r1 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op2>;
        $r0 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric multiply2(org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.PercentBaseContext)>($r0, $r1, context);
        return $r0;

     label3:
        $r0 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op1>;
        $r1 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op2>;
        $r0 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric divide2(org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.PercentBaseContext)>($r0, $r1, context);
        return $r0;

     label4:
        $r0 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op1>;
        $r1 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op2>;
        $r0 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric modulo2(org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.PercentBaseContext)>($r0, $r1, context);
        return $r0;

     label5:
        $r0 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op1>;
        $r0 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric negate2(org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.PercentBaseContext)>($r0, context);
        return $r0;

     label6:
        $r0 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op1>;
        $r0 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric abs2(org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.PercentBaseContext)>($r0, context);
        return $r0;

     label7:
        $r0 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op1>;
        $r1 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op2>;
        $r0 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric max2(org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.PercentBaseContext)>($r0, $r1, context);
        return $r0;

     label8:
        $r0 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op1>;
        $r1 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op2>;
        $r0 = staticinvoke <org.apache.fop.fo.expr.NumericOp: org.apache.fop.datatypes.Numeric min2(org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.Numeric,org.apache.fop.datatypes.PercentBaseContext)>($r0, $r1, context);
        return $r0;

     label9:
        $r2 = new org.apache.fop.fo.expr.PropertyException;
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown expr operation ");
        $i1 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: int operation>;
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);
        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r2.<org.apache.fop.fo.expr.PropertyException: void <init>(java.lang.String)>($r4);
        throw $r2;
    }

    public double getNumericValue() throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.fo.expr.RelativeNumericProperty this;
        org.apache.fop.datatypes.Numeric $r0;
        double $d0;

        this := @this: org.apache.fop.fo.expr.RelativeNumericProperty;
        $r0 = specialinvoke this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric getResolved(org.apache.fop.datatypes.PercentBaseContext)>(null);
        $d0 = interfaceinvoke $r0.<org.apache.fop.datatypes.Numeric: double getNumericValue(org.apache.fop.datatypes.PercentBaseContext)>(null);
        return $d0;
    }

    public double getNumericValue(org.apache.fop.datatypes.PercentBaseContext) throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.fo.expr.RelativeNumericProperty this;
        org.apache.fop.datatypes.PercentBaseContext context;
        org.apache.fop.datatypes.Numeric $r0;
        double $d0;

        this := @this: org.apache.fop.fo.expr.RelativeNumericProperty;
        context := @parameter0: org.apache.fop.datatypes.PercentBaseContext;
        $r0 = specialinvoke this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric getResolved(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $d0 = interfaceinvoke $r0.<org.apache.fop.datatypes.Numeric: double getNumericValue(org.apache.fop.datatypes.PercentBaseContext)>(context);
        return $d0;
    }

    public int getDimension()
    {
        org.apache.fop.fo.expr.RelativeNumericProperty this;
        int $i0;

        this := @this: org.apache.fop.fo.expr.RelativeNumericProperty;
        $i0 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: int dimension>;
        return $i0;
    }

    public boolean isAbsolute()
    {
        org.apache.fop.fo.expr.RelativeNumericProperty this;

        this := @this: org.apache.fop.fo.expr.RelativeNumericProperty;
        return 0;
    }

    public org.apache.fop.datatypes.Length getLength()
    {
        org.apache.fop.fo.expr.RelativeNumericProperty this;
        int $i0, $i1;
        org.apache.commons.logging.Log $r0;
        java.lang.StringBuffer $r1;
        java.lang.String $r2;

        this := @this: org.apache.fop.fo.expr.RelativeNumericProperty;
        $i0 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: int dimension>;
        if $i0 != 1 goto label0;

        return this;

     label0:
        $r0 = <org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t create length with dimension ");
        $i1 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: int dimension>;
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r2);
        return null;
    }

    public org.apache.fop.datatypes.Numeric getNumeric()
    {
        org.apache.fop.fo.expr.RelativeNumericProperty this;

        this := @this: org.apache.fop.fo.expr.RelativeNumericProperty;
        return this;
    }

    public int getValue()
    {
        org.apache.fop.fo.expr.RelativeNumericProperty this;
        org.apache.fop.fo.expr.PropertyException exc, $r0;
        double $d0;
        int $i0;
        org.apache.commons.logging.Log $r1;

        this := @this: org.apache.fop.fo.expr.RelativeNumericProperty;

     label0:
        $d0 = virtualinvoke this.<org.apache.fop.fo.expr.RelativeNumericProperty: double getNumericValue()>();
        $i0 = (int) $d0;

     label1:
        return $i0;

     label2:
        $r0 := @caughtexception;
        exc = $r0;
        $r1 = <org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.commons.logging.Log log>;
        interfaceinvoke $r1.<org.apache.commons.logging.Log: void error(java.lang.Object)>(exc);
        return 0;

        catch org.apache.fop.fo.expr.PropertyException from label0 to label1 with label2;
    }

    public int getValue(org.apache.fop.datatypes.PercentBaseContext)
    {
        org.apache.fop.fo.expr.RelativeNumericProperty this;
        org.apache.fop.datatypes.PercentBaseContext context;
        org.apache.fop.fo.expr.PropertyException exc, $r0;
        double $d0;
        int $i0;
        org.apache.commons.logging.Log $r1;

        this := @this: org.apache.fop.fo.expr.RelativeNumericProperty;
        context := @parameter0: org.apache.fop.datatypes.PercentBaseContext;

     label0:
        $d0 = virtualinvoke this.<org.apache.fop.fo.expr.RelativeNumericProperty: double getNumericValue(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $i0 = (int) $d0;

     label1:
        return $i0;

     label2:
        $r0 := @caughtexception;
        exc = $r0;
        $r1 = <org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.commons.logging.Log log>;
        interfaceinvoke $r1.<org.apache.commons.logging.Log: void error(java.lang.Object)>(exc);
        return 0;

        catch org.apache.fop.fo.expr.PropertyException from label0 to label1 with label2;
    }

    public java.lang.String toString()
    {
        org.apache.fop.fo.expr.RelativeNumericProperty this;
        int $i0, $i1, $i3;
        java.lang.StringBuffer $r0;
        org.apache.fop.datatypes.Numeric $r1;
        java.lang.String $r2, $r3;
        char $c2;

        this := @this: org.apache.fop.fo.expr.RelativeNumericProperty;
        $i0 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: int operation>;
        tableswitch($i0)
        {
            case 1: goto label0;
            case 2: goto label0;
            case 3: goto label0;
            case 4: goto label0;
            case 5: goto label0;
            case 6: goto label1;
            case 7: goto label4;
            case 8: goto label2;
            case 9: goto label3;
            default: goto label5;
        };

     label0:
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");
        $r1 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op1>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $r2 = <org.apache.fop.fo.expr.RelativeNumericProperty: java.lang.String operations>;
        $i1 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: int operation>;
        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i1);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);
        $r1 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op2>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r3;

     label1:
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");
        $r1 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op1>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r3;

     label2:
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("max(");
        $r1 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op1>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");
        $r1 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op2>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r3;

     label3:
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("min(");
        $r1 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op1>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");
        $r1 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op2>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r3;

     label4:
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("abs(");
        $r1 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: org.apache.fop.datatypes.Numeric op1>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r3;

     label5:
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unknown operation ");
        $i3 = this.<org.apache.fop.fo.expr.RelativeNumericProperty: int operation>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r3;
    }

    static void <clinit>()
    {
        <org.apache.fop.fo.expr.RelativeNumericProperty: java.lang.String operations> = " +-*/%";
        return;
    }
}
