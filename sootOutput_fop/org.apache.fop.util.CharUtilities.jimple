public class org.apache.fop.util.CharUtilities extends java.lang.Object
{
    public static final char CODE_EOT;
    public static final int UCWHITESPACE;
    public static final int LINEFEED;
    public static final int EOT;
    public static final int NONWHITESPACE;
    public static final int XMLWHITESPACE;
    public static final char SPACE;
    public static final char NBSPACE;
    public static final char ZERO_WIDTH_SPACE;
    public static final char WORD_JOINER;
    public static final char ZERO_WIDTH_JOINER;
    public static final char ZERO_WIDTH_NOBREAK_SPACE;
    public static final char SOFT_HYPHEN;
    public static final char MISSING_IDEOGRAPH;
    public static final char NOT_A_CHARACTER;

    protected void <init>()
    {
        org.apache.fop.util.CharUtilities this;
        java.lang.UnsupportedOperationException $r0;

        this := @this: org.apache.fop.util.CharUtilities;
        specialinvoke this.<java.lang.Object: void <init>()>();
        $r0 = new java.lang.UnsupportedOperationException;
        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r0;
    }

    public static int classOf(char)
    {
        char c;
        boolean $z0;

        c := @parameter0: char;
        if c != 0 goto label0;

        return 2;

     label0:
        if c != 10 goto label1;

        return 1;

     label1:
        if c == 32 goto label2;

        if c == 13 goto label2;

        if c != 9 goto label3;

     label2:
        return 4;

     label3:
        $z0 = staticinvoke <org.apache.fop.util.CharUtilities: boolean isAnySpace(char)>(c);
        if $z0 == 0 goto label4;

        return 0;

     label4:
        return 3;
    }

    public static boolean isBreakableSpace(char)
    {
        char c;
        boolean $z0;

        c := @parameter0: char;
        if c == 32 goto label0;

        $z0 = staticinvoke <org.apache.fop.util.CharUtilities: boolean isFixedWidthSpace(char)>(c);
        if $z0 == 0 goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isZeroWidthSpace(char)
    {
        char c;
        boolean $z0;

        c := @parameter0: char;
        if c == 8203 goto label0;

        if c == 8288 goto label0;

        if c != 65279 goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isFixedWidthSpace(char)
    {
        char c;
        boolean $z0;

        c := @parameter0: char;
        if c < 8192 goto label0;

        if c <= 8203 goto label1;

     label0:
        if c != 12288 goto label2;

     label1:
        $z0 = 1;
        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static boolean isNonBreakableSpace(char)
    {
        char c;
        boolean $z0;

        c := @parameter0: char;
        if c == 160 goto label0;

        if c == 8239 goto label0;

        if c == 12288 goto label0;

        if c == 8288 goto label0;

        if c != 65279 goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isAdjustableSpace(char)
    {
        char c;
        boolean $z0;

        c := @parameter0: char;
        if c == 32 goto label0;

        if c != 160 goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isAnySpace(char)
    {
        char c;
        boolean 'ret', $z0;

        c := @parameter0: char;
        $z0 = staticinvoke <org.apache.fop.util.CharUtilities: boolean isBreakableSpace(char)>(c);
        if $z0 != 0 goto label0;

        $z0 = staticinvoke <org.apache.fop.util.CharUtilities: boolean isNonBreakableSpace(char)>(c);
        if $z0 == 0 goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        'ret' = $z0;
        return 'ret';
    }

    public static boolean isAlphabetic(char)
    {
        char ch;
        int generalCategory;

        ch := @parameter0: char;
        generalCategory = staticinvoke <java.lang.Character: int getType(char)>(ch);
        tableswitch(generalCategory)
        {
            case 1: goto label0;
            case 2: goto label0;
            case 3: goto label0;
            case 4: goto label0;
            case 5: goto label0;
            case 6: goto label1;
            case 7: goto label1;
            case 8: goto label1;
            case 9: goto label1;
            case 10: goto label0;
            default: goto label1;
        };

     label0:
        return 1;

     label1:
        return 0;
    }
}
