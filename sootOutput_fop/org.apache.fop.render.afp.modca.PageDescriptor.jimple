public class org.apache.fop.render.afp.modca.PageDescriptor extends org.apache.fop.render.afp.modca.AbstractDescriptor
{

    public void <init>(int, int, int, int)
    {
        org.apache.fop.render.afp.modca.PageDescriptor this;
        int width, height, widthResolution, heightResolution;

        this := @this: org.apache.fop.render.afp.modca.PageDescriptor;
        width := @parameter0: int;
        height := @parameter1: int;
        widthResolution := @parameter2: int;
        heightResolution := @parameter3: int;
        specialinvoke this.<org.apache.fop.render.afp.modca.AbstractDescriptor: void <init>(int,int,int,int)>(width, height, widthResolution, heightResolution);
        return;
    }

    public void writeDataStream(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.fop.render.afp.modca.PageDescriptor this;
        java.io.OutputStream os;
        org.apache.commons.logging.Log $r0;
        java.lang.StringBuffer $r1;
        byte[] data, xdpi, ydpi, x, y;
        int $i0, $i1;
        java.lang.String $r2;
        byte $b2;

        this := @this: org.apache.fop.render.afp.modca.PageDescriptor;
        os := @parameter0: java.io.OutputStream;
        $r0 = <org.apache.fop.render.afp.modca.PageDescriptor: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("width=");
        $i0 = this.<org.apache.fop.render.afp.modca.PageDescriptor: int width>;
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r2);
        $r0 = <org.apache.fop.render.afp.modca.PageDescriptor: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("height=");
        $i0 = this.<org.apache.fop.render.afp.modca.PageDescriptor: int height>;
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r2);
        data = newarray (byte)[24];
        data[0] = 90;
        data[1] = 0;
        data[2] = 23;
        data[3] = -45;
        data[4] = -90;
        data[5] = -81;
        data[6] = 0;
        data[7] = 0;
        data[8] = 0;
        data[9] = 0;
        data[10] = 0;
        $i1 = this.<org.apache.fop.render.afp.modca.PageDescriptor: int widthResolution>;
        $i1 = $i1 * 10;
        xdpi = staticinvoke <org.apache.fop.render.afp.tools.BinaryUtils: byte[] convert(int,int)>($i1, 2);
        $b2 = xdpi[0];
        data[11] = $b2;
        $b2 = xdpi[1];
        data[12] = $b2;
        $i1 = this.<org.apache.fop.render.afp.modca.PageDescriptor: int heightResolution>;
        $i1 = $i1 * 10;
        ydpi = staticinvoke <org.apache.fop.render.afp.tools.BinaryUtils: byte[] convert(int,int)>($i1, 2);
        $b2 = ydpi[0];
        data[13] = $b2;
        $b2 = ydpi[1];
        data[14] = $b2;
        $i1 = this.<org.apache.fop.render.afp.modca.PageDescriptor: int width>;
        x = staticinvoke <org.apache.fop.render.afp.tools.BinaryUtils: byte[] convert(int,int)>($i1, 3);
        $b2 = x[0];
        data[15] = $b2;
        $b2 = x[1];
        data[16] = $b2;
        $b2 = x[2];
        data[17] = $b2;
        $i1 = this.<org.apache.fop.render.afp.modca.PageDescriptor: int height>;
        y = staticinvoke <org.apache.fop.render.afp.tools.BinaryUtils: byte[] convert(int,int)>($i1, 3);
        $b2 = y[0];
        data[18] = $b2;
        $b2 = y[1];
        data[19] = $b2;
        $b2 = y[2];
        data[20] = $b2;
        data[21] = 0;
        data[22] = 0;
        data[23] = 0;
        virtualinvoke os.<java.io.OutputStream: void write(byte[])>(data);
        return;
    }
}
