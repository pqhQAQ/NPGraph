public abstract class org.apache.fop.fonts.CustomFont extends org.apache.fop.fonts.Typeface implements org.apache.fop.fonts.FontDescriptor, org.apache.fop.fonts.MutableFont
{
    private java.lang.String fontName;
    private java.lang.String fullName;
    private java.util.Set familyNames;
    private java.lang.String fontSubName;
    private java.lang.String embedFileName;
    private java.lang.String embedResourceName;
    private org.apache.fop.fonts.FontResolver resolver;
    private int capHeight;
    private int xHeight;
    private int ascender;
    private int descender;
    private int[] fontBBox;
    private int flags;
    private int weight;
    private int stemV;
    private int italicAngle;
    private int missingWidth;
    private org.apache.fop.fonts.FontType fontType;
    private int firstChar;
    private int lastChar;
    private java.util.Map kerning;
    private boolean useKerning;

    public void <init>()
    {
        org.apache.fop.fonts.CustomFont this;
        int[] $r0;
        org.apache.fop.fonts.FontType $r1;

        this := @this: org.apache.fop.fonts.CustomFont;
        specialinvoke this.<org.apache.fop.fonts.Typeface: void <init>()>();
        this.<org.apache.fop.fonts.CustomFont: java.lang.String fontName> = null;
        this.<org.apache.fop.fonts.CustomFont: java.lang.String fullName> = null;
        this.<org.apache.fop.fonts.CustomFont: java.util.Set familyNames> = null;
        this.<org.apache.fop.fonts.CustomFont: java.lang.String fontSubName> = null;
        this.<org.apache.fop.fonts.CustomFont: java.lang.String embedFileName> = null;
        this.<org.apache.fop.fonts.CustomFont: java.lang.String embedResourceName> = null;
        this.<org.apache.fop.fonts.CustomFont: org.apache.fop.fonts.FontResolver resolver> = null;
        this.<org.apache.fop.fonts.CustomFont: int capHeight> = 0;
        this.<org.apache.fop.fonts.CustomFont: int xHeight> = 0;
        this.<org.apache.fop.fonts.CustomFont: int ascender> = 0;
        this.<org.apache.fop.fonts.CustomFont: int descender> = 0;
        $r0 = newarray (int)[4];
        $r0[0] = 0;
        $r0[1] = 0;
        $r0[2] = 0;
        $r0[3] = 0;
        this.<org.apache.fop.fonts.CustomFont: int[] fontBBox> = $r0;
        this.<org.apache.fop.fonts.CustomFont: int flags> = 4;
        this.<org.apache.fop.fonts.CustomFont: int weight> = 0;
        this.<org.apache.fop.fonts.CustomFont: int stemV> = 0;
        this.<org.apache.fop.fonts.CustomFont: int italicAngle> = 0;
        this.<org.apache.fop.fonts.CustomFont: int missingWidth> = 0;
        $r1 = <org.apache.fop.fonts.FontType: org.apache.fop.fonts.FontType TYPE1>;
        this.<org.apache.fop.fonts.CustomFont: org.apache.fop.fonts.FontType fontType> = $r1;
        this.<org.apache.fop.fonts.CustomFont: int firstChar> = 0;
        this.<org.apache.fop.fonts.CustomFont: int lastChar> = 255;
        this.<org.apache.fop.fonts.CustomFont: boolean useKerning> = 1;
        return;
    }

    public java.lang.String getFontName()
    {
        org.apache.fop.fonts.CustomFont this;
        java.lang.String $r0;

        this := @this: org.apache.fop.fonts.CustomFont;
        $r0 = this.<org.apache.fop.fonts.CustomFont: java.lang.String fontName>;
        return $r0;
    }

    public java.lang.String getEmbedFontName()
    {
        org.apache.fop.fonts.CustomFont this;
        java.lang.String $r0;

        this := @this: org.apache.fop.fonts.CustomFont;
        $r0 = virtualinvoke this.<org.apache.fop.fonts.CustomFont: java.lang.String getFontName()>();
        return $r0;
    }

    public java.lang.String getFullName()
    {
        org.apache.fop.fonts.CustomFont this;
        java.lang.String $r0;

        this := @this: org.apache.fop.fonts.CustomFont;
        $r0 = this.<org.apache.fop.fonts.CustomFont: java.lang.String fullName>;
        return $r0;
    }

    public java.util.Set getFamilyNames()
    {
        org.apache.fop.fonts.CustomFont this;
        java.util.Set $r0;

        this := @this: org.apache.fop.fonts.CustomFont;
        $r0 = this.<org.apache.fop.fonts.CustomFont: java.util.Set familyNames>;
        $r0 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r0);
        return $r0;
    }

    public java.lang.String getStrippedFontName()
    {
        org.apache.fop.fonts.CustomFont this;
        java.lang.String $r0;

        this := @this: org.apache.fop.fonts.CustomFont;
        $r0 = virtualinvoke this.<org.apache.fop.fonts.CustomFont: java.lang.String getFontName()>();
        $r0 = staticinvoke <org.apache.fop.fonts.FontUtil: java.lang.String stripWhiteSpace(java.lang.String)>($r0);
        return $r0;
    }

    public java.lang.String getFontSubName()
    {
        org.apache.fop.fonts.CustomFont this;
        java.lang.String $r0;

        this := @this: org.apache.fop.fonts.CustomFont;
        $r0 = this.<org.apache.fop.fonts.CustomFont: java.lang.String fontSubName>;
        return $r0;
    }

    public java.lang.String getEmbedFileName()
    {
        org.apache.fop.fonts.CustomFont this;
        java.lang.String $r0;

        this := @this: org.apache.fop.fonts.CustomFont;
        $r0 = this.<org.apache.fop.fonts.CustomFont: java.lang.String embedFileName>;
        return $r0;
    }

    public javax.xml.transform.Source getEmbedFileSource() throws java.io.IOException
    {
        org.apache.fop.fonts.CustomFont this;
        javax.xml.transform.Source result;
        java.lang.StringBuffer $r0;
        org.apache.fop.fonts.FontResolver $r1;
        java.lang.String $r2, $r3, $r5, $r6;
        java.io.IOException $r4;

        this := @this: org.apache.fop.fonts.CustomFont;
        result = null;
        $r1 = this.<org.apache.fop.fonts.CustomFont: org.apache.fop.fonts.FontResolver resolver>;
        if $r1 == null goto label0;

        $r2 = this.<org.apache.fop.fonts.CustomFont: java.lang.String embedFileName>;
        if $r2 == null goto label0;

        $r1 = this.<org.apache.fop.fonts.CustomFont: org.apache.fop.fonts.FontResolver resolver>;
        $r3 = this.<org.apache.fop.fonts.CustomFont: java.lang.String embedFileName>;
        result = interfaceinvoke $r1.<org.apache.fop.fonts.FontResolver: javax.xml.transform.Source resolve(java.lang.String)>($r3);
        if result != null goto label0;

        $r4 = new java.io.IOException;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to resolve Source \'");
        $r5 = this.<org.apache.fop.fonts.CustomFont: java.lang.String embedFileName>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' for embedded font");
        $r6 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r6);
        throw $r4;

     label0:
        return result;
    }

    public java.lang.String getEmbedResourceName()
    {
        org.apache.fop.fonts.CustomFont this;
        java.lang.String $r0;

        this := @this: org.apache.fop.fonts.CustomFont;
        $r0 = this.<org.apache.fop.fonts.CustomFont: java.lang.String embedResourceName>;
        return $r0;
    }

    public int getAscender()
    {
        org.apache.fop.fonts.CustomFont this;
        int $i0;

        this := @this: org.apache.fop.fonts.CustomFont;
        $i0 = this.<org.apache.fop.fonts.CustomFont: int ascender>;
        return $i0;
    }

    public int getDescender()
    {
        org.apache.fop.fonts.CustomFont this;
        int $i0;

        this := @this: org.apache.fop.fonts.CustomFont;
        $i0 = this.<org.apache.fop.fonts.CustomFont: int descender>;
        return $i0;
    }

    public int getCapHeight()
    {
        org.apache.fop.fonts.CustomFont this;
        int $i0;

        this := @this: org.apache.fop.fonts.CustomFont;
        $i0 = this.<org.apache.fop.fonts.CustomFont: int capHeight>;
        return $i0;
    }

    public int getAscender(int)
    {
        org.apache.fop.fonts.CustomFont this;
        int size, $i0, $i1;

        this := @this: org.apache.fop.fonts.CustomFont;
        size := @parameter0: int;
        $i0 = this.<org.apache.fop.fonts.CustomFont: int ascender>;
        $i1 = size * $i0;
        return $i1;
    }

    public int getDescender(int)
    {
        org.apache.fop.fonts.CustomFont this;
        int size, $i0, $i1;

        this := @this: org.apache.fop.fonts.CustomFont;
        size := @parameter0: int;
        $i0 = this.<org.apache.fop.fonts.CustomFont: int descender>;
        $i1 = size * $i0;
        return $i1;
    }

    public int getCapHeight(int)
    {
        org.apache.fop.fonts.CustomFont this;
        int size, $i0, $i1;

        this := @this: org.apache.fop.fonts.CustomFont;
        size := @parameter0: int;
        $i0 = this.<org.apache.fop.fonts.CustomFont: int capHeight>;
        $i1 = size * $i0;
        return $i1;
    }

    public int getXHeight(int)
    {
        org.apache.fop.fonts.CustomFont this;
        int size, $i0, $i1;

        this := @this: org.apache.fop.fonts.CustomFont;
        size := @parameter0: int;
        $i0 = this.<org.apache.fop.fonts.CustomFont: int xHeight>;
        $i1 = size * $i0;
        return $i1;
    }

    public int[] getFontBBox()
    {
        org.apache.fop.fonts.CustomFont this;
        int[] $r0;

        this := @this: org.apache.fop.fonts.CustomFont;
        $r0 = this.<org.apache.fop.fonts.CustomFont: int[] fontBBox>;
        return $r0;
    }

    public int getFlags()
    {
        org.apache.fop.fonts.CustomFont this;
        int $i0;

        this := @this: org.apache.fop.fonts.CustomFont;
        $i0 = this.<org.apache.fop.fonts.CustomFont: int flags>;
        return $i0;
    }

    public boolean isSymbolicFont()
    {
        org.apache.fop.fonts.CustomFont this;
        int $i0;
        java.lang.String $r0, $r1;
        boolean $z0;

        this := @this: org.apache.fop.fonts.CustomFont;
        $i0 = virtualinvoke this.<org.apache.fop.fonts.CustomFont: int getFlags()>();
        $i0 = $i0 & 4;
        if $i0 != 0 goto label0;

        $r0 = "ZapfDingbatsEncoding";
        $r1 = virtualinvoke this.<org.apache.fop.fonts.CustomFont: java.lang.String getEncoding()>();
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);
        if $z0 == 0 goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getWeight()
    {
        org.apache.fop.fonts.CustomFont this;
        int $i0;

        this := @this: org.apache.fop.fonts.CustomFont;
        $i0 = this.<org.apache.fop.fonts.CustomFont: int weight>;
        return $i0;
    }

    public int getStemV()
    {
        org.apache.fop.fonts.CustomFont this;
        int $i0;

        this := @this: org.apache.fop.fonts.CustomFont;
        $i0 = this.<org.apache.fop.fonts.CustomFont: int stemV>;
        return $i0;
    }

    public int getItalicAngle()
    {
        org.apache.fop.fonts.CustomFont this;
        int $i0;

        this := @this: org.apache.fop.fonts.CustomFont;
        $i0 = this.<org.apache.fop.fonts.CustomFont: int italicAngle>;
        return $i0;
    }

    public int getMissingWidth()
    {
        org.apache.fop.fonts.CustomFont this;
        int $i0;

        this := @this: org.apache.fop.fonts.CustomFont;
        $i0 = this.<org.apache.fop.fonts.CustomFont: int missingWidth>;
        return $i0;
    }

    public org.apache.fop.fonts.FontType getFontType()
    {
        org.apache.fop.fonts.CustomFont this;
        org.apache.fop.fonts.FontType $r0;

        this := @this: org.apache.fop.fonts.CustomFont;
        $r0 = this.<org.apache.fop.fonts.CustomFont: org.apache.fop.fonts.FontType fontType>;
        return $r0;
    }

    public int getFirstChar()
    {
        org.apache.fop.fonts.CustomFont this;
        int $i0;

        this := @this: org.apache.fop.fonts.CustomFont;
        $i0 = this.<org.apache.fop.fonts.CustomFont: int firstChar>;
        return $i0;
    }

    public int getLastChar()
    {
        org.apache.fop.fonts.CustomFont this;
        int $i0;

        this := @this: org.apache.fop.fonts.CustomFont;
        $i0 = this.<org.apache.fop.fonts.CustomFont: int lastChar>;
        return $i0;
    }

    public boolean isKerningEnabled()
    {
        org.apache.fop.fonts.CustomFont this;
        boolean $z0;

        this := @this: org.apache.fop.fonts.CustomFont;
        $z0 = this.<org.apache.fop.fonts.CustomFont: boolean useKerning>;
        return $z0;
    }

    public final boolean hasKerningInfo()
    {
        org.apache.fop.fonts.CustomFont this;
        boolean $z0;
        java.util.Map $r0;

        this := @this: org.apache.fop.fonts.CustomFont;
        $z0 = virtualinvoke this.<org.apache.fop.fonts.CustomFont: boolean isKerningEnabled()>();
        if $z0 == 0 goto label0;

        $r0 = this.<org.apache.fop.fonts.CustomFont: java.util.Map kerning>;
        if $r0 == null goto label0;

        $r0 = this.<org.apache.fop.fonts.CustomFont: java.util.Map kerning>;
        $z0 = interfaceinvoke $r0.<java.util.Map: boolean isEmpty()>();
        if $z0 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public final java.util.Map getKerningInfo()
    {
        org.apache.fop.fonts.CustomFont this;
        boolean $z0;
        java.util.Map $r0;

        this := @this: org.apache.fop.fonts.CustomFont;
        $z0 = virtualinvoke this.<org.apache.fop.fonts.CustomFont: boolean hasKerningInfo()>();
        if $z0 == 0 goto label0;

        $r0 = this.<org.apache.fop.fonts.CustomFont: java.util.Map kerning>;
        return $r0;

     label0:
        $r0 = <java.util.Collections: java.util.Map EMPTY_MAP>;
        return $r0;
    }

    public void setFontName(java.lang.String)
    {
        org.apache.fop.fonts.CustomFont this;
        java.lang.String name;

        this := @this: org.apache.fop.fonts.CustomFont;
        name := @parameter0: java.lang.String;
        this.<org.apache.fop.fonts.CustomFont: java.lang.String fontName> = name;
        return;
    }

    public void setFullName(java.lang.String)
    {
        org.apache.fop.fonts.CustomFont this;
        java.lang.String name;

        this := @this: org.apache.fop.fonts.CustomFont;
        name := @parameter0: java.lang.String;
        this.<org.apache.fop.fonts.CustomFont: java.lang.String fullName> = name;
        return;
    }

    public void setFamilyNames(java.util.Set)
    {
        org.apache.fop.fonts.CustomFont this;
        java.util.Set names;
        java.util.HashSet $r0;

        this := @this: org.apache.fop.fonts.CustomFont;
        names := @parameter0: java.util.Set;
        $r0 = new java.util.HashSet;
        specialinvoke $r0.<java.util.HashSet: void <init>(java.util.Collection)>(names);
        this.<org.apache.fop.fonts.CustomFont: java.util.Set familyNames> = $r0;
        return;
    }

    public void setFontSubFamilyName(java.lang.String)
    {
        org.apache.fop.fonts.CustomFont this;
        java.lang.String subFamilyName;

        this := @this: org.apache.fop.fonts.CustomFont;
        subFamilyName := @parameter0: java.lang.String;
        this.<org.apache.fop.fonts.CustomFont: java.lang.String fontSubName> = subFamilyName;
        return;
    }

    public void setEmbedFileName(java.lang.String)
    {
        org.apache.fop.fonts.CustomFont this;
        java.lang.String path;

        this := @this: org.apache.fop.fonts.CustomFont;
        path := @parameter0: java.lang.String;
        this.<org.apache.fop.fonts.CustomFont: java.lang.String embedFileName> = path;
        return;
    }

    public void setEmbedResourceName(java.lang.String)
    {
        org.apache.fop.fonts.CustomFont this;
        java.lang.String name;

        this := @this: org.apache.fop.fonts.CustomFont;
        name := @parameter0: java.lang.String;
        this.<org.apache.fop.fonts.CustomFont: java.lang.String embedResourceName> = name;
        return;
    }

    public void setCapHeight(int)
    {
        org.apache.fop.fonts.CustomFont this;
        int capHeight;

        this := @this: org.apache.fop.fonts.CustomFont;
        capHeight := @parameter0: int;
        this.<org.apache.fop.fonts.CustomFont: int capHeight> = capHeight;
        return;
    }

    public void setXHeight(int)
    {
        org.apache.fop.fonts.CustomFont this;
        int xHeight;

        this := @this: org.apache.fop.fonts.CustomFont;
        xHeight := @parameter0: int;
        this.<org.apache.fop.fonts.CustomFont: int xHeight> = xHeight;
        return;
    }

    public void setAscender(int)
    {
        org.apache.fop.fonts.CustomFont this;
        int ascender;

        this := @this: org.apache.fop.fonts.CustomFont;
        ascender := @parameter0: int;
        this.<org.apache.fop.fonts.CustomFont: int ascender> = ascender;
        return;
    }

    public void setDescender(int)
    {
        org.apache.fop.fonts.CustomFont this;
        int descender;

        this := @this: org.apache.fop.fonts.CustomFont;
        descender := @parameter0: int;
        this.<org.apache.fop.fonts.CustomFont: int descender> = descender;
        return;
    }

    public void setFontBBox(int[])
    {
        org.apache.fop.fonts.CustomFont this;
        int[] bbox;

        this := @this: org.apache.fop.fonts.CustomFont;
        bbox := @parameter0: int[];
        this.<org.apache.fop.fonts.CustomFont: int[] fontBBox> = bbox;
        return;
    }

    public void setFlags(int)
    {
        org.apache.fop.fonts.CustomFont this;
        int flags;

        this := @this: org.apache.fop.fonts.CustomFont;
        flags := @parameter0: int;
        this.<org.apache.fop.fonts.CustomFont: int flags> = flags;
        return;
    }

    public void setWeight(int)
    {
        org.apache.fop.fonts.CustomFont this;
        int weight, $i0, weight;

        this := @this: org.apache.fop.fonts.CustomFont;
        weight := @parameter0: int;
        $i0 = weight / 100;
        weight = $i0 * 100;
        weight = staticinvoke <java.lang.Math: int max(int,int)>(100, weight);
        weight = staticinvoke <java.lang.Math: int min(int,int)>(900, weight);
        this.<org.apache.fop.fonts.CustomFont: int weight> = weight;
        return;
    }

    public void setStemV(int)
    {
        org.apache.fop.fonts.CustomFont this;
        int stemV;

        this := @this: org.apache.fop.fonts.CustomFont;
        stemV := @parameter0: int;
        this.<org.apache.fop.fonts.CustomFont: int stemV> = stemV;
        return;
    }

    public void setItalicAngle(int)
    {
        org.apache.fop.fonts.CustomFont this;
        int italicAngle;

        this := @this: org.apache.fop.fonts.CustomFont;
        italicAngle := @parameter0: int;
        this.<org.apache.fop.fonts.CustomFont: int italicAngle> = italicAngle;
        return;
    }

    public void setMissingWidth(int)
    {
        org.apache.fop.fonts.CustomFont this;
        int width;

        this := @this: org.apache.fop.fonts.CustomFont;
        width := @parameter0: int;
        this.<org.apache.fop.fonts.CustomFont: int missingWidth> = width;
        return;
    }

    public void setFontType(org.apache.fop.fonts.FontType)
    {
        org.apache.fop.fonts.CustomFont this;
        org.apache.fop.fonts.FontType fontType;

        this := @this: org.apache.fop.fonts.CustomFont;
        fontType := @parameter0: org.apache.fop.fonts.FontType;
        this.<org.apache.fop.fonts.CustomFont: org.apache.fop.fonts.FontType fontType> = fontType;
        return;
    }

    public void setFirstChar(int)
    {
        org.apache.fop.fonts.CustomFont this;
        int index;

        this := @this: org.apache.fop.fonts.CustomFont;
        index := @parameter0: int;
        this.<org.apache.fop.fonts.CustomFont: int firstChar> = index;
        return;
    }

    public void setLastChar(int)
    {
        org.apache.fop.fonts.CustomFont this;
        int index;

        this := @this: org.apache.fop.fonts.CustomFont;
        index := @parameter0: int;
        this.<org.apache.fop.fonts.CustomFont: int lastChar> = index;
        return;
    }

    public void setKerningEnabled(boolean)
    {
        org.apache.fop.fonts.CustomFont this;
        boolean enabled;

        this := @this: org.apache.fop.fonts.CustomFont;
        enabled := @parameter0: boolean;
        this.<org.apache.fop.fonts.CustomFont: boolean useKerning> = enabled;
        return;
    }

    public void setResolver(org.apache.fop.fonts.FontResolver)
    {
        org.apache.fop.fonts.CustomFont this;
        org.apache.fop.fonts.FontResolver resolver;

        this := @this: org.apache.fop.fonts.CustomFont;
        resolver := @parameter0: org.apache.fop.fonts.FontResolver;
        this.<org.apache.fop.fonts.CustomFont: org.apache.fop.fonts.FontResolver resolver> = resolver;
        return;
    }

    public void putKerningEntry(java.lang.Integer, java.util.Map)
    {
        org.apache.fop.fonts.CustomFont this;
        java.lang.Integer key;
        java.util.Map value, $r1;
        java.util.HashMap $r0;

        this := @this: org.apache.fop.fonts.CustomFont;
        key := @parameter0: java.lang.Integer;
        value := @parameter1: java.util.Map;
        $r1 = this.<org.apache.fop.fonts.CustomFont: java.util.Map kerning>;
        if $r1 != null goto label0;

        $r0 = new java.util.HashMap;
        specialinvoke $r0.<java.util.HashMap: void <init>()>();
        this.<org.apache.fop.fonts.CustomFont: java.util.Map kerning> = $r0;

     label0:
        $r1 = this.<org.apache.fop.fonts.CustomFont: java.util.Map kerning>;
        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, value);
        return;
    }

    public void replaceKerningMap(java.util.Map)
    {
        org.apache.fop.fonts.CustomFont this;
        java.util.Map kerningMap, $r0;

        this := @this: org.apache.fop.fonts.CustomFont;
        kerningMap := @parameter0: java.util.Map;
        if kerningMap != null goto label0;

        $r0 = <java.util.Collections: java.util.Map EMPTY_MAP>;
        this.<org.apache.fop.fonts.CustomFont: java.util.Map kerning> = $r0;
        goto label1;

     label0:
        this.<org.apache.fop.fonts.CustomFont: java.util.Map kerning> = kerningMap;

     label1:
        return;
    }
}
