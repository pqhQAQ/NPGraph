public class org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence extends org.apache.fop.layoutmgr.BlockKnuthSequence
{
    public int ignoreAtStart;
    public int ignoreAtEnd;
    private int startOn;
    private int displayAlign;
    private final org.apache.fop.layoutmgr.AbstractBreaker this$0;

    public void <init>(org.apache.fop.layoutmgr.AbstractBreaker, int, int)
    {
        org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence this;
        org.apache.fop.layoutmgr.AbstractBreaker this$0;
        int iStartOn, displayAlign;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence;
        this$0 := @parameter0: org.apache.fop.layoutmgr.AbstractBreaker;
        iStartOn := @parameter1: int;
        displayAlign := @parameter2: int;
        this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: org.apache.fop.layoutmgr.AbstractBreaker this$0> = this$0;
        specialinvoke this.<org.apache.fop.layoutmgr.BlockKnuthSequence: void <init>()>();
        this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int ignoreAtStart> = 0;
        this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int ignoreAtEnd> = 0;
        this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int startOn> = iStartOn;
        this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int displayAlign> = displayAlign;
        return;
    }

    public int getStartOn()
    {
        org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence this;
        int $i0;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence;
        $i0 = this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int startOn>;
        return $i0;
    }

    public int getDisplayAlign()
    {
        org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence this;
        int $i0;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence;
        $i0 = this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int displayAlign>;
        return $i0;
    }

    public org.apache.fop.layoutmgr.KnuthSequence endSequence()
    {
        org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence this;
        org.apache.fop.layoutmgr.KnuthSequence $r0;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence;
        $r0 = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: org.apache.fop.layoutmgr.KnuthSequence endSequence(org.apache.fop.layoutmgr.Position)>(null);
        return $r0;
    }

    public org.apache.fop.layoutmgr.KnuthSequence endSequence(org.apache.fop.layoutmgr.Position)
    {
        org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence this;
        org.apache.fop.layoutmgr.Position breakPosition;
        int $i0, $i1;
        java.lang.Object $r0;
        org.apache.fop.layoutmgr.KnuthElement $r1;
        boolean $z0;
        org.apache.fop.layoutmgr.AbstractBreaker $r2;
        org.apache.fop.layoutmgr.KnuthPenalty $r3;
        org.apache.fop.layoutmgr.KnuthGlue $r4;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence;
        breakPosition := @parameter0: org.apache.fop.layoutmgr.Position;

     label0:
        $i0 = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int size()>();
        $i1 = this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int ignoreAtStart>;
        if $i0 <= $i1 goto label1;

        $i1 = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int size()>();
        $i1 = $i1 - 1;
        $r0 = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: java.lang.Object get(int)>($i1);
        $r1 = (org.apache.fop.layoutmgr.KnuthElement) $r0;
        $z0 = virtualinvoke $r1.<org.apache.fop.layoutmgr.KnuthElement: boolean isBox()>();
        if $z0 != 0 goto label1;

        $i1 = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int size()>();
        $i1 = $i1 - 1;
        virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: java.lang.Object remove(int)>($i1);
        goto label0;

     label1:
        $i0 = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int size()>();
        $i1 = this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int ignoreAtStart>;
        if $i0 <= $i1 goto label4;

        $i0 = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int getDisplayAlign()>();
        if $i0 != 163 goto label2;

        $r2 = this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: org.apache.fop.layoutmgr.AbstractBreaker this$0>;
        $z0 = virtualinvoke $r2.<org.apache.fop.layoutmgr.AbstractBreaker: boolean isSinglePartFavored()>();
        if $z0 == 0 goto label2;

        $r3 = new org.apache.fop.layoutmgr.KnuthPenalty;
        specialinvoke $r3.<org.apache.fop.layoutmgr.KnuthPenalty: void <init>(int,int,boolean,org.apache.fop.layoutmgr.Position,boolean)>(0, -1000, 0, breakPosition, 0);
        virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: boolean add(java.lang.Object)>($r3);
        this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int ignoreAtEnd> = 1;
        goto label3;

     label2:
        $r3 = new org.apache.fop.layoutmgr.KnuthPenalty;
        specialinvoke $r3.<org.apache.fop.layoutmgr.KnuthPenalty: void <init>(int,int,boolean,org.apache.fop.layoutmgr.Position,boolean)>(0, 1000, 0, null, 0);
        virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: boolean add(java.lang.Object)>($r3);
        $r4 = new org.apache.fop.layoutmgr.KnuthGlue;
        specialinvoke $r4.<org.apache.fop.layoutmgr.KnuthGlue: void <init>(int,int,int,org.apache.fop.layoutmgr.Position,boolean)>(0, 10000000, 0, null, 0);
        virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: boolean add(java.lang.Object)>($r4);
        $r3 = new org.apache.fop.layoutmgr.KnuthPenalty;
        specialinvoke $r3.<org.apache.fop.layoutmgr.KnuthPenalty: void <init>(int,int,boolean,org.apache.fop.layoutmgr.Position,boolean)>(0, -1000, 0, breakPosition, 0);
        virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: boolean add(java.lang.Object)>($r3);
        this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int ignoreAtEnd> = 3;

     label3:
        return this;

     label4:
        virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: void clear()>();
        return null;
    }

    public org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence endBlockSequence(org.apache.fop.layoutmgr.Position)
    {
        org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence this, returnSequence, $r0;
        org.apache.fop.layoutmgr.Position breakPosition;
        org.apache.fop.layoutmgr.KnuthSequence temp;
        org.apache.fop.layoutmgr.AbstractBreaker $r1;
        int $i0, $i1, $i2;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence;
        breakPosition := @parameter0: org.apache.fop.layoutmgr.Position;
        temp = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: org.apache.fop.layoutmgr.KnuthSequence endSequence(org.apache.fop.layoutmgr.Position)>(breakPosition);
        if temp == null goto label0;

        $r0 = new org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence;
        $r1 = this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: org.apache.fop.layoutmgr.AbstractBreaker this$0>;
        $i0 = this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int startOn>;
        $i1 = this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int displayAlign>;
        specialinvoke $r0.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: void <init>(org.apache.fop.layoutmgr.AbstractBreaker,int,int)>($r1, $i0, $i1);
        returnSequence = $r0;
        virtualinvoke returnSequence.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: boolean addAll(java.util.Collection)>(temp);
        $i2 = this.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int ignoreAtEnd>;
        returnSequence.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int ignoreAtEnd> = $i2;
        return returnSequence;

     label0:
        return null;
    }

    static int access$000(org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence)
    {
        org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence x0;
        int $i0;

        x0 := @parameter0: org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence;
        $i0 = x0.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int startOn>;
        return $i0;
    }
}
