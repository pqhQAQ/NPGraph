public class org.apache.fop.render.java2d.FontSetup extends java.lang.Object
{
    protected static org.apache.commons.logging.Log log;
    private static final int LAST_PREDEFINED_FONT_NUMBER;
    private static final java.util.Set HARDCODED_FONT_NAMES;
    static java.lang.Class class$org$apache$fop$render$java2d$FontSetup;

    public void <init>()
    {
        org.apache.fop.render.java2d.FontSetup this;

        this := @this: org.apache.fop.render.java2d.FontSetup;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }

    public static void setup(org.apache.fop.fonts.FontInfo, java.util.List, org.apache.fop.fonts.FontResolver, java.awt.Graphics2D)
    {
        org.apache.fop.fonts.FontInfo fontInfo;
        java.util.List configuredFontList;
        org.apache.fop.fonts.FontResolver resolver;
        java.awt.Graphics2D graphics;
        byte normal, bold, italic, bolditalic;
        org.apache.fop.render.java2d.SystemFontMetricsMapper metric, $r0;
        int lastNum, lastNum;

        fontInfo := @parameter0: org.apache.fop.fonts.FontInfo;
        configuredFontList := @parameter1: java.util.List;
        resolver := @parameter2: org.apache.fop.fonts.FontResolver;
        graphics := @parameter3: java.awt.Graphics2D;
        normal = 0;
        bold = 1;
        italic = 2;
        bolditalic = 3;
        $r0 = new org.apache.fop.render.java2d.SystemFontMetricsMapper;
        specialinvoke $r0.<org.apache.fop.render.java2d.SystemFontMetricsMapper: void <init>(java.lang.String,int,java.awt.Graphics2D)>("SansSerif", normal, graphics);
        metric = $r0;
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addMetrics(java.lang.String,org.apache.fop.fonts.FontMetrics)>("F1", metric);
        $r0 = new org.apache.fop.render.java2d.SystemFontMetricsMapper;
        specialinvoke $r0.<org.apache.fop.render.java2d.SystemFontMetricsMapper: void <init>(java.lang.String,int,java.awt.Graphics2D)>("SansSerif", italic, graphics);
        metric = $r0;
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addMetrics(java.lang.String,org.apache.fop.fonts.FontMetrics)>("F2", metric);
        $r0 = new org.apache.fop.render.java2d.SystemFontMetricsMapper;
        specialinvoke $r0.<org.apache.fop.render.java2d.SystemFontMetricsMapper: void <init>(java.lang.String,int,java.awt.Graphics2D)>("SansSerif", bold, graphics);
        metric = $r0;
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addMetrics(java.lang.String,org.apache.fop.fonts.FontMetrics)>("F3", metric);
        $r0 = new org.apache.fop.render.java2d.SystemFontMetricsMapper;
        specialinvoke $r0.<org.apache.fop.render.java2d.SystemFontMetricsMapper: void <init>(java.lang.String,int,java.awt.Graphics2D)>("SansSerif", bolditalic, graphics);
        metric = $r0;
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addMetrics(java.lang.String,org.apache.fop.fonts.FontMetrics)>("F4", metric);
        $r0 = new org.apache.fop.render.java2d.SystemFontMetricsMapper;
        specialinvoke $r0.<org.apache.fop.render.java2d.SystemFontMetricsMapper: void <init>(java.lang.String,int,java.awt.Graphics2D)>("Serif", normal, graphics);
        metric = $r0;
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addMetrics(java.lang.String,org.apache.fop.fonts.FontMetrics)>("F5", metric);
        $r0 = new org.apache.fop.render.java2d.SystemFontMetricsMapper;
        specialinvoke $r0.<org.apache.fop.render.java2d.SystemFontMetricsMapper: void <init>(java.lang.String,int,java.awt.Graphics2D)>("Serif", italic, graphics);
        metric = $r0;
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addMetrics(java.lang.String,org.apache.fop.fonts.FontMetrics)>("F6", metric);
        $r0 = new org.apache.fop.render.java2d.SystemFontMetricsMapper;
        specialinvoke $r0.<org.apache.fop.render.java2d.SystemFontMetricsMapper: void <init>(java.lang.String,int,java.awt.Graphics2D)>("Serif", bold, graphics);
        metric = $r0;
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addMetrics(java.lang.String,org.apache.fop.fonts.FontMetrics)>("F7", metric);
        $r0 = new org.apache.fop.render.java2d.SystemFontMetricsMapper;
        specialinvoke $r0.<org.apache.fop.render.java2d.SystemFontMetricsMapper: void <init>(java.lang.String,int,java.awt.Graphics2D)>("Serif", bolditalic, graphics);
        metric = $r0;
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addMetrics(java.lang.String,org.apache.fop.fonts.FontMetrics)>("F8", metric);
        $r0 = new org.apache.fop.render.java2d.SystemFontMetricsMapper;
        specialinvoke $r0.<org.apache.fop.render.java2d.SystemFontMetricsMapper: void <init>(java.lang.String,int,java.awt.Graphics2D)>("MonoSpaced", normal, graphics);
        metric = $r0;
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addMetrics(java.lang.String,org.apache.fop.fonts.FontMetrics)>("F9", metric);
        $r0 = new org.apache.fop.render.java2d.SystemFontMetricsMapper;
        specialinvoke $r0.<org.apache.fop.render.java2d.SystemFontMetricsMapper: void <init>(java.lang.String,int,java.awt.Graphics2D)>("MonoSpaced", italic, graphics);
        metric = $r0;
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addMetrics(java.lang.String,org.apache.fop.fonts.FontMetrics)>("F10", metric);
        $r0 = new org.apache.fop.render.java2d.SystemFontMetricsMapper;
        specialinvoke $r0.<org.apache.fop.render.java2d.SystemFontMetricsMapper: void <init>(java.lang.String,int,java.awt.Graphics2D)>("MonoSpaced", bold, graphics);
        metric = $r0;
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addMetrics(java.lang.String,org.apache.fop.fonts.FontMetrics)>("F11", metric);
        $r0 = new org.apache.fop.render.java2d.SystemFontMetricsMapper;
        specialinvoke $r0.<org.apache.fop.render.java2d.SystemFontMetricsMapper: void <init>(java.lang.String,int,java.awt.Graphics2D)>("MonoSpaced", bolditalic, graphics);
        metric = $r0;
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addMetrics(java.lang.String,org.apache.fop.fonts.FontMetrics)>("F12", metric);
        $r0 = new org.apache.fop.render.java2d.SystemFontMetricsMapper;
        specialinvoke $r0.<org.apache.fop.render.java2d.SystemFontMetricsMapper: void <init>(java.lang.String,int,java.awt.Graphics2D)>("Serif", normal, graphics);
        metric = $r0;
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addMetrics(java.lang.String,org.apache.fop.fonts.FontMetrics)>("F13", metric);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addMetrics(java.lang.String,org.apache.fop.fonts.FontMetrics)>("F14", metric);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F5", "any", "normal", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F6", "any", "italic", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F6", "any", "oblique", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F7", "any", "normal", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F8", "any", "italic", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F8", "any", "oblique", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F1", "sans-serif", "normal", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F2", "sans-serif", "oblique", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F2", "sans-serif", "italic", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F3", "sans-serif", "normal", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F4", "sans-serif", "oblique", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F4", "sans-serif", "italic", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F5", "serif", "normal", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F6", "serif", "oblique", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F6", "serif", "italic", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F7", "serif", "normal", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F8", "serif", "oblique", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F8", "serif", "italic", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F9", "monospace", "normal", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F10", "monospace", "oblique", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F10", "monospace", "italic", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F11", "monospace", "normal", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F12", "monospace", "oblique", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F12", "monospace", "italic", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F1", "Helvetica", "normal", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F2", "Helvetica", "oblique", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F2", "Helvetica", "italic", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F3", "Helvetica", "normal", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F4", "Helvetica", "oblique", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F4", "Helvetica", "italic", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F5", "Times", "normal", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F6", "Times", "oblique", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F6", "Times", "italic", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F7", "Times", "normal", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F8", "Times", "oblique", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F8", "Times", "italic", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F9", "Courier", "normal", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F10", "Courier", "oblique", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F10", "Courier", "italic", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F11", "Courier", "normal", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F12", "Courier", "oblique", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F12", "Courier", "italic", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F13", "Symbol", "normal", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F14", "ZapfDingbats", "normal", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F5", "Times-Roman", "normal", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F6", "Times-Roman", "oblique", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F6", "Times-Roman", "italic", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F7", "Times-Roman", "normal", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F8", "Times-Roman", "oblique", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F8", "Times-Roman", "italic", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F5", "Times Roman", "normal", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F6", "Times Roman", "oblique", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F6", "Times Roman", "italic", 400);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F7", "Times Roman", "normal", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F8", "Times Roman", "oblique", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F8", "Times Roman", "italic", 700);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,java.lang.String,java.lang.String,int)>("F9", "Computer-Modern-Typewriter", "normal", 400);
        lastNum = staticinvoke <org.apache.fop.render.java2d.FontSetup: int configureInstalledAWTFonts(org.apache.fop.fonts.FontInfo,java.awt.Graphics2D,int)>(fontInfo, graphics, 15);
        lastNum = lastNum + 1;
        staticinvoke <org.apache.fop.render.java2d.FontSetup: void addConfiguredFonts(org.apache.fop.fonts.FontInfo,java.util.List,org.apache.fop.fonts.FontResolver,int)>(fontInfo, configuredFontList, resolver, lastNum);
        return;
    }

    private static int configureInstalledAWTFonts(org.apache.fop.fonts.FontInfo, java.awt.Graphics2D, int)
    {
        org.apache.fop.fonts.FontInfo fontInfo;
        java.awt.Graphics2D graphics;
        int startNumber, num, i, guessedWeight, style, $i0, $i1;
        java.awt.GraphicsEnvironment env;
        java.awt.Font[] fonts;
        java.awt.Font f;
        java.lang.String searchName, guessedStyle, fontKey, $r1, $r4, $r5;
        java.util.Set $r0;
        boolean $z0;
        org.apache.commons.logging.Log $r2;
        java.lang.StringBuffer $r3, $r6;
        float $f0;

        fontInfo := @parameter0: org.apache.fop.fonts.FontInfo;
        graphics := @parameter1: java.awt.Graphics2D;
        startNumber := @parameter2: int;
        num = startNumber;
        env = staticinvoke <java.awt.GraphicsEnvironment: java.awt.GraphicsEnvironment getLocalGraphicsEnvironment()>();
        fonts = virtualinvoke env.<java.awt.GraphicsEnvironment: java.awt.Font[] getAllFonts()>();
        i = 0;

     label0:
        $i0 = lengthof fonts;
        if i >= $i0 goto label4;

        f = fonts[i];
        $r0 = <org.apache.fop.render.java2d.FontSetup: java.util.Set HARDCODED_FONT_NAMES>;
        $r1 = virtualinvoke f.<java.awt.Font: java.lang.String getName()>();
        $z0 = interfaceinvoke $r0.<java.util.Set: boolean contains(java.lang.Object)>($r1);
        if $z0 == 0 goto label1;

        goto label3;

     label1:
        $r2 = <org.apache.fop.render.java2d.FontSetup: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();
        if $z0 == 0 goto label2;

        $r2 = <org.apache.fop.render.java2d.FontSetup: org.apache.commons.logging.Log log>;
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("AWT Font: ");
        $r4 = virtualinvoke f.<java.awt.Font: java.lang.String getFontName()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", family: ");
        $r4 = virtualinvoke f.<java.awt.Font: java.lang.String getFamily()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", PS: ");
        $r4 = virtualinvoke f.<java.awt.Font: java.lang.String getPSName()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", Name: ");
        $r4 = virtualinvoke f.<java.awt.Font: java.lang.String getName()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", Angle: ");
        $f0 = virtualinvoke f.<java.awt.Font: float getItalicAngle()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f0);
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", Style: ");
        $i1 = virtualinvoke f.<java.awt.Font: int getStyle()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);
        $r1 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r1);

     label2:
        $r5 = virtualinvoke f.<java.awt.Font: java.lang.String getName()>();
        $r5 = staticinvoke <org.apache.fop.fonts.FontUtil: java.lang.String stripWhiteSpace(java.lang.String)>($r5);
        searchName = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase()>();
        guessedStyle = staticinvoke <org.apache.fop.fonts.FontUtil: java.lang.String guessStyle(java.lang.String)>(searchName);
        guessedWeight = staticinvoke <org.apache.fop.fonts.FontUtil: int guessWeight(java.lang.String)>(searchName);
        num = num + 1;
        $r6 = new java.lang.StringBuffer;
        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();
        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("F");
        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(num);
        fontKey = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();
        style = staticinvoke <org.apache.fop.render.java2d.FontSetup: int convertToAWTFontStyle(java.lang.String,int)>(guessedStyle, guessedWeight);
        $r1 = virtualinvoke f.<java.awt.Font: java.lang.String getName()>();
        staticinvoke <org.apache.fop.render.java2d.FontSetup: void addFontMetricsMapper(org.apache.fop.fonts.FontInfo,java.lang.String,java.lang.String,java.awt.Graphics2D,int)>(fontInfo, $r1, fontKey, graphics, style);
        $r1 = virtualinvoke f.<java.awt.Font: java.lang.String getName()>();
        staticinvoke <org.apache.fop.render.java2d.FontSetup: void addFontTriplet(org.apache.fop.fonts.FontInfo,java.lang.String,java.lang.String,int,java.lang.String)>(fontInfo, $r1, "normal", 400, fontKey);
        $r5 = virtualinvoke f.<java.awt.Font: java.lang.String getName()>();
        $r1 = virtualinvoke f.<java.awt.Font: java.lang.String getFamily()>();
        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r1);
        if $z0 != 0 goto label3;

        $r1 = virtualinvoke f.<java.awt.Font: java.lang.String getFamily()>();
        staticinvoke <org.apache.fop.render.java2d.FontSetup: void addFontTriplet(org.apache.fop.fonts.FontInfo,java.lang.String,java.lang.String,int,java.lang.String)>(fontInfo, $r1, guessedStyle, guessedWeight, fontKey);

     label3:
        i = i + 1;
        goto label0;

     label4:
        return num;
    }

    private static void addConfiguredFonts(org.apache.fop.fonts.FontInfo, java.util.List, org.apache.fop.fonts.FontResolver, int)
    {
        org.apache.fop.fonts.FontInfo fontInfo;
        java.util.List fontList, triplets;
        org.apache.fop.fonts.FontResolver resolver;
        int num, i, c, $i0, $i1;
        null_type internalName, font;
        org.apache.fop.fonts.EmbedFontInfo configFontInfo;
        java.lang.String fontFile, metricsUrl, internalName, $r4;
        org.apache.fop.fonts.LazyFont fontMetrics, $r3;
        javax.xml.transform.Source fontSource;
        org.apache.fop.fonts.FontTriplet triplet;
        java.lang.Exception e, $r7;
        org.apache.commons.logging.Log $r0;
        java.lang.Object $r1;
        java.lang.StringBuffer $r2, $r6;
        org.apache.fop.render.java2d.CustomFontMetricsMapper $r5, font;
        org.apache.fop.fonts.CustomFont fontMetrics;
        boolean $z0;

        fontInfo := @parameter0: org.apache.fop.fonts.FontInfo;
        fontList := @parameter1: java.util.List;
        resolver := @parameter2: org.apache.fop.fonts.FontResolver;
        num := @parameter3: int;
        if fontList == null goto label0;

        $i0 = interfaceinvoke fontList.<java.util.List: int size()>();
        if $i0 >= 1 goto label1;

     label0:
        $r0 = <org.apache.fop.render.java2d.FontSetup: org.apache.commons.logging.Log log>;
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("No user configured fonts found.");
        return;

     label1:
        if resolver != null goto label2;

        resolver = staticinvoke <org.apache.fop.fonts.FontSetup: org.apache.fop.fonts.FontResolver createMinimalFontResolver()>();

     label2:
        internalName = null;
        i = 0;

     label3:
        $i1 = interfaceinvoke fontList.<java.util.List: int size()>();
        if i >= $i1 goto label12;

        $r1 = interfaceinvoke fontList.<java.util.List: java.lang.Object get(int)>(i);
        configFontInfo = (org.apache.fop.fonts.EmbedFontInfo) $r1;
        fontFile = virtualinvoke configFontInfo.<org.apache.fop.fonts.EmbedFontInfo: java.lang.String getEmbedFile()>();
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("F");
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(num);
        internalName = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        num = num + 1;

     label4:
        font = null;
        metricsUrl = virtualinvoke configFontInfo.<org.apache.fop.fonts.EmbedFontInfo: java.lang.String getMetricsFile()>();
        if metricsUrl == null goto label5;

        $r3 = new org.apache.fop.fonts.LazyFont;
        specialinvoke $r3.<org.apache.fop.fonts.LazyFont: void <init>(org.apache.fop.fonts.EmbedFontInfo,org.apache.fop.fonts.FontResolver)>(configFontInfo, resolver);
        fontMetrics = $r3;
        $r4 = virtualinvoke configFontInfo.<org.apache.fop.fonts.EmbedFontInfo: java.lang.String getEmbedFile()>();
        fontSource = interfaceinvoke resolver.<org.apache.fop.fonts.FontResolver: javax.xml.transform.Source resolve(java.lang.String)>($r4);
        $r5 = new org.apache.fop.render.java2d.CustomFontMetricsMapper;
        specialinvoke $r5.<org.apache.fop.render.java2d.CustomFontMetricsMapper: void <init>(org.apache.fop.fonts.LazyFont,javax.xml.transform.Source)>(fontMetrics, fontSource);
        font = $r5;
        goto label6;

     label5:
        fontMetrics = staticinvoke <org.apache.fop.fonts.FontLoader: org.apache.fop.fonts.CustomFont loadFont(java.lang.String,org.apache.fop.fonts.FontResolver)>(fontFile, resolver);
        $r5 = new org.apache.fop.render.java2d.CustomFontMetricsMapper;
        specialinvoke $r5.<org.apache.fop.render.java2d.CustomFontMetricsMapper: void <init>(org.apache.fop.fonts.CustomFont)>(fontMetrics);
        font = $r5;

     label6:
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addMetrics(java.lang.String,org.apache.fop.fonts.FontMetrics)>(internalName, font);
        triplets = virtualinvoke configFontInfo.<org.apache.fop.fonts.EmbedFontInfo: java.util.List getFontTriplets()>();
        c = 0;

     label7:
        $i1 = interfaceinvoke triplets.<java.util.List: int size()>();
        if c >= $i1 goto label9;

        $r1 = interfaceinvoke triplets.<java.util.List: java.lang.Object get(int)>(c);
        triplet = (org.apache.fop.fonts.FontTriplet) $r1;
        $r0 = <org.apache.fop.render.java2d.FontSetup: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label8;

        $r0 = <org.apache.fop.render.java2d.FontSetup: org.apache.commons.logging.Log log>;
        $r6 = new java.lang.StringBuffer;
        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();
        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Registering: ");
        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(triplet);
        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" under ");
        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(internalName);
        $r4 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r4);

     label8:
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,org.apache.fop.fonts.FontTriplet)>(internalName, triplet);
        c = c + 1;
        goto label7;

     label9:
        goto label11;

     label10:
        $r7 := @caughtexception;
        e = $r7;
        $r0 = <org.apache.fop.render.java2d.FontSetup: org.apache.commons.logging.Log log>;
        $r6 = new java.lang.StringBuffer;
        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();
        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to load custom font from file \'");
        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(fontFile);
        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");
        $r4 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r4, e);

     label11:
        i = i + 1;
        goto label3;

     label12:
        return;

        catch java.lang.Exception from label4 to label9 with label10;
    }

    private static void addFontTriplet(org.apache.fop.fonts.FontInfo, java.lang.String, java.lang.String, int, java.lang.String)
    {
        org.apache.fop.fonts.FontInfo fontInfo;
        java.lang.String fontName, fontStyle, fontKey;
        int fontWeight;
        org.apache.fop.fonts.FontTriplet triplet;

        fontInfo := @parameter0: org.apache.fop.fonts.FontInfo;
        fontName := @parameter1: java.lang.String;
        fontStyle := @parameter2: java.lang.String;
        fontWeight := @parameter3: int;
        fontKey := @parameter4: java.lang.String;
        triplet = staticinvoke <org.apache.fop.fonts.FontInfo: org.apache.fop.fonts.FontTriplet createFontKey(java.lang.String,java.lang.String,int)>(fontName, fontStyle, fontWeight);
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addFontProperties(java.lang.String,org.apache.fop.fonts.FontTriplet)>(fontKey, triplet);
        return;
    }

    private static void addFontMetricsMapper(org.apache.fop.fonts.FontInfo, java.lang.String, java.lang.String, java.awt.Graphics2D, int)
    {
        org.apache.fop.fonts.FontInfo fontInfo;
        java.lang.String family, fontKey;
        java.awt.Graphics2D graphics;
        int style;
        org.apache.fop.render.java2d.SystemFontMetricsMapper $r0, metric;

        fontInfo := @parameter0: org.apache.fop.fonts.FontInfo;
        family := @parameter1: java.lang.String;
        fontKey := @parameter2: java.lang.String;
        graphics := @parameter3: java.awt.Graphics2D;
        style := @parameter4: int;
        $r0 = new org.apache.fop.render.java2d.SystemFontMetricsMapper;
        specialinvoke $r0.<org.apache.fop.render.java2d.SystemFontMetricsMapper: void <init>(java.lang.String,int,java.awt.Graphics2D)>(family, style, graphics);
        metric = $r0;
        virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: void addMetrics(java.lang.String,org.apache.fop.fonts.FontMetrics)>(fontKey, metric);
        return;
    }

    private static int convertToAWTFontStyle(java.lang.String, int)
    {
        java.lang.String fontStyle, $r0;
        int fontWeight;
        byte style;
        boolean $z0;

        fontStyle := @parameter0: java.lang.String;
        fontWeight := @parameter1: int;
        style = 0;
        if fontWeight < 700 goto label0;

        style = style | 1;

     label0:
        $r0 = "normal";
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(fontStyle);
        if $z0 != 0 goto label1;

        style = style | 2;

     label1:
        return style;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException l1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        l1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(l1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.apache.commons.logging.Log $r1;
        java.util.HashSet $r2;
        java.util.Set $r3;

        $r0 = <org.apache.fop.render.java2d.FontSetup: java.lang.Class class$org$apache$fop$render$java2d$FontSetup>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.fop.render.java2d.FontSetup: java.lang.Class class$(java.lang.String)>("org.apache.fop.render.java2d.FontSetup");
        <org.apache.fop.render.java2d.FontSetup: java.lang.Class class$org$apache$fop$render$java2d$FontSetup> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.fop.render.java2d.FontSetup: java.lang.Class class$org$apache$fop$render$java2d$FontSetup>;

     label1:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r0);
        <org.apache.fop.render.java2d.FontSetup: org.apache.commons.logging.Log log> = $r1;
        $r2 = new java.util.HashSet;
        specialinvoke $r2.<java.util.HashSet: void <init>()>();
        <org.apache.fop.render.java2d.FontSetup: java.util.Set HARDCODED_FONT_NAMES> = $r2;
        $r3 = <org.apache.fop.render.java2d.FontSetup: java.util.Set HARDCODED_FONT_NAMES>;
        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>("any");
        $r3 = <org.apache.fop.render.java2d.FontSetup: java.util.Set HARDCODED_FONT_NAMES>;
        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>("sans-serif");
        $r3 = <org.apache.fop.render.java2d.FontSetup: java.util.Set HARDCODED_FONT_NAMES>;
        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>("serif");
        $r3 = <org.apache.fop.render.java2d.FontSetup: java.util.Set HARDCODED_FONT_NAMES>;
        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>("monospace");
        $r3 = <org.apache.fop.render.java2d.FontSetup: java.util.Set HARDCODED_FONT_NAMES>;
        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>("Helvetica");
        $r3 = <org.apache.fop.render.java2d.FontSetup: java.util.Set HARDCODED_FONT_NAMES>;
        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>("Times");
        $r3 = <org.apache.fop.render.java2d.FontSetup: java.util.Set HARDCODED_FONT_NAMES>;
        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>("Courier");
        $r3 = <org.apache.fop.render.java2d.FontSetup: java.util.Set HARDCODED_FONT_NAMES>;
        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>("Symbol");
        $r3 = <org.apache.fop.render.java2d.FontSetup: java.util.Set HARDCODED_FONT_NAMES>;
        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>("ZapfDingbats");
        $r3 = <org.apache.fop.render.java2d.FontSetup: java.util.Set HARDCODED_FONT_NAMES>;
        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>("Times Roman");
        $r3 = <org.apache.fop.render.java2d.FontSetup: java.util.Set HARDCODED_FONT_NAMES>;
        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>("Times-Roman");
        $r3 = <org.apache.fop.render.java2d.FontSetup: java.util.Set HARDCODED_FONT_NAMES>;
        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>("Computer-Modern-Typewriter");
        return;
    }
}
