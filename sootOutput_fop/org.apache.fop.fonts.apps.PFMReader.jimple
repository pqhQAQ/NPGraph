public class org.apache.fop.fonts.apps.PFMReader extends org.apache.fop.fonts.apps.AbstractFontReader
{
    static java.lang.Class class$org$apache$fop$fonts$apps$PFMReader;
    static java.lang.Class class$org$apache$fop$util$CommandLineLogger;

    public void <init>()
    {
        org.apache.fop.fonts.apps.PFMReader this;

        this := @this: org.apache.fop.fonts.apps.PFMReader;
        specialinvoke this.<org.apache.fop.fonts.apps.AbstractFontReader: void <init>()>();
        return;
    }

    private static void displayUsage()
    {
        java.io.PrintStream $r0;
        java.lang.StringBuffer $r1;
        java.lang.Class $r2;
        java.lang.String $r3, $r4;

        $r0 = <java.lang.System: java.io.PrintStream out>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("java ");
        $r2 = <org.apache.fop.fonts.apps.PFMReader: java.lang.Class class$org$apache$fop$fonts$apps$PFMReader>;
        if $r2 != null goto label0;

        $r2 = staticinvoke <org.apache.fop.fonts.apps.PFMReader: java.lang.Class class$(java.lang.String)>("org.apache.fop.fonts.apps.PFMReader");
        <org.apache.fop.fonts.apps.PFMReader: java.lang.Class class$org$apache$fop$fonts$apps$PFMReader> = $r2;
        goto label1;

     label0:
        $r2 = <org.apache.fop.fonts.apps.PFMReader: java.lang.Class class$org$apache$fop$fonts$apps$PFMReader>;

     label1:
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" [options] metricfile.pfm xmlfile.xml");
        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>($r4);
        $r0 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r0.<java.io.PrintStream: void println()>();
        $r0 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("where options can be:");
        $r0 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("-d  Debug mode");
        $r0 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("-q  Quiet mode");
        $r0 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("-fn <fontname>");
        $r0 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("    default is to use the fontname in the .pfm file, but");
        $r0 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("    you can override that name to make sure that the");
        $r0 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("    embedded font is used (if you\'re embedding fonts)");
        $r0 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("    instead of installed fonts when viewing documents ");
        $r0 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("    with Acrobat Reader.");
        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] args, arguments;
        java.lang.String embFile, embResource, className, fontName, $r2, $r4, $r5;
        java.util.HashMap options, $r1;
        org.apache.commons.logging.LogFactory logFactory;
        java.lang.Class $r0;
        org.apache.fop.fonts.apps.PFMReader app, $r6;
        org.apache.fop.fonts.type1.PFMFile pfm;
        org.w3c.dom.Document doc;
        java.lang.Exception e, $r10;
        org.apache.commons.logging.Log $r7;
        java.lang.StringBuffer $r8;
        java.lang.Object $r9;
        int $i0;

        args := @parameter0: java.lang.String[];
        embFile = null;
        embResource = null;
        className = null;
        fontName = null;
        $r1 = new java.util.HashMap;
        specialinvoke $r1.<java.util.HashMap: void <init>()>();
        options = $r1;
        arguments = staticinvoke <org.apache.fop.fonts.apps.PFMReader: java.lang.String[] parseArguments(java.util.Map,java.lang.String[])>(options, args);
        logFactory = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>();
        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.Log");
        if $r2 != null goto label2;

        $r4 = "org.apache.commons.logging.Log";
        $r0 = <org.apache.fop.fonts.apps.PFMReader: java.lang.Class class$org$apache$fop$util$CommandLineLogger>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.fop.fonts.apps.PFMReader: java.lang.Class class$(java.lang.String)>("org.apache.fop.util.CommandLineLogger");
        <org.apache.fop.fonts.apps.PFMReader: java.lang.Class class$org$apache$fop$util$CommandLineLogger> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.fop.fonts.apps.PFMReader: java.lang.Class class$org$apache$fop$util$CommandLineLogger>;

     label1:
        $r5 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();
        virtualinvoke logFactory.<org.apache.commons.logging.LogFactory: void setAttribute(java.lang.String,java.lang.Object)>($r4, $r5);

     label2:
        staticinvoke <org.apache.fop.fonts.apps.PFMReader: void determineLogLevel(java.util.Map)>(options);
        $r6 = new org.apache.fop.fonts.apps.PFMReader;
        specialinvoke $r6.<org.apache.fop.fonts.apps.PFMReader: void <init>()>();
        app = $r6;
        $r7 = <org.apache.fop.fonts.apps.PFMReader: org.apache.commons.logging.Log log>;
        $r8 = new java.lang.StringBuffer;
        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PFM Reader for Apache FOP ");
        $r5 = staticinvoke <org.apache.fop.Version: java.lang.String getVersion()>();
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");
        $r4 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r7.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r4);
        $r9 = interfaceinvoke options.<java.util.Map: java.lang.Object get(java.lang.Object)>("-ef");
        if $r9 == null goto label3;

        $r9 = interfaceinvoke options.<java.util.Map: java.lang.Object get(java.lang.Object)>("-ef");
        embFile = (java.lang.String) $r9;

     label3:
        $r9 = interfaceinvoke options.<java.util.Map: java.lang.Object get(java.lang.Object)>("-er");
        if $r9 == null goto label4;

        $r9 = interfaceinvoke options.<java.util.Map: java.lang.Object get(java.lang.Object)>("-er");
        embResource = (java.lang.String) $r9;

     label4:
        $r9 = interfaceinvoke options.<java.util.Map: java.lang.Object get(java.lang.Object)>("-fn");
        if $r9 == null goto label5;

        $r9 = interfaceinvoke options.<java.util.Map: java.lang.Object get(java.lang.Object)>("-fn");
        fontName = (java.lang.String) $r9;

     label5:
        $r9 = interfaceinvoke options.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cn");
        if $r9 == null goto label6;

        $r9 = interfaceinvoke options.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cn");
        className = (java.lang.String) $r9;

     label6:
        $i0 = lengthof arguments;
        if $i0 != 2 goto label7;

        $r9 = interfaceinvoke options.<java.util.Map: java.lang.Object get(java.lang.Object)>("-h");
        if $r9 != null goto label7;

        $r9 = interfaceinvoke options.<java.util.Map: java.lang.Object get(java.lang.Object)>("-help");
        if $r9 != null goto label7;

        $r9 = interfaceinvoke options.<java.util.Map: java.lang.Object get(java.lang.Object)>("--help");
        if $r9 == null goto label8;

     label7:
        staticinvoke <org.apache.fop.fonts.apps.PFMReader: void displayUsage()>();
        goto label12;

     label8:
        $r7 = <org.apache.fop.fonts.apps.PFMReader: org.apache.commons.logging.Log log>;
        interfaceinvoke $r7.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Parsing font...");
        $r4 = arguments[0];
        pfm = virtualinvoke app.<org.apache.fop.fonts.apps.PFMReader: org.apache.fop.fonts.type1.PFMFile loadPFM(java.lang.String)>($r4);
        if pfm == null goto label9;

        virtualinvoke app.<org.apache.fop.fonts.apps.PFMReader: void preview(org.apache.fop.fonts.type1.PFMFile)>(pfm);
        doc = virtualinvoke app.<org.apache.fop.fonts.apps.PFMReader: org.w3c.dom.Document constructFontXML(org.apache.fop.fonts.type1.PFMFile,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(pfm, fontName, className, embResource, embFile);
        $r5 = arguments[1];
        virtualinvoke app.<org.apache.fop.fonts.apps.PFMReader: void writeFontXML(org.w3c.dom.Document,java.lang.String)>(doc, $r5);

     label9:
        $r7 = <org.apache.fop.fonts.apps.PFMReader: org.apache.commons.logging.Log log>;
        interfaceinvoke $r7.<org.apache.commons.logging.Log: void info(java.lang.Object)>("XML font metrics file successfullly created.");

     label10:
        goto label12;

     label11:
        $r10 := @caughtexception;
        e = $r10;
        $r7 = <org.apache.fop.fonts.apps.PFMReader: org.apache.commons.logging.Log log>;
        interfaceinvoke $r7.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("Error while building XML font metrics file", e);
        staticinvoke <java.lang.System: void exit(int)>(-1);

     label12:
        return;

        catch java.lang.Exception from label8 to label10 with label11;
    }

    public org.apache.fop.fonts.type1.PFMFile loadPFM(java.lang.String) throws java.io.IOException
    {
        org.apache.fop.fonts.apps.PFMReader this;
        java.lang.String filename, $r2;
        org.apache.commons.logging.Log $r0;
        java.lang.StringBuffer $r1;
        java.io.FileInputStream in, $r3;
        org.apache.fop.fonts.type1.PFMFile pfm, l4, $r4;
        java.lang.Throwable l5, $r5;

        this := @this: org.apache.fop.fonts.apps.PFMReader;
        filename := @parameter0: java.lang.String;
        $r0 = <org.apache.fop.fonts.apps.PFMReader: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Reading ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(filename);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("...");
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r2);
        $r0 = <org.apache.fop.fonts.apps.PFMReader: org.apache.commons.logging.Log log>;
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void info(java.lang.Object)>("");
        $r3 = new java.io.FileInputStream;
        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.lang.String)>(filename);
        in = $r3;

     label0:
        $r4 = new org.apache.fop.fonts.type1.PFMFile;
        specialinvoke $r4.<org.apache.fop.fonts.type1.PFMFile: void <init>()>();
        pfm = $r4;
        virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: void load(java.io.InputStream)>(in);
        l4 = pfm;

     label1:
        virtualinvoke in.<java.io.InputStream: void close()>();
        return l4;

     label2:
        $r5 := @caughtexception;

     label3:
        l5 = $r5;

     label4:
        virtualinvoke in.<java.io.InputStream: void close()>();
        throw l5;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public void preview(org.apache.fop.fonts.type1.PFMFile)
    {
        org.apache.fop.fonts.apps.PFMReader this;
        org.apache.fop.fonts.type1.PFMFile pfm;
        org.apache.commons.logging.Log $r0, $r1;
        boolean $z0, $z1;
        java.lang.StringBuffer $r2;
        java.lang.String $r3, $r4;
        int $i0;
        short $s1, $s2;

        this := @this: org.apache.fop.fonts.apps.PFMReader;
        pfm := @parameter0: org.apache.fop.fonts.type1.PFMFile;
        $r0 = <org.apache.fop.fonts.apps.PFMReader: org.apache.commons.logging.Log log>;
        if $r0 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        $r1 = <org.apache.fop.fonts.apps.PFMReader: org.apache.commons.logging.Log log>;
        $z1 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();
        $z0 = $z0 & $z1;
        if $z0 == 0 goto label2;

        $r0 = <org.apache.fop.fonts.apps.PFMReader: org.apache.commons.logging.Log log>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Font: ");
        $r3 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: java.lang.String getWindowsName()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);
        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r4);
        $r0 = <org.apache.fop.fonts.apps.PFMReader: org.apache.commons.logging.Log log>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Name: ");
        $r3 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: java.lang.String getPostscriptName()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);
        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r4);
        $r0 = <org.apache.fop.fonts.apps.PFMReader: org.apache.commons.logging.Log log>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CharSet: ");
        $r3 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: java.lang.String getCharSetName()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);
        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r4);
        $r0 = <org.apache.fop.fonts.apps.PFMReader: org.apache.commons.logging.Log log>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CapHeight: ");
        $i0 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: int getCapHeight()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);
        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r4);
        $r0 = <org.apache.fop.fonts.apps.PFMReader: org.apache.commons.logging.Log log>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("XHeight: ");
        $i0 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: int getXHeight()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);
        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r4);
        $r0 = <org.apache.fop.fonts.apps.PFMReader: org.apache.commons.logging.Log log>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("LowerCaseAscent: ");
        $i0 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: int getLowerCaseAscent()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);
        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r4);
        $r0 = <org.apache.fop.fonts.apps.PFMReader: org.apache.commons.logging.Log log>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("LowerCaseDescent: ");
        $i0 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: int getLowerCaseDescent()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);
        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r4);
        $r0 = <org.apache.fop.fonts.apps.PFMReader: org.apache.commons.logging.Log log>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Having widths for ");
        $s1 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: short getLastChar()>();
        $s2 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: short getFirstChar()>();
        $i0 = $s1 - $s2;
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" characters (");
        $s1 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: short getFirstChar()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($s1);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");
        $s1 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: short getLastChar()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($s1);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(").");
        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r4);
        $r0 = <org.apache.fop.fonts.apps.PFMReader: org.apache.commons.logging.Log log>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("for example: Char ");
        $s1 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: short getFirstChar()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($s1);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" has a width of ");
        $s2 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: short getFirstChar()>();
        $i0 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: int getCharWidth(short)>($s2);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);
        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r4);
        $r0 = <org.apache.fop.fonts.apps.PFMReader: org.apache.commons.logging.Log log>;
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void info(java.lang.Object)>("");

     label2:
        return;
    }

    public org.w3c.dom.Document constructFontXML(org.apache.fop.fonts.type1.PFMFile, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.fop.fonts.apps.PFMReader this;
        org.apache.fop.fonts.type1.PFMFile pfm;
        java.lang.String fontName, className, resource, file, s, $r4, $r6, $r8, $r11;
        org.apache.commons.logging.Log $r0;
        javax.xml.parsers.DocumentBuilderFactory factory;
        org.w3c.dom.Document doc;
        javax.xml.parsers.ParserConfigurationException e, $r2;
        org.w3c.dom.Element root, el, bbox, widths, el2;
        int pos, i, $i0, $i1, $i2, $i5;
        char[] sb;
        java.lang.Integer value, kpx1, kpx2, val, $r9, $r12;
        int[] bb;
        java.lang.String[] names, $r10;
        java.util.Iterator iter, enum2;
        null_type el2;
        java.util.Map h2, $r13;
        javax.xml.parsers.DocumentBuilder $r1;
        org.w3c.dom.Text $r5;
        java.lang.StringBuffer $r7;
        short $s3, i, $s4;
        java.util.Set $r14;
        boolean $z0;
        java.lang.Object $r15;

        this := @this: org.apache.fop.fonts.apps.PFMReader;
        pfm := @parameter0: org.apache.fop.fonts.type1.PFMFile;
        fontName := @parameter1: java.lang.String;
        className := @parameter2: java.lang.String;
        resource := @parameter3: java.lang.String;
        file := @parameter4: java.lang.String;
        $r0 = <org.apache.fop.fonts.apps.PFMReader: org.apache.commons.logging.Log log>;
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Creating xml font file...");
        $r0 = <org.apache.fop.fonts.apps.PFMReader: org.apache.commons.logging.Log log>;
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void info(java.lang.Object)>("");

     label0:
        factory = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();
        $r1 = virtualinvoke factory.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();
        doc = virtualinvoke $r1.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document newDocument()>();

     label1:
        goto label3;

     label2:
        $r2 := @caughtexception;
        e = $r2;
        $r0 = <org.apache.fop.fonts.apps.PFMReader: org.apache.commons.logging.Log log>;
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("Can\'t create DOM implementation", e);
        return null;

     label3:
        root = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("font-metrics");
        interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(root);
        interfaceinvoke root.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("type", "TYPE1");
        el = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("font-name");
        interfaceinvoke root.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(el);
        $r4 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: java.lang.String getPostscriptName()>();
        $r5 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r4);
        interfaceinvoke el.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);
        s = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: java.lang.String getPostscriptName()>();
        pos = virtualinvoke s.<java.lang.String: int indexOf(java.lang.String)>("-");
        if pos < 0 goto label4;

        $i0 = virtualinvoke s.<java.lang.String: int length()>();
        $i0 = $i0 - 1;
        sb = newarray (char)[$i0];
        virtualinvoke s.<java.lang.String: void getChars(int,int,char[],int)>(0, pos, sb, 0);
        $i1 = pos + 1;
        $i2 = virtualinvoke s.<java.lang.String: int length()>();
        virtualinvoke s.<java.lang.String: void getChars(int,int,char[],int)>($i1, $i2, sb, pos);
        $r6 = new java.lang.String;
        specialinvoke $r6.<java.lang.String: void <init>(char[])>(sb);
        s = $r6;

     label4:
        el = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("embed");
        interfaceinvoke root.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(el);
        if file == null goto label5;

        interfaceinvoke el.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("file", file);

     label5:
        if resource == null goto label6;

        interfaceinvoke el.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("class", resource);

     label6:
        el = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("encoding");
        interfaceinvoke root.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(el);
        $r7 = new java.lang.StringBuffer;
        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();
        $r8 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: java.lang.String getCharSetName()>();
        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);
        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Encoding");
        $r4 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();
        $r5 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r4);
        interfaceinvoke el.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);
        el = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("cap-height");
        interfaceinvoke root.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(el);
        $r9 = new java.lang.Integer;
        $i2 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: int getCapHeight()>();
        specialinvoke $r9.<java.lang.Integer: void <init>(int)>($i2);
        value = $r9;
        $r4 = virtualinvoke value.<java.lang.Integer: java.lang.String toString()>();
        $r5 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r4);
        interfaceinvoke el.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);
        el = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("x-height");
        interfaceinvoke root.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(el);
        $r9 = new java.lang.Integer;
        $i2 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: int getXHeight()>();
        specialinvoke $r9.<java.lang.Integer: void <init>(int)>($i2);
        value = $r9;
        $r4 = virtualinvoke value.<java.lang.Integer: java.lang.String toString()>();
        $r5 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r4);
        interfaceinvoke el.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);
        el = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("ascender");
        interfaceinvoke root.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(el);
        $r9 = new java.lang.Integer;
        $i2 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: int getLowerCaseAscent()>();
        specialinvoke $r9.<java.lang.Integer: void <init>(int)>($i2);
        value = $r9;
        $r4 = virtualinvoke value.<java.lang.Integer: java.lang.String toString()>();
        $r5 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r4);
        interfaceinvoke el.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);
        el = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("descender");
        interfaceinvoke root.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(el);
        $r9 = new java.lang.Integer;
        $i2 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: int getLowerCaseDescent()>();
        $i2 = neg $i2;
        specialinvoke $r9.<java.lang.Integer: void <init>(int)>($i2);
        value = $r9;
        $r4 = virtualinvoke value.<java.lang.Integer: java.lang.String toString()>();
        $r5 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r4);
        interfaceinvoke el.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);
        bbox = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("bbox");
        interfaceinvoke root.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(bbox);
        bb = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: int[] getFontBBox()>();
        $r10 = newarray (java.lang.String)[4];
        $r10[0] = "left";
        $r10[1] = "bottom";
        $r10[2] = "right";
        $r10[3] = "top";
        names = $r10;
        i = 0;

     label7:
        $i1 = lengthof names;
        if i >= $i1 goto label8;

        $r11 = names[i];
        el = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>($r11);
        interfaceinvoke bbox.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(el);
        $r9 = new java.lang.Integer;
        $i2 = bb[i];
        specialinvoke $r9.<java.lang.Integer: void <init>(int)>($i2);
        value = $r9;
        $r4 = virtualinvoke value.<java.lang.Integer: java.lang.String toString()>();
        $r5 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r4);
        interfaceinvoke el.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);
        i = i + 1;
        goto label7;

     label8:
        el = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("flags");
        interfaceinvoke root.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(el);
        $r9 = new java.lang.Integer;
        $i2 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: int getFlags()>();
        specialinvoke $r9.<java.lang.Integer: void <init>(int)>($i2);
        value = $r9;
        $r4 = virtualinvoke value.<java.lang.Integer: java.lang.String toString()>();
        $r5 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r4);
        interfaceinvoke el.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);
        el = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("stemv");
        interfaceinvoke root.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(el);
        $r9 = new java.lang.Integer;
        $i2 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: int getStemV()>();
        specialinvoke $r9.<java.lang.Integer: void <init>(int)>($i2);
        value = $r9;
        $r4 = virtualinvoke value.<java.lang.Integer: java.lang.String toString()>();
        $r5 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r4);
        interfaceinvoke el.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);
        el = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("italicangle");
        interfaceinvoke root.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(el);
        $r9 = new java.lang.Integer;
        $i2 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: int getItalicAngle()>();
        specialinvoke $r9.<java.lang.Integer: void <init>(int)>($i2);
        value = $r9;
        $r4 = virtualinvoke value.<java.lang.Integer: java.lang.String toString()>();
        $r5 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r4);
        interfaceinvoke el.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);
        el = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("first-char");
        interfaceinvoke root.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(el);
        $r9 = new java.lang.Integer;
        $s3 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: short getFirstChar()>();
        specialinvoke $r9.<java.lang.Integer: void <init>(int)>($s3);
        value = $r9;
        $r4 = virtualinvoke value.<java.lang.Integer: java.lang.String toString()>();
        $r5 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r4);
        interfaceinvoke el.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);
        el = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("last-char");
        interfaceinvoke root.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(el);
        $r9 = new java.lang.Integer;
        $s3 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: short getLastChar()>();
        specialinvoke $r9.<java.lang.Integer: void <init>(int)>($s3);
        value = $r9;
        $r4 = virtualinvoke value.<java.lang.Integer: java.lang.String toString()>();
        $r5 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r4);
        interfaceinvoke el.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);
        widths = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("widths");
        interfaceinvoke root.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(widths);
        i = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: short getFirstChar()>();

     label9:
        $s4 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: short getLastChar()>();
        if i > $s4 goto label10;

        el = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("char");
        interfaceinvoke widths.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(el);
        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i);
        interfaceinvoke el.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("idx", $r4);
        $r12 = new java.lang.Integer;
        $i5 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: int getCharWidth(short)>(i);
        specialinvoke $r12.<java.lang.Integer: void <init>(int)>($i5);
        $r4 = virtualinvoke $r12.<java.lang.Integer: java.lang.String toString()>();
        interfaceinvoke el.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("wdt", $r4);
        $i0 = i + 1;
        i = (short) $i0;
        goto label9;

     label10:
        $r13 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: java.util.Map getKerning()>();
        $r14 = interfaceinvoke $r13.<java.util.Map: java.util.Set keySet()>();
        iter = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label14;

        $r15 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();
        kpx1 = (java.lang.Integer) $r15;
        el = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("kerning");
        $r4 = virtualinvoke kpx1.<java.lang.Integer: java.lang.String toString()>();
        interfaceinvoke el.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("kpx1", $r4);
        interfaceinvoke root.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(el);
        el2 = null;
        $r13 = virtualinvoke pfm.<org.apache.fop.fonts.type1.PFMFile: java.util.Map getKerning()>();
        $r15 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(kpx1);
        h2 = (java.util.Map) $r15;
        $r14 = interfaceinvoke h2.<java.util.Map: java.util.Set keySet()>();
        enum2 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label12:
        $z0 = interfaceinvoke enum2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label13;

        $r15 = interfaceinvoke enum2.<java.util.Iterator: java.lang.Object next()>();
        kpx2 = (java.lang.Integer) $r15;
        el2 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("pair");
        $r4 = virtualinvoke kpx2.<java.lang.Integer: java.lang.String toString()>();
        interfaceinvoke el2.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("kpx2", $r4);
        $r15 = interfaceinvoke h2.<java.util.Map: java.lang.Object get(java.lang.Object)>(kpx2);
        val = (java.lang.Integer) $r15;
        $r4 = virtualinvoke val.<java.lang.Integer: java.lang.String toString()>();
        interfaceinvoke el2.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("kern", $r4);
        interfaceinvoke el.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(el2);
        goto label12;

     label13:
        goto label11;

     label14:
        return doc;

        catch javax.xml.parsers.ParserConfigurationException from label0 to label1 with label2;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException l1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        l1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(l1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }
}
