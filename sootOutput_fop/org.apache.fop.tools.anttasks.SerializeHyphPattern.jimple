public class org.apache.fop.tools.anttasks.SerializeHyphPattern extends org.apache.tools.ant.Task
{
    private java.util.List filesets;
    private java.io.File targetDir;
    private boolean errorDump;

    public void <init>()
    {
        org.apache.fop.tools.anttasks.SerializeHyphPattern this;
        java.util.ArrayList $r0;

        this := @this: org.apache.fop.tools.anttasks.SerializeHyphPattern;
        specialinvoke this.<org.apache.tools.ant.Task: void <init>()>();
        $r0 = new java.util.ArrayList;
        specialinvoke $r0.<java.util.ArrayList: void <init>()>();
        this.<org.apache.fop.tools.anttasks.SerializeHyphPattern: java.util.List filesets> = $r0;
        this.<org.apache.fop.tools.anttasks.SerializeHyphPattern: boolean errorDump> = 0;
        return;
    }

    public void execute() throws org.apache.tools.ant.BuildException
    {
        org.apache.fop.tools.anttasks.SerializeHyphPattern this;
        int i, j, $i0, $i1;
        org.apache.tools.ant.types.FileSet fs;
        org.apache.tools.ant.DirectoryScanner ds;
        java.io.File basedir;
        java.lang.String[] files;
        java.util.List $r0, $r1;
        java.lang.Object $r2;
        org.apache.tools.ant.Project $r3;
        java.lang.String $r4, $r5;

        this := @this: org.apache.fop.tools.anttasks.SerializeHyphPattern;
        i = 0;

     label0:
        $r0 = virtualinvoke this.<org.apache.fop.tools.anttasks.SerializeHyphPattern: java.util.List getFilesets()>();
        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();
        if i >= $i0 goto label3;

        $r1 = virtualinvoke this.<org.apache.fop.tools.anttasks.SerializeHyphPattern: java.util.List getFilesets()>();
        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i);
        fs = (org.apache.tools.ant.types.FileSet) $r2;
        $r3 = virtualinvoke this.<org.apache.fop.tools.anttasks.SerializeHyphPattern: org.apache.tools.ant.Project getProject()>();
        ds = virtualinvoke fs.<org.apache.tools.ant.types.FileSet: org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)>($r3);
        basedir = virtualinvoke ds.<org.apache.tools.ant.DirectoryScanner: java.io.File getBasedir()>();
        files = virtualinvoke ds.<org.apache.tools.ant.DirectoryScanner: java.lang.String[] getIncludedFiles()>();
        j = 0;

     label1:
        $i0 = lengthof files;
        if j >= $i0 goto label2;

        $r4 = files[j];
        $r5 = files[j];
        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();
        $i1 = $i1 - 4;
        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);
        specialinvoke this.<org.apache.fop.tools.anttasks.SerializeHyphPattern: void processFile(java.io.File,java.lang.String)>(basedir, $r4);
        j = j + 1;
        goto label1;

     label2:
        i = i + 1;
        goto label0;

     label3:
        return;
    }

    public void addFileset(org.apache.tools.ant.types.FileSet)
    {
        org.apache.fop.tools.anttasks.SerializeHyphPattern this;
        org.apache.tools.ant.types.FileSet set;
        java.util.List $r0;

        this := @this: org.apache.fop.tools.anttasks.SerializeHyphPattern;
        set := @parameter0: org.apache.tools.ant.types.FileSet;
        $r0 = this.<org.apache.fop.tools.anttasks.SerializeHyphPattern: java.util.List filesets>;
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(set);
        return;
    }

    public java.util.List getFilesets()
    {
        org.apache.fop.tools.anttasks.SerializeHyphPattern this;
        java.util.List $r0;

        this := @this: org.apache.fop.tools.anttasks.SerializeHyphPattern;
        $r0 = this.<org.apache.fop.tools.anttasks.SerializeHyphPattern: java.util.List filesets>;
        return $r0;
    }

    public void setTargetDir(java.lang.String)
    {
        org.apache.fop.tools.anttasks.SerializeHyphPattern this;
        java.lang.String targetDir;
        java.io.File $r0, dir;

        this := @this: org.apache.fop.tools.anttasks.SerializeHyphPattern;
        targetDir := @parameter0: java.lang.String;
        $r0 = new java.io.File;
        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(targetDir);
        dir = $r0;
        this.<org.apache.fop.tools.anttasks.SerializeHyphPattern: java.io.File targetDir> = dir;
        return;
    }

    public void setErrorDump(boolean)
    {
        org.apache.fop.tools.anttasks.SerializeHyphPattern this;
        boolean errorDump;

        this := @this: org.apache.fop.tools.anttasks.SerializeHyphPattern;
        errorDump := @parameter0: boolean;
        this.<org.apache.fop.tools.anttasks.SerializeHyphPattern: boolean errorDump> = errorDump;
        return;
    }

    private void processFile(java.io.File, java.lang.String)
    {
        org.apache.fop.tools.anttasks.SerializeHyphPattern this;
        java.io.File basedir, $r0, infile, outfile, $r3;
        java.lang.String filename, $r2;
        java.lang.StringBuffer $r1;
        boolean startProcess;

        this := @this: org.apache.fop.tools.anttasks.SerializeHyphPattern;
        basedir := @parameter0: java.io.File;
        filename := @parameter1: java.lang.String;
        $r0 = new java.io.File;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(filename);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".xml");
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>(basedir, $r2);
        infile = $r0;
        $r0 = new java.io.File;
        $r3 = this.<org.apache.fop.tools.anttasks.SerializeHyphPattern: java.io.File targetDir>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(filename);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".hyp");
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r2);
        outfile = $r0;
        startProcess = 1;
        startProcess = specialinvoke this.<org.apache.fop.tools.anttasks.SerializeHyphPattern: boolean rebuild(java.io.File,java.io.File)>(infile, outfile);
        if startProcess == 0 goto label0;

        specialinvoke this.<org.apache.fop.tools.anttasks.SerializeHyphPattern: void buildPatternFile(java.io.File,java.io.File)>(infile, outfile);

     label0:
        return;
    }

    private void buildPatternFile(java.io.File, java.io.File)
    {
        org.apache.fop.tools.anttasks.SerializeHyphPattern this;
        java.io.File infile, outfile;
        java.io.PrintStream $r0;
        java.lang.StringBuffer $r1;
        org.apache.fop.hyphenation.HyphenationTree hTree, $r4;
        org.apache.fop.hyphenation.HyphenationException ex, $r5;
        java.io.FileOutputStream $r2;
        java.io.ObjectOutputStream out, $r6;
        java.io.IOException ioe, $r8;
        java.lang.String $r3;
        boolean $z0;
        java.io.BufferedOutputStream $r7;

        this := @this: org.apache.fop.tools.anttasks.SerializeHyphPattern;
        infile := @parameter0: java.io.File;
        outfile := @parameter1: java.io.File;
        $r0 = <java.lang.System: java.io.PrintStream out>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Processing ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(infile);
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>($r3);
        $r4 = new org.apache.fop.hyphenation.HyphenationTree;
        specialinvoke $r4.<org.apache.fop.hyphenation.HyphenationTree: void <init>()>();
        hTree = $r4;

     label0:
        $r3 = virtualinvoke infile.<java.io.File: java.lang.String toString()>();
        virtualinvoke hTree.<org.apache.fop.hyphenation.HyphenationTree: void loadPatterns(java.lang.String)>($r3);
        $z0 = this.<org.apache.fop.tools.anttasks.SerializeHyphPattern: boolean errorDump>;
        if $z0 == 0 goto label1;

        $r0 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Stats: ");
        virtualinvoke hTree.<org.apache.fop.hyphenation.HyphenationTree: void printStats()>();

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        ex = $r5;
        $r0 = <java.lang.System: java.io.PrintStream err>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t load patterns from xml file ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(infile);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" - Maybe hyphenation.dtd is missing?");
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>($r3);
        $z0 = this.<org.apache.fop.tools.anttasks.SerializeHyphPattern: boolean errorDump>;
        if $z0 == 0 goto label3;

        $r0 = <java.lang.System: java.io.PrintStream err>;
        $r3 = virtualinvoke ex.<org.apache.fop.hyphenation.HyphenationException: java.lang.String toString()>();
        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>($r3);

     label3:
        $r6 = new java.io.ObjectOutputStream;
        $r7 = new java.io.BufferedOutputStream;
        $r2 = new java.io.FileOutputStream;
        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File)>(outfile);
        specialinvoke $r7.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r2);
        specialinvoke $r6.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r7);
        out = $r6;
        virtualinvoke out.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(hTree);
        virtualinvoke out.<java.io.ObjectOutputStream: void close()>();

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;
        ioe = $r8;
        $r0 = <java.lang.System: java.io.PrintStream err>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t write compiled pattern file: ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(outfile);
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>($r3);
        $r0 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.Object)>(ioe);

     label6:
        return;

        catch org.apache.fop.hyphenation.HyphenationException from label0 to label1 with label2;
        catch java.io.IOException from label3 to label4 with label5;
    }

    private boolean rebuild(java.io.File, java.io.File)
    {
        org.apache.fop.tools.anttasks.SerializeHyphPattern this;
        java.io.File infile, outfile;
        boolean $z0;
        long $l0, $l1;
        byte $b2;

        this := @this: org.apache.fop.tools.anttasks.SerializeHyphPattern;
        infile := @parameter0: java.io.File;
        outfile := @parameter1: java.io.File;
        $z0 = virtualinvoke outfile.<java.io.File: boolean exists()>();
        if $z0 == 0 goto label0;

        $l0 = virtualinvoke outfile.<java.io.File: long lastModified()>();
        $l1 = virtualinvoke infile.<java.io.File: long lastModified()>();
        $b2 = $l0 cmp $l1;
        if $b2 >= 0 goto label1;

        return 1;

     label0:
        return 1;

     label1:
        return 0;
    }
}
