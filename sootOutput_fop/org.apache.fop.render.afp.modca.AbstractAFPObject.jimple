public abstract class org.apache.fop.render.afp.modca.AbstractAFPObject extends java.lang.Object
{
    protected static final org.apache.commons.logging.Log log;

    public void <init>()
    {
        org.apache.fop.render.afp.modca.AbstractAFPObject this;

        this := @this: org.apache.fop.render.afp.modca.AbstractAFPObject;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }

    public abstract void writeDataStream(java.io.OutputStream) throws java.io.IOException;

    protected void writeObjectList(java.util.List, java.io.OutputStream) throws java.io.IOException
    {
        org.apache.fop.render.afp.modca.AbstractAFPObject this, $r1;
        java.util.List afpObjects;
        java.io.OutputStream os;
        java.util.Iterator it;
        boolean $z0;
        java.lang.Object $r0;

        this := @this: org.apache.fop.render.afp.modca.AbstractAFPObject;
        afpObjects := @parameter0: java.util.List;
        os := @parameter1: java.io.OutputStream;
        it = interfaceinvoke afpObjects.<java.util.List: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        $r0 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>();
        $r1 = (org.apache.fop.render.afp.modca.AbstractAFPObject) $r0;
        virtualinvoke $r1.<org.apache.fop.render.afp.modca.AbstractAFPObject: void writeDataStream(java.io.OutputStream)>(os);
        goto label0;

     label1:
        return;
    }

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>("org.apache.fop.render.afp.modca");
        <org.apache.fop.render.afp.modca.AbstractAFPObject: org.apache.commons.logging.Log log> = $r0;
        return;
    }
}
