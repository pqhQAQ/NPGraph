public final class org.apache.fop.render.afp.tools.BinaryUtils extends java.lang.Object
{

    public void <init>()
    {
        org.apache.fop.render.afp.tools.BinaryUtils this;

        this := @this: org.apache.fop.render.afp.tools.BinaryUtils;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }

    public static byte[] convert(int, int)
    {
        int integer, bufsize, size, $i0, $i1, $i2;
        java.lang.StringBuffer $r0, buf;
        java.lang.String $r1, $r2;
        byte[] $r3;

        integer := @parameter0: int;
        bufsize := @parameter1: int;
        $r0 = new java.lang.StringBuffer;
        $r1 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(integer);
        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>($r1);
        buf = $r0;
        $i0 = virtualinvoke buf.<java.lang.StringBuffer: int length()>();
        $i0 = $i0 % 2;
        if $i0 == 0 goto label0;

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(0, "0");

     label0:
        $i0 = virtualinvoke buf.<java.lang.StringBuffer: int length()>();
        size = $i0 / 2;
        if size <= bufsize goto label1;

        $i1 = virtualinvoke buf.<java.lang.StringBuffer: int length()>();
        $i2 = bufsize * 2;
        $i1 = $i1 - $i2;
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>(0, $i1);
        goto label2;

     label1:
        if size >= bufsize goto label2;

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(0, "00");
        size = size + 1;
        goto label1;

     label2:
        $r2 = virtualinvoke buf.<java.lang.StringBuffer: java.lang.String toString()>();
        $r3 = staticinvoke <org.apache.fop.render.afp.tools.BinaryUtils: byte[] convert(java.lang.String)>($r2);
        return $r3;
    }

    public static byte[] convert(int)
    {
        int integer;
        java.lang.String $r0;
        byte[] $r1;

        integer := @parameter0: int;
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(integer);
        $r1 = staticinvoke <org.apache.fop.render.afp.tools.BinaryUtils: byte[] convert(java.lang.String)>($r0);
        return $r1;
    }

    public static byte[] convert(java.lang.String)
    {
        java.lang.String digits;
        java.io.ByteArrayOutputStream baos, $r1;
        int i, $i0, $i1;
        char c1, c2;
        byte b;
        java.lang.StringBuffer $r0;
        java.lang.IllegalArgumentException $r2;
        byte[] $r3;

        digits := @parameter0: java.lang.String;
        $i0 = virtualinvoke digits.<java.lang.String: int length()>();
        $i0 = $i0 % 2;
        if $i0 != 0 goto label0;

        goto label1;

     label0:
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0");
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(digits);
        digits = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

     label1:
        $r1 = new java.io.ByteArrayOutputStream;
        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();
        baos = $r1;
        i = 0;

     label2:
        $i1 = virtualinvoke digits.<java.lang.String: int length()>();
        if i >= $i1 goto label11;

        c1 = virtualinvoke digits.<java.lang.String: char charAt(int)>(i);
        $i1 = i + 1;
        c2 = virtualinvoke digits.<java.lang.String: char charAt(int)>($i1);
        b = 0;
        if c1 < 48 goto label3;

        if c1 > 57 goto label3;

        $i1 = c1 - 48;
        $i1 = $i1 * 16;
        $i0 = b + $i1;
        b = (byte) $i0;
        goto label6;

     label3:
        if c1 < 97 goto label4;

        if c1 > 102 goto label4;

        $i1 = c1 - 97;
        $i1 = $i1 + 10;
        $i1 = $i1 * 16;
        $i0 = b + $i1;
        b = (byte) $i0;
        goto label6;

     label4:
        if c1 < 65 goto label5;

        if c1 > 70 goto label5;

        $i1 = c1 - 65;
        $i1 = $i1 + 10;
        $i1 = $i1 * 16;
        $i0 = b + $i1;
        b = (byte) $i0;
        goto label6;

     label5:
        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad hexadecimal digit");
        throw $r2;

     label6:
        if c2 < 48 goto label7;

        if c2 > 57 goto label7;

        $i1 = c2 - 48;
        $i0 = b + $i1;
        b = (byte) $i0;
        goto label10;

     label7:
        if c2 < 97 goto label8;

        if c2 > 102 goto label8;

        $i1 = c2 - 97;
        $i1 = $i1 + 10;
        $i0 = b + $i1;
        b = (byte) $i0;
        goto label10;

     label8:
        if c2 < 65 goto label9;

        if c2 > 70 goto label9;

        $i1 = c2 - 65;
        $i1 = $i1 + 10;
        $i0 = b + $i1;
        b = (byte) $i0;
        goto label10;

     label9:
        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad hexadecimal digit");
        throw $r2;

     label10:
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(b);
        i = i + 2;
        goto label2;

     label11:
        $r3 = virtualinvoke baos.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();
        return $r3;
    }

    public static void shortToByteArray(short, byte[], int)
    {
        short value, $s0;
        byte[] array;
        int offset, $i2;
        byte $b1;

        value := @parameter0: short;
        array := @parameter1: byte[];
        offset := @parameter2: int;
        $s0 = value >>> 8;
        $b1 = (byte) $s0;
        array[offset] = $b1;
        $i2 = offset + 1;
        $b1 = (byte) value;
        array[$i2] = $b1;
        return;
    }

    public static byte[] shortToByteArray(short)
    {
        short value;
        byte[] serverValue;

        value := @parameter0: short;
        serverValue = newarray (byte)[2];
        staticinvoke <org.apache.fop.render.afp.tools.BinaryUtils: void shortToByteArray(short,byte[],int)>(value, serverValue, 0);
        return serverValue;
    }
}
