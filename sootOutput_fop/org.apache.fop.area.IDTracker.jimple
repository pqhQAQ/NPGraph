public class org.apache.fop.area.IDTracker extends java.lang.Object
{
    private static org.apache.commons.logging.Log log;
    private java.util.Map idLocations;
    private java.util.Map unresolvedIDRefs;
    private java.util.Set unfinishedIDs;
    private java.util.Set alreadyResolvedIDs;
    static java.lang.Class class$org$apache$fop$area$IDTracker;

    public void <init>()
    {
        org.apache.fop.area.IDTracker this;
        java.util.HashMap $r0;
        java.util.HashSet $r1;

        this := @this: org.apache.fop.area.IDTracker;
        specialinvoke this.<java.lang.Object: void <init>()>();
        $r0 = new java.util.HashMap;
        specialinvoke $r0.<java.util.HashMap: void <init>()>();
        this.<org.apache.fop.area.IDTracker: java.util.Map idLocations> = $r0;
        $r0 = new java.util.HashMap;
        specialinvoke $r0.<java.util.HashMap: void <init>()>();
        this.<org.apache.fop.area.IDTracker: java.util.Map unresolvedIDRefs> = $r0;
        $r1 = new java.util.HashSet;
        specialinvoke $r1.<java.util.HashSet: void <init>()>();
        this.<org.apache.fop.area.IDTracker: java.util.Set unfinishedIDs> = $r1;
        $r1 = new java.util.HashSet;
        specialinvoke $r1.<java.util.HashSet: void <init>()>();
        this.<org.apache.fop.area.IDTracker: java.util.Set alreadyResolvedIDs> = $r1;
        return;
    }

    public void associateIDWithPageViewport(java.lang.String, org.apache.fop.area.PageViewport)
    {
        org.apache.fop.area.IDTracker this;
        java.lang.String id, $r2;
        org.apache.fop.area.PageViewport pv;
        org.apache.commons.logging.Log $r0;
        java.lang.StringBuffer $r1;
        java.util.List pvList;
        boolean $z0;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.util.ArrayList $r5, pvList;
        java.util.Set $r6;

        this := @this: org.apache.fop.area.IDTracker;
        id := @parameter0: java.lang.String;
        pv := @parameter1: org.apache.fop.area.PageViewport;
        $r0 = <org.apache.fop.area.IDTracker: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label0;

        $r0 = <org.apache.fop.area.IDTracker: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("associateIDWithPageViewport(");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(id);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(pv);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r2);

     label0:
        $r3 = this.<org.apache.fop.area.IDTracker: java.util.Map idLocations>;
        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(id);
        pvList = (java.util.List) $r4;
        if pvList != null goto label1;

        $r5 = new java.util.ArrayList;
        specialinvoke $r5.<java.util.ArrayList: void <init>()>();
        pvList = $r5;
        $r3 = this.<org.apache.fop.area.IDTracker: java.util.Map idLocations>;
        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(id, pvList);
        interfaceinvoke pvList.<java.util.List: boolean add(java.lang.Object)>(pv);
        virtualinvoke pv.<org.apache.fop.area.PageViewport: void setFirstWithID(java.lang.String)>(id);
        $r6 = this.<org.apache.fop.area.IDTracker: java.util.Set unfinishedIDs>;
        $z0 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(id);
        if $z0 != 0 goto label2;

        specialinvoke this.<org.apache.fop.area.IDTracker: void tryIDResolution(java.lang.String,org.apache.fop.area.PageViewport,java.util.List)>(id, pv, pvList);
        goto label2;

     label1:
        interfaceinvoke pvList.<java.util.List: boolean add(java.lang.Object)>(pv);

     label2:
        return;
    }

    public void signalPendingID(java.lang.String)
    {
        org.apache.fop.area.IDTracker this;
        java.lang.String id, $r2;
        org.apache.commons.logging.Log $r0;
        java.lang.StringBuffer $r1;
        boolean $z0;
        java.util.Set $r3;

        this := @this: org.apache.fop.area.IDTracker;
        id := @parameter0: java.lang.String;
        $r0 = <org.apache.fop.area.IDTracker: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label0;

        $r0 = <org.apache.fop.area.IDTracker: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("signalPendingID(");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(id);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r2);

     label0:
        $r3 = this.<org.apache.fop.area.IDTracker: java.util.Set unfinishedIDs>;
        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(id);
        return;
    }

    public void signalIDProcessed(java.lang.String)
    {
        org.apache.fop.area.IDTracker this;
        java.lang.String id, $r2;
        org.apache.commons.logging.Log $r0;
        java.lang.StringBuffer $r1;
        java.util.List pvList;
        java.util.Set todo, $r3;
        java.util.Iterator iter;
        org.apache.fop.area.Resolvable res;
        boolean $z0;
        java.util.Map $r4;
        java.lang.Object $r5;

        this := @this: org.apache.fop.area.IDTracker;
        id := @parameter0: java.lang.String;
        $r0 = <org.apache.fop.area.IDTracker: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label0;

        $r0 = <org.apache.fop.area.IDTracker: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("signalIDProcessed(");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(id);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r2);

     label0:
        $r3 = this.<org.apache.fop.area.IDTracker: java.util.Set alreadyResolvedIDs>;
        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(id);
        $r3 = this.<org.apache.fop.area.IDTracker: java.util.Set unfinishedIDs>;
        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(id);
        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = this.<org.apache.fop.area.IDTracker: java.util.Set unfinishedIDs>;
        interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(id);
        $r4 = this.<org.apache.fop.area.IDTracker: java.util.Map idLocations>;
        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(id);
        pvList = (java.util.List) $r5;
        $r4 = this.<org.apache.fop.area.IDTracker: java.util.Map unresolvedIDRefs>;
        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(id);
        todo = (java.util.Set) $r5;
        if todo == null goto label4;

        iter = interfaceinvoke todo.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();
        res = (org.apache.fop.area.Resolvable) $r5;
        interfaceinvoke res.<org.apache.fop.area.Resolvable: void resolveIDRef(java.lang.String,java.util.List)>(id, pvList);
        goto label2;

     label3:
        $r4 = this.<org.apache.fop.area.IDTracker: java.util.Map unresolvedIDRefs>;
        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(id);

     label4:
        return;
    }

    public boolean alreadyResolvedID(java.lang.String)
    {
        org.apache.fop.area.IDTracker this;
        java.lang.String id;
        java.util.Set $r0;
        boolean $z0;

        this := @this: org.apache.fop.area.IDTracker;
        id := @parameter0: java.lang.String;
        $r0 = this.<org.apache.fop.area.IDTracker: java.util.Set alreadyResolvedIDs>;
        $z0 = interfaceinvoke $r0.<java.util.Set: boolean contains(java.lang.Object)>(id);
        return $z0;
    }

    private void tryIDResolution(java.lang.String, org.apache.fop.area.PageViewport, java.util.List)
    {
        org.apache.fop.area.IDTracker this;
        java.lang.String id;
        org.apache.fop.area.PageViewport pv;
        java.util.List pvList;
        java.util.Set todo, $r2;
        java.util.Iterator iter;
        org.apache.fop.area.Resolvable res;
        java.util.Map $r0;
        java.lang.Object $r1;
        boolean $z0;

        this := @this: org.apache.fop.area.IDTracker;
        id := @parameter0: java.lang.String;
        pv := @parameter1: org.apache.fop.area.PageViewport;
        pvList := @parameter2: java.util.List;
        $r0 = this.<org.apache.fop.area.IDTracker: java.util.Map unresolvedIDRefs>;
        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(id);
        todo = (java.util.Set) $r1;
        if todo == null goto label4;

        iter = interfaceinvoke todo.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        $r1 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();
        res = (org.apache.fop.area.Resolvable) $r1;
        $r2 = this.<org.apache.fop.area.IDTracker: java.util.Set unfinishedIDs>;
        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(id);
        if $z0 != 0 goto label1;

        interfaceinvoke res.<org.apache.fop.area.Resolvable: void resolveIDRef(java.lang.String,java.util.List)>(id, pvList);
        goto label2;

     label1:
        return;

     label2:
        goto label0;

     label3:
        $r2 = this.<org.apache.fop.area.IDTracker: java.util.Set alreadyResolvedIDs>;
        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(id);
        $r0 = this.<org.apache.fop.area.IDTracker: java.util.Map unresolvedIDRefs>;
        interfaceinvoke $r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(id);

     label4:
        return;
    }

    public void tryIDResolution(org.apache.fop.area.PageViewport)
    {
        org.apache.fop.area.IDTracker this;
        org.apache.fop.area.PageViewport pv;
        java.lang.String[] ids;
        int i, $i0;
        java.util.List pvList;
        java.util.Map $r0;
        java.lang.String $r1;
        java.lang.Object $r2;

        this := @this: org.apache.fop.area.IDTracker;
        pv := @parameter0: org.apache.fop.area.PageViewport;
        ids = virtualinvoke pv.<org.apache.fop.area.PageViewport: java.lang.String[] getIDRefs()>();
        if ids == null goto label2;

        i = 0;

     label0:
        $i0 = lengthof ids;
        if i >= $i0 goto label2;

        $r0 = this.<org.apache.fop.area.IDTracker: java.util.Map idLocations>;
        $r1 = ids[i];
        $r2 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);
        pvList = (java.util.List) $r2;
        if pvList == null goto label1;

        $r1 = ids[i];
        specialinvoke this.<org.apache.fop.area.IDTracker: void tryIDResolution(java.lang.String,org.apache.fop.area.PageViewport,java.util.List)>($r1, pv, pvList);

     label1:
        i = i + 1;
        goto label0;

     label2:
        return;
    }

    public java.util.List getPageViewportsContainingID(java.lang.String)
    {
        org.apache.fop.area.IDTracker this;
        java.lang.String id;
        java.util.Map $r0;
        java.lang.Object $r1;
        java.util.List $r2;

        this := @this: org.apache.fop.area.IDTracker;
        id := @parameter0: java.lang.String;
        $r0 = this.<org.apache.fop.area.IDTracker: java.util.Map idLocations>;
        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(id);
        $r2 = (java.util.List) $r1;
        return $r2;
    }

    public void addUnresolvedIDRef(java.lang.String, org.apache.fop.area.Resolvable)
    {
        org.apache.fop.area.IDTracker this;
        java.lang.String idref;
        org.apache.fop.area.Resolvable res;
        java.util.Set todo;
        java.util.Map $r0;
        java.lang.Object $r1;
        java.util.HashSet $r2;

        this := @this: org.apache.fop.area.IDTracker;
        idref := @parameter0: java.lang.String;
        res := @parameter1: org.apache.fop.area.Resolvable;
        $r0 = this.<org.apache.fop.area.IDTracker: java.util.Map unresolvedIDRefs>;
        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(idref);
        todo = (java.util.Set) $r1;
        if todo != null goto label0;

        $r2 = new java.util.HashSet;
        specialinvoke $r2.<java.util.HashSet: void <init>()>();
        todo = $r2;
        $r0 = this.<org.apache.fop.area.IDTracker: java.util.Map unresolvedIDRefs>;
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(idref, todo);

     label0:
        interfaceinvoke todo.<java.util.Set: boolean add(java.lang.Object)>(res);
        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException l1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        l1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(l1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.apache.commons.logging.Log $r1;

        $r0 = <org.apache.fop.area.IDTracker: java.lang.Class class$org$apache$fop$area$IDTracker>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.fop.area.IDTracker: java.lang.Class class$(java.lang.String)>("org.apache.fop.area.IDTracker");
        <org.apache.fop.area.IDTracker: java.lang.Class class$org$apache$fop$area$IDTracker> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.fop.area.IDTracker: java.lang.Class class$org$apache$fop$area$IDTracker>;

     label1:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r0);
        <org.apache.fop.area.IDTracker: org.apache.commons.logging.Log log> = $r1;
        return;
    }
}
