public class org.apache.fop.tools.anttasks.FileCompare extends java.lang.Object
{
    private java.lang.String referenceDirectory;
    private java.lang.String testDirectory;
    private java.lang.String[] filenameList;
    private java.lang.String filenames;

    public void <init>()
    {
        org.apache.fop.tools.anttasks.FileCompare this;

        this := @this: org.apache.fop.tools.anttasks.FileCompare;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }

    public void setTestDirectory(java.lang.String)
    {
        org.apache.fop.tools.anttasks.FileCompare this;
        java.lang.String testDirectory, $r1;
        boolean $z0, $z1;
        java.lang.StringBuffer $r0;

        this := @this: org.apache.fop.tools.anttasks.FileCompare;
        testDirectory := @parameter0: java.lang.String;
        $z0 = virtualinvoke testDirectory.<java.lang.String: boolean endsWith(java.lang.String)>("/");
        $z1 = virtualinvoke testDirectory.<java.lang.String: boolean endsWith(java.lang.String)>("\\");
        $z0 = $z0 | $z1;
        if $z0 != 0 goto label0;

        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(testDirectory);
        $r1 = <java.io.File: java.lang.String separator>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);
        testDirectory = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

     label0:
        this.<org.apache.fop.tools.anttasks.FileCompare: java.lang.String testDirectory> = testDirectory;
        return;
    }

    public void setReferenceDirectory(java.lang.String)
    {
        org.apache.fop.tools.anttasks.FileCompare this;
        java.lang.String referenceDirectory, $r1;
        boolean $z0, $z1;
        java.lang.StringBuffer $r0;

        this := @this: org.apache.fop.tools.anttasks.FileCompare;
        referenceDirectory := @parameter0: java.lang.String;
        $z0 = virtualinvoke referenceDirectory.<java.lang.String: boolean endsWith(java.lang.String)>("/");
        $z1 = virtualinvoke referenceDirectory.<java.lang.String: boolean endsWith(java.lang.String)>("\\");
        $z0 = $z0 | $z1;
        if $z0 != 0 goto label0;

        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(referenceDirectory);
        $r1 = <java.io.File: java.lang.String separator>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);
        referenceDirectory = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

     label0:
        this.<org.apache.fop.tools.anttasks.FileCompare: java.lang.String referenceDirectory> = referenceDirectory;
        return;
    }

    public void setFilenames(java.lang.String)
    {
        org.apache.fop.tools.anttasks.FileCompare this;
        java.lang.String filenames, $r2;
        java.util.StringTokenizer $r0, tokens;
        java.util.ArrayList filenameListTmp, $r1;
        boolean $z0;
        int $i0;
        java.lang.String[] $r3, $r4;
        java.lang.Object[] $r5;

        this := @this: org.apache.fop.tools.anttasks.FileCompare;
        filenames := @parameter0: java.lang.String;
        $r0 = new java.util.StringTokenizer;
        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(filenames, ",");
        tokens = $r0;
        $r1 = new java.util.ArrayList;
        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(20);
        filenameListTmp = $r1;

     label0:
        $z0 = virtualinvoke tokens.<java.util.StringTokenizer: boolean hasMoreTokens()>();
        if $z0 == 0 goto label1;

        $r2 = virtualinvoke tokens.<java.util.StringTokenizer: java.lang.String nextToken()>();
        interfaceinvoke filenameListTmp.<java.util.List: boolean add(java.lang.Object)>($r2);
        goto label0;

     label1:
        $i0 = interfaceinvoke filenameListTmp.<java.util.List: int size()>();
        $r3 = newarray (java.lang.String)[$i0];
        this.<org.apache.fop.tools.anttasks.FileCompare: java.lang.String[] filenameList> = $r3;
        $r4 = newarray (java.lang.String)[0];
        $r5 = interfaceinvoke filenameListTmp.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);
        $r3 = (java.lang.String[]) $r5;
        $r3 = (java.lang.String[]) $r3;
        this.<org.apache.fop.tools.anttasks.FileCompare: java.lang.String[] filenameList> = $r3;
        return;
    }

    public static boolean compareFiles(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File f1, f2;
        boolean $z0;

        f1 := @parameter0: java.io.File;
        f2 := @parameter1: java.io.File;
        $z0 = staticinvoke <org.apache.fop.tools.anttasks.FileCompare: boolean compareFileSize(java.io.File,java.io.File)>(f1, f2);
        if $z0 == 0 goto label0;

        $z0 = staticinvoke <org.apache.fop.tools.anttasks.FileCompare: boolean compareBytes(java.io.File,java.io.File)>(f1, f2);
        if $z0 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private static boolean compareBytes(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File file1, file2;
        java.io.BufferedInputStream $r0, file1Input, file2Input;
        java.io.FileInputStream $r1;
        int charact1, charact2;

        file1 := @parameter0: java.io.File;
        file2 := @parameter1: java.io.File;
        $r0 = new java.io.BufferedInputStream;
        $r1 = new java.io.FileInputStream;
        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>(file1);
        specialinvoke $r0.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r1);
        file1Input = $r0;
        $r0 = new java.io.BufferedInputStream;
        $r1 = new java.io.FileInputStream;
        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>(file2);
        specialinvoke $r0.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r1);
        file2Input = $r0;
        charact1 = 0;
        charact2 = 0;

     label0:
        if charact1 == -1 goto label2;

        if charact1 != charact2 goto label1;

        charact1 = virtualinvoke file1Input.<java.io.BufferedInputStream: int read()>();
        charact2 = virtualinvoke file2Input.<java.io.BufferedInputStream: int read()>();
        goto label0;

     label1:
        return 0;

     label2:
        return 1;
    }

    private static boolean compareFileSize(java.io.File, java.io.File)
    {
        java.io.File oldFile, newFile;
        long $l0, $l1;
        byte $b2;

        oldFile := @parameter0: java.io.File;
        newFile := @parameter1: java.io.File;
        $l0 = virtualinvoke oldFile.<java.io.File: long length()>();
        $l1 = virtualinvoke newFile.<java.io.File: long length()>();
        $b2 = $l0 cmp $l1;
        if $b2 == 0 goto label0;

        return 0;

     label0:
        return 1;
    }

    private boolean filesExist(java.io.File, java.io.File)
    {
        org.apache.fop.tools.anttasks.FileCompare this;
        java.io.File oldFile, newFile;
        java.lang.StringBuffer $r0;
        boolean $z0;
        java.io.PrintStream $r1;
        java.lang.String $r2, $r3;

        this := @this: org.apache.fop.tools.anttasks.FileCompare;
        oldFile := @parameter0: java.io.File;
        newFile := @parameter1: java.io.File;
        $z0 = virtualinvoke oldFile.<java.io.File: boolean exists()>();
        if $z0 != 0 goto label0;

        $r1 = <java.lang.System: java.io.PrintStream err>;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Task Compare - ERROR: File ");
        $r2 = this.<org.apache.fop.tools.anttasks.FileCompare: java.lang.String referenceDirectory>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r2 = virtualinvoke oldFile.<java.io.File: java.lang.String getName()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" doesn\'t exist!");
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r3);
        return 0;

     label0:
        $z0 = virtualinvoke newFile.<java.io.File: boolean exists()>();
        if $z0 != 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream err>;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Task Compare - ERROR: File ");
        $r2 = this.<org.apache.fop.tools.anttasks.FileCompare: java.lang.String testDirectory>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r2 = virtualinvoke newFile.<java.io.File: java.lang.String getName()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" doesn\'t exist!");
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r3);
        return 0;

     label1:
        return 1;
    }

    private void writeHeader(java.io.PrintWriter)
    {
        org.apache.fop.tools.anttasks.FileCompare this;
        java.io.PrintWriter results;
        java.lang.String dateTime, $r3;
        java.text.DateFormat $r0;
        java.util.Date $r1;
        java.lang.StringBuffer $r2;

        this := @this: org.apache.fop.tools.anttasks.FileCompare;
        results := @parameter0: java.io.PrintWriter;
        $r0 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int)>(2, 2);
        $r1 = new java.util.Date;
        specialinvoke $r1.<java.util.Date: void <init>()>();
        dateTime = virtualinvoke $r0.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r1);
        virtualinvoke results.<java.io.PrintWriter: void println(java.lang.String)>("<html><head><title>Test Results</title></head><body>\n");
        virtualinvoke results.<java.io.PrintWriter: void println(java.lang.String)>("<h2>Compare Results<br>");
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<font size=\'1\'>created ");
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(dateTime);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</font></h2>");
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke results.<java.io.PrintWriter: void println(java.lang.String)>($r3);
        virtualinvoke results.<java.io.PrintWriter: void println(java.lang.String)>("<table cellpadding=\'10\' border=\'2\'><thead><th align=\'center\'>reference file</th><th align=\'center\'>test file</th><th align=\'center\'>identical?</th></thead>");
        return;
    }

    public void execute() throws org.apache.tools.ant.BuildException
    {
        org.apache.fop.tools.anttasks.FileCompare this;
        boolean identical, $z0;
        java.io.FileWriter $r0;
        java.io.PrintWriter results, $r1;
        int i, $i0;
        java.io.File oldFile, newFile, $r3;
        java.io.IOException ioe, $r11;
        java.lang.String[] $r2, $r6;
        java.lang.StringBuffer $r4, $r9;
        java.lang.String $r5, $r7, $r10;
        java.io.PrintStream $r8;

        this := @this: org.apache.fop.tools.anttasks.FileCompare;
        identical = 0;

     label0:
        $r1 = new java.io.PrintWriter;
        $r0 = new java.io.FileWriter;
        specialinvoke $r0.<java.io.FileWriter: void <init>(java.lang.String)>("results.html");
        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>($r0, 1);
        results = $r1;
        specialinvoke this.<org.apache.fop.tools.anttasks.FileCompare: void writeHeader(java.io.PrintWriter)>(results);
        i = 0;

     label1:
        $r2 = this.<org.apache.fop.tools.anttasks.FileCompare: java.lang.String[] filenameList>;
        $i0 = lengthof $r2;
        if i >= $i0 goto label5;

        $r3 = new java.io.File;
        $r4 = new java.lang.StringBuffer;
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();
        $r5 = this.<org.apache.fop.tools.anttasks.FileCompare: java.lang.String referenceDirectory>;
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r6 = this.<org.apache.fop.tools.anttasks.FileCompare: java.lang.String[] filenameList>;
        $r5 = $r6[i];
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r7);
        oldFile = $r3;
        $r3 = new java.io.File;
        $r4 = new java.lang.StringBuffer;
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();
        $r5 = this.<org.apache.fop.tools.anttasks.FileCompare: java.lang.String testDirectory>;
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r6 = this.<org.apache.fop.tools.anttasks.FileCompare: java.lang.String[] filenameList>;
        $r5 = $r6[i];
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r7);
        newFile = $r3;
        $z0 = specialinvoke this.<org.apache.fop.tools.anttasks.FileCompare: boolean filesExist(java.io.File,java.io.File)>(oldFile, newFile);
        if $z0 == 0 goto label4;

        identical = staticinvoke <org.apache.fop.tools.anttasks.FileCompare: boolean compareFileSize(java.io.File,java.io.File)>(oldFile, newFile);
        if identical == 0 goto label2;

        identical = staticinvoke <org.apache.fop.tools.anttasks.FileCompare: boolean compareBytes(java.io.File,java.io.File)>(oldFile, newFile);

     label2:
        if identical != 0 goto label3;

        $r8 = <java.lang.System: java.io.PrintStream out>;
        $r9 = new java.lang.StringBuffer;
        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Task Compare: \nFiles ");
        $r7 = this.<org.apache.fop.tools.anttasks.FileCompare: java.lang.String referenceDirectory>;
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);
        $r7 = virtualinvoke oldFile.<java.io.File: java.lang.String getName()>();
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" - ");
        $r7 = this.<org.apache.fop.tools.anttasks.FileCompare: java.lang.String testDirectory>;
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);
        $r7 = virtualinvoke newFile.<java.io.File: java.lang.String getName()>();
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" are *not* identical.");
        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r10);
        $r9 = new java.lang.StringBuffer;
        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<tr><td><a href=\'");
        $r7 = this.<org.apache.fop.tools.anttasks.FileCompare: java.lang.String referenceDirectory>;
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);
        $r7 = virtualinvoke oldFile.<java.io.File: java.lang.String getName()>();
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'>");
        $r7 = virtualinvoke oldFile.<java.io.File: java.lang.String getName()>();
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</a> </td><td> <a href=\'");
        $r7 = this.<org.apache.fop.tools.anttasks.FileCompare: java.lang.String testDirectory>;
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);
        $r7 = virtualinvoke newFile.<java.io.File: java.lang.String getName()>();
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'>");
        $r7 = virtualinvoke newFile.<java.io.File: java.lang.String getName()>();
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</a> </td><td><font color=\'red\'>No</font></td></tr>");
        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke results.<java.io.PrintWriter: void println(java.lang.String)>($r10);
        goto label4;

     label3:
        $r9 = new java.lang.StringBuffer;
        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<tr><td><a href=\'");
        $r7 = this.<org.apache.fop.tools.anttasks.FileCompare: java.lang.String referenceDirectory>;
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);
        $r7 = virtualinvoke oldFile.<java.io.File: java.lang.String getName()>();
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'>");
        $r7 = virtualinvoke oldFile.<java.io.File: java.lang.String getName()>();
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</a> </td><td> <a href=\'");
        $r7 = this.<org.apache.fop.tools.anttasks.FileCompare: java.lang.String testDirectory>;
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);
        $r7 = virtualinvoke newFile.<java.io.File: java.lang.String getName()>();
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'>");
        $r7 = virtualinvoke newFile.<java.io.File: java.lang.String getName()>();
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</a> </td><td>Yes</td></tr>");
        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke results.<java.io.PrintWriter: void println(java.lang.String)>($r10);

     label4:
        i = i + 1;
        goto label1;

     label5:
        virtualinvoke results.<java.io.PrintWriter: void println(java.lang.String)>("</table></html>");

     label6:
        goto label8;

     label7:
        $r11 := @caughtexception;
        ioe = $r11;
        $r8 = <java.lang.System: java.io.PrintStream err>;
        $r9 = new java.lang.StringBuffer;
        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ERROR: ");
        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(ioe);
        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r10);

     label8:
        return;

        catch java.io.IOException from label0 to label6 with label7;
    }
}
