public abstract class org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager extends org.apache.fop.layoutmgr.AbstractLayoutManager implements org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager
{
    private org.apache.fop.traits.MinOptMax allocIPD;
    protected org.apache.fop.traits.MinOptMax extraBPD;
    private org.apache.fop.area.Area currentArea;
    protected org.apache.fop.layoutmgr.LayoutContext childLC;
    private boolean bAreaCreated;
    private java.util.HashMap hmPrevIPD;

    protected void <init>(org.apache.fop.fo.FObj)
    {
        org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager this;
        org.apache.fop.fo.FObj node;
        org.apache.fop.traits.MinOptMax $r0;
        java.util.HashMap $r1;

        this := @this: org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager;
        node := @parameter0: org.apache.fop.fo.FObj;
        specialinvoke this.<org.apache.fop.layoutmgr.AbstractLayoutManager: void <init>(org.apache.fop.fo.FObj)>(node);
        $r0 = new org.apache.fop.traits.MinOptMax;
        specialinvoke $r0.<org.apache.fop.traits.MinOptMax: void <init>(int)>(0);
        this.<org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager: org.apache.fop.traits.MinOptMax allocIPD> = $r0;
        this.<org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager: boolean bAreaCreated> = 0;
        $r1 = new java.util.HashMap;
        specialinvoke $r1.<java.util.HashMap: void <init>()>();
        this.<org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager: java.util.HashMap hmPrevIPD> = $r1;
        $r0 = new org.apache.fop.traits.MinOptMax;
        specialinvoke $r0.<org.apache.fop.traits.MinOptMax: void <init>(int)>(0);
        this.<org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager: org.apache.fop.traits.MinOptMax extraBPD> = $r0;
        return;
    }

    public void setLMiter(java.util.ListIterator)
    {
        org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager this;
        java.util.ListIterator iter;

        this := @this: org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager;
        iter := @parameter0: java.util.ListIterator;
        this.<org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager: java.util.ListIterator childLMiter> = iter;
        return;
    }

    protected org.apache.fop.traits.MinOptMax getExtraIPD(boolean, boolean)
    {
        org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager this;
        boolean bNotFirst, bNotLast;
        org.apache.fop.traits.MinOptMax $r0;

        this := @this: org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager;
        bNotFirst := @parameter0: boolean;
        bNotLast := @parameter1: boolean;
        $r0 = new org.apache.fop.traits.MinOptMax;
        specialinvoke $r0.<org.apache.fop.traits.MinOptMax: void <init>(int)>(0);
        return $r0;
    }

    protected boolean hasLeadingFence(boolean)
    {
        org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager this;
        boolean bNotFirst;

        this := @this: org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager;
        bNotFirst := @parameter0: boolean;
        return 0;
    }

    protected boolean hasTrailingFence(boolean)
    {
        org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager this;
        boolean bNotLast;

        this := @this: org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager;
        bNotLast := @parameter0: boolean;
        return 0;
    }

    protected org.apache.fop.fo.properties.SpaceProperty getSpaceStart()
    {
        org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager this;

        this := @this: org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager;
        return null;
    }

    protected org.apache.fop.fo.properties.SpaceProperty getSpaceEnd()
    {
        org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager this;

        this := @this: org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager;
        return null;
    }

    protected org.apache.fop.traits.MinOptMax getPrevIPD(org.apache.fop.layoutmgr.LayoutManager)
    {
        org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager this;
        org.apache.fop.layoutmgr.LayoutManager lm;
        java.util.HashMap $r0;
        java.lang.Object $r1;
        org.apache.fop.traits.MinOptMax $r2;

        this := @this: org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager;
        lm := @parameter0: org.apache.fop.layoutmgr.LayoutManager;
        $r0 = this.<org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager: java.util.HashMap hmPrevIPD>;
        $r1 = virtualinvoke $r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(lm);
        $r2 = (org.apache.fop.traits.MinOptMax) $r1;
        return $r2;
    }

    protected void clearPrevIPD()
    {
        org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager this;
        java.util.HashMap $r0;

        this := @this: org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager;
        $r0 = this.<org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager: java.util.HashMap hmPrevIPD>;
        virtualinvoke $r0.<java.util.HashMap: void clear()>();
        return;
    }

    protected void addId()
    {
        org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager this;

        this := @this: org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager;
        return;
    }

    protected org.apache.fop.area.Area getCurrentArea()
    {
        org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager this;
        org.apache.fop.area.Area $r0;

        this := @this: org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager;
        $r0 = this.<org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager: org.apache.fop.area.Area currentArea>;
        return $r0;
    }

    protected void setCurrentArea(org.apache.fop.area.Area)
    {
        org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager this;
        org.apache.fop.area.Area area;

        this := @this: org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager;
        area := @parameter0: org.apache.fop.area.Area;
        this.<org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager: org.apache.fop.area.Area currentArea> = area;
        return;
    }

    protected void setTraits(boolean, boolean)
    {
        org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager this;
        boolean bNotFirst, bNotLast;

        this := @this: org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager;
        bNotFirst := @parameter0: boolean;
        bNotLast := @parameter1: boolean;
        return;
    }

    protected void setChildContext(org.apache.fop.layoutmgr.LayoutContext)
    {
        org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager this;
        org.apache.fop.layoutmgr.LayoutContext lc;

        this := @this: org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager;
        lc := @parameter0: org.apache.fop.layoutmgr.LayoutContext;
        this.<org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager: org.apache.fop.layoutmgr.LayoutContext childLC> = lc;
        return;
    }

    protected org.apache.fop.layoutmgr.LayoutContext getContext()
    {
        org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager this;
        org.apache.fop.layoutmgr.LayoutContext $r0;

        this := @this: org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager;
        $r0 = this.<org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager: org.apache.fop.layoutmgr.LayoutContext childLC>;
        return $r0;
    }

    protected void addSpace(org.apache.fop.area.Area, org.apache.fop.traits.MinOptMax, double)
    {
        org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager this;
        org.apache.fop.area.Area parentArea;
        org.apache.fop.traits.MinOptMax spaceRange;
        double dSpaceAdjust, $d0;
        int iAdjust, $i1, $i2;
        org.apache.fop.area.inline.Space ls, $r0;
        byte $b0;

        this := @this: org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager;
        parentArea := @parameter0: org.apache.fop.area.Area;
        spaceRange := @parameter1: org.apache.fop.traits.MinOptMax;
        dSpaceAdjust := @parameter2: double;
        if spaceRange == null goto label2;

        iAdjust = spaceRange.<org.apache.fop.traits.MinOptMax: int opt>;
        $b0 = dSpaceAdjust cmpl 0.0;
        if $b0 <= 0 goto label0;

        $i1 = spaceRange.<org.apache.fop.traits.MinOptMax: int max>;
        $i2 = spaceRange.<org.apache.fop.traits.MinOptMax: int opt>;
        $i1 = $i1 - $i2;
        $d0 = (double) $i1;
        $d0 = $d0 * dSpaceAdjust;
        $i1 = (int) $d0;
        iAdjust = iAdjust + $i1;
        goto label1;

     label0:
        $b0 = dSpaceAdjust cmpg 0.0;
        if $b0 >= 0 goto label1;

        $i1 = spaceRange.<org.apache.fop.traits.MinOptMax: int opt>;
        $i2 = spaceRange.<org.apache.fop.traits.MinOptMax: int min>;
        $i1 = $i1 - $i2;
        $d0 = (double) $i1;
        $d0 = $d0 * dSpaceAdjust;
        $i1 = (int) $d0;
        iAdjust = iAdjust + $i1;

     label1:
        if iAdjust == 0 goto label2;

        $r0 = new org.apache.fop.area.inline.Space;
        specialinvoke $r0.<org.apache.fop.area.inline.Space: void <init>()>();
        ls = $r0;
        virtualinvoke ls.<org.apache.fop.area.inline.Space: void setIPD(int)>(iAdjust);
        virtualinvoke parentArea.<org.apache.fop.area.Area: void addChildArea(org.apache.fop.area.Area)>(ls);

     label2:
        return;
    }

    public java.util.List addALetterSpaceTo(java.util.List)
    {
        org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager this;
        java.util.List oldList;
        java.util.ListIterator oldListIterator;
        org.apache.fop.layoutmgr.KnuthElement element;
        org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager LM;
        org.apache.fop.layoutmgr.NonLeafPosition $r0, $r3;
        boolean $z0;
        java.lang.Object $r1;
        org.apache.fop.layoutmgr.Position $r2, $r5;
        org.apache.fop.layoutmgr.LayoutManager $r4;

        this := @this: org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager;
        oldList := @parameter0: java.util.List;
        oldListIterator = interfaceinvoke oldList.<java.util.List: java.util.ListIterator listIterator()>();
        element = null;

     label0:
        $z0 = interfaceinvoke oldListIterator.<java.util.ListIterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        $r1 = interfaceinvoke oldListIterator.<java.util.ListIterator: java.lang.Object next()>();
        element = (org.apache.fop.layoutmgr.KnuthElement) $r1;
        $r2 = virtualinvoke element.<org.apache.fop.layoutmgr.KnuthElement: org.apache.fop.layoutmgr.Position getPosition()>();
        $r3 = (org.apache.fop.layoutmgr.NonLeafPosition) $r2;
        $r2 = virtualinvoke $r3.<org.apache.fop.layoutmgr.NonLeafPosition: org.apache.fop.layoutmgr.Position getPosition()>();
        virtualinvoke element.<org.apache.fop.layoutmgr.KnuthElement: void setPosition(org.apache.fop.layoutmgr.Position)>($r2);
        goto label0;

     label1:
        $r4 = virtualinvoke element.<org.apache.fop.layoutmgr.KnuthElement: org.apache.fop.layoutmgr.LayoutManager getLayoutManager()>();
        LM = (org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager) $r4;
        if LM == null goto label2;

        oldList = interfaceinvoke LM.<org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager: java.util.List addALetterSpaceTo(java.util.List)>(oldList);

     label2:
        oldListIterator = interfaceinvoke oldList.<java.util.List: java.util.ListIterator listIterator()>();

     label3:
        $z0 = interfaceinvoke oldListIterator.<java.util.ListIterator: boolean hasNext()>();
        if $z0 == 0 goto label4;

        $r1 = interfaceinvoke oldListIterator.<java.util.ListIterator: java.lang.Object next()>();
        element = (org.apache.fop.layoutmgr.KnuthElement) $r1;
        $r0 = new org.apache.fop.layoutmgr.NonLeafPosition;
        $r5 = virtualinvoke element.<org.apache.fop.layoutmgr.KnuthElement: org.apache.fop.layoutmgr.Position getPosition()>();
        specialinvoke $r0.<org.apache.fop.layoutmgr.NonLeafPosition: void <init>(org.apache.fop.layoutmgr.LayoutManager,org.apache.fop.layoutmgr.Position)>(this, $r5);
        $r2 = virtualinvoke this.<org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager: org.apache.fop.layoutmgr.Position notifyPos(org.apache.fop.layoutmgr.Position)>($r0);
        virtualinvoke element.<org.apache.fop.layoutmgr.KnuthElement: void setPosition(org.apache.fop.layoutmgr.Position)>($r2);
        goto label3;

     label4:
        return oldList;
    }

    public void removeWordSpace(java.util.List)
    {
        org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager this;
        java.util.List oldList;
        java.util.ListIterator oldListIterator;
        org.apache.fop.layoutmgr.KnuthElement element;
        boolean $z0;
        java.lang.Object $r0;
        org.apache.fop.layoutmgr.Position $r1;
        org.apache.fop.layoutmgr.NonLeafPosition $r2;
        org.apache.fop.layoutmgr.LayoutManager $r3;
        org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager $r4;

        this := @this: org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager;
        oldList := @parameter0: java.util.List;
        oldListIterator = interfaceinvoke oldList.<java.util.List: java.util.ListIterator listIterator()>();
        element = null;

     label0:
        $z0 = interfaceinvoke oldListIterator.<java.util.ListIterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        $r0 = interfaceinvoke oldListIterator.<java.util.ListIterator: java.lang.Object next()>();
        element = (org.apache.fop.layoutmgr.KnuthElement) $r0;
        $r1 = virtualinvoke element.<org.apache.fop.layoutmgr.KnuthElement: org.apache.fop.layoutmgr.Position getPosition()>();
        $r2 = (org.apache.fop.layoutmgr.NonLeafPosition) $r1;
        $r1 = virtualinvoke $r2.<org.apache.fop.layoutmgr.NonLeafPosition: org.apache.fop.layoutmgr.Position getPosition()>();
        virtualinvoke element.<org.apache.fop.layoutmgr.KnuthElement: void setPosition(org.apache.fop.layoutmgr.Position)>($r1);
        goto label0;

     label1:
        $r3 = virtualinvoke element.<org.apache.fop.layoutmgr.KnuthElement: org.apache.fop.layoutmgr.LayoutManager getLayoutManager()>();
        $r4 = (org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager) $r3;
        interfaceinvoke $r4.<org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager: void removeWordSpace(java.util.List)>(oldList);
        return;
    }

    public void getWordChars(java.lang.StringBuffer, org.apache.fop.layoutmgr.Position)
    {
        org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager this;
        java.lang.StringBuffer sbChars;
        org.apache.fop.layoutmgr.Position pos, newPos;
        org.apache.fop.layoutmgr.NonLeafPosition $r0;
        org.apache.fop.layoutmgr.LayoutManager $r1;
        org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager $r2;

        this := @this: org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager;
        sbChars := @parameter0: java.lang.StringBuffer;
        pos := @parameter1: org.apache.fop.layoutmgr.Position;
        $r0 = (org.apache.fop.layoutmgr.NonLeafPosition) pos;
        newPos = virtualinvoke $r0.<org.apache.fop.layoutmgr.NonLeafPosition: org.apache.fop.layoutmgr.Position getPosition()>();
        $r1 = virtualinvoke newPos.<org.apache.fop.layoutmgr.Position: org.apache.fop.layoutmgr.LayoutManager getLM()>();
        $r2 = (org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager) $r1;
        interfaceinvoke $r2.<org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager: void getWordChars(java.lang.StringBuffer,org.apache.fop.layoutmgr.Position)>(sbChars, newPos);
        return;
    }

    public void hyphenate(org.apache.fop.layoutmgr.Position, org.apache.fop.layoutmgr.inline.HyphContext)
    {
        org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager this;
        org.apache.fop.layoutmgr.Position pos, newPos;
        org.apache.fop.layoutmgr.inline.HyphContext hc;
        org.apache.fop.layoutmgr.NonLeafPosition $r0;
        org.apache.fop.layoutmgr.LayoutManager $r1;
        org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager $r2;

        this := @this: org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager;
        pos := @parameter0: org.apache.fop.layoutmgr.Position;
        hc := @parameter1: org.apache.fop.layoutmgr.inline.HyphContext;
        $r0 = (org.apache.fop.layoutmgr.NonLeafPosition) pos;
        newPos = virtualinvoke $r0.<org.apache.fop.layoutmgr.NonLeafPosition: org.apache.fop.layoutmgr.Position getPosition()>();
        $r1 = virtualinvoke newPos.<org.apache.fop.layoutmgr.Position: org.apache.fop.layoutmgr.LayoutManager getLM()>();
        $r2 = (org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager) $r1;
        interfaceinvoke $r2.<org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager: void hyphenate(org.apache.fop.layoutmgr.Position,org.apache.fop.layoutmgr.inline.HyphContext)>(newPos, hc);
        return;
    }

    public boolean applyChanges(java.util.List)
    {
        org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager this;
        java.util.List oldList, $r4;
        java.util.ListIterator oldListIterator;
        org.apache.fop.layoutmgr.KnuthElement oldElement;
        org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager prevLM, currLM;
        int fromIndex, $i0, $i1;
        boolean bSomethingChanged, $z0;
        java.lang.Object $r0;
        org.apache.fop.layoutmgr.Position $r1, $r6;
        org.apache.fop.layoutmgr.NonLeafPosition $r2, $r5;
        org.apache.fop.layoutmgr.LayoutManager $r3;

        this := @this: org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager;
        oldList := @parameter0: java.util.List;
        oldListIterator = interfaceinvoke oldList.<java.util.List: java.util.ListIterator listIterator()>();

     label0:
        $z0 = interfaceinvoke oldListIterator.<java.util.ListIterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        $r0 = interfaceinvoke oldListIterator.<java.util.ListIterator: java.lang.Object next()>();
        oldElement = (org.apache.fop.layoutmgr.KnuthElement) $r0;
        $r1 = virtualinvoke oldElement.<org.apache.fop.layoutmgr.KnuthElement: org.apache.fop.layoutmgr.Position getPosition()>();
        $r2 = (org.apache.fop.layoutmgr.NonLeafPosition) $r1;
        $r1 = virtualinvoke $r2.<org.apache.fop.layoutmgr.NonLeafPosition: org.apache.fop.layoutmgr.Position getPosition()>();
        virtualinvoke oldElement.<org.apache.fop.layoutmgr.KnuthElement: void setPosition(org.apache.fop.layoutmgr.Position)>($r1);
        goto label0;

     label1:
        oldListIterator = interfaceinvoke oldList.<java.util.List: java.util.ListIterator listIterator()>();
        prevLM = null;
        fromIndex = 0;
        bSomethingChanged = 0;

     label2:
        $z0 = interfaceinvoke oldListIterator.<java.util.ListIterator: boolean hasNext()>();
        if $z0 == 0 goto label21;

        $r0 = interfaceinvoke oldListIterator.<java.util.ListIterator: java.lang.Object next()>();
        oldElement = (org.apache.fop.layoutmgr.KnuthElement) $r0;
        $r3 = virtualinvoke oldElement.<org.apache.fop.layoutmgr.KnuthElement: org.apache.fop.layoutmgr.LayoutManager getLayoutManager()>();
        currLM = (org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager) $r3;
        if prevLM != null goto label3;

        prevLM = currLM;

     label3:
        if currLM != prevLM goto label4;

        $z0 = interfaceinvoke oldListIterator.<java.util.ListIterator: boolean hasNext()>();
        if $z0 != 0 goto label2;

     label4:
        if prevLM == this goto label5;

        if currLM != this goto label6;

     label5:
        prevLM = currLM;
        goto label2;

     label6:
        $z0 = interfaceinvoke oldListIterator.<java.util.ListIterator: boolean hasNext()>();
        if $z0 == 0 goto label10;

        $i0 = interfaceinvoke oldListIterator.<java.util.ListIterator: int previousIndex()>();
        $r4 = interfaceinvoke oldList.<java.util.List: java.util.List subList(int,int)>(fromIndex, $i0);
        $z0 = interfaceinvoke prevLM.<org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager: boolean applyChanges(java.util.List)>($r4);
        if $z0 != 0 goto label7;

        if bSomethingChanged == 0 goto label8;

     label7:
        $z0 = 1;
        goto label9;

     label8:
        $z0 = 0;

     label9:
        bSomethingChanged = $z0;
        prevLM = currLM;
        fromIndex = interfaceinvoke oldListIterator.<java.util.ListIterator: int previousIndex()>();
        goto label2;

     label10:
        if currLM != prevLM goto label14;

        $i0 = interfaceinvoke oldList.<java.util.List: int size()>();
        $r4 = interfaceinvoke oldList.<java.util.List: java.util.List subList(int,int)>(fromIndex, $i0);
        $z0 = interfaceinvoke prevLM.<org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager: boolean applyChanges(java.util.List)>($r4);
        if $z0 != 0 goto label11;

        if bSomethingChanged == 0 goto label12;

     label11:
        $z0 = 1;
        goto label13;

     label12:
        $z0 = 0;

     label13:
        bSomethingChanged = $z0;
        goto label2;

     label14:
        $i0 = interfaceinvoke oldListIterator.<java.util.ListIterator: int previousIndex()>();
        $r4 = interfaceinvoke oldList.<java.util.List: java.util.List subList(int,int)>(fromIndex, $i0);
        $z0 = interfaceinvoke prevLM.<org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager: boolean applyChanges(java.util.List)>($r4);
        if $z0 != 0 goto label15;

        if bSomethingChanged == 0 goto label16;

     label15:
        $z0 = 1;
        goto label17;

     label16:
        $z0 = 0;

     label17:
        bSomethingChanged = $z0;
        if currLM == null goto label2;

        $i1 = interfaceinvoke oldListIterator.<java.util.ListIterator: int previousIndex()>();
        $i0 = interfaceinvoke oldList.<java.util.List: int size()>();
        $r4 = interfaceinvoke oldList.<java.util.List: java.util.List subList(int,int)>($i1, $i0);
        $z0 = interfaceinvoke currLM.<org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager: boolean applyChanges(java.util.List)>($r4);
        if $z0 != 0 goto label18;

        if bSomethingChanged == 0 goto label19;

     label18:
        $z0 = 1;
        goto label20;

     label19:
        $z0 = 0;

     label20:
        bSomethingChanged = $z0;
        goto label2;

     label21:
        oldListIterator = interfaceinvoke oldList.<java.util.List: java.util.ListIterator listIterator()>();

     label22:
        $z0 = interfaceinvoke oldListIterator.<java.util.ListIterator: boolean hasNext()>();
        if $z0 == 0 goto label23;

        $r0 = interfaceinvoke oldListIterator.<java.util.ListIterator: java.lang.Object next()>();
        oldElement = (org.apache.fop.layoutmgr.KnuthElement) $r0;
        $r5 = new org.apache.fop.layoutmgr.NonLeafPosition;
        $r6 = virtualinvoke oldElement.<org.apache.fop.layoutmgr.KnuthElement: org.apache.fop.layoutmgr.Position getPosition()>();
        specialinvoke $r5.<org.apache.fop.layoutmgr.NonLeafPosition: void <init>(org.apache.fop.layoutmgr.LayoutManager,org.apache.fop.layoutmgr.Position)>(this, $r6);
        $r1 = virtualinvoke this.<org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager: org.apache.fop.layoutmgr.Position notifyPos(org.apache.fop.layoutmgr.Position)>($r5);
        virtualinvoke oldElement.<org.apache.fop.layoutmgr.KnuthElement: void setPosition(org.apache.fop.layoutmgr.Position)>($r1);
        goto label22;

     label23:
        return bSomethingChanged;
    }

    public java.util.LinkedList getChangedKnuthElements(java.util.List, int)
    {
        org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager this;
        java.util.List oldList, $r5;
        int alignment, fromIndex, $i0, $i1;
        java.util.ListIterator oldListIterator, listIter;
        org.apache.fop.layoutmgr.KnuthElement oldElement, returnedElement;
        java.util.LinkedList returnedList, returnList, $r3, $r6;
        org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager prevLM, currLM;
        boolean $z0;
        java.lang.Object $r0;
        org.apache.fop.layoutmgr.Position $r1, $r8;
        org.apache.fop.layoutmgr.NonLeafPosition $r2, $r7;
        org.apache.fop.layoutmgr.LayoutManager $r4;

        this := @this: org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager;
        oldList := @parameter0: java.util.List;
        alignment := @parameter1: int;
        oldListIterator = interfaceinvoke oldList.<java.util.List: java.util.ListIterator listIterator()>();

     label0:
        $z0 = interfaceinvoke oldListIterator.<java.util.ListIterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        $r0 = interfaceinvoke oldListIterator.<java.util.ListIterator: java.lang.Object next()>();
        oldElement = (org.apache.fop.layoutmgr.KnuthElement) $r0;
        $r1 = virtualinvoke oldElement.<org.apache.fop.layoutmgr.KnuthElement: org.apache.fop.layoutmgr.Position getPosition()>();
        $r2 = (org.apache.fop.layoutmgr.NonLeafPosition) $r1;
        $r1 = virtualinvoke $r2.<org.apache.fop.layoutmgr.NonLeafPosition: org.apache.fop.layoutmgr.Position getPosition()>();
        virtualinvoke oldElement.<org.apache.fop.layoutmgr.KnuthElement: void setPosition(org.apache.fop.layoutmgr.Position)>($r1);
        goto label0;

     label1:
        oldListIterator = interfaceinvoke oldList.<java.util.List: java.util.ListIterator listIterator()>();
        $r3 = new java.util.LinkedList;
        specialinvoke $r3.<java.util.LinkedList: void <init>()>();
        returnedList = $r3;
        $r3 = new java.util.LinkedList;
        specialinvoke $r3.<java.util.LinkedList: void <init>()>();
        returnList = $r3;
        prevLM = null;
        fromIndex = 0;

     label2:
        $z0 = interfaceinvoke oldListIterator.<java.util.ListIterator: boolean hasNext()>();
        if $z0 == 0 goto label7;

        $r0 = interfaceinvoke oldListIterator.<java.util.ListIterator: java.lang.Object next()>();
        oldElement = (org.apache.fop.layoutmgr.KnuthElement) $r0;
        $r4 = virtualinvoke oldElement.<org.apache.fop.layoutmgr.KnuthElement: org.apache.fop.layoutmgr.LayoutManager getLayoutManager()>();
        currLM = (org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager) $r4;
        if prevLM != null goto label3;

        prevLM = currLM;

     label3:
        if currLM != prevLM goto label4;

        $z0 = interfaceinvoke oldListIterator.<java.util.ListIterator: boolean hasNext()>();
        if $z0 != 0 goto label2;

     label4:
        $z0 = interfaceinvoke oldListIterator.<java.util.ListIterator: boolean hasNext()>();
        if $z0 == 0 goto label5;

        $i0 = interfaceinvoke oldListIterator.<java.util.ListIterator: int previousIndex()>();
        $r5 = interfaceinvoke oldList.<java.util.List: java.util.List subList(int,int)>(fromIndex, $i0);
        $r6 = interfaceinvoke prevLM.<org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager: java.util.LinkedList getChangedKnuthElements(java.util.List,int)>($r5, alignment);
        virtualinvoke returnedList.<java.util.LinkedList: boolean addAll(java.util.Collection)>($r6);
        prevLM = currLM;
        fromIndex = interfaceinvoke oldListIterator.<java.util.ListIterator: int previousIndex()>();
        goto label2;

     label5:
        if currLM != prevLM goto label6;

        $i0 = interfaceinvoke oldList.<java.util.List: int size()>();
        $r5 = interfaceinvoke oldList.<java.util.List: java.util.List subList(int,int)>(fromIndex, $i0);
        $r6 = interfaceinvoke prevLM.<org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager: java.util.LinkedList getChangedKnuthElements(java.util.List,int)>($r5, alignment);
        virtualinvoke returnedList.<java.util.LinkedList: boolean addAll(java.util.Collection)>($r6);
        goto label2;

     label6:
        $i0 = interfaceinvoke oldListIterator.<java.util.ListIterator: int previousIndex()>();
        $r5 = interfaceinvoke oldList.<java.util.List: java.util.List subList(int,int)>(fromIndex, $i0);
        $r6 = interfaceinvoke prevLM.<org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager: java.util.LinkedList getChangedKnuthElements(java.util.List,int)>($r5, alignment);
        virtualinvoke returnedList.<java.util.LinkedList: boolean addAll(java.util.Collection)>($r6);
        if currLM == null goto label2;

        $i1 = interfaceinvoke oldListIterator.<java.util.ListIterator: int previousIndex()>();
        $i0 = interfaceinvoke oldList.<java.util.List: int size()>();
        $r5 = interfaceinvoke oldList.<java.util.List: java.util.List subList(int,int)>($i1, $i0);
        $r6 = interfaceinvoke currLM.<org.apache.fop.layoutmgr.inline.InlineLevelLayoutManager: java.util.LinkedList getChangedKnuthElements(java.util.List,int)>($r5, alignment);
        virtualinvoke returnedList.<java.util.LinkedList: boolean addAll(java.util.Collection)>($r6);
        goto label2;

     label7:
        listIter = virtualinvoke returnedList.<java.util.LinkedList: java.util.ListIterator listIterator()>();

     label8:
        $z0 = interfaceinvoke listIter.<java.util.ListIterator: boolean hasNext()>();
        if $z0 == 0 goto label9;

        $r0 = interfaceinvoke listIter.<java.util.ListIterator: java.lang.Object next()>();
        returnedElement = (org.apache.fop.layoutmgr.KnuthElement) $r0;
        $r7 = new org.apache.fop.layoutmgr.NonLeafPosition;
        $r8 = virtualinvoke returnedElement.<org.apache.fop.layoutmgr.KnuthElement: org.apache.fop.layoutmgr.Position getPosition()>();
        specialinvoke $r7.<org.apache.fop.layoutmgr.NonLeafPosition: void <init>(org.apache.fop.layoutmgr.LayoutManager,org.apache.fop.layoutmgr.Position)>(this, $r8);
        $r1 = virtualinvoke this.<org.apache.fop.layoutmgr.inline.InlineStackingLayoutManager: org.apache.fop.layoutmgr.Position notifyPos(org.apache.fop.layoutmgr.Position)>($r7);
        virtualinvoke returnedElement.<org.apache.fop.layoutmgr.KnuthElement: void setPosition(org.apache.fop.layoutmgr.Position)>($r1);
        virtualinvoke returnList.<java.util.LinkedList: boolean add(java.lang.Object)>(returnedElement);
        goto label8;

     label9:
        return returnList;
    }
}
