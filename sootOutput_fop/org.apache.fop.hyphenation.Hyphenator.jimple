public class org.apache.fop.hyphenation.Hyphenator extends java.lang.Object
{
    protected static org.apache.commons.logging.Log log;
    private static org.apache.fop.hyphenation.HyphenationTreeCache hTreeCache;
    private org.apache.fop.hyphenation.HyphenationTree hyphenTree;
    private int remainCharCount;
    private int pushCharCount;
    private static boolean statisticsDump;
    static java.lang.Class class$org$apache$fop$hyphenation$Hyphenator;
    static java.lang.Class class$java$lang$Thread;

    public void <init>(java.lang.String, java.lang.String, int, int)
    {
        org.apache.fop.hyphenation.Hyphenator this;
        java.lang.String lang, country;
        int leftMin, rightMin;
        org.apache.fop.hyphenation.HyphenationTree $r0;

        this := @this: org.apache.fop.hyphenation.Hyphenator;
        lang := @parameter0: java.lang.String;
        country := @parameter1: java.lang.String;
        leftMin := @parameter2: int;
        rightMin := @parameter3: int;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.HyphenationTree hyphenTree> = null;
        this.<org.apache.fop.hyphenation.Hyphenator: int remainCharCount> = 2;
        this.<org.apache.fop.hyphenation.Hyphenator: int pushCharCount> = 2;
        $r0 = staticinvoke <org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.HyphenationTree getHyphenationTree(java.lang.String,java.lang.String)>(lang, country);
        this.<org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.HyphenationTree hyphenTree> = $r0;
        this.<org.apache.fop.hyphenation.Hyphenator: int remainCharCount> = leftMin;
        this.<org.apache.fop.hyphenation.Hyphenator: int pushCharCount> = rightMin;
        return;
    }

    public static synchronized org.apache.fop.hyphenation.HyphenationTreeCache getHyphenationTreeCache()
    {
        org.apache.fop.hyphenation.HyphenationTreeCache $r0;

        $r0 = <org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.HyphenationTreeCache hTreeCache>;
        if $r0 != null goto label0;

        $r0 = new org.apache.fop.hyphenation.HyphenationTreeCache;
        specialinvoke $r0.<org.apache.fop.hyphenation.HyphenationTreeCache: void <init>()>();
        <org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.HyphenationTreeCache hTreeCache> = $r0;

     label0:
        $r0 = <org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.HyphenationTreeCache hTreeCache>;
        return $r0;
    }

    public static org.apache.fop.hyphenation.HyphenationTree getHyphenationTree(java.lang.String, java.lang.String)
    {
        java.lang.String lang, country;
        org.apache.fop.hyphenation.HyphenationTree $r0;

        lang := @parameter0: java.lang.String;
        country := @parameter1: java.lang.String;
        $r0 = staticinvoke <org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.HyphenationTree getHyphenationTree(java.lang.String,java.lang.String,org.apache.fop.hyphenation.HyphenationTreeResolver)>(lang, country, null);
        return $r0;
    }

    public static org.apache.fop.hyphenation.HyphenationTree getHyphenationTree(java.lang.String, java.lang.String, org.apache.fop.hyphenation.HyphenationTreeResolver)
    {
        java.lang.String lang, country, key, $r3;
        org.apache.fop.hyphenation.HyphenationTreeResolver resolver;
        org.apache.fop.hyphenation.HyphenationTreeCache cache, $r0;
        org.apache.fop.hyphenation.HyphenationTree hTree;
        boolean $z0;
        org.apache.commons.logging.Log $r1;
        java.lang.StringBuffer $r2;

        lang := @parameter0: java.lang.String;
        country := @parameter1: java.lang.String;
        resolver := @parameter2: org.apache.fop.hyphenation.HyphenationTreeResolver;
        key = staticinvoke <org.apache.fop.hyphenation.HyphenationTreeCache: java.lang.String constructKey(java.lang.String,java.lang.String)>(lang, country);
        cache = staticinvoke <org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.HyphenationTreeCache getHyphenationTreeCache()>();
        $z0 = virtualinvoke cache.<org.apache.fop.hyphenation.HyphenationTreeCache: boolean isMissing(java.lang.String)>(key);
        if $z0 == 0 goto label0;

        return null;

     label0:
        $r0 = staticinvoke <org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.HyphenationTreeCache getHyphenationTreeCache()>();
        hTree = virtualinvoke $r0.<org.apache.fop.hyphenation.HyphenationTreeCache: org.apache.fop.hyphenation.HyphenationTree getHyphenationTree(java.lang.String,java.lang.String)>(lang, country);
        if hTree == null goto label1;

        return hTree;

     label1:
        if resolver == null goto label2;

        hTree = staticinvoke <org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.HyphenationTree getUserHyphenationTree(java.lang.String,org.apache.fop.hyphenation.HyphenationTreeResolver)>(key, resolver);

     label2:
        if hTree != null goto label3;

        hTree = staticinvoke <org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.HyphenationTree getFopHyphenationTree(java.lang.String)>(key);

     label3:
        if hTree == null goto label4;

        virtualinvoke cache.<org.apache.fop.hyphenation.HyphenationTreeCache: void cache(java.lang.String,org.apache.fop.hyphenation.HyphenationTree)>(key, hTree);
        goto label5;

     label4:
        $r1 = <org.apache.fop.hyphenation.Hyphenator: org.apache.commons.logging.Log log>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Couldn\'t find hyphenation pattern ");
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(key);
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r1.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r3);
        virtualinvoke cache.<org.apache.fop.hyphenation.HyphenationTreeCache: void noteMissing(java.lang.String)>(key);

     label5:
        return hTree;
    }

    private static java.io.InputStream getResourceStream(java.lang.String)
    {
        java.lang.String key, $r6;
        java.io.InputStream is;
        java.lang.reflect.Method getCCL;
        java.lang.ClassLoader contextClassLoader;
        java.lang.Exception l2, $r7;
        java.lang.Class $r0;
        java.lang.Class[] $r1;
        java.lang.Thread $r2;
        java.lang.Object[] $r3;
        java.lang.Object $r4;
        java.lang.StringBuffer $r5;

        key := @parameter0: java.lang.String;
        is = null;

     label0:
        $r0 = <org.apache.fop.hyphenation.Hyphenator: java.lang.Class class$java$lang$Thread>;
        if $r0 != null goto label1;

        $r0 = staticinvoke <org.apache.fop.hyphenation.Hyphenator: java.lang.Class class$(java.lang.String)>("java.lang.Thread");
        <org.apache.fop.hyphenation.Hyphenator: java.lang.Class class$java$lang$Thread> = $r0;
        goto label2;

     label1:
        $r0 = <org.apache.fop.hyphenation.Hyphenator: java.lang.Class class$java$lang$Thread>;

     label2:
        $r1 = newarray (java.lang.Class)[0];
        getCCL = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getContextClassLoader", $r1);
        if getCCL == null goto label3;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $r3 = newarray (java.lang.Object)[0];
        $r4 = virtualinvoke getCCL.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r3);
        contextClassLoader = (java.lang.ClassLoader) $r4;
        $r5 = new java.lang.StringBuffer;
        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("hyph/");
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(key);
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".hyp");
        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();
        is = virtualinvoke contextClassLoader.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r6);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;
        l2 = $r7;

     label5:
        if is != null goto label8;

        $r0 = <org.apache.fop.hyphenation.Hyphenator: java.lang.Class class$org$apache$fop$hyphenation$Hyphenator>;
        if $r0 != null goto label6;

        $r0 = staticinvoke <org.apache.fop.hyphenation.Hyphenator: java.lang.Class class$(java.lang.String)>("org.apache.fop.hyphenation.Hyphenator");
        <org.apache.fop.hyphenation.Hyphenator: java.lang.Class class$org$apache$fop$hyphenation$Hyphenator> = $r0;
        goto label7;

     label6:
        $r0 = <org.apache.fop.hyphenation.Hyphenator: java.lang.Class class$org$apache$fop$hyphenation$Hyphenator>;

     label7:
        $r5 = new java.lang.StringBuffer;
        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/hyph/");
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(key);
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".hyp");
        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();
        is = virtualinvoke $r0.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r6);

     label8:
        return is;

        catch java.lang.Exception from label0 to label3 with label4;
    }

    private static org.apache.fop.hyphenation.HyphenationTree readHyphenationTree(java.io.InputStream)
    {
        java.io.InputStream in;
        org.apache.fop.hyphenation.HyphenationTree hTree;
        java.io.ObjectInputStream ois, $r0;
        java.io.IOException ioe, $r2;
        java.lang.ClassNotFoundException cnfe, $r4;
        java.lang.Object $r1;
        org.apache.commons.logging.Log $r3;

        in := @parameter0: java.io.InputStream;
        hTree = null;

     label0:
        $r0 = new java.io.ObjectInputStream;
        specialinvoke $r0.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>(in);
        ois = $r0;
        $r1 = virtualinvoke ois.<java.io.ObjectInputStream: java.lang.Object readObject()>();
        hTree = (org.apache.fop.hyphenation.HyphenationTree) $r1;

     label1:
        goto label4;

     label2:
        $r2 := @caughtexception;
        ioe = $r2;
        $r3 = <org.apache.fop.hyphenation.Hyphenator: org.apache.commons.logging.Log log>;
        interfaceinvoke $r3.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("I/O error while loading precompiled hyphenation pattern file", ioe);
        goto label4;

     label3:
        $r4 := @caughtexception;
        cnfe = $r4;
        $r3 = <org.apache.fop.hyphenation.Hyphenator: org.apache.commons.logging.Log log>;
        interfaceinvoke $r3.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("Error while reading hyphenation object from file", cnfe);

     label4:
        return hTree;

        catch java.io.IOException from label0 to label1 with label2;
        catch java.lang.ClassNotFoundException from label0 to label1 with label3;
    }

    public static org.apache.fop.hyphenation.HyphenationTree getFopHyphenationTree(java.lang.String)
    {
        java.lang.String key, lang, $r2;
        null_type hTree, ois, is, l5, l4;
        java.lang.Throwable l6, $r3;
        java.io.InputStream is;
        int $i0;
        org.apache.commons.logging.Log $r0;
        boolean $z0;
        java.lang.StringBuffer $r1;
        org.apache.fop.hyphenation.HyphenationTree hTree;

        key := @parameter0: java.lang.String;
        hTree = null;
        ois = null;
        is = null;

     label0:
        is = staticinvoke <org.apache.fop.hyphenation.Hyphenator: java.io.InputStream getResourceStream(java.lang.String)>(key);
        if is != null goto label8;

        $i0 = virtualinvoke key.<java.lang.String: int length()>();
        if $i0 != 5 goto label5;

        lang = virtualinvoke key.<java.lang.String: java.lang.String substring(int,int)>(0, 2);
        is = staticinvoke <org.apache.fop.hyphenation.Hyphenator: java.io.InputStream getResourceStream(java.lang.String)>(lang);
        if is == null goto label1;

        $r0 = <org.apache.fop.hyphenation.Hyphenator: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label4;

        $r0 = <org.apache.fop.hyphenation.Hyphenator: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Couldn\'t find hyphenation pattern \'");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(key);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'. Using general language pattern \'");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(lang);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' instead.");
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r2);
        goto label4;

     label1:
        $r0 = <org.apache.fop.hyphenation.Hyphenator: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label2;

        $r0 = <org.apache.fop.hyphenation.Hyphenator: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Couldn\'t find precompiled hyphenation pattern ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(lang);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in resources.");
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r2);

     label2:
        l5 = null;

     label3:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(ois);
        return l5;

     label4:
        goto label8;

     label5:
        $r0 = <org.apache.fop.hyphenation.Hyphenator: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label6;

        $r0 = <org.apache.fop.hyphenation.Hyphenator: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Couldn\'t find precompiled hyphenation pattern ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(key);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in resources");
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r2);

     label6:
        l4 = null;

     label7:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(ois);
        return l4;

     label8:
        hTree = staticinvoke <org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.HyphenationTree readHyphenationTree(java.io.InputStream)>(is);

     label9:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(ois);
        goto label13;

     label10:
        $r3 := @caughtexception;

     label11:
        l6 = $r3;

     label12:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(ois);
        throw l6;

     label13:
        return hTree;

        catch java.lang.Throwable from label0 to label3 with label10;
        catch java.lang.Throwable from label4 to label7 with label10;
        catch java.lang.Throwable from label8 to label9 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public static org.apache.fop.hyphenation.HyphenationTree getUserHyphenationTree(java.lang.String, java.lang.String)
    {
        java.lang.String key, hyphenDir;
        java.io.File $r0, baseDir;
        org.apache.fop.hyphenation.Hyphenator$1 resolver, $r1;
        org.apache.fop.hyphenation.HyphenationTree $r2;

        key := @parameter0: java.lang.String;
        hyphenDir := @parameter1: java.lang.String;
        $r0 = new java.io.File;
        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(hyphenDir);
        baseDir = $r0;
        $r1 = new org.apache.fop.hyphenation.Hyphenator$1;
        specialinvoke $r1.<org.apache.fop.hyphenation.Hyphenator$1: void <init>(java.io.File)>(baseDir);
        resolver = $r1;
        $r2 = staticinvoke <org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.HyphenationTree getUserHyphenationTree(java.lang.String,org.apache.fop.hyphenation.HyphenationTreeResolver)>(key, resolver);
        return $r2;
    }

    public static org.apache.fop.hyphenation.HyphenationTree getUserHyphenationTree(java.lang.String, org.apache.fop.hyphenation.HyphenationTreeResolver)
    {
        java.lang.String key, name, $r2, $r4, $r13;
        org.apache.fop.hyphenation.HyphenationTreeResolver resolver;
        null_type hTree;
        javax.xml.transform.Source source;
        java.io.InputStream in;
        java.lang.Throwable l6, l7, $r8, $r15;
        java.io.IOException ioe, $r10, $r18;
        org.xml.sax.InputSource src, $r14;
        org.apache.fop.hyphenation.HyphenationException ex, $r17;
        java.lang.StringBuffer $r0, $r6, $r12;
        boolean $z0;
        javax.xml.transform.stream.StreamSource $r1;
        java.net.URL $r3;
        java.lang.UnsupportedOperationException $r5;
        java.io.BufferedInputStream $r7, in;
        org.apache.fop.hyphenation.HyphenationTree hTree, $r9;
        org.apache.commons.logging.Log $r11;
        java.io.PrintStream $r16;

        key := @parameter0: java.lang.String;
        resolver := @parameter1: org.apache.fop.hyphenation.HyphenationTreeResolver;
        hTree = null;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(key);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".hyp");
        name = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        source = interfaceinvoke resolver.<org.apache.fop.hyphenation.HyphenationTreeResolver: javax.xml.transform.Source resolve(java.lang.String)>(name);
        if source == null goto label11;

     label0:
        in = null;
        $z0 = source instanceof javax.xml.transform.stream.StreamSource;
        if $z0 == 0 goto label1;

        $r1 = (javax.xml.transform.stream.StreamSource) source;
        in = virtualinvoke $r1.<javax.xml.transform.stream.StreamSource: java.io.InputStream getInputStream()>();

     label1:
        if in != null goto label2;

        $r2 = interfaceinvoke source.<javax.xml.transform.Source: java.lang.String getSystemId()>();
        if $r2 == null goto label2;

        $r3 = new java.net.URL;
        $r4 = interfaceinvoke source.<javax.xml.transform.Source: java.lang.String getSystemId()>();
        specialinvoke $r3.<java.net.URL: void <init>(java.lang.String)>($r4);
        in = virtualinvoke $r3.<java.net.URL: java.io.InputStream openStream()>();
        goto label3;

     label2:
        $r5 = new java.lang.UnsupportedOperationException;
        $r6 = new java.lang.StringBuffer;
        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();
        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot load hyphenation pattern file with the supplied Source object: ");
        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(source);
        $r4 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r4);
        throw $r5;

     label3:
        $r7 = new java.io.BufferedInputStream;
        specialinvoke $r7.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(in);
        in = $r7;

     label4:
        hTree = staticinvoke <org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.HyphenationTree readHyphenationTree(java.io.InputStream)>(in);

     label5:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(in);
        goto label9;

     label6:
        $r8 := @caughtexception;

     label7:
        l6 = $r8;

     label8:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(in);
        throw l6;

     label9:
        return hTree;

     label10:
        $r10 := @caughtexception;
        ioe = $r10;
        $r11 = <org.apache.fop.hyphenation.Hyphenator: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r11.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label11;

        $r11 = <org.apache.fop.hyphenation.Hyphenator: org.apache.commons.logging.Log log>;
        $r12 = new java.lang.StringBuffer;
        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();
        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("I/O problem while trying to load ");
        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(name);
        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r13, ioe);

     label11:
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(key);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".xml");
        name = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        source = interfaceinvoke resolver.<org.apache.fop.hyphenation.HyphenationTreeResolver: javax.xml.transform.Source resolve(java.lang.String)>(name);
        if source == null goto label26;

        $r9 = new org.apache.fop.hyphenation.HyphenationTree;
        specialinvoke $r9.<org.apache.fop.hyphenation.HyphenationTree: void <init>()>();
        hTree = $r9;

     label12:
        in = null;
        $z0 = source instanceof javax.xml.transform.stream.StreamSource;
        if $z0 == 0 goto label13;

        $r1 = (javax.xml.transform.stream.StreamSource) source;
        in = virtualinvoke $r1.<javax.xml.transform.stream.StreamSource: java.io.InputStream getInputStream()>();

     label13:
        if in != null goto label15;

        $r2 = interfaceinvoke source.<javax.xml.transform.Source: java.lang.String getSystemId()>();
        if $r2 == null goto label14;

        $r3 = new java.net.URL;
        $r4 = interfaceinvoke source.<javax.xml.transform.Source: java.lang.String getSystemId()>();
        specialinvoke $r3.<java.net.URL: void <init>(java.lang.String)>($r4);
        in = virtualinvoke $r3.<java.net.URL: java.io.InputStream openStream()>();
        goto label15;

     label14:
        $r5 = new java.lang.UnsupportedOperationException;
        $r6 = new java.lang.StringBuffer;
        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();
        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot load hyphenation pattern file with the supplied Source object: ");
        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(source);
        $r4 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r4);
        throw $r5;

     label15:
        $z0 = in instanceof java.io.BufferedInputStream;
        if $z0 != 0 goto label16;

        $r7 = new java.io.BufferedInputStream;
        specialinvoke $r7.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(in);
        in = $r7;

     label16:
        $r14 = new org.xml.sax.InputSource;
        specialinvoke $r14.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>(in);
        src = $r14;
        $r13 = interfaceinvoke source.<javax.xml.transform.Source: java.lang.String getSystemId()>();
        virtualinvoke src.<org.xml.sax.InputSource: void setSystemId(java.lang.String)>($r13);
        virtualinvoke hTree.<org.apache.fop.hyphenation.HyphenationTree: void loadPatterns(org.xml.sax.InputSource)>(src);

     label17:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(in);
        goto label21;

     label18:
        $r15 := @caughtexception;

     label19:
        l7 = $r15;

     label20:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(in);
        throw l7;

     label21:
        $z0 = <org.apache.fop.hyphenation.Hyphenator: boolean statisticsDump>;
        if $z0 == 0 goto label22;

        $r16 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>("Stats: ");
        virtualinvoke hTree.<org.apache.fop.hyphenation.HyphenationTree: void printStats()>();

     label22:
        return hTree;

     label23:
        $r17 := @caughtexception;
        ex = $r17;
        $r11 = <org.apache.fop.hyphenation.Hyphenator: org.apache.commons.logging.Log log>;
        $r12 = new java.lang.StringBuffer;
        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();
        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t load user patterns from XML file ");
        $r4 = interfaceinvoke source.<javax.xml.transform.Source: java.lang.String getSystemId()>();
        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);
        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");
        $r4 = virtualinvoke ex.<org.apache.fop.hyphenation.HyphenationException: java.lang.String getMessage()>();
        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);
        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r11.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r13);
        return null;

     label24:
        $r18 := @caughtexception;
        ioe = $r18;
        $r11 = <org.apache.fop.hyphenation.Hyphenator: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r11.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label25;

        $r11 = <org.apache.fop.hyphenation.Hyphenator: org.apache.commons.logging.Log log>;
        $r12 = new java.lang.StringBuffer;
        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();
        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("I/O problem while trying to load ");
        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(name);
        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r13, ioe);

     label25:
        return null;

     label26:
        $r11 = <org.apache.fop.hyphenation.Hyphenator: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r11.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label27;

        $r11 = <org.apache.fop.hyphenation.Hyphenator: org.apache.commons.logging.Log log>;
        $r12 = new java.lang.StringBuffer;
        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();
        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not load user hyphenation file for \'");
        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(key);
        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'.");
        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r13);

     label27:
        return null;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch java.io.IOException from label0 to label9 with label10;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch org.apache.fop.hyphenation.HyphenationException from label12 to label22 with label23;
        catch java.io.IOException from label12 to label22 with label24;
    }

    public static org.apache.fop.hyphenation.Hyphenation hyphenate(java.lang.String, java.lang.String, org.apache.fop.hyphenation.HyphenationTreeResolver, java.lang.String, int, int)
    {
        java.lang.String lang, country, word;
        org.apache.fop.hyphenation.HyphenationTreeResolver resolver;
        int leftMin, rightMin;
        org.apache.fop.hyphenation.HyphenationTree hTree;
        org.apache.fop.hyphenation.Hyphenation $r0;

        lang := @parameter0: java.lang.String;
        country := @parameter1: java.lang.String;
        resolver := @parameter2: org.apache.fop.hyphenation.HyphenationTreeResolver;
        word := @parameter3: java.lang.String;
        leftMin := @parameter4: int;
        rightMin := @parameter5: int;
        hTree = staticinvoke <org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.HyphenationTree getHyphenationTree(java.lang.String,java.lang.String,org.apache.fop.hyphenation.HyphenationTreeResolver)>(lang, country, resolver);
        if hTree != null goto label0;

        return null;

     label0:
        $r0 = virtualinvoke hTree.<org.apache.fop.hyphenation.HyphenationTree: org.apache.fop.hyphenation.Hyphenation hyphenate(java.lang.String,int,int)>(word, leftMin, rightMin);
        return $r0;
    }

    public static org.apache.fop.hyphenation.Hyphenation hyphenate(java.lang.String, java.lang.String, java.lang.String, int, int)
    {
        java.lang.String lang, country, word;
        int leftMin, rightMin;
        org.apache.fop.hyphenation.Hyphenation $r0;

        lang := @parameter0: java.lang.String;
        country := @parameter1: java.lang.String;
        word := @parameter2: java.lang.String;
        leftMin := @parameter3: int;
        rightMin := @parameter4: int;
        $r0 = staticinvoke <org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.Hyphenation hyphenate(java.lang.String,java.lang.String,org.apache.fop.hyphenation.HyphenationTreeResolver,java.lang.String,int,int)>(lang, country, null, word, leftMin, rightMin);
        return $r0;
    }

    public static org.apache.fop.hyphenation.Hyphenation hyphenate(java.lang.String, java.lang.String, org.apache.fop.hyphenation.HyphenationTreeResolver, char[], int, int, int, int)
    {
        java.lang.String lang, country;
        org.apache.fop.hyphenation.HyphenationTreeResolver resolver;
        char[] word;
        int offset, len, leftMin, rightMin;
        org.apache.fop.hyphenation.HyphenationTree hTree;
        org.apache.fop.hyphenation.Hyphenation $r0;

        lang := @parameter0: java.lang.String;
        country := @parameter1: java.lang.String;
        resolver := @parameter2: org.apache.fop.hyphenation.HyphenationTreeResolver;
        word := @parameter3: char[];
        offset := @parameter4: int;
        len := @parameter5: int;
        leftMin := @parameter6: int;
        rightMin := @parameter7: int;
        hTree = staticinvoke <org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.HyphenationTree getHyphenationTree(java.lang.String,java.lang.String,org.apache.fop.hyphenation.HyphenationTreeResolver)>(lang, country, resolver);
        if hTree != null goto label0;

        return null;

     label0:
        $r0 = virtualinvoke hTree.<org.apache.fop.hyphenation.HyphenationTree: org.apache.fop.hyphenation.Hyphenation hyphenate(char[],int,int,int,int)>(word, offset, len, leftMin, rightMin);
        return $r0;
    }

    public static org.apache.fop.hyphenation.Hyphenation hyphenate(java.lang.String, java.lang.String, char[], int, int, int, int)
    {
        java.lang.String lang, country;
        char[] word;
        int offset, len, leftMin, rightMin;
        org.apache.fop.hyphenation.Hyphenation $r0;

        lang := @parameter0: java.lang.String;
        country := @parameter1: java.lang.String;
        word := @parameter2: char[];
        offset := @parameter3: int;
        len := @parameter4: int;
        leftMin := @parameter5: int;
        rightMin := @parameter6: int;
        $r0 = staticinvoke <org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.Hyphenation hyphenate(java.lang.String,java.lang.String,org.apache.fop.hyphenation.HyphenationTreeResolver,char[],int,int,int,int)>(lang, country, null, word, offset, len, leftMin, rightMin);
        return $r0;
    }

    public void setMinRemainCharCount(int)
    {
        org.apache.fop.hyphenation.Hyphenator this;
        int min;

        this := @this: org.apache.fop.hyphenation.Hyphenator;
        min := @parameter0: int;
        this.<org.apache.fop.hyphenation.Hyphenator: int remainCharCount> = min;
        return;
    }

    public void setMinPushCharCount(int)
    {
        org.apache.fop.hyphenation.Hyphenator this;
        int min;

        this := @this: org.apache.fop.hyphenation.Hyphenator;
        min := @parameter0: int;
        this.<org.apache.fop.hyphenation.Hyphenator: int pushCharCount> = min;
        return;
    }

    public void setLanguage(java.lang.String, java.lang.String)
    {
        org.apache.fop.hyphenation.Hyphenator this;
        java.lang.String lang, country;
        org.apache.fop.hyphenation.HyphenationTree $r0;

        this := @this: org.apache.fop.hyphenation.Hyphenator;
        lang := @parameter0: java.lang.String;
        country := @parameter1: java.lang.String;
        $r0 = staticinvoke <org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.HyphenationTree getHyphenationTree(java.lang.String,java.lang.String)>(lang, country);
        this.<org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.HyphenationTree hyphenTree> = $r0;
        return;
    }

    public org.apache.fop.hyphenation.Hyphenation hyphenate(char[], int, int)
    {
        org.apache.fop.hyphenation.Hyphenator this;
        char[] word;
        int offset, len, $i0, $i1;
        org.apache.fop.hyphenation.HyphenationTree $r0;
        org.apache.fop.hyphenation.Hyphenation $r1;

        this := @this: org.apache.fop.hyphenation.Hyphenator;
        word := @parameter0: char[];
        offset := @parameter1: int;
        len := @parameter2: int;
        $r0 = this.<org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.HyphenationTree hyphenTree>;
        if $r0 != null goto label0;

        return null;

     label0:
        $r0 = this.<org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.HyphenationTree hyphenTree>;
        $i0 = this.<org.apache.fop.hyphenation.Hyphenator: int remainCharCount>;
        $i1 = this.<org.apache.fop.hyphenation.Hyphenator: int pushCharCount>;
        $r1 = virtualinvoke $r0.<org.apache.fop.hyphenation.HyphenationTree: org.apache.fop.hyphenation.Hyphenation hyphenate(char[],int,int,int,int)>(word, offset, len, $i0, $i1);
        return $r1;
    }

    public org.apache.fop.hyphenation.Hyphenation hyphenate(java.lang.String)
    {
        org.apache.fop.hyphenation.Hyphenator this;
        java.lang.String word;
        org.apache.fop.hyphenation.HyphenationTree $r0;
        int $i0, $i1;
        org.apache.fop.hyphenation.Hyphenation $r1;

        this := @this: org.apache.fop.hyphenation.Hyphenator;
        word := @parameter0: java.lang.String;
        $r0 = this.<org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.HyphenationTree hyphenTree>;
        if $r0 != null goto label0;

        return null;

     label0:
        $r0 = this.<org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.HyphenationTree hyphenTree>;
        $i0 = this.<org.apache.fop.hyphenation.Hyphenator: int remainCharCount>;
        $i1 = this.<org.apache.fop.hyphenation.Hyphenator: int pushCharCount>;
        $r1 = virtualinvoke $r0.<org.apache.fop.hyphenation.HyphenationTree: org.apache.fop.hyphenation.Hyphenation hyphenate(java.lang.String,int,int)>(word, $i0, $i1);
        return $r1;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException l1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        l1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(l1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.apache.commons.logging.Log $r1;

        $r0 = <org.apache.fop.hyphenation.Hyphenator: java.lang.Class class$org$apache$fop$hyphenation$Hyphenator>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.fop.hyphenation.Hyphenator: java.lang.Class class$(java.lang.String)>("org.apache.fop.hyphenation.Hyphenator");
        <org.apache.fop.hyphenation.Hyphenator: java.lang.Class class$org$apache$fop$hyphenation$Hyphenator> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.fop.hyphenation.Hyphenator: java.lang.Class class$org$apache$fop$hyphenation$Hyphenator>;

     label1:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r0);
        <org.apache.fop.hyphenation.Hyphenator: org.apache.commons.logging.Log log> = $r1;
        <org.apache.fop.hyphenation.Hyphenator: org.apache.fop.hyphenation.HyphenationTreeCache hTreeCache> = null;
        <org.apache.fop.hyphenation.Hyphenator: boolean statisticsDump> = 0;
        return;
    }
}
