public class org.apache.fop.render.afp.modca.MapCodedFont extends org.apache.fop.render.afp.modca.AbstractAFPObject
{
    private java.util.List fontList;

    public void <init>()
    {
        org.apache.fop.render.afp.modca.MapCodedFont this;
        java.util.ArrayList $r0;

        this := @this: org.apache.fop.render.afp.modca.MapCodedFont;
        specialinvoke this.<org.apache.fop.render.afp.modca.AbstractAFPObject: void <init>()>();
        this.<org.apache.fop.render.afp.modca.MapCodedFont: java.util.List fontList> = null;
        $r0 = new java.util.ArrayList;
        specialinvoke $r0.<java.util.ArrayList: void <init>()>();
        this.<org.apache.fop.render.afp.modca.MapCodedFont: java.util.List fontList> = $r0;
        return;
    }

    public void writeDataStream(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.fop.render.afp.modca.MapCodedFont this;
        java.io.OutputStream os;
        java.io.ByteArrayOutputStream $r0, baos;
        java.util.Iterator iter;
        org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition fd;
        byte[] data, rl1, $r1;
        java.util.List $r2;
        boolean $z0;
        java.lang.Object $r3;
        int $i0, $i2;
        byte $b1, $b3;

        this := @this: org.apache.fop.render.afp.modca.MapCodedFont;
        os := @parameter0: java.io.OutputStream;
        $r0 = new java.io.ByteArrayOutputStream;
        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();
        baos = $r0;
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(90);
        $r1 = newarray (byte)[2];
        $r1[0] = 0;
        $r1[1] = 0;
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(byte[])>($r1);
        $r1 = newarray (byte)[3];
        $r1[0] = -45;
        $r1[1] = -85;
        $r1[2] = -118;
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(byte[])>($r1);
        $r1 = newarray (byte)[3];
        $r1[0] = 0;
        $r1[1] = 0;
        $r1[2] = 0;
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(byte[])>($r1);
        $r2 = this.<org.apache.fop.render.afp.modca.MapCodedFont: java.util.List fontList>;
        iter = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();
        fd = (org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition) $r3;
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(0);
        $i0 = staticinvoke <org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: int access$000(org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition)>(fd);
        if $i0 != 0 goto label1;

        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(34);
        goto label2;

     label1:
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(58);

     label2:
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(12);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(2);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(-122);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(0);
        $r1 = staticinvoke <org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: byte[] access$100(org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition)>(fd);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(byte[])>($r1);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(12);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(2);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(-123);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(0);
        $r1 = staticinvoke <org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: byte[] access$200(org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition)>(fd);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(byte[])>($r1);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(4);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(38);
        $b1 = staticinvoke <org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: byte access$300(org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition)>(fd);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>($b1);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(0);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(4);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(36);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(5);
        $b1 = staticinvoke <org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: byte access$400(org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition)>(fd);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>($b1);
        $i0 = staticinvoke <org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: int access$000(org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition)>(fd);
        if $i0 == 0 goto label3;

        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(20);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(31);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(0);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(0);
        $i2 = staticinvoke <org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: int access$000(org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition)>(fd);
        $r1 = staticinvoke <org.apache.fop.render.afp.tools.BinaryUtils: byte[] convert(int,int)>($i2, 2);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(byte[])>($r1);
        $r1 = newarray (byte)[2];
        $r1[0] = 0;
        $r1[1] = 0;
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(byte[])>($r1);
        $r1 = newarray (byte)[11];
        $r1[0] = 0;
        $r1[1] = 0;
        $r1[2] = 0;
        $r1[3] = 0;
        $r1[4] = 0;
        $r1[5] = 0;
        $r1[6] = 0;
        $r1[7] = 0;
        $r1[8] = 0;
        $r1[9] = 0;
        $r1[10] = 0;
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(byte[])>($r1);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(96);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(4);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(int)>(93);
        $i2 = staticinvoke <org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: int access$000(org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition)>(fd);
        $r1 = staticinvoke <org.apache.fop.render.afp.tools.BinaryUtils: byte[] convert(int,int)>($i2, 2);
        virtualinvoke baos.<java.io.ByteArrayOutputStream: void write(byte[])>($r1);

     label3:
        goto label0;

     label4:
        data = virtualinvoke baos.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();
        $i0 = lengthof data;
        $i0 = $i0 - 1;
        rl1 = staticinvoke <org.apache.fop.render.afp.tools.BinaryUtils: byte[] convert(int,int)>($i0, 2);
        $b3 = rl1[0];
        data[1] = $b3;
        $b3 = rl1[1];
        data[2] = $b3;
        virtualinvoke os.<java.io.OutputStream: void write(byte[])>(data);
        return;
    }

    public void addFont(int, org.apache.fop.render.afp.fonts.AFPFont, int, int) throws org.apache.fop.render.afp.modca.MaximumSizeExceededException
    {
        org.apache.fop.render.afp.modca.MapCodedFont this;
        int fontReference, size, orientation, $i2, $i3;
        org.apache.fop.render.afp.fonts.AFPFont font;
        org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition $r0, fd;
        org.apache.fop.render.afp.fonts.RasterFont raster;
        org.apache.fop.render.afp.fonts.CharacterSet cs;
        java.lang.String msg, $r3, $r9, $r11;
        org.apache.fop.render.afp.fonts.OutlineFont outline;
        java.io.UnsupportedEncodingException ex, $r15;
        byte[] $r1, $r6, $r10;
        byte $b0;
        boolean $z0;
        java.lang.StringBuffer $r2, $r8;
        org.apache.commons.logging.Log $r4;
        org.apache.fop.render.afp.exceptions.FontRuntimeException $r5;
        java.lang.IllegalArgumentException $r7;
        java.lang.Class $r12;
        java.util.List $r13;
        org.apache.fop.render.afp.modca.MaximumSizeExceededException $r14;

        this := @this: org.apache.fop.render.afp.modca.MapCodedFont;
        fontReference := @parameter0: int;
        font := @parameter1: org.apache.fop.render.afp.fonts.AFPFont;
        size := @parameter2: int;
        orientation := @parameter3: int;
        $r0 = new org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition;
        specialinvoke $r0.<org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: void <init>(org.apache.fop.render.afp.modca.MapCodedFont,org.apache.fop.render.afp.modca.MapCodedFont$1)>(this, null);
        fd = $r0;
        $r1 = staticinvoke <org.apache.fop.render.afp.tools.BinaryUtils: byte[] convert(int)>(fontReference);
        $b0 = $r1[0];
        staticinvoke <org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: byte access$402(org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition,byte)>(fd, $b0);
        lookupswitch(orientation)
        {
            case 90: goto label0;
            case 180: goto label1;
            case 270: goto label2;
            default: goto label3;
        };

     label0:
        staticinvoke <org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: byte access$302(org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition,byte)>(fd, 45);
        goto label4;

     label1:
        staticinvoke <org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: byte access$302(org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition,byte)>(fd, 90);
        goto label4;

     label2:
        staticinvoke <org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: byte access$302(org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition,byte)>(fd, -121);
        goto label4;

     label3:
        staticinvoke <org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: byte access$302(org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition,byte)>(fd, 0);

     label4:
        $z0 = font instanceof org.apache.fop.render.afp.fonts.RasterFont;
        if $z0 == 0 goto label8;

        raster = (org.apache.fop.render.afp.fonts.RasterFont) font;
        cs = virtualinvoke raster.<org.apache.fop.render.afp.fonts.RasterFont: org.apache.fop.render.afp.fonts.CharacterSet getCharacterSet(int)>(size);
        if cs != null goto label5;

        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Character set not found for font ");
        $r3 = virtualinvoke font.<org.apache.fop.render.afp.fonts.AFPFont: java.lang.String getFontName()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" with point size ");
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(size);
        msg = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        $r4 = <org.apache.fop.render.afp.modca.MapCodedFont: org.apache.commons.logging.Log log>;
        interfaceinvoke $r4.<org.apache.commons.logging.Log: void error(java.lang.Object)>(msg);
        $r5 = new org.apache.fop.render.afp.exceptions.FontRuntimeException;
        specialinvoke $r5.<org.apache.fop.render.afp.exceptions.FontRuntimeException: void <init>(java.lang.String)>(msg);
        throw $r5;

     label5:
        $r1 = virtualinvoke cs.<org.apache.fop.render.afp.fonts.CharacterSet: byte[] getNameBytes()>();
        staticinvoke <org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: byte[] access$102(org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition,byte[])>(fd, $r1);
        $r6 = staticinvoke <org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: byte[] access$100(org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition)>(fd);
        $i2 = lengthof $r6;
        if $i2 == 8 goto label6;

        $r7 = new java.lang.IllegalArgumentException;
        $r8 = new java.lang.StringBuffer;
        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The character set ");
        $r9 = new java.lang.String;
        $r10 = staticinvoke <org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: byte[] access$100(org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition)>(fd);
        specialinvoke $r9.<java.lang.String: void <init>(byte[],java.lang.String)>($r10, "Cp1146");
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" must have a fixed length of 8 characters.");
        $r11 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);
        throw $r7;

     label6:
        $r3 = virtualinvoke cs.<org.apache.fop.render.afp.fonts.CharacterSet: java.lang.String getCodePage()>();
        $r1 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>("Cp1146");
        staticinvoke <org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: byte[] access$202(org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition,byte[])>(fd, $r1);
        $r6 = staticinvoke <org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: byte[] access$200(org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition)>(fd);
        $i2 = lengthof $r6;
        if $i2 == 8 goto label7;

        $r7 = new java.lang.IllegalArgumentException;
        $r8 = new java.lang.StringBuffer;
        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The code page ");
        $r9 = new java.lang.String;
        $r10 = staticinvoke <org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: byte[] access$200(org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition)>(fd);
        specialinvoke $r9.<java.lang.String: void <init>(byte[],java.lang.String)>($r10, "Cp1146");
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" must have a fixed length of 8 characters.");
        $r11 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);
        throw $r7;

     label7:
        goto label11;

     label8:
        $z0 = font instanceof org.apache.fop.render.afp.fonts.OutlineFont;
        if $z0 == 0 goto label10;

        outline = (org.apache.fop.render.afp.fonts.OutlineFont) font;
        cs = virtualinvoke outline.<org.apache.fop.render.afp.fonts.OutlineFont: org.apache.fop.render.afp.fonts.CharacterSet getCharacterSet()>();
        $r1 = virtualinvoke cs.<org.apache.fop.render.afp.fonts.CharacterSet: byte[] getNameBytes()>();
        staticinvoke <org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: byte[] access$102(org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition,byte[])>(fd, $r1);
        $i3 = size / 1000;
        $i3 = $i3 * 20;
        staticinvoke <org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: int access$002(org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition,int)>(fd, $i3);
        $r3 = virtualinvoke cs.<org.apache.fop.render.afp.fonts.CharacterSet: java.lang.String getCodePage()>();
        $r1 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>("Cp1146");
        staticinvoke <org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: byte[] access$202(org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition,byte[])>(fd, $r1);
        $r6 = staticinvoke <org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: byte[] access$200(org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition)>(fd);
        $i2 = lengthof $r6;
        if $i2 == 8 goto label9;

        $r7 = new java.lang.IllegalArgumentException;
        $r8 = new java.lang.StringBuffer;
        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The code page ");
        $r9 = new java.lang.String;
        $r10 = staticinvoke <org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition: byte[] access$200(org.apache.fop.render.afp.modca.MapCodedFont$FontDefinition)>(fd);
        specialinvoke $r9.<java.lang.String: void <init>(byte[],java.lang.String)>($r10, "Cp1146");
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" must have a fixed length of 8 characters.");
        $r11 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);
        throw $r7;

     label9:
        goto label11;

     label10:
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Font of type ");
        $r12 = virtualinvoke font.<java.lang.Object: java.lang.Class getClass()>();
        $r3 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" not recognized.");
        msg = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        $r4 = <org.apache.fop.render.afp.modca.MapCodedFont: org.apache.commons.logging.Log log>;
        interfaceinvoke $r4.<org.apache.commons.logging.Log: void error(java.lang.Object)>(msg);
        $r5 = new org.apache.fop.render.afp.exceptions.FontRuntimeException;
        specialinvoke $r5.<org.apache.fop.render.afp.exceptions.FontRuntimeException: void <init>(java.lang.String)>(msg);
        throw $r5;

     label11:
        $r13 = this.<org.apache.fop.render.afp.modca.MapCodedFont: java.util.List fontList>;
        $i2 = interfaceinvoke $r13.<java.util.List: int size()>();
        if $i2 <= 253 goto label12;

        $r14 = new org.apache.fop.render.afp.modca.MaximumSizeExceededException;
        specialinvoke $r14.<org.apache.fop.render.afp.modca.MaximumSizeExceededException: void <init>()>();
        throw $r14;

     label12:
        $r13 = this.<org.apache.fop.render.afp.modca.MapCodedFont: java.util.List fontList>;
        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(fd);

     label13:
        goto label15;

     label14:
        $r15 := @caughtexception;
        ex = $r15;
        $r5 = new org.apache.fop.render.afp.exceptions.FontRuntimeException;
        specialinvoke $r5.<org.apache.fop.render.afp.exceptions.FontRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to create font  due to a UnsupportedEncodingException", ex);
        throw $r5;

     label15:
        return;

        catch java.io.UnsupportedEncodingException from label4 to label13 with label14;
    }
}
