public class org.apache.fop.fonts.Font extends java.lang.Object
{
    public static final int WEIGHT_EXTRA_BOLD;
    public static final int WEIGHT_BOLD;
    public static final int WEIGHT_NORMAL;
    public static final int WEIGHT_LIGHT;
    public static final java.lang.String STYLE_NORMAL;
    public static final java.lang.String STYLE_ITALIC;
    public static final org.apache.fop.fonts.FontTriplet DEFAULT_FONT;
    private static org.apache.commons.logging.Log log;
    private java.lang.String fontName;
    private org.apache.fop.fonts.FontTriplet triplet;
    private int fontSize;
    private org.apache.fop.fonts.FontMetrics metric;
    static java.lang.Class class$org$apache$fop$fonts$Font;

    public void <init>(java.lang.String, org.apache.fop.fonts.FontTriplet, org.apache.fop.fonts.FontMetrics, int)
    {
        org.apache.fop.fonts.Font this;
        java.lang.String key;
        org.apache.fop.fonts.FontTriplet triplet;
        org.apache.fop.fonts.FontMetrics met;
        int fontSize;

        this := @this: org.apache.fop.fonts.Font;
        key := @parameter0: java.lang.String;
        triplet := @parameter1: org.apache.fop.fonts.FontTriplet;
        met := @parameter2: org.apache.fop.fonts.FontMetrics;
        fontSize := @parameter3: int;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<org.apache.fop.fonts.Font: java.lang.String fontName> = key;
        this.<org.apache.fop.fonts.Font: org.apache.fop.fonts.FontTriplet triplet> = triplet;
        this.<org.apache.fop.fonts.Font: org.apache.fop.fonts.FontMetrics metric> = met;
        this.<org.apache.fop.fonts.Font: int fontSize> = fontSize;
        return;
    }

    public org.apache.fop.fonts.FontMetrics getFontMetrics()
    {
        org.apache.fop.fonts.Font this;
        org.apache.fop.fonts.FontMetrics $r0;

        this := @this: org.apache.fop.fonts.Font;
        $r0 = this.<org.apache.fop.fonts.Font: org.apache.fop.fonts.FontMetrics metric>;
        return $r0;
    }

    public int getAscender()
    {
        org.apache.fop.fonts.Font this;
        org.apache.fop.fonts.FontMetrics $r0;
        int $i0, $i1;

        this := @this: org.apache.fop.fonts.Font;
        $r0 = this.<org.apache.fop.fonts.Font: org.apache.fop.fonts.FontMetrics metric>;
        $i0 = this.<org.apache.fop.fonts.Font: int fontSize>;
        $i1 = interfaceinvoke $r0.<org.apache.fop.fonts.FontMetrics: int getAscender(int)>($i0);
        $i1 = $i1 / 1000;
        return $i1;
    }

    public int getCapHeight()
    {
        org.apache.fop.fonts.Font this;
        org.apache.fop.fonts.FontMetrics $r0;
        int $i0, $i1;

        this := @this: org.apache.fop.fonts.Font;
        $r0 = this.<org.apache.fop.fonts.Font: org.apache.fop.fonts.FontMetrics metric>;
        $i0 = this.<org.apache.fop.fonts.Font: int fontSize>;
        $i1 = interfaceinvoke $r0.<org.apache.fop.fonts.FontMetrics: int getCapHeight(int)>($i0);
        $i1 = $i1 / 1000;
        return $i1;
    }

    public int getDescender()
    {
        org.apache.fop.fonts.Font this;
        org.apache.fop.fonts.FontMetrics $r0;
        int $i0, $i1;

        this := @this: org.apache.fop.fonts.Font;
        $r0 = this.<org.apache.fop.fonts.Font: org.apache.fop.fonts.FontMetrics metric>;
        $i0 = this.<org.apache.fop.fonts.Font: int fontSize>;
        $i1 = interfaceinvoke $r0.<org.apache.fop.fonts.FontMetrics: int getDescender(int)>($i0);
        $i1 = $i1 / 1000;
        return $i1;
    }

    public java.lang.String getFontName()
    {
        org.apache.fop.fonts.Font this;
        java.lang.String $r0;

        this := @this: org.apache.fop.fonts.Font;
        $r0 = this.<org.apache.fop.fonts.Font: java.lang.String fontName>;
        return $r0;
    }

    public org.apache.fop.fonts.FontTriplet getFontTriplet()
    {
        org.apache.fop.fonts.Font this;
        org.apache.fop.fonts.FontTriplet $r0;

        this := @this: org.apache.fop.fonts.Font;
        $r0 = this.<org.apache.fop.fonts.Font: org.apache.fop.fonts.FontTriplet triplet>;
        return $r0;
    }

    public int getFontSize()
    {
        org.apache.fop.fonts.Font this;
        int $i0;

        this := @this: org.apache.fop.fonts.Font;
        $i0 = this.<org.apache.fop.fonts.Font: int fontSize>;
        return $i0;
    }

    public int getXHeight()
    {
        org.apache.fop.fonts.Font this;
        org.apache.fop.fonts.FontMetrics $r0;
        int $i0, $i1;

        this := @this: org.apache.fop.fonts.Font;
        $r0 = this.<org.apache.fop.fonts.Font: org.apache.fop.fonts.FontMetrics metric>;
        $i0 = this.<org.apache.fop.fonts.Font: int fontSize>;
        $i1 = interfaceinvoke $r0.<org.apache.fop.fonts.FontMetrics: int getXHeight(int)>($i0);
        $i1 = $i1 / 1000;
        return $i1;
    }

    public boolean hasKerning()
    {
        org.apache.fop.fonts.Font this;
        org.apache.fop.fonts.FontMetrics $r0;
        boolean $z0;

        this := @this: org.apache.fop.fonts.Font;
        $r0 = this.<org.apache.fop.fonts.Font: org.apache.fop.fonts.FontMetrics metric>;
        $z0 = interfaceinvoke $r0.<org.apache.fop.fonts.FontMetrics: boolean hasKerningInfo()>();
        return $z0;
    }

    public java.util.Map getKerning()
    {
        org.apache.fop.fonts.Font this;
        org.apache.fop.fonts.FontMetrics $r0;
        boolean $z0;
        java.util.Map $r1;

        this := @this: org.apache.fop.fonts.Font;
        $r0 = this.<org.apache.fop.fonts.Font: org.apache.fop.fonts.FontMetrics metric>;
        $z0 = interfaceinvoke $r0.<org.apache.fop.fonts.FontMetrics: boolean hasKerningInfo()>();
        if $z0 == 0 goto label0;

        $r0 = this.<org.apache.fop.fonts.Font: org.apache.fop.fonts.FontMetrics metric>;
        $r1 = interfaceinvoke $r0.<org.apache.fop.fonts.FontMetrics: java.util.Map getKerningInfo()>();
        return $r1;

     label0:
        $r1 = <java.util.Collections: java.util.Map EMPTY_MAP>;
        return $r1;
    }

    public int getKernValue(char, char)
    {
        org.apache.fop.fonts.Font this;
        char ch1, ch2;
        java.lang.Integer $r0, width;
        java.util.Map kernPair, $r1;
        java.lang.Object $r2;
        int $i0;

        this := @this: org.apache.fop.fonts.Font;
        ch1 := @parameter0: char;
        ch2 := @parameter1: char;
        $r1 = virtualinvoke this.<org.apache.fop.fonts.Font: java.util.Map getKerning()>();
        $r0 = new java.lang.Integer;
        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(ch1);
        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);
        kernPair = (java.util.Map) $r2;
        if kernPair == null goto label0;

        $r0 = new java.lang.Integer;
        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(ch2);
        $r2 = interfaceinvoke kernPair.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);
        width = (java.lang.Integer) $r2;
        if width == null goto label0;

        $i0 = virtualinvoke width.<java.lang.Integer: int intValue()>();
        return $i0;

     label0:
        return 0;
    }

    public int getWidth(int)
    {
        org.apache.fop.fonts.Font this;
        int charnum, $i0, $i1;
        org.apache.fop.fonts.FontMetrics $r0;

        this := @this: org.apache.fop.fonts.Font;
        charnum := @parameter0: int;
        $r0 = this.<org.apache.fop.fonts.Font: org.apache.fop.fonts.FontMetrics metric>;
        $i0 = this.<org.apache.fop.fonts.Font: int fontSize>;
        $i1 = interfaceinvoke $r0.<org.apache.fop.fonts.FontMetrics: int getWidth(int,int)>(charnum, $i0);
        $i1 = $i1 / 1000;
        return $i1;
    }

    public char mapChar(char)
    {
        org.apache.fop.fonts.Font this;
        char c, d, $c0, c;
        org.apache.fop.fonts.FontMetrics $r0;
        boolean $z0;
        org.apache.fop.fonts.Typeface $r1;
        org.apache.fop.fonts.CodePointMapping $r2;
        org.apache.commons.logging.Log $r3;
        java.lang.StringBuffer $r4;
        java.lang.String $r5, $r6;

        this := @this: org.apache.fop.fonts.Font;
        c := @parameter0: char;
        $r0 = this.<org.apache.fop.fonts.Font: org.apache.fop.fonts.FontMetrics metric>;
        $z0 = $r0 instanceof org.apache.fop.fonts.Typeface;
        if $z0 == 0 goto label0;

        $r0 = this.<org.apache.fop.fonts.Font: org.apache.fop.fonts.FontMetrics metric>;
        $r1 = (org.apache.fop.fonts.Typeface) $r0;
        $c0 = virtualinvoke $r1.<org.apache.fop.fonts.Typeface: char mapChar(char)>(c);
        return $c0;

     label0:
        $r2 = staticinvoke <org.apache.fop.fonts.CodePointMapping: org.apache.fop.fonts.CodePointMapping getMapping(java.lang.String)>("WinAnsiEncoding");
        d = virtualinvoke $r2.<org.apache.fop.fonts.CodePointMapping: char mapChar(char)>(c);
        if d == 0 goto label1;

        c = d;
        goto label2;

     label1:
        $r3 = <org.apache.fop.fonts.Font: org.apache.commons.logging.Log log>;
        $r4 = new java.lang.StringBuffer;
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Glyph ");
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(c);
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" not available in font ");
        $r5 = this.<org.apache.fop.fonts.Font: java.lang.String fontName>;
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r3.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r6);
        c = 35;

     label2:
        return c;
    }

    public boolean hasChar(char)
    {
        org.apache.fop.fonts.Font this;
        char c, $c0;
        org.apache.fop.fonts.FontMetrics $r0;
        boolean $z0;
        org.apache.fop.fonts.Typeface $r1;
        org.apache.fop.fonts.CodePointMapping $r2;

        this := @this: org.apache.fop.fonts.Font;
        c := @parameter0: char;
        $r0 = this.<org.apache.fop.fonts.Font: org.apache.fop.fonts.FontMetrics metric>;
        $z0 = $r0 instanceof org.apache.fop.fonts.Typeface;
        if $z0 == 0 goto label0;

        $r0 = this.<org.apache.fop.fonts.Font: org.apache.fop.fonts.FontMetrics metric>;
        $r1 = (org.apache.fop.fonts.Typeface) $r0;
        $z0 = virtualinvoke $r1.<org.apache.fop.fonts.Typeface: boolean hasChar(char)>(c);
        return $z0;

     label0:
        $r2 = staticinvoke <org.apache.fop.fonts.CodePointMapping: org.apache.fop.fonts.CodePointMapping getMapping(java.lang.String)>("WinAnsiEncoding");
        $c0 = virtualinvoke $r2.<org.apache.fop.fonts.CodePointMapping: char mapChar(char)>(c);
        if $c0 <= 0 goto label1;

        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String toString()
    {
        org.apache.fop.fonts.Font this;
        java.lang.StringBuffer $r0, sbuf;
        java.lang.String $r1, $r2;
        int $i0;

        this := @this: org.apache.fop.fonts.Font;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        sbuf = $r0;
        virtualinvoke sbuf.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);
        $r1 = this.<org.apache.fop.fonts.Font: java.lang.String fontName>;
        virtualinvoke sbuf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);
        virtualinvoke sbuf.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);
        $i0 = this.<org.apache.fop.fonts.Font: int fontSize>;
        virtualinvoke sbuf.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);
        virtualinvoke sbuf.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);
        $r2 = virtualinvoke sbuf.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r2;
    }

    public int getCharWidth(char)
    {
        org.apache.fop.fonts.Font this;
        char c, $c0;
        int width, em, en, $i1;
        boolean $z0;

        this := @this: org.apache.fop.fonts.Font;
        c := @parameter0: char;
        if c == 10 goto label0;

        if c == 13 goto label0;

        if c == 9 goto label0;

        if c != 160 goto label1;

     label0:
        width = virtualinvoke this.<org.apache.fop.fonts.Font: int getCharWidth(char)>(32);
        goto label21;

     label1:
        $z0 = virtualinvoke this.<org.apache.fop.fonts.Font: boolean hasChar(char)>(c);
        if $z0 == 0 goto label2;

        $c0 = virtualinvoke this.<org.apache.fop.fonts.Font: char mapChar(char)>(c);
        width = virtualinvoke this.<org.apache.fop.fonts.Font: int getWidth(int)>($c0);
        goto label3;

     label2:
        width = -1;

     label3:
        if width > 0 goto label21;

        em = virtualinvoke this.<org.apache.fop.fonts.Font: int getFontSize()>();
        en = em / 2;
        if c != 32 goto label4;

        width = em;
        goto label21;

     label4:
        if c != 8192 goto label5;

        width = en;
        goto label21;

     label5:
        if c != 8193 goto label6;

        width = em;
        goto label21;

     label6:
        if c != 8194 goto label7;

        width = em / 2;
        goto label21;

     label7:
        if c != 8195 goto label8;

        width = virtualinvoke this.<org.apache.fop.fonts.Font: int getFontSize()>();
        goto label21;

     label8:
        if c != 8196 goto label9;

        width = em / 3;
        goto label21;

     label9:
        if c != 8197 goto label10;

        width = em / 4;
        goto label21;

     label10:
        if c != 8198 goto label11;

        width = em / 6;
        goto label21;

     label11:
        if c != 8199 goto label12;

        width = virtualinvoke this.<org.apache.fop.fonts.Font: int getCharWidth(char)>(48);
        goto label21;

     label12:
        if c != 8200 goto label13;

        width = virtualinvoke this.<org.apache.fop.fonts.Font: int getCharWidth(char)>(46);
        goto label21;

     label13:
        if c != 8201 goto label14;

        width = em / 5;
        goto label21;

     label14:
        if c != 8202 goto label15;

        width = em / 10;
        goto label21;

     label15:
        if c != 8203 goto label16;

        width = 0;
        goto label21;

     label16:
        if c != 8239 goto label17;

        $i1 = virtualinvoke this.<org.apache.fop.fonts.Font: int getCharWidth(char)>(32);
        width = $i1 / 2;
        goto label21;

     label17:
        if c != 8288 goto label18;

        width = 0;
        goto label21;

     label18:
        if c != 12288 goto label19;

        $i1 = virtualinvoke this.<org.apache.fop.fonts.Font: int getCharWidth(char)>(32);
        width = $i1 * 2;
        goto label21;

     label19:
        if c != 65279 goto label20;

        width = 0;
        goto label21;

     label20:
        $c0 = virtualinvoke this.<org.apache.fop.fonts.Font: char mapChar(char)>(c);
        width = virtualinvoke this.<org.apache.fop.fonts.Font: int getWidth(int)>($c0);

     label21:
        return width;
    }

    public int getWordWidth(java.lang.String)
    {
        org.apache.fop.fonts.Font this;
        java.lang.String word;
        int wordLength, width, i, $i1;
        char[] characters;
        char $c0;

        this := @this: org.apache.fop.fonts.Font;
        word := @parameter0: java.lang.String;
        if word != null goto label0;

        return 0;

     label0:
        wordLength = virtualinvoke word.<java.lang.String: int length()>();
        width = 0;
        characters = newarray (char)[wordLength];
        virtualinvoke word.<java.lang.String: void getChars(int,int,char[],int)>(0, wordLength, characters, 0);
        i = 0;

     label1:
        if i >= wordLength goto label2;

        $c0 = characters[i];
        $i1 = virtualinvoke this.<org.apache.fop.fonts.Font: int getCharWidth(char)>($c0);
        width = width + $i1;
        i = i + 1;
        goto label1;

     label2:
        return width;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException l1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        l1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(l1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    static void <clinit>()
    {
        org.apache.fop.fonts.FontTriplet $r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;

        $r0 = new org.apache.fop.fonts.FontTriplet;
        specialinvoke $r0.<org.apache.fop.fonts.FontTriplet: void <init>(java.lang.String,java.lang.String,int)>("any", "normal", 400);
        <org.apache.fop.fonts.Font: org.apache.fop.fonts.FontTriplet DEFAULT_FONT> = $r0;
        $r1 = <org.apache.fop.fonts.Font: java.lang.Class class$org$apache$fop$fonts$Font>;
        if $r1 != null goto label0;

        $r1 = staticinvoke <org.apache.fop.fonts.Font: java.lang.Class class$(java.lang.String)>("org.apache.fop.fonts.Font");
        <org.apache.fop.fonts.Font: java.lang.Class class$org$apache$fop$fonts$Font> = $r1;
        goto label1;

     label0:
        $r1 = <org.apache.fop.fonts.Font: java.lang.Class class$org$apache$fop$fonts$Font>;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);
        <org.apache.fop.fonts.Font: org.apache.commons.logging.Log log> = $r2;
        return;
    }
}
