public class org.apache.fop.render.java2d.Java2DGraphics2DAdapter extends org.apache.fop.render.AbstractGraphics2DAdapter
{

    public void <init>()
    {
        org.apache.fop.render.java2d.Java2DGraphics2DAdapter this;

        this := @this: org.apache.fop.render.java2d.Java2DGraphics2DAdapter;
        specialinvoke this.<org.apache.fop.render.AbstractGraphics2DAdapter: void <init>()>();
        return;
    }

    public void paintImage(org.apache.xmlgraphics.java2d.Graphics2DImagePainter, org.apache.fop.render.RendererContext, int, int, int, int) throws java.io.IOException
    {
        org.apache.fop.render.java2d.Java2DGraphics2DAdapter this;
        org.apache.xmlgraphics.java2d.Graphics2DImagePainter painter;
        org.apache.fop.render.RendererContext context;
        int x, y, width, height;
        float fwidth, fheight, fx, fy, imw, imh, sx, sy, $f0;
        java.awt.Dimension dim;
        org.apache.fop.render.java2d.Java2DRenderer renderer;
        org.apache.fop.render.java2d.Java2DGraphicsState state;
        java.awt.Graphics2D g2d, $r1;
        java.awt.geom.AffineTransform at;
        java.awt.geom.Rectangle2D$Double area, $r4;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        org.apache.fop.render.AbstractRenderer $r0;
        java.awt.Graphics $r2;
        java.awt.Color $r3;
        boolean $z0;

        this := @this: org.apache.fop.render.java2d.Java2DGraphics2DAdapter;
        painter := @parameter0: org.apache.xmlgraphics.java2d.Graphics2DImagePainter;
        context := @parameter1: org.apache.fop.render.RendererContext;
        x := @parameter2: int;
        y := @parameter3: int;
        width := @parameter4: int;
        height := @parameter5: int;
        $f0 = (float) width;
        fwidth = $f0 / 1000.0F;
        $f0 = (float) height;
        fheight = $f0 / 1000.0F;
        $f0 = (float) x;
        fx = $f0 / 1000.0F;
        $f0 = (float) y;
        fy = $f0 / 1000.0F;
        dim = interfaceinvoke painter.<org.apache.xmlgraphics.java2d.Graphics2DImagePainter: java.awt.Dimension getImageSize()>();
        $d0 = virtualinvoke dim.<java.awt.Dimension: double getWidth()>();
        $f0 = (float) $d0;
        imw = $f0 / 1000.0F;
        $d0 = virtualinvoke dim.<java.awt.Dimension: double getHeight()>();
        $f0 = (float) $d0;
        imh = $f0 / 1000.0F;
        sx = fwidth / imw;
        sy = fheight / imh;
        $r0 = virtualinvoke context.<org.apache.fop.render.RendererContext: org.apache.fop.render.AbstractRenderer getRenderer()>();
        renderer = (org.apache.fop.render.java2d.Java2DRenderer) $r0;
        state = renderer.<org.apache.fop.render.java2d.Java2DRenderer: org.apache.fop.render.java2d.Java2DGraphicsState state>;
        $r1 = virtualinvoke state.<org.apache.fop.render.java2d.Java2DGraphicsState: java.awt.Graphics2D getGraph()>();
        $r2 = virtualinvoke $r1.<java.awt.Graphics2D: java.awt.Graphics create()>();
        g2d = (java.awt.Graphics2D) $r2;
        $r3 = <java.awt.Color: java.awt.Color black>;
        virtualinvoke g2d.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r3);
        $r3 = <java.awt.Color: java.awt.Color black>;
        virtualinvoke g2d.<java.awt.Graphics2D: void setBackground(java.awt.Color)>($r3);
        $d1 = (double) fx;
        $d2 = (double) fy;
        virtualinvoke g2d.<java.awt.Graphics2D: void translate(double,double)>($d1, $d2);
        $d0 = (double) sx;
        $d3 = (double) sy;
        at = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getScaleInstance(double,double)>($d0, $d3);
        $z0 = virtualinvoke at.<java.awt.geom.AffineTransform: boolean isIdentity()>();
        if $z0 != 0 goto label0;

        virtualinvoke g2d.<java.awt.Graphics2D: void transform(java.awt.geom.AffineTransform)>(at);

     label0:
        $r4 = new java.awt.geom.Rectangle2D$Double;
        $d4 = (double) imw;
        $d5 = (double) imh;
        specialinvoke $r4.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(0.0, 0.0, $d4, $d5);
        area = $r4;
        interfaceinvoke painter.<org.apache.xmlgraphics.java2d.Graphics2DImagePainter: void paint(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2d, area);
        virtualinvoke g2d.<java.awt.Graphics2D: void dispose()>();
        return;
    }
}
