public final class org.apache.fop.util.BreakUtil extends java.lang.Object
{

    private void <init>()
    {
        org.apache.fop.util.BreakUtil this;

        this := @this: org.apache.fop.util.BreakUtil;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }

    private static int getBreakClassPriority(int)
    {
        int breakClass;
        java.lang.StringBuffer $r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2;

        breakClass := @parameter0: int;
        lookupswitch(breakClass)
        {
            case 9: goto label0;
            case 28: goto label1;
            case 44: goto label3;
            case 100: goto label4;
            case 104: goto label2;
            default: goto label5;
        };

     label0:
        return 0;

     label1:
        return 1;

     label2:
        return 2;

     label3:
        return 3;

     label4:
        return 3;

     label5:
        $r1 = new java.lang.IllegalArgumentException;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal value for breakClass: ");
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(breakClass);
        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);
        throw $r1;
    }

    public static int compareBreakClasses(int, int)
    {
        int break1, break2, p1, p2;

        break1 := @parameter0: int;
        break2 := @parameter1: int;
        p1 = staticinvoke <org.apache.fop.util.BreakUtil: int getBreakClassPriority(int)>(break1);
        p2 = staticinvoke <org.apache.fop.util.BreakUtil: int getBreakClassPriority(int)>(break2);
        if p1 >= p2 goto label0;

        return break2;

     label0:
        return break1;
    }
}
