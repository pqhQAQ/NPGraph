final class org.apache.fop.render.rtf.TextAttributesConverter extends java.lang.Object
{
    private static org.apache.commons.logging.Log log;
    static java.lang.Class class$org$apache$fop$render$rtf$TextAttributesConverter;

    private void <init>()
    {
        org.apache.fop.render.rtf.TextAttributesConverter this;

        this := @this: org.apache.fop.render.rtf.TextAttributesConverter;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }

    public static org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes convertAttributes(org.apache.fop.fo.flow.Block) throws org.apache.fop.apps.FOPException
    {
        org.apache.fop.fo.flow.Block fobj;
        org.apache.fop.render.rtf.FOPRtfAttributes $r0, attrib;
        org.apache.fop.fo.properties.CommonFont $r1;
        java.awt.Color $r2;
        org.apache.fop.fo.properties.CommonBorderPaddingBackground $r3;
        org.apache.fop.fo.properties.CommonMarginBlock $r4;
        int $i0;

        fobj := @parameter0: org.apache.fop.fo.flow.Block;
        $r0 = new org.apache.fop.render.rtf.FOPRtfAttributes;
        specialinvoke $r0.<org.apache.fop.render.rtf.FOPRtfAttributes: void <init>()>();
        attrib = $r0;
        $r1 = virtualinvoke fobj.<org.apache.fop.fo.flow.Block: org.apache.fop.fo.properties.CommonFont getCommonFont()>();
        staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: void attrFont(org.apache.fop.fo.properties.CommonFont,org.apache.fop.render.rtf.FOPRtfAttributes)>($r1, attrib);
        $r2 = virtualinvoke fobj.<org.apache.fop.fo.flow.Block: java.awt.Color getColor()>();
        staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: void attrFontColor(java.awt.Color,org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes)>($r2, attrib);
        $r3 = virtualinvoke fobj.<org.apache.fop.fo.flow.Block: org.apache.fop.fo.properties.CommonBorderPaddingBackground getCommonBorderPaddingBackground()>();
        staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: void attrBlockBackgroundColor(org.apache.fop.fo.properties.CommonBorderPaddingBackground,org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes)>($r3, attrib);
        $r4 = virtualinvoke fobj.<org.apache.fop.fo.flow.Block: org.apache.fop.fo.properties.CommonMarginBlock getCommonMarginBlock()>();
        staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: void attrBlockMargin(org.apache.fop.fo.properties.CommonMarginBlock,org.apache.fop.render.rtf.FOPRtfAttributes)>($r4, attrib);
        $i0 = virtualinvoke fobj.<org.apache.fop.fo.flow.Block: int getTextAlign()>();
        staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: void attrBlockTextAlign(int,org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes)>($i0, attrib);
        $r3 = virtualinvoke fobj.<org.apache.fop.fo.flow.Block: org.apache.fop.fo.properties.CommonBorderPaddingBackground getCommonBorderPaddingBackground()>();
        staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: void attrBorder(org.apache.fop.fo.properties.CommonBorderPaddingBackground,org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes,org.apache.fop.fo.FONode)>($r3, attrib, fobj);
        return attrib;
    }

    public static org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes convertBlockContainerAttributes(org.apache.fop.fo.flow.BlockContainer) throws org.apache.fop.apps.FOPException
    {
        org.apache.fop.fo.flow.BlockContainer fobj;
        org.apache.fop.render.rtf.FOPRtfAttributes $r0, attrib;
        org.apache.fop.fo.properties.CommonBorderPaddingBackground $r1;
        org.apache.fop.fo.properties.CommonMarginBlock $r2;

        fobj := @parameter0: org.apache.fop.fo.flow.BlockContainer;
        $r0 = new org.apache.fop.render.rtf.FOPRtfAttributes;
        specialinvoke $r0.<org.apache.fop.render.rtf.FOPRtfAttributes: void <init>()>();
        attrib = $r0;
        $r1 = virtualinvoke fobj.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.fo.properties.CommonBorderPaddingBackground getCommonBorderPaddingBackground()>();
        staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: void attrBackgroundColor(org.apache.fop.fo.properties.CommonBorderPaddingBackground,org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes)>($r1, attrib);
        $r2 = virtualinvoke fobj.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.fo.properties.CommonMarginBlock getCommonMarginBlock()>();
        staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: void attrBlockMargin(org.apache.fop.fo.properties.CommonMarginBlock,org.apache.fop.render.rtf.FOPRtfAttributes)>($r2, attrib);
        $r1 = virtualinvoke fobj.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.fo.properties.CommonBorderPaddingBackground getCommonBorderPaddingBackground()>();
        staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: void attrBorder(org.apache.fop.fo.properties.CommonBorderPaddingBackground,org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes,org.apache.fop.fo.FONode)>($r1, attrib, fobj);
        return attrib;
    }

    public static org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes convertCharacterAttributes(org.apache.fop.fo.FOText) throws org.apache.fop.apps.FOPException
    {
        org.apache.fop.fo.FOText fobj;
        org.apache.fop.render.rtf.FOPRtfAttributes $r0, attrib;
        org.apache.fop.fo.properties.CommonFont $r1;
        java.awt.Color $r2;
        org.apache.fop.fo.properties.CommonTextDecoration $r3;
        org.apache.fop.datatypes.Length $r4;

        fobj := @parameter0: org.apache.fop.fo.FOText;
        $r0 = new org.apache.fop.render.rtf.FOPRtfAttributes;
        specialinvoke $r0.<org.apache.fop.render.rtf.FOPRtfAttributes: void <init>()>();
        attrib = $r0;
        $r1 = virtualinvoke fobj.<org.apache.fop.fo.FOText: org.apache.fop.fo.properties.CommonFont getCommonFont()>();
        staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: void attrFont(org.apache.fop.fo.properties.CommonFont,org.apache.fop.render.rtf.FOPRtfAttributes)>($r1, attrib);
        $r2 = virtualinvoke fobj.<org.apache.fop.fo.FOText: java.awt.Color getColor()>();
        staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: void attrFontColor(java.awt.Color,org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes)>($r2, attrib);
        $r3 = virtualinvoke fobj.<org.apache.fop.fo.FOText: org.apache.fop.fo.properties.CommonTextDecoration getTextDecoration()>();
        staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: void attrTextDecoration(org.apache.fop.fo.properties.CommonTextDecoration,org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes)>($r3, attrib);
        $r4 = virtualinvoke fobj.<org.apache.fop.fo.FOText: org.apache.fop.datatypes.Length getBaseLineShift()>();
        staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: void attrBaseLineShift(org.apache.fop.datatypes.Length,org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes)>($r4, attrib);
        return attrib;
    }

    public static org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes convertCharacterAttributes(org.apache.fop.fo.flow.PageNumber) throws org.apache.fop.apps.FOPException
    {
        org.apache.fop.fo.flow.PageNumber fobj;
        org.apache.fop.render.rtf.FOPRtfAttributes $r0, attrib;
        org.apache.fop.fo.properties.CommonFont $r1;
        org.apache.fop.fo.properties.CommonTextDecoration $r2;
        org.apache.fop.fo.properties.CommonBorderPaddingBackground $r3;

        fobj := @parameter0: org.apache.fop.fo.flow.PageNumber;
        $r0 = new org.apache.fop.render.rtf.FOPRtfAttributes;
        specialinvoke $r0.<org.apache.fop.render.rtf.FOPRtfAttributes: void <init>()>();
        attrib = $r0;
        $r1 = virtualinvoke fobj.<org.apache.fop.fo.flow.PageNumber: org.apache.fop.fo.properties.CommonFont getCommonFont()>();
        staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: void attrFont(org.apache.fop.fo.properties.CommonFont,org.apache.fop.render.rtf.FOPRtfAttributes)>($r1, attrib);
        $r2 = virtualinvoke fobj.<org.apache.fop.fo.flow.PageNumber: org.apache.fop.fo.properties.CommonTextDecoration getTextDecoration()>();
        staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: void attrTextDecoration(org.apache.fop.fo.properties.CommonTextDecoration,org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes)>($r2, attrib);
        $r3 = virtualinvoke fobj.<org.apache.fop.fo.flow.PageNumber: org.apache.fop.fo.properties.CommonBorderPaddingBackground getCommonBorderPaddingBackground()>();
        staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: void attrBackgroundColor(org.apache.fop.fo.properties.CommonBorderPaddingBackground,org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes)>($r3, attrib);
        return attrib;
    }

    public static org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes convertCharacterAttributes(org.apache.fop.fo.flow.Inline) throws org.apache.fop.apps.FOPException
    {
        org.apache.fop.fo.flow.Inline fobj;
        org.apache.fop.render.rtf.FOPRtfAttributes $r0, attrib;
        org.apache.fop.fo.properties.CommonFont $r1;
        java.awt.Color $r2;
        org.apache.fop.fo.properties.CommonBorderPaddingBackground $r3;

        fobj := @parameter0: org.apache.fop.fo.flow.Inline;
        $r0 = new org.apache.fop.render.rtf.FOPRtfAttributes;
        specialinvoke $r0.<org.apache.fop.render.rtf.FOPRtfAttributes: void <init>()>();
        attrib = $r0;
        $r1 = virtualinvoke fobj.<org.apache.fop.fo.flow.Inline: org.apache.fop.fo.properties.CommonFont getCommonFont()>();
        staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: void attrFont(org.apache.fop.fo.properties.CommonFont,org.apache.fop.render.rtf.FOPRtfAttributes)>($r1, attrib);
        $r2 = virtualinvoke fobj.<org.apache.fop.fo.flow.Inline: java.awt.Color getColor()>();
        staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: void attrFontColor(java.awt.Color,org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes)>($r2, attrib);
        $r3 = virtualinvoke fobj.<org.apache.fop.fo.flow.Inline: org.apache.fop.fo.properties.CommonBorderPaddingBackground getCommonBorderPaddingBackground()>();
        staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: void attrBackgroundColor(org.apache.fop.fo.properties.CommonBorderPaddingBackground,org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes)>($r3, attrib);
        $r3 = virtualinvoke fobj.<org.apache.fop.fo.flow.Inline: org.apache.fop.fo.properties.CommonBorderPaddingBackground getCommonBorderPaddingBackground()>();
        staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: void attrInlineBorder(org.apache.fop.fo.properties.CommonBorderPaddingBackground,org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes)>($r3, attrib);
        return attrib;
    }

    public static org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes convertLeaderAttributes(org.apache.fop.fo.flow.Leader, org.apache.fop.datatypes.PercentBaseContext) throws org.apache.fop.apps.FOPException
    {
        org.apache.fop.fo.flow.Leader fobj;
        org.apache.fop.datatypes.PercentBaseContext context;
        boolean tab, $z0;
        org.apache.fop.render.rtf.FOPRtfAttributes attrib, $r1;
        org.apache.fop.render.rtf.rtflib.rtfdoc.RtfFontManager $r0;
        org.apache.fop.fo.properties.CommonFont $r2;
        java.lang.String $r3, $r11;
        int $i0, $i1;
        org.apache.fop.fo.properties.LengthRangeProperty $r5, $r6;
        org.apache.fop.fo.properties.Property $r7, $r9;
        org.apache.fop.datatypes.Length $r8, $r13;
        org.apache.fop.fo.properties.PercentLength $r10;
        java.awt.Color $r12;
        org.apache.commons.logging.Log $r14;

        fobj := @parameter0: org.apache.fop.fo.flow.Leader;
        context := @parameter1: org.apache.fop.datatypes.PercentBaseContext;
        tab = 0;
        $r1 = new org.apache.fop.render.rtf.FOPRtfAttributes;
        specialinvoke $r1.<org.apache.fop.render.rtf.FOPRtfAttributes: void <init>()>();
        attrib = $r1;
        $r0 = staticinvoke <org.apache.fop.render.rtf.rtflib.rtfdoc.RtfFontManager: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfFontManager getInstance()>();
        $r2 = virtualinvoke fobj.<org.apache.fop.fo.flow.Leader: org.apache.fop.fo.properties.CommonFont getCommonFont()>();
        $r3 = virtualinvoke $r2.<org.apache.fop.fo.properties.CommonFont: java.lang.String getFirstFontFamily()>();
        $i0 = virtualinvoke $r0.<org.apache.fop.render.rtf.rtflib.rtfdoc.RtfFontManager: int getFontNumber(java.lang.String)>($r3);
        virtualinvoke attrib.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,int)>("f", $i0);
        $r5 = virtualinvoke fobj.<org.apache.fop.fo.flow.Leader: org.apache.fop.fo.properties.LengthRangeProperty getLeaderLength()>();
        if $r5 == null goto label0;

        $r6 = virtualinvoke fobj.<org.apache.fop.fo.flow.Leader: org.apache.fop.fo.properties.LengthRangeProperty getLeaderLength()>();
        $r7 = virtualinvoke $r6.<org.apache.fop.fo.properties.LengthRangeProperty: org.apache.fop.fo.properties.Property getMaximum(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $r8 = virtualinvoke $r7.<org.apache.fop.fo.properties.Property: org.apache.fop.datatypes.Length getLength()>();
        $i0 = interfaceinvoke $r8.<org.apache.fop.datatypes.Length: int getValue(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $i0 = staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: int convertMptToTwips(int)>($i0);
        virtualinvoke attrib.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,int)>("lwidth", $i0);
        $r5 = virtualinvoke fobj.<org.apache.fop.fo.flow.Leader: org.apache.fop.fo.properties.LengthRangeProperty getLeaderLength()>();
        $r9 = virtualinvoke $r5.<org.apache.fop.fo.properties.LengthRangeProperty: org.apache.fop.fo.properties.Property getMaximum(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $z0 = $r9 instanceof org.apache.fop.fo.properties.PercentLength;
        if $z0 == 0 goto label0;

        $r5 = virtualinvoke fobj.<org.apache.fop.fo.flow.Leader: org.apache.fop.fo.properties.LengthRangeProperty getLeaderLength()>();
        $r9 = virtualinvoke $r5.<org.apache.fop.fo.properties.LengthRangeProperty: org.apache.fop.fo.properties.Property getMaximum(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $r10 = (org.apache.fop.fo.properties.PercentLength) $r9;
        $r11 = virtualinvoke $r10.<org.apache.fop.fo.properties.PercentLength: java.lang.String getString()>();
        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("100.0%");
        if $z0 == 0 goto label0;

        virtualinvoke attrib.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,int)>("tabuse", 1);
        tab = 1;

     label0:
        $r12 = virtualinvoke fobj.<org.apache.fop.fo.flow.Leader: java.awt.Color getColor()>();
        staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: void attrFontColor(java.awt.Color,org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes)>($r12, attrib);
        $r13 = virtualinvoke fobj.<org.apache.fop.fo.flow.Leader: org.apache.fop.datatypes.Length getLeaderPatternWidth()>();
        if $r13 == null goto label1;

     label1:
        $i1 = virtualinvoke fobj.<org.apache.fop.fo.flow.Leader: int getLeaderPattern()>();
        lookupswitch($i1)
        {
            case 35: goto label2;
            case 123: goto label5;
            case 134: goto label4;
            case 158: goto label20;
            default: goto label21;
        };

     label2:
        if tab == 0 goto label3;

        virtualinvoke attrib.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,java.lang.String)>("tablead", "tldot");
        goto label21;

     label3:
        virtualinvoke attrib.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,java.lang.String)>("tablead", "uld");
        goto label21;

     label4:
        goto label21;

     label5:
        $r13 = virtualinvoke fobj.<org.apache.fop.fo.flow.Leader: org.apache.fop.datatypes.Length getRuleThickness()>();
        if $r13 == null goto label6;

        $r14 = <org.apache.fop.render.rtf.TextAttributesConverter: org.apache.commons.logging.Log log>;
        interfaceinvoke $r14.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("RTF: fo:leader rule-thickness not supported");

     label6:
        $i1 = virtualinvoke fobj.<org.apache.fop.fo.flow.Leader: int getRuleStyle()>();
        lookupswitch($i1)
        {
            case 31: goto label9;
            case 36: goto label11;
            case 37: goto label13;
            case 55: goto label15;
            case 119: goto label17;
            case 133: goto label7;
            default: goto label19;
        };

     label7:
        if tab == 0 goto label8;

        virtualinvoke attrib.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,java.lang.String)>("tablead", "tlth");
        goto label21;

     label8:
        virtualinvoke attrib.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,java.lang.String)>("tablead", "ulth");
        goto label21;

     label9:
        if tab == 0 goto label10;

        virtualinvoke attrib.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,java.lang.String)>("tablead", "tlmdot");
        goto label21;

     label10:
        virtualinvoke attrib.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,java.lang.String)>("tablead", "uldash");
        goto label21;

     label11:
        if tab == 0 goto label12;

        virtualinvoke attrib.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,java.lang.String)>("tablead", "tldot");
        goto label21;

     label12:
        virtualinvoke attrib.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,java.lang.String)>("tablead", "uld");
        goto label21;

     label13:
        if tab == 0 goto label14;

        virtualinvoke attrib.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,java.lang.String)>("tablead", "tleq");
        goto label21;

     label14:
        virtualinvoke attrib.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,java.lang.String)>("tablead", "uldb");
        goto label21;

     label15:
        if tab == 0 goto label16;

        virtualinvoke attrib.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,java.lang.String)>("tablead", "tlhyph");
        goto label21;

     label16:
        virtualinvoke attrib.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,java.lang.String)>("tablead", "ulhwave");
        goto label21;

     label17:
        if tab == 0 goto label18;

        virtualinvoke attrib.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,java.lang.String)>("tablead", "tlul");
        goto label21;

     label18:
        virtualinvoke attrib.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,java.lang.String)>("tablead", "ulthdashdd");
        goto label21;

     label19:
        goto label21;

     label20:
        $r14 = <org.apache.fop.render.rtf.TextAttributesConverter: org.apache.commons.logging.Log log>;
        interfaceinvoke $r14.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("RTF: fo:leader use-content not supported");
        goto label21;

     label21:
        $i1 = virtualinvoke fobj.<org.apache.fop.fo.flow.Leader: int getLeaderAlignment()>();
        if $i1 != 109 goto label22;

        $r14 = <org.apache.fop.render.rtf.TextAttributesConverter: org.apache.commons.logging.Log log>;
        interfaceinvoke $r14.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("RTF: fo:leader reference-area not supported");

     label22:
        return attrib;
    }

    private static int convertMptToTwips(int)
    {
        int mpt, $i0;
        org.apache.fop.render.rtf.FoUnitsConverter $r0;
        float $f0;

        mpt := @parameter0: int;
        $r0 = staticinvoke <org.apache.fop.render.rtf.FoUnitsConverter: org.apache.fop.render.rtf.FoUnitsConverter getInstance()>();
        $f0 = virtualinvoke $r0.<org.apache.fop.render.rtf.FoUnitsConverter: float convertMptToTwips(int)>(mpt);
        $i0 = staticinvoke <java.lang.Math: int round(float)>($f0);
        return $i0;
    }

    private static void attrFont(org.apache.fop.fo.properties.CommonFont, org.apache.fop.render.rtf.FOPRtfAttributes)
    {
        org.apache.fop.fo.properties.CommonFont font;
        org.apache.fop.render.rtf.FOPRtfAttributes rtfAttr;
        org.apache.fop.render.rtf.rtflib.rtfdoc.RtfFontManager $r0;
        java.lang.String $r1;
        int $i0, $i1;
        org.apache.fop.datatypes.Length $r3;

        font := @parameter0: org.apache.fop.fo.properties.CommonFont;
        rtfAttr := @parameter1: org.apache.fop.render.rtf.FOPRtfAttributes;
        $r0 = staticinvoke <org.apache.fop.render.rtf.rtflib.rtfdoc.RtfFontManager: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfFontManager getInstance()>();
        $r1 = virtualinvoke font.<org.apache.fop.fo.properties.CommonFont: java.lang.String getFirstFontFamily()>();
        $i0 = virtualinvoke $r0.<org.apache.fop.render.rtf.rtflib.rtfdoc.RtfFontManager: int getFontNumber(java.lang.String)>($r1);
        virtualinvoke rtfAttr.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,int)>("f", $i0);
        $r3 = font.<org.apache.fop.fo.properties.CommonFont: org.apache.fop.datatypes.Length fontSize>;
        virtualinvoke rtfAttr.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes setHalfPoints(java.lang.String,org.apache.fop.datatypes.Length)>("fs", $r3);
        $i1 = virtualinvoke font.<org.apache.fop.fo.properties.CommonFont: int getFontWeight()>();
        if $i1 == 175 goto label0;

        $i1 = virtualinvoke font.<org.apache.fop.fo.properties.CommonFont: int getFontWeight()>();
        if $i1 == 176 goto label0;

        $i1 = virtualinvoke font.<org.apache.fop.fo.properties.CommonFont: int getFontWeight()>();
        if $i1 != 177 goto label1;

     label0:
        virtualinvoke rtfAttr.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,int)>("b", 1);
        goto label2;

     label1:
        virtualinvoke rtfAttr.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,int)>("b", 0);

     label2:
        $i1 = virtualinvoke font.<org.apache.fop.fo.properties.CommonFont: int getFontStyle()>();
        if $i1 != 164 goto label3;

        virtualinvoke rtfAttr.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,int)>("i", 1);
        goto label4;

     label3:
        virtualinvoke rtfAttr.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,int)>("i", 0);

     label4:
        return;
    }

    private static void attrFontColor(java.awt.Color, org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes)
    {
        java.awt.Color colorType;
        org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes rtfAttr;
        int $i0, $i1;

        colorType := @parameter0: java.awt.Color;
        rtfAttr := @parameter1: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes;
        if colorType == null goto label1;

        $i0 = virtualinvoke colorType.<java.awt.Color: int getAlpha()>();
        if $i0 != 0 goto label0;

        $i0 = virtualinvoke colorType.<java.awt.Color: int getRed()>();
        if $i0 != 0 goto label0;

        $i0 = virtualinvoke colorType.<java.awt.Color: int getGreen()>();
        if $i0 != 0 goto label0;

        $i0 = virtualinvoke colorType.<java.awt.Color: int getBlue()>();
        if $i0 == 0 goto label1;

     label0:
        $i1 = staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: int convertFOPColorToRTF(java.awt.Color)>(colorType);
        virtualinvoke rtfAttr.<org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,int)>("cf", $i1);

     label1:
        return;
    }

    private static void attrTextDecoration(org.apache.fop.fo.properties.CommonTextDecoration, org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes)
    {
        org.apache.fop.fo.properties.CommonTextDecoration textDecoration;
        org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes rtfAttr;
        boolean $z0;

        textDecoration := @parameter0: org.apache.fop.fo.properties.CommonTextDecoration;
        rtfAttr := @parameter1: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes;
        if textDecoration != null goto label0;

        virtualinvoke rtfAttr.<org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,int)>("ul", 0);
        virtualinvoke rtfAttr.<org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,int)>("strike", 0);
        return;

     label0:
        $z0 = virtualinvoke textDecoration.<org.apache.fop.fo.properties.CommonTextDecoration: boolean hasUnderline()>();
        if $z0 == 0 goto label1;

        virtualinvoke rtfAttr.<org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,int)>("ul", 1);
        goto label2;

     label1:
        virtualinvoke rtfAttr.<org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,int)>("ul", 0);

     label2:
        $z0 = virtualinvoke textDecoration.<org.apache.fop.fo.properties.CommonTextDecoration: boolean hasLineThrough()>();
        if $z0 == 0 goto label3;

        virtualinvoke rtfAttr.<org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,int)>("strike", 1);
        goto label4;

     label3:
        virtualinvoke rtfAttr.<org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,int)>("strike", 0);

     label4:
        return;
    }

    private static void attrBlockMargin(org.apache.fop.fo.properties.CommonMarginBlock, org.apache.fop.render.rtf.FOPRtfAttributes)
    {
        org.apache.fop.fo.properties.CommonMarginBlock cmb;
        org.apache.fop.render.rtf.FOPRtfAttributes rtfAttr;
        org.apache.fop.fo.properties.SpaceProperty $r0;
        org.apache.fop.fo.properties.Property $r1;
        org.apache.fop.datatypes.Length $r2;

        cmb := @parameter0: org.apache.fop.fo.properties.CommonMarginBlock;
        rtfAttr := @parameter1: org.apache.fop.render.rtf.FOPRtfAttributes;
        $r0 = cmb.<org.apache.fop.fo.properties.CommonMarginBlock: org.apache.fop.fo.properties.SpaceProperty spaceBefore>;
        $r1 = virtualinvoke $r0.<org.apache.fop.fo.properties.SpaceProperty: org.apache.fop.fo.properties.Property getOptimum(org.apache.fop.datatypes.PercentBaseContext)>(null);
        $r2 = virtualinvoke $r1.<org.apache.fop.fo.properties.Property: org.apache.fop.datatypes.Length getLength()>();
        virtualinvoke rtfAttr.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes setTwips(java.lang.String,org.apache.fop.datatypes.Length)>("sb", $r2);
        $r0 = cmb.<org.apache.fop.fo.properties.CommonMarginBlock: org.apache.fop.fo.properties.SpaceProperty spaceAfter>;
        $r1 = virtualinvoke $r0.<org.apache.fop.fo.properties.SpaceProperty: org.apache.fop.fo.properties.Property getOptimum(org.apache.fop.datatypes.PercentBaseContext)>(null);
        $r2 = virtualinvoke $r1.<org.apache.fop.fo.properties.Property: org.apache.fop.datatypes.Length getLength()>();
        virtualinvoke rtfAttr.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes setTwips(java.lang.String,org.apache.fop.datatypes.Length)>("sa", $r2);
        $r2 = cmb.<org.apache.fop.fo.properties.CommonMarginBlock: org.apache.fop.datatypes.Length startIndent>;
        virtualinvoke rtfAttr.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes setTwips(java.lang.String,org.apache.fop.datatypes.Length)>("li", $r2);
        $r2 = cmb.<org.apache.fop.fo.properties.CommonMarginBlock: org.apache.fop.datatypes.Length endIndent>;
        virtualinvoke rtfAttr.<org.apache.fop.render.rtf.FOPRtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes setTwips(java.lang.String,org.apache.fop.datatypes.Length)>("ri", $r2);
        return;
    }

    private static void attrBlockTextAlign(int, org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes)
    {
        int alignment;
        org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes rtfAttr;
        null_type rtfValue;
        java.lang.String rtfValue;

        alignment := @parameter0: int;
        rtfAttr := @parameter1: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes;
        rtfValue = null;
        lookupswitch(alignment)
        {
            case 23: goto label0;
            case 39: goto label1;
            case 70: goto label2;
            default: goto label3;
        };

     label0:
        rtfValue = "qc";
        goto label4;

     label1:
        rtfValue = "qr";
        goto label4;

     label2:
        rtfValue = "qj";
        goto label4;

     label3:
        rtfValue = "ql";

     label4:
        virtualinvoke rtfAttr.<org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String)>(rtfValue);
        return;
    }

    private static void attrBlockBackgroundColor(org.apache.fop.fo.properties.CommonBorderPaddingBackground, org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes)
    {
        org.apache.fop.fo.properties.CommonBorderPaddingBackground bpb;
        org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes rtfAttr;
        boolean $z0;
        java.awt.Color $r1;
        int $i0;

        bpb := @parameter0: org.apache.fop.fo.properties.CommonBorderPaddingBackground;
        rtfAttr := @parameter1: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes;
        $z0 = virtualinvoke bpb.<org.apache.fop.fo.properties.CommonBorderPaddingBackground: boolean hasBackground()>();
        if $z0 == 0 goto label0;

        virtualinvoke rtfAttr.<org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,int)>("shading", 10000);
        $r1 = bpb.<org.apache.fop.fo.properties.CommonBorderPaddingBackground: java.awt.Color backgroundColor>;
        $i0 = staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: int convertFOPColorToRTF(java.awt.Color)>($r1);
        virtualinvoke rtfAttr.<org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,int)>("cfpat", $i0);

     label0:
        return;
    }

    private static void attrBorder(org.apache.fop.fo.properties.CommonBorderPaddingBackground, org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes, org.apache.fop.fo.FONode)
    {
        org.apache.fop.fo.properties.CommonBorderPaddingBackground bpb;
        org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes rtfAttr;
        org.apache.fop.fo.FONode fobj, $r0;
        boolean $z0;

        bpb := @parameter0: org.apache.fop.fo.properties.CommonBorderPaddingBackground;
        rtfAttr := @parameter1: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes;
        fobj := @parameter2: org.apache.fop.fo.FONode;
        $r0 = virtualinvoke fobj.<org.apache.fop.fo.FONode: org.apache.fop.fo.FONode getParent()>();
        $z0 = staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: boolean hasBorder(org.apache.fop.fo.FONode)>($r0);
        if $z0 == 0 goto label0;

        staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: void attrInlineBorder(org.apache.fop.fo.properties.CommonBorderPaddingBackground,org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes)>(bpb, rtfAttr);
        return;

     label0:
        staticinvoke <org.apache.fop.render.rtf.BorderAttributesConverter: void makeBorder(org.apache.fop.fo.properties.CommonBorderPaddingBackground,int,org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes,java.lang.String)>(bpb, 0, rtfAttr, "brdrt");
        staticinvoke <org.apache.fop.render.rtf.BorderAttributesConverter: void makeBorder(org.apache.fop.fo.properties.CommonBorderPaddingBackground,int,org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes,java.lang.String)>(bpb, 1, rtfAttr, "brdrb");
        staticinvoke <org.apache.fop.render.rtf.BorderAttributesConverter: void makeBorder(org.apache.fop.fo.properties.CommonBorderPaddingBackground,int,org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes,java.lang.String)>(bpb, 2, rtfAttr, "brdrl");
        staticinvoke <org.apache.fop.render.rtf.BorderAttributesConverter: void makeBorder(org.apache.fop.fo.properties.CommonBorderPaddingBackground,int,org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes,java.lang.String)>(bpb, 3, rtfAttr, "brdrr");
        return;
    }

    private static boolean hasBorder(org.apache.fop.fo.FONode)
    {
        org.apache.fop.fo.FONode node;
        org.apache.fop.fo.properties.CommonBorderPaddingBackground commonBorderPaddingBackground;
        org.apache.fop.fo.flow.Block block;
        org.apache.fop.fo.flow.BlockContainer container;
        boolean $z0;

        node := @parameter0: org.apache.fop.fo.FONode;

     label0:
        if node == null goto label4;

        commonBorderPaddingBackground = null;
        $z0 = node instanceof org.apache.fop.fo.flow.Block;
        if $z0 == 0 goto label1;

        block = (org.apache.fop.fo.flow.Block) node;
        commonBorderPaddingBackground = virtualinvoke block.<org.apache.fop.fo.flow.Block: org.apache.fop.fo.properties.CommonBorderPaddingBackground getCommonBorderPaddingBackground()>();
        goto label2;

     label1:
        $z0 = node instanceof org.apache.fop.fo.flow.BlockContainer;
        if $z0 == 0 goto label2;

        container = (org.apache.fop.fo.flow.BlockContainer) node;
        commonBorderPaddingBackground = virtualinvoke container.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.fo.properties.CommonBorderPaddingBackground getCommonBorderPaddingBackground()>();

     label2:
        if commonBorderPaddingBackground == null goto label3;

        $z0 = virtualinvoke commonBorderPaddingBackground.<org.apache.fop.fo.properties.CommonBorderPaddingBackground: boolean hasBorder()>();
        if $z0 == 0 goto label3;

        return 1;

     label3:
        node = virtualinvoke node.<org.apache.fop.fo.FONode: org.apache.fop.fo.FONode getParent()>();
        goto label0;

     label4:
        return 0;
    }

    private static void attrInlineBorder(org.apache.fop.fo.properties.CommonBorderPaddingBackground, org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes)
    {
        org.apache.fop.fo.properties.CommonBorderPaddingBackground bpb;
        org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes rtfAttr;

        bpb := @parameter0: org.apache.fop.fo.properties.CommonBorderPaddingBackground;
        rtfAttr := @parameter1: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes;
        staticinvoke <org.apache.fop.render.rtf.BorderAttributesConverter: void makeBorder(org.apache.fop.fo.properties.CommonBorderPaddingBackground,int,org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes,java.lang.String)>(bpb, 0, rtfAttr, "chbrdr");
        return;
    }

    private static void attrBackgroundColor(org.apache.fop.fo.properties.CommonBorderPaddingBackground, org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes)
    {
        org.apache.fop.fo.properties.CommonBorderPaddingBackground bpb;
        org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes rtfAttr;
        java.awt.Color fopValue;
        boolean rtfColor;
        int $i0, rtfColor;

        bpb := @parameter0: org.apache.fop.fo.properties.CommonBorderPaddingBackground;
        rtfAttr := @parameter1: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes;
        fopValue = bpb.<org.apache.fop.fo.properties.CommonBorderPaddingBackground: java.awt.Color backgroundColor>;
        rtfColor = 0;
        if fopValue == null goto label0;

        $i0 = virtualinvoke fopValue.<java.awt.Color: int getRed()>();
        if $i0 != 0 goto label1;

        $i0 = virtualinvoke fopValue.<java.awt.Color: int getGreen()>();
        if $i0 != 0 goto label1;

        $i0 = virtualinvoke fopValue.<java.awt.Color: int getBlue()>();
        if $i0 != 0 goto label1;

        $i0 = virtualinvoke fopValue.<java.awt.Color: int getAlpha()>();
        if $i0 != 0 goto label1;

     label0:
        return;

     label1:
        rtfColor = staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: int convertFOPColorToRTF(java.awt.Color)>(fopValue);
        virtualinvoke rtfAttr.<org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String,int)>("chcbpat", rtfColor);
        return;
    }

    private static void attrBaseLineShift(org.apache.fop.datatypes.Length, org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes)
    {
        org.apache.fop.datatypes.Length baselineShift;
        org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes rtfAttr;
        int s;

        baselineShift := @parameter0: org.apache.fop.datatypes.Length;
        rtfAttr := @parameter1: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes;
        s = interfaceinvoke baselineShift.<org.apache.fop.datatypes.Length: int getEnum()>();
        if s != 138 goto label0;

        virtualinvoke rtfAttr.<org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String)>("super");
        goto label1;

     label0:
        if s != 137 goto label1;

        virtualinvoke rtfAttr.<org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfAttributes set(java.lang.String)>("sub");

     label1:
        return;
    }

    public static int convertFOPColorToRTF(java.awt.Color)
    {
        java.awt.Color fopColor;
        int redComponent, greenComponent, blueComponent, $i0;
        org.apache.fop.render.rtf.rtflib.rtfdoc.RtfColorTable $r0;
        java.lang.Integer $r1;

        fopColor := @parameter0: java.awt.Color;
        redComponent = virtualinvoke fopColor.<java.awt.Color: int getRed()>();
        greenComponent = virtualinvoke fopColor.<java.awt.Color: int getGreen()>();
        blueComponent = virtualinvoke fopColor.<java.awt.Color: int getBlue()>();
        $r0 = staticinvoke <org.apache.fop.render.rtf.rtflib.rtfdoc.RtfColorTable: org.apache.fop.render.rtf.rtflib.rtfdoc.RtfColorTable getInstance()>();
        $r1 = virtualinvoke $r0.<org.apache.fop.render.rtf.rtflib.rtfdoc.RtfColorTable: java.lang.Integer getColorNumber(int,int,int)>(redComponent, greenComponent, blueComponent);
        $i0 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();
        return $i0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException l1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        l1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(l1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.apache.commons.logging.Log $r1;

        $r0 = <org.apache.fop.render.rtf.TextAttributesConverter: java.lang.Class class$org$apache$fop$render$rtf$TextAttributesConverter>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.fop.render.rtf.TextAttributesConverter: java.lang.Class class$(java.lang.String)>("org.apache.fop.render.rtf.TextAttributesConverter");
        <org.apache.fop.render.rtf.TextAttributesConverter: java.lang.Class class$org$apache$fop$render$rtf$TextAttributesConverter> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.fop.render.rtf.TextAttributesConverter: java.lang.Class class$org$apache$fop$render$rtf$TextAttributesConverter>;

     label1:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r0);
        <org.apache.fop.render.rtf.TextAttributesConverter: org.apache.commons.logging.Log log> = $r1;
        return;
    }
}
