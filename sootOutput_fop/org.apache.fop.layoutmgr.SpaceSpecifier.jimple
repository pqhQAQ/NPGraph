public class org.apache.fop.layoutmgr.SpaceSpecifier extends java.lang.Object implements java.lang.Cloneable
{
    private boolean startsReferenceArea;
    private boolean hasForcing;
    private java.util.List spaceVals;

    public void <init>(boolean)
    {
        org.apache.fop.layoutmgr.SpaceSpecifier this;
        boolean startsReferenceArea;
        java.util.ArrayList $r0;

        this := @this: org.apache.fop.layoutmgr.SpaceSpecifier;
        startsReferenceArea := @parameter0: boolean;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<org.apache.fop.layoutmgr.SpaceSpecifier: boolean hasForcing> = 0;
        $r0 = new java.util.ArrayList;
        specialinvoke $r0.<java.util.ArrayList: void <init>()>();
        this.<org.apache.fop.layoutmgr.SpaceSpecifier: java.util.List spaceVals> = $r0;
        this.<org.apache.fop.layoutmgr.SpaceSpecifier: boolean startsReferenceArea> = startsReferenceArea;
        return;
    }

    public java.lang.Object clone()
    {
        org.apache.fop.layoutmgr.SpaceSpecifier this, ss;
        java.lang.CloneNotSupportedException cnse, $r5;
        java.lang.Object $r0;
        boolean $z0;
        java.util.ArrayList $r1;
        java.util.List $r2, $r3;

        this := @this: org.apache.fop.layoutmgr.SpaceSpecifier;

     label0:
        $r0 = specialinvoke this.<java.lang.Object: java.lang.Object clone()>();
        ss = (org.apache.fop.layoutmgr.SpaceSpecifier) $r0;
        $z0 = this.<org.apache.fop.layoutmgr.SpaceSpecifier: boolean startsReferenceArea>;
        ss.<org.apache.fop.layoutmgr.SpaceSpecifier: boolean startsReferenceArea> = $z0;
        $z0 = this.<org.apache.fop.layoutmgr.SpaceSpecifier: boolean hasForcing>;
        ss.<org.apache.fop.layoutmgr.SpaceSpecifier: boolean hasForcing> = $z0;
        $r1 = new java.util.ArrayList;
        specialinvoke $r1.<java.util.ArrayList: void <init>()>();
        ss.<org.apache.fop.layoutmgr.SpaceSpecifier: java.util.List spaceVals> = $r1;
        $r2 = ss.<org.apache.fop.layoutmgr.SpaceSpecifier: java.util.List spaceVals>;
        $r3 = this.<org.apache.fop.layoutmgr.SpaceSpecifier: java.util.List spaceVals>;
        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r3);

     label1:
        return ss;

     label2:
        $r5 := @caughtexception;
        cnse = $r5;
        return null;

        catch java.lang.CloneNotSupportedException from label0 to label1 with label2;
    }

    public void clear()
    {
        org.apache.fop.layoutmgr.SpaceSpecifier this;
        java.util.List $r0;

        this := @this: org.apache.fop.layoutmgr.SpaceSpecifier;
        this.<org.apache.fop.layoutmgr.SpaceSpecifier: boolean hasForcing> = 0;
        $r0 = this.<org.apache.fop.layoutmgr.SpaceSpecifier: java.util.List spaceVals>;
        interfaceinvoke $r0.<java.util.List: void clear()>();
        return;
    }

    public boolean hasSpaces()
    {
        org.apache.fop.layoutmgr.SpaceSpecifier this;
        java.util.List $r0;
        int $i0;
        boolean $z0;

        this := @this: org.apache.fop.layoutmgr.SpaceSpecifier;
        $r0 = this.<org.apache.fop.layoutmgr.SpaceSpecifier: java.util.List spaceVals>;
        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();
        if $i0 <= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public void addSpace(org.apache.fop.traits.SpaceVal)
    {
        org.apache.fop.layoutmgr.SpaceSpecifier this;
        org.apache.fop.traits.SpaceVal moreSpace;
        boolean $z0;
        java.util.List $r0;
        org.apache.fop.traits.MinOptMax $r1;
        int $i0;

        this := @this: org.apache.fop.layoutmgr.SpaceSpecifier;
        moreSpace := @parameter0: org.apache.fop.traits.SpaceVal;
        $z0 = this.<org.apache.fop.layoutmgr.SpaceSpecifier: boolean startsReferenceArea>;
        if $z0 == 0 goto label0;

        $z0 = virtualinvoke moreSpace.<org.apache.fop.traits.SpaceVal: boolean isConditional()>();
        if $z0 == 0 goto label0;

        $r0 = this.<org.apache.fop.layoutmgr.SpaceSpecifier: java.util.List spaceVals>;
        $z0 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>();
        if $z0 != 0 goto label4;

     label0:
        $z0 = virtualinvoke moreSpace.<org.apache.fop.traits.SpaceVal: boolean isForcing()>();
        if $z0 == 0 goto label2;

        $z0 = this.<org.apache.fop.layoutmgr.SpaceSpecifier: boolean hasForcing>;
        if $z0 != 0 goto label1;

        $r0 = this.<org.apache.fop.layoutmgr.SpaceSpecifier: java.util.List spaceVals>;
        interfaceinvoke $r0.<java.util.List: void clear()>();
        this.<org.apache.fop.layoutmgr.SpaceSpecifier: boolean hasForcing> = 1;

     label1:
        $r0 = this.<org.apache.fop.layoutmgr.SpaceSpecifier: java.util.List spaceVals>;
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(moreSpace);
        goto label4;

     label2:
        $z0 = this.<org.apache.fop.layoutmgr.SpaceSpecifier: boolean hasForcing>;
        if $z0 != 0 goto label4;

        $r1 = virtualinvoke moreSpace.<org.apache.fop.traits.SpaceVal: org.apache.fop.traits.MinOptMax getSpace()>();
        $i0 = $r1.<org.apache.fop.traits.MinOptMax: int min>;
        if $i0 != 0 goto label3;

        $r1 = virtualinvoke moreSpace.<org.apache.fop.traits.SpaceVal: org.apache.fop.traits.MinOptMax getSpace()>();
        $i0 = $r1.<org.apache.fop.traits.MinOptMax: int opt>;
        if $i0 != 0 goto label3;

        $r1 = virtualinvoke moreSpace.<org.apache.fop.traits.SpaceVal: org.apache.fop.traits.MinOptMax getSpace()>();
        $i0 = $r1.<org.apache.fop.traits.MinOptMax: int max>;
        if $i0 == 0 goto label4;

     label3:
        $r0 = this.<org.apache.fop.layoutmgr.SpaceSpecifier: java.util.List spaceVals>;
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(moreSpace);

     label4:
        return;
    }

    public org.apache.fop.traits.MinOptMax resolve(boolean)
    {
        org.apache.fop.layoutmgr.SpaceSpecifier this;
        boolean endsReferenceArea, $z0;
        int lastIndex, maxPrecedence, index, $i0, $i1;
        org.apache.fop.traits.SpaceVal spaceVal;
        org.apache.fop.traits.MinOptMax resolvedSpace, $r2, $r3;
        java.util.List $r0;
        java.lang.Object $r1;

        this := @this: org.apache.fop.layoutmgr.SpaceSpecifier;
        endsReferenceArea := @parameter0: boolean;
        $r0 = this.<org.apache.fop.layoutmgr.SpaceSpecifier: java.util.List spaceVals>;
        lastIndex = interfaceinvoke $r0.<java.util.List: int size()>();
        if endsReferenceArea == 0 goto label2;

     label0:
        if lastIndex <= 0 goto label2;

        $r0 = this.<org.apache.fop.layoutmgr.SpaceSpecifier: java.util.List spaceVals>;
        $i0 = lastIndex - 1;
        $r1 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);
        spaceVal = (org.apache.fop.traits.SpaceVal) $r1;
        $z0 = virtualinvoke spaceVal.<org.apache.fop.traits.SpaceVal: boolean isConditional()>();
        if $z0 != 0 goto label1;

        goto label2;

     label1:
        lastIndex = lastIndex + -1;
        goto label0;

     label2:
        $r2 = new org.apache.fop.traits.MinOptMax;
        specialinvoke $r2.<org.apache.fop.traits.MinOptMax: void <init>(int)>(0);
        resolvedSpace = $r2;
        maxPrecedence = -1;
        index = 0;

     label3:
        if index >= lastIndex goto label9;

        $r0 = this.<org.apache.fop.layoutmgr.SpaceSpecifier: java.util.List spaceVals>;
        $r1 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(index);
        spaceVal = (org.apache.fop.traits.SpaceVal) $r1;
        $z0 = this.<org.apache.fop.layoutmgr.SpaceSpecifier: boolean hasForcing>;
        if $z0 == 0 goto label4;

        $r3 = virtualinvoke spaceVal.<org.apache.fop.traits.SpaceVal: org.apache.fop.traits.MinOptMax getSpace()>();
        virtualinvoke resolvedSpace.<org.apache.fop.traits.MinOptMax: void add(org.apache.fop.traits.MinOptMax)>($r3);
        goto label8;

     label4:
        $i1 = virtualinvoke spaceVal.<org.apache.fop.traits.SpaceVal: int getPrecedence()>();
        if $i1 <= maxPrecedence goto label5;

        maxPrecedence = virtualinvoke spaceVal.<org.apache.fop.traits.SpaceVal: int getPrecedence()>();
        resolvedSpace = virtualinvoke spaceVal.<org.apache.fop.traits.SpaceVal: org.apache.fop.traits.MinOptMax getSpace()>();
        goto label8;

     label5:
        $i1 = virtualinvoke spaceVal.<org.apache.fop.traits.SpaceVal: int getPrecedence()>();
        if $i1 != maxPrecedence goto label8;

        $r2 = virtualinvoke spaceVal.<org.apache.fop.traits.SpaceVal: org.apache.fop.traits.MinOptMax getSpace()>();
        $i1 = $r2.<org.apache.fop.traits.MinOptMax: int opt>;
        $i0 = resolvedSpace.<org.apache.fop.traits.MinOptMax: int opt>;
        if $i1 <= $i0 goto label6;

        resolvedSpace = virtualinvoke spaceVal.<org.apache.fop.traits.SpaceVal: org.apache.fop.traits.MinOptMax getSpace()>();
        goto label8;

     label6:
        $r2 = virtualinvoke spaceVal.<org.apache.fop.traits.SpaceVal: org.apache.fop.traits.MinOptMax getSpace()>();
        $i1 = $r2.<org.apache.fop.traits.MinOptMax: int opt>;
        $i0 = resolvedSpace.<org.apache.fop.traits.MinOptMax: int opt>;
        if $i1 != $i0 goto label8;

        $i1 = resolvedSpace.<org.apache.fop.traits.MinOptMax: int min>;
        $r3 = virtualinvoke spaceVal.<org.apache.fop.traits.SpaceVal: org.apache.fop.traits.MinOptMax getSpace()>();
        $i0 = $r3.<org.apache.fop.traits.MinOptMax: int min>;
        if $i1 >= $i0 goto label7;

        $r3 = virtualinvoke spaceVal.<org.apache.fop.traits.SpaceVal: org.apache.fop.traits.MinOptMax getSpace()>();
        $i0 = $r3.<org.apache.fop.traits.MinOptMax: int min>;
        resolvedSpace.<org.apache.fop.traits.MinOptMax: int min> = $i0;

     label7:
        $i1 = resolvedSpace.<org.apache.fop.traits.MinOptMax: int max>;
        $r3 = virtualinvoke spaceVal.<org.apache.fop.traits.SpaceVal: org.apache.fop.traits.MinOptMax getSpace()>();
        $i0 = $r3.<org.apache.fop.traits.MinOptMax: int max>;
        if $i1 <= $i0 goto label8;

        $r3 = virtualinvoke spaceVal.<org.apache.fop.traits.SpaceVal: org.apache.fop.traits.MinOptMax getSpace()>();
        $i0 = $r3.<org.apache.fop.traits.MinOptMax: int max>;
        resolvedSpace.<org.apache.fop.traits.MinOptMax: int max> = $i0;

     label8:
        index = index + 1;
        goto label3;

     label9:
        return resolvedSpace;
    }

    public java.lang.String toString()
    {
        org.apache.fop.layoutmgr.SpaceSpecifier this;
        java.lang.StringBuffer $r0;
        org.apache.fop.traits.MinOptMax $r1;
        java.lang.String $r2, $r3;

        this := @this: org.apache.fop.layoutmgr.SpaceSpecifier;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Space Specifier (resolved at begin/end of ref. area:):\n");
        $r1 = virtualinvoke this.<org.apache.fop.layoutmgr.SpaceSpecifier: org.apache.fop.traits.MinOptMax resolve(boolean)>(0);
        $r2 = virtualinvoke $r1.<org.apache.fop.traits.MinOptMax: java.lang.String toString()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");
        $r1 = virtualinvoke this.<org.apache.fop.layoutmgr.SpaceSpecifier: org.apache.fop.traits.MinOptMax resolve(boolean)>(1);
        $r2 = virtualinvoke $r1.<org.apache.fop.traits.MinOptMax: java.lang.String toString()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r3;
    }
}
