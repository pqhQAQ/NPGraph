public class org.apache.fop.fo.flow.BlockContainer extends org.apache.fop.fo.FObj implements org.apache.fop.fo.properties.BreakPropertySet
{
    private org.apache.fop.fo.properties.CommonAbsolutePosition commonAbsolutePosition;
    private org.apache.fop.fo.properties.CommonBorderPaddingBackground commonBorderPaddingBackground;
    private org.apache.fop.fo.properties.CommonMarginBlock commonMarginBlock;
    private org.apache.fop.fo.properties.LengthRangeProperty blockProgressionDimension;
    private int breakAfter;
    private int breakBefore;
    private int displayAlign;
    private org.apache.fop.datatypes.Length height;
    private org.apache.fop.fo.properties.LengthRangeProperty inlineProgressionDimension;
    private org.apache.fop.fo.properties.KeepProperty keepTogether;
    private org.apache.fop.fo.properties.KeepProperty keepWithNext;
    private org.apache.fop.fo.properties.KeepProperty keepWithPrevious;
    private int overflow;
    private org.apache.fop.datatypes.Numeric referenceOrientation;
    private int span;
    private org.apache.fop.datatypes.Length width;
    private int writingMode;
    private boolean blockItemFound;

    public void <init>(org.apache.fop.fo.FONode)
    {
        org.apache.fop.fo.flow.BlockContainer this;
        org.apache.fop.fo.FONode parent;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        parent := @parameter0: org.apache.fop.fo.FONode;
        specialinvoke this.<org.apache.fop.fo.FObj: void <init>(org.apache.fop.fo.FONode)>(parent);
        this.<org.apache.fop.fo.flow.BlockContainer: boolean blockItemFound> = 0;
        return;
    }

    public void bind(org.apache.fop.fo.PropertyList) throws org.apache.fop.apps.FOPException
    {
        org.apache.fop.fo.flow.BlockContainer this;
        org.apache.fop.fo.PropertyList pList;
        org.apache.fop.fo.properties.CommonAbsolutePosition $r0;
        org.apache.fop.fo.properties.CommonBorderPaddingBackground $r1;
        org.apache.fop.fo.properties.CommonMarginBlock $r2;
        org.apache.fop.fo.properties.Property $r3;
        org.apache.fop.fo.properties.LengthRangeProperty $r4;
        int $i0;
        org.apache.fop.datatypes.Length $r5;
        org.apache.fop.fo.properties.KeepProperty $r6;
        org.apache.fop.datatypes.Numeric $r7;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        pList := @parameter0: org.apache.fop.fo.PropertyList;
        specialinvoke this.<org.apache.fop.fo.FObj: void bind(org.apache.fop.fo.PropertyList)>(pList);
        $r0 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.CommonAbsolutePosition getAbsolutePositionProps()>();
        this.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.fo.properties.CommonAbsolutePosition commonAbsolutePosition> = $r0;
        $r1 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.CommonBorderPaddingBackground getBorderPaddingBackgroundProps()>();
        this.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.fo.properties.CommonBorderPaddingBackground commonBorderPaddingBackground> = $r1;
        $r2 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.CommonMarginBlock getMarginBlockProps()>();
        this.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.fo.properties.CommonMarginBlock commonMarginBlock> = $r2;
        $r3 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(17);
        $r4 = virtualinvoke $r3.<org.apache.fop.fo.properties.Property: org.apache.fop.fo.properties.LengthRangeProperty getLengthRange()>();
        this.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.fo.properties.LengthRangeProperty blockProgressionDimension> = $r4;
        $r3 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(58);
        $i0 = virtualinvoke $r3.<org.apache.fop.fo.properties.Property: int getEnum()>();
        this.<org.apache.fop.fo.flow.BlockContainer: int breakAfter> = $i0;
        $r3 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(59);
        $i0 = virtualinvoke $r3.<org.apache.fop.fo.properties.Property: int getEnum()>();
        this.<org.apache.fop.fo.flow.BlockContainer: int breakBefore> = $i0;
        $r3 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(81);
        $i0 = virtualinvoke $r3.<org.apache.fop.fo.properties.Property: int getEnum()>();
        this.<org.apache.fop.fo.flow.BlockContainer: int displayAlign> = $i0;
        $r3 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(106);
        $r5 = virtualinvoke $r3.<org.apache.fop.fo.properties.Property: org.apache.fop.datatypes.Length getLength()>();
        this.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.datatypes.Length height> = $r5;
        $r3 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(116);
        $r4 = virtualinvoke $r3.<org.apache.fop.fo.properties.Property: org.apache.fop.fo.properties.LengthRangeProperty getLengthRange()>();
        this.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.fo.properties.LengthRangeProperty inlineProgressionDimension> = $r4;
        $r3 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(118);
        $r6 = virtualinvoke $r3.<org.apache.fop.fo.properties.Property: org.apache.fop.fo.properties.KeepProperty getKeep()>();
        this.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.fo.properties.KeepProperty keepTogether> = $r6;
        $r3 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(119);
        $r6 = virtualinvoke $r3.<org.apache.fop.fo.properties.Property: org.apache.fop.fo.properties.KeepProperty getKeep()>();
        this.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.fo.properties.KeepProperty keepWithNext> = $r6;
        $r3 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(120);
        $r6 = virtualinvoke $r3.<org.apache.fop.fo.properties.Property: org.apache.fop.fo.properties.KeepProperty getKeep()>();
        this.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.fo.properties.KeepProperty keepWithPrevious> = $r6;
        $r3 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(153);
        $i0 = virtualinvoke $r3.<org.apache.fop.fo.properties.Property: int getEnum()>();
        this.<org.apache.fop.fo.flow.BlockContainer: int overflow> = $i0;
        $r3 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(179);
        $r7 = virtualinvoke $r3.<org.apache.fop.fo.properties.Property: org.apache.fop.datatypes.Numeric getNumeric()>();
        this.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.datatypes.Numeric referenceOrientation> = $r7;
        $r3 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(204);
        $i0 = virtualinvoke $r3.<org.apache.fop.fo.properties.Property: int getEnum()>();
        this.<org.apache.fop.fo.flow.BlockContainer: int span> = $i0;
        $r3 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(242);
        $r5 = virtualinvoke $r3.<org.apache.fop.fo.properties.Property: org.apache.fop.datatypes.Length getLength()>();
        this.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.datatypes.Length width> = $r5;
        $r3 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(245);
        $i0 = virtualinvoke $r3.<org.apache.fop.fo.properties.Property: int getEnum()>();
        this.<org.apache.fop.fo.flow.BlockContainer: int writingMode> = $i0;
        return;
    }

    protected void startOfNode() throws org.apache.fop.apps.FOPException
    {
        org.apache.fop.fo.flow.BlockContainer this;
        org.apache.fop.fo.FOEventHandler $r0;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        specialinvoke this.<org.apache.fop.fo.FObj: void startOfNode()>();
        $r0 = virtualinvoke this.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.fo.FOEventHandler getFOEventHandler()>();
        virtualinvoke $r0.<org.apache.fop.fo.FOEventHandler: void startBlockContainer(org.apache.fop.fo.flow.BlockContainer)>(this);
        return;
    }

    protected void validateChildNode(org.xml.sax.Locator, java.lang.String, java.lang.String) throws org.apache.fop.fo.ValidationException
    {
        org.apache.fop.fo.flow.BlockContainer this;
        org.xml.sax.Locator loc;
        java.lang.String nsURI, localName, $r0;
        boolean $z0;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        loc := @parameter0: org.xml.sax.Locator;
        nsURI := @parameter1: java.lang.String;
        localName := @parameter2: java.lang.String;
        $r0 = "http://www.w3.org/1999/XSL/Format";
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(nsURI);
        if $z0 == 0 goto label0;

        $z0 = virtualinvoke localName.<java.lang.String: boolean equals(java.lang.Object)>("marker");
        if $z0 == 0 goto label0;

        $z0 = this.<org.apache.fop.fo.flow.BlockContainer: boolean blockItemFound>;
        if $z0 == 0 goto label2;

        virtualinvoke this.<org.apache.fop.fo.flow.BlockContainer: void nodesOutOfOrderError(org.xml.sax.Locator,java.lang.String,java.lang.String)>(loc, "fo:marker", "(%block;)");
        goto label2;

     label0:
        $z0 = virtualinvoke this.<org.apache.fop.fo.flow.BlockContainer: boolean isBlockItem(java.lang.String,java.lang.String)>(nsURI, localName);
        if $z0 != 0 goto label1;

        virtualinvoke this.<org.apache.fop.fo.flow.BlockContainer: void invalidChildError(org.xml.sax.Locator,java.lang.String,java.lang.String)>(loc, nsURI, localName);
        goto label2;

     label1:
        this.<org.apache.fop.fo.flow.BlockContainer: boolean blockItemFound> = 1;

     label2:
        return;
    }

    protected void endOfNode() throws org.apache.fop.apps.FOPException
    {
        org.apache.fop.fo.flow.BlockContainer this;
        boolean $z0;
        org.apache.fop.fo.FOEventHandler $r0;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        $z0 = this.<org.apache.fop.fo.flow.BlockContainer: boolean blockItemFound>;
        if $z0 != 0 goto label0;

        virtualinvoke this.<org.apache.fop.fo.flow.BlockContainer: void missingChildElementError(java.lang.String)>("marker* (%block;)+");

     label0:
        $r0 = virtualinvoke this.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.fo.FOEventHandler getFOEventHandler()>();
        virtualinvoke $r0.<org.apache.fop.fo.FOEventHandler: void endBlockContainer(org.apache.fop.fo.flow.BlockContainer)>(this);
        return;
    }

    public boolean generatesReferenceAreas()
    {
        org.apache.fop.fo.flow.BlockContainer this;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        return 1;
    }

    public org.apache.fop.fo.properties.CommonAbsolutePosition getCommonAbsolutePosition()
    {
        org.apache.fop.fo.flow.BlockContainer this;
        org.apache.fop.fo.properties.CommonAbsolutePosition $r0;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        $r0 = this.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.fo.properties.CommonAbsolutePosition commonAbsolutePosition>;
        return $r0;
    }

    public org.apache.fop.fo.properties.CommonMarginBlock getCommonMarginBlock()
    {
        org.apache.fop.fo.flow.BlockContainer this;
        org.apache.fop.fo.properties.CommonMarginBlock $r0;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        $r0 = this.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.fo.properties.CommonMarginBlock commonMarginBlock>;
        return $r0;
    }

    public org.apache.fop.fo.properties.CommonBorderPaddingBackground getCommonBorderPaddingBackground()
    {
        org.apache.fop.fo.flow.BlockContainer this;
        org.apache.fop.fo.properties.CommonBorderPaddingBackground $r0;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        $r0 = this.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.fo.properties.CommonBorderPaddingBackground commonBorderPaddingBackground>;
        return $r0;
    }

    public org.apache.fop.fo.properties.LengthRangeProperty getBlockProgressionDimension()
    {
        org.apache.fop.fo.flow.BlockContainer this;
        org.apache.fop.fo.properties.LengthRangeProperty $r0;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        $r0 = this.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.fo.properties.LengthRangeProperty blockProgressionDimension>;
        return $r0;
    }

    public int getDisplayAlign()
    {
        org.apache.fop.fo.flow.BlockContainer this;
        int $i0;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        $i0 = this.<org.apache.fop.fo.flow.BlockContainer: int displayAlign>;
        return $i0;
    }

    public int getBreakAfter()
    {
        org.apache.fop.fo.flow.BlockContainer this;
        int $i0;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        $i0 = this.<org.apache.fop.fo.flow.BlockContainer: int breakAfter>;
        return $i0;
    }

    public int getBreakBefore()
    {
        org.apache.fop.fo.flow.BlockContainer this;
        int $i0;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        $i0 = this.<org.apache.fop.fo.flow.BlockContainer: int breakBefore>;
        return $i0;
    }

    public org.apache.fop.fo.properties.KeepProperty getKeepWithNext()
    {
        org.apache.fop.fo.flow.BlockContainer this;
        org.apache.fop.fo.properties.KeepProperty $r0;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        $r0 = this.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.fo.properties.KeepProperty keepWithNext>;
        return $r0;
    }

    public org.apache.fop.fo.properties.KeepProperty getKeepWithPrevious()
    {
        org.apache.fop.fo.flow.BlockContainer this;
        org.apache.fop.fo.properties.KeepProperty $r0;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        $r0 = this.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.fo.properties.KeepProperty keepWithPrevious>;
        return $r0;
    }

    public org.apache.fop.fo.properties.KeepProperty getKeepTogether()
    {
        org.apache.fop.fo.flow.BlockContainer this;
        org.apache.fop.fo.properties.KeepProperty $r0;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        $r0 = this.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.fo.properties.KeepProperty keepTogether>;
        return $r0;
    }

    public org.apache.fop.fo.properties.LengthRangeProperty getInlineProgressionDimension()
    {
        org.apache.fop.fo.flow.BlockContainer this;
        org.apache.fop.fo.properties.LengthRangeProperty $r0;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        $r0 = this.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.fo.properties.LengthRangeProperty inlineProgressionDimension>;
        return $r0;
    }

    public int getOverflow()
    {
        org.apache.fop.fo.flow.BlockContainer this;
        int $i0;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        $i0 = this.<org.apache.fop.fo.flow.BlockContainer: int overflow>;
        return $i0;
    }

    public int getReferenceOrientation()
    {
        org.apache.fop.fo.flow.BlockContainer this;
        org.apache.fop.datatypes.Numeric $r0;
        int $i0;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        $r0 = this.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.datatypes.Numeric referenceOrientation>;
        $i0 = interfaceinvoke $r0.<org.apache.fop.datatypes.Numeric: int getValue()>();
        return $i0;
    }

    public int getSpan()
    {
        org.apache.fop.fo.flow.BlockContainer this;
        int $i0;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        $i0 = this.<org.apache.fop.fo.flow.BlockContainer: int span>;
        return $i0;
    }

    public int getWritingMode()
    {
        org.apache.fop.fo.flow.BlockContainer this;
        int $i0;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        $i0 = this.<org.apache.fop.fo.flow.BlockContainer: int writingMode>;
        return $i0;
    }

    public org.apache.fop.datatypes.Length getWidth()
    {
        org.apache.fop.fo.flow.BlockContainer this;
        org.apache.fop.datatypes.Length $r0;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        $r0 = this.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.datatypes.Length width>;
        return $r0;
    }

    public org.apache.fop.datatypes.Length getHeight()
    {
        org.apache.fop.fo.flow.BlockContainer this;
        org.apache.fop.datatypes.Length $r0;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        $r0 = this.<org.apache.fop.fo.flow.BlockContainer: org.apache.fop.datatypes.Length height>;
        return $r0;
    }

    public java.lang.String getLocalName()
    {
        org.apache.fop.fo.flow.BlockContainer this;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        return "block-container";
    }

    public int getNameId()
    {
        org.apache.fop.fo.flow.BlockContainer this;

        this := @this: org.apache.fop.fo.flow.BlockContainer;
        return 4;
    }
}
