public class org.apache.fop.pdf.PDFFont extends org.apache.fop.pdf.PDFDictionary
{
    private java.lang.String fontname;
    static java.lang.Class class$org$apache$fop$pdf$PDFFont;

    public void <init>(java.lang.String, org.apache.fop.fonts.FontType, java.lang.String, java.lang.Object)
    {
        org.apache.fop.pdf.PDFFont this;
        java.lang.String fontname, basefont, $r2;
        org.apache.fop.fonts.FontType subtype;
        java.lang.Object encoding;
        org.apache.fop.pdf.PDFName $r0;
        boolean $z0;
        org.apache.fop.pdf.PDFEncoding $r1;

        this := @this: org.apache.fop.pdf.PDFFont;
        fontname := @parameter0: java.lang.String;
        subtype := @parameter1: org.apache.fop.fonts.FontType;
        basefont := @parameter2: java.lang.String;
        encoding := @parameter3: java.lang.Object;
        specialinvoke this.<org.apache.fop.pdf.PDFDictionary: void <init>()>();
        this.<org.apache.fop.pdf.PDFFont: java.lang.String fontname> = fontname;
        $r0 = new org.apache.fop.pdf.PDFName;
        specialinvoke $r0.<org.apache.fop.pdf.PDFName: void <init>(java.lang.String)>("Font");
        virtualinvoke this.<org.apache.fop.pdf.PDFFont: void put(java.lang.String,java.lang.Object)>("Type", $r0);
        $r0 = virtualinvoke this.<org.apache.fop.pdf.PDFFont: org.apache.fop.pdf.PDFName getPDFNameForFontType(org.apache.fop.fonts.FontType)>(subtype);
        virtualinvoke this.<org.apache.fop.pdf.PDFFont: void put(java.lang.String,java.lang.Object)>("Subtype", $r0);
        $r0 = new org.apache.fop.pdf.PDFName;
        specialinvoke $r0.<org.apache.fop.pdf.PDFName: void <init>(java.lang.String)>(basefont);
        virtualinvoke this.<org.apache.fop.pdf.PDFFont: void put(java.lang.String,java.lang.Object)>("BaseFont", $r0);
        $z0 = encoding instanceof org.apache.fop.pdf.PDFEncoding;
        if $z0 == 0 goto label0;

        $r1 = (org.apache.fop.pdf.PDFEncoding) encoding;
        virtualinvoke this.<org.apache.fop.pdf.PDFFont: void setEncoding(org.apache.fop.pdf.PDFEncoding)>($r1);
        goto label1;

     label0:
        $z0 = encoding instanceof java.lang.String;
        if $z0 == 0 goto label1;

        $r2 = (java.lang.String) encoding;
        virtualinvoke this.<org.apache.fop.pdf.PDFFont: void setEncoding(java.lang.String)>($r2);

     label1:
        return;
    }

    public void setEncoding(java.lang.String)
    {
        org.apache.fop.pdf.PDFFont this;
        java.lang.String encoding;
        org.apache.fop.pdf.PDFName $r0;

        this := @this: org.apache.fop.pdf.PDFFont;
        encoding := @parameter0: java.lang.String;
        if encoding == null goto label0;

        $r0 = new org.apache.fop.pdf.PDFName;
        specialinvoke $r0.<org.apache.fop.pdf.PDFName: void <init>(java.lang.String)>(encoding);
        virtualinvoke this.<org.apache.fop.pdf.PDFFont: void put(java.lang.String,java.lang.Object)>("Encoding", $r0);

     label0:
        return;
    }

    public void setEncoding(org.apache.fop.pdf.PDFEncoding)
    {
        org.apache.fop.pdf.PDFFont this;
        org.apache.fop.pdf.PDFEncoding encoding;

        this := @this: org.apache.fop.pdf.PDFFont;
        encoding := @parameter0: org.apache.fop.pdf.PDFEncoding;
        if encoding == null goto label0;

        virtualinvoke this.<org.apache.fop.pdf.PDFFont: void put(java.lang.String,java.lang.Object)>("Encoding", encoding);

     label0:
        return;
    }

    public static org.apache.fop.pdf.PDFFont createFont(java.lang.String, org.apache.fop.fonts.FontType, java.lang.String, java.lang.Object)
    {
        java.lang.String fontname, basefont;
        org.apache.fop.fonts.FontType subtype, $r0;
        java.lang.Object encoding;
        org.apache.fop.pdf.PDFFontType0 $r1;
        org.apache.fop.pdf.PDFFontType1 $r2;
        org.apache.fop.pdf.PDFFontTrueType $r3;

        fontname := @parameter0: java.lang.String;
        subtype := @parameter1: org.apache.fop.fonts.FontType;
        basefont := @parameter2: java.lang.String;
        encoding := @parameter3: java.lang.Object;
        $r0 = <org.apache.fop.fonts.FontType: org.apache.fop.fonts.FontType TYPE0>;
        if subtype != $r0 goto label0;

        $r1 = new org.apache.fop.pdf.PDFFontType0;
        specialinvoke $r1.<org.apache.fop.pdf.PDFFontType0: void <init>(java.lang.String,java.lang.String,java.lang.Object)>(fontname, basefont, encoding);
        return $r1;

     label0:
        $r0 = <org.apache.fop.fonts.FontType: org.apache.fop.fonts.FontType TYPE1>;
        if subtype == $r0 goto label1;

        $r0 = <org.apache.fop.fonts.FontType: org.apache.fop.fonts.FontType MMTYPE1>;
        if subtype != $r0 goto label2;

     label1:
        $r2 = new org.apache.fop.pdf.PDFFontType1;
        specialinvoke $r2.<org.apache.fop.pdf.PDFFontType1: void <init>(java.lang.String,java.lang.String,java.lang.Object)>(fontname, basefont, encoding);
        return $r2;

     label2:
        $r0 = <org.apache.fop.fonts.FontType: org.apache.fop.fonts.FontType TYPE3>;
        if subtype != $r0 goto label3;

        return null;

     label3:
        $r0 = <org.apache.fop.fonts.FontType: org.apache.fop.fonts.FontType TRUETYPE>;
        if subtype != $r0 goto label4;

        $r3 = new org.apache.fop.pdf.PDFFontTrueType;
        specialinvoke $r3.<org.apache.fop.pdf.PDFFontTrueType: void <init>(java.lang.String,java.lang.String,java.lang.Object)>(fontname, basefont, encoding);
        return $r3;

     label4:
        return null;
    }

    public java.lang.String getName()
    {
        org.apache.fop.pdf.PDFFont this;
        java.lang.String $r0;

        this := @this: org.apache.fop.pdf.PDFFont;
        $r0 = this.<org.apache.fop.pdf.PDFFont: java.lang.String fontname>;
        return $r0;
    }

    public org.apache.fop.pdf.PDFName getBaseFont()
    {
        org.apache.fop.pdf.PDFFont this;
        java.lang.Object $r0;
        org.apache.fop.pdf.PDFName $r1;

        this := @this: org.apache.fop.pdf.PDFFont;
        $r0 = virtualinvoke this.<org.apache.fop.pdf.PDFFont: java.lang.Object get(java.lang.String)>("BaseFont");
        $r1 = (org.apache.fop.pdf.PDFName) $r0;
        return $r1;
    }

    protected org.apache.fop.pdf.PDFName getPDFNameForFontType(org.apache.fop.fonts.FontType)
    {
        org.apache.fop.pdf.PDFFont this;
        org.apache.fop.fonts.FontType fontType, $r0;
        org.apache.fop.pdf.PDFName $r1;
        java.lang.String $r2, $r5;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuffer $r4;

        this := @this: org.apache.fop.pdf.PDFFont;
        fontType := @parameter0: org.apache.fop.fonts.FontType;
        $r0 = <org.apache.fop.fonts.FontType: org.apache.fop.fonts.FontType TYPE0>;
        if fontType != $r0 goto label0;

        $r1 = new org.apache.fop.pdf.PDFName;
        $r2 = virtualinvoke fontType.<org.apache.fop.fonts.FontType: java.lang.String getName()>();
        specialinvoke $r1.<org.apache.fop.pdf.PDFName: void <init>(java.lang.String)>($r2);
        return $r1;

     label0:
        $r0 = <org.apache.fop.fonts.FontType: org.apache.fop.fonts.FontType TYPE1>;
        if fontType != $r0 goto label1;

        $r1 = new org.apache.fop.pdf.PDFName;
        $r2 = virtualinvoke fontType.<org.apache.fop.fonts.FontType: java.lang.String getName()>();
        specialinvoke $r1.<org.apache.fop.pdf.PDFName: void <init>(java.lang.String)>($r2);
        return $r1;

     label1:
        $r0 = <org.apache.fop.fonts.FontType: org.apache.fop.fonts.FontType MMTYPE1>;
        if fontType != $r0 goto label2;

        $r1 = new org.apache.fop.pdf.PDFName;
        $r2 = virtualinvoke fontType.<org.apache.fop.fonts.FontType: java.lang.String getName()>();
        specialinvoke $r1.<org.apache.fop.pdf.PDFName: void <init>(java.lang.String)>($r2);
        return $r1;

     label2:
        $r0 = <org.apache.fop.fonts.FontType: org.apache.fop.fonts.FontType TYPE3>;
        if fontType != $r0 goto label3;

        $r1 = new org.apache.fop.pdf.PDFName;
        $r2 = virtualinvoke fontType.<org.apache.fop.fonts.FontType: java.lang.String getName()>();
        specialinvoke $r1.<org.apache.fop.pdf.PDFName: void <init>(java.lang.String)>($r2);
        return $r1;

     label3:
        $r0 = <org.apache.fop.fonts.FontType: org.apache.fop.fonts.FontType TRUETYPE>;
        if fontType != $r0 goto label4;

        $r1 = new org.apache.fop.pdf.PDFName;
        $r2 = virtualinvoke fontType.<org.apache.fop.fonts.FontType: java.lang.String getName()>();
        specialinvoke $r1.<org.apache.fop.pdf.PDFName: void <init>(java.lang.String)>($r2);
        return $r1;

     label4:
        $r3 = new java.lang.IllegalArgumentException;
        $r4 = new java.lang.StringBuffer;
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported font type: ");
        $r5 = virtualinvoke fontType.<org.apache.fop.fonts.FontType: java.lang.String getName()>();
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r2 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);
        throw $r3;
    }

    protected void validate()
    {
        org.apache.fop.pdf.PDFFont this;
        java.lang.Class $r0, $r3;
        org.apache.fop.pdf.PDFDocument $r1, $r6;
        org.apache.fop.pdf.PDFProfile $r2, $r7;
        boolean $z0;
        org.apache.fop.pdf.PDFConformanceException $r4;
        java.lang.StringBuffer $r5;
        org.apache.fop.pdf.PDFName $r8;
        java.lang.String $r9;

        this := @this: org.apache.fop.pdf.PDFFont;
        $r1 = virtualinvoke this.<org.apache.fop.pdf.PDFFont: org.apache.fop.pdf.PDFDocument getDocumentSafely()>();
        $r2 = virtualinvoke $r1.<org.apache.fop.pdf.PDFDocument: org.apache.fop.pdf.PDFProfile getProfile()>();
        $z0 = virtualinvoke $r2.<org.apache.fop.pdf.PDFProfile: boolean isFontEmbeddingRequired()>();
        if $z0 == 0 goto label2;

        $r3 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();
        $r0 = <org.apache.fop.pdf.PDFFont: java.lang.Class class$org$apache$fop$pdf$PDFFont>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.fop.pdf.PDFFont: java.lang.Class class$(java.lang.String)>("org.apache.fop.pdf.PDFFont");
        <org.apache.fop.pdf.PDFFont: java.lang.Class class$org$apache$fop$pdf$PDFFont> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.fop.pdf.PDFFont: java.lang.Class class$org$apache$fop$pdf$PDFFont>;

     label1:
        if $r3 != $r0 goto label2;

        $r4 = new org.apache.fop.pdf.PDFConformanceException;
        $r5 = new java.lang.StringBuffer;
        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("For ");
        $r6 = virtualinvoke this.<org.apache.fop.pdf.PDFFont: org.apache.fop.pdf.PDFDocument getDocumentSafely()>();
        $r7 = virtualinvoke $r6.<org.apache.fop.pdf.PDFDocument: org.apache.fop.pdf.PDFProfile getProfile()>();
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7);
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", all fonts, even the base 14 fonts, have to be embedded! Offending font: ");
        $r8 = virtualinvoke this.<org.apache.fop.pdf.PDFFont: org.apache.fop.pdf.PDFName getBaseFont()>();
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r8);
        $r9 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r4.<org.apache.fop.pdf.PDFConformanceException: void <init>(java.lang.String)>($r9);
        throw $r4;

     label2:
        return;
    }

    protected int output(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.fop.pdf.PDFFont this;
        java.io.OutputStream stream;
        int $i0;

        this := @this: org.apache.fop.pdf.PDFFont;
        stream := @parameter0: java.io.OutputStream;
        virtualinvoke this.<org.apache.fop.pdf.PDFFont: void validate()>();
        $i0 = specialinvoke this.<org.apache.fop.pdf.PDFDictionary: int output(java.io.OutputStream)>(stream);
        return $i0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException l1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        l1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(l1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }
}
