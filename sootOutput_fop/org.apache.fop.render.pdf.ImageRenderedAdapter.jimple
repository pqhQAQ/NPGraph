public class org.apache.fop.render.pdf.ImageRenderedAdapter extends org.apache.fop.render.pdf.AbstractImageAdapter
{
    private static org.apache.commons.logging.Log log;
    private org.apache.xmlgraphics.ps.ImageEncodingHelper encodingHelper;
    private org.apache.fop.pdf.PDFFilter pdfFilter;
    private java.lang.String maskRef;
    private org.apache.fop.pdf.PDFReference softMask;
    private static final int MAX_HIVAL;
    static java.lang.Class class$org$apache$fop$render$pdf$ImageRenderedAdapter;

    public void <init>(org.apache.xmlgraphics.image.loader.impl.ImageRendered, java.lang.String)
    {
        org.apache.fop.render.pdf.ImageRenderedAdapter this;
        org.apache.xmlgraphics.image.loader.impl.ImageRendered image;
        java.lang.String key;
        org.apache.xmlgraphics.ps.ImageEncodingHelper $r0;
        java.awt.image.RenderedImage $r1;

        this := @this: org.apache.fop.render.pdf.ImageRenderedAdapter;
        image := @parameter0: org.apache.xmlgraphics.image.loader.impl.ImageRendered;
        key := @parameter1: java.lang.String;
        specialinvoke this.<org.apache.fop.render.pdf.AbstractImageAdapter: void <init>(org.apache.xmlgraphics.image.loader.Image,java.lang.String)>(image, key);
        this.<org.apache.fop.render.pdf.ImageRenderedAdapter: org.apache.fop.pdf.PDFFilter pdfFilter> = null;
        $r0 = new org.apache.xmlgraphics.ps.ImageEncodingHelper;
        $r1 = virtualinvoke image.<org.apache.xmlgraphics.image.loader.impl.ImageRendered: java.awt.image.RenderedImage getRenderedImage()>();
        specialinvoke $r0.<org.apache.xmlgraphics.ps.ImageEncodingHelper: void <init>(java.awt.image.RenderedImage)>($r1);
        this.<org.apache.fop.render.pdf.ImageRenderedAdapter: org.apache.xmlgraphics.ps.ImageEncodingHelper encodingHelper> = $r0;
        return;
    }

    public org.apache.xmlgraphics.image.loader.impl.ImageRendered getImage()
    {
        org.apache.fop.render.pdf.ImageRenderedAdapter this;
        org.apache.xmlgraphics.image.loader.Image $r0;
        org.apache.xmlgraphics.image.loader.impl.ImageRendered $r1;

        this := @this: org.apache.fop.render.pdf.ImageRenderedAdapter;
        $r0 = this.<org.apache.fop.render.pdf.ImageRenderedAdapter: org.apache.xmlgraphics.image.loader.Image image>;
        $r1 = (org.apache.xmlgraphics.image.loader.impl.ImageRendered) $r0;
        return $r1;
    }

    private java.awt.image.ColorModel getEffectiveColorModel()
    {
        org.apache.fop.render.pdf.ImageRenderedAdapter this;
        org.apache.xmlgraphics.ps.ImageEncodingHelper $r0;
        java.awt.image.ColorModel $r1;

        this := @this: org.apache.fop.render.pdf.ImageRenderedAdapter;
        $r0 = this.<org.apache.fop.render.pdf.ImageRenderedAdapter: org.apache.xmlgraphics.ps.ImageEncodingHelper encodingHelper>;
        $r1 = virtualinvoke $r0.<org.apache.xmlgraphics.ps.ImageEncodingHelper: java.awt.image.ColorModel getEncodedColorModel()>();
        return $r1;
    }

    protected java.awt.color.ColorSpace getImageColorSpace()
    {
        org.apache.fop.render.pdf.ImageRenderedAdapter this;
        java.awt.image.ColorModel $r0;
        java.awt.color.ColorSpace $r1;

        this := @this: org.apache.fop.render.pdf.ImageRenderedAdapter;
        $r0 = specialinvoke this.<org.apache.fop.render.pdf.ImageRenderedAdapter: java.awt.image.ColorModel getEffectiveColorModel()>();
        $r1 = virtualinvoke $r0.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();
        return $r1;
    }

    public void setup(org.apache.fop.pdf.PDFDocument)
    {
        org.apache.fop.render.pdf.ImageRenderedAdapter this;
        org.apache.fop.pdf.PDFDocument doc;
        java.awt.image.RenderedImage ri;
        java.awt.image.ColorModel orgcm;
        java.lang.StringBuffer $r0;
        org.apache.fop.pdf.AlphaRasterImage alphaImage, $r6;
        org.apache.xmlgraphics.image.loader.impl.ImageRendered $r1;
        boolean $z0;
        int $i0;
        org.apache.fop.pdf.PDFProfile $r2;
        org.apache.xmlgraphics.image.loader.Image $r3;
        org.apache.xmlgraphics.image.loader.ImageInfo $r4;
        java.lang.String $r5, $r7, $r8;
        org.apache.fop.pdf.PDFImageXObject $r9;
        org.apache.fop.pdf.PDFReference $r10;

        this := @this: org.apache.fop.render.pdf.ImageRenderedAdapter;
        doc := @parameter0: org.apache.fop.pdf.PDFDocument;
        $r1 = virtualinvoke this.<org.apache.fop.render.pdf.ImageRenderedAdapter: org.apache.xmlgraphics.image.loader.impl.ImageRendered getImage()>();
        ri = virtualinvoke $r1.<org.apache.xmlgraphics.image.loader.impl.ImageRendered: java.awt.image.RenderedImage getRenderedImage()>();
        specialinvoke this.<org.apache.fop.render.pdf.ImageRenderedAdapter: java.awt.image.ColorModel getEffectiveColorModel()>();
        specialinvoke this.<org.apache.fop.render.pdf.AbstractImageAdapter: void setup(org.apache.fop.pdf.PDFDocument)>(doc);
        orgcm = interfaceinvoke ri.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();
        $z0 = virtualinvoke orgcm.<java.awt.image.ColorModel: boolean hasAlpha()>();
        if $z0 == 0 goto label0;

        $i0 = virtualinvoke orgcm.<java.awt.image.ColorModel: int getTransparency()>();
        if $i0 != 3 goto label0;

        $r2 = virtualinvoke doc.<org.apache.fop.pdf.PDFDocument: org.apache.fop.pdf.PDFProfile getProfile()>();
        $r3 = this.<org.apache.fop.render.pdf.ImageRenderedAdapter: org.apache.xmlgraphics.image.loader.Image image>;
        $r4 = interfaceinvoke $r3.<org.apache.xmlgraphics.image.loader.Image: org.apache.xmlgraphics.image.loader.ImageInfo getInfo()>();
        $r5 = virtualinvoke $r4.<org.apache.xmlgraphics.image.loader.ImageInfo: java.lang.String getOriginalURI()>();
        virtualinvoke $r2.<org.apache.fop.pdf.PDFProfile: void verifyTransparencyAllowed(java.lang.String)>($r5);
        $r6 = new org.apache.fop.pdf.AlphaRasterImage;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Mask:");
        $r7 = virtualinvoke this.<org.apache.fop.render.pdf.ImageRenderedAdapter: java.lang.String getKey()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);
        $r8 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r6.<org.apache.fop.pdf.AlphaRasterImage: void <init>(java.lang.String,java.awt.image.RenderedImage)>($r8, ri);
        alphaImage = $r6;
        $r9 = virtualinvoke doc.<org.apache.fop.pdf.PDFDocument: org.apache.fop.pdf.PDFImageXObject addImage(org.apache.fop.pdf.PDFResourceContext,org.apache.fop.pdf.PDFImage)>(null, alphaImage);
        $r10 = virtualinvoke $r9.<org.apache.fop.pdf.PDFImageXObject: org.apache.fop.pdf.PDFReference makeReference()>();
        this.<org.apache.fop.render.pdf.ImageRenderedAdapter: org.apache.fop.pdf.PDFReference softMask> = $r10;

     label0:
        return;
    }

    public org.apache.fop.pdf.PDFDeviceColorSpace getColorSpace()
    {
        org.apache.fop.render.pdf.ImageRenderedAdapter this;
        java.awt.image.ColorModel $r0;
        java.awt.color.ColorSpace $r1;
        org.apache.fop.pdf.PDFDeviceColorSpace $r2;

        this := @this: org.apache.fop.render.pdf.ImageRenderedAdapter;
        $r0 = specialinvoke this.<org.apache.fop.render.pdf.ImageRenderedAdapter: java.awt.image.ColorModel getEffectiveColorModel()>();
        $r1 = virtualinvoke $r0.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();
        $r2 = staticinvoke <org.apache.fop.render.pdf.ImageRenderedAdapter: org.apache.fop.pdf.PDFDeviceColorSpace toPDFColorSpace(java.awt.color.ColorSpace)>($r1);
        return $r2;
    }

    public int getBitsPerComponent()
    {
        org.apache.fop.render.pdf.ImageRenderedAdapter this;
        java.awt.image.ColorModel cm;
        java.awt.image.IndexColorModel icm;
        boolean $z0;
        int $i0;

        this := @this: org.apache.fop.render.pdf.ImageRenderedAdapter;
        cm = specialinvoke this.<org.apache.fop.render.pdf.ImageRenderedAdapter: java.awt.image.ColorModel getEffectiveColorModel()>();
        $z0 = cm instanceof java.awt.image.IndexColorModel;
        if $z0 == 0 goto label0;

        icm = (java.awt.image.IndexColorModel) cm;
        $i0 = virtualinvoke icm.<java.awt.image.IndexColorModel: int getComponentSize(int)>(0);
        return $i0;

     label0:
        $i0 = virtualinvoke cm.<java.awt.image.ColorModel: int getComponentSize(int)>(0);
        return $i0;
    }

    public boolean isTransparent()
    {
        org.apache.fop.render.pdf.ImageRenderedAdapter this;
        java.awt.image.ColorModel cm;
        boolean $z0;
        int $i0;
        org.apache.xmlgraphics.image.loader.impl.ImageRendered $r0;
        java.awt.Color $r1;

        this := @this: org.apache.fop.render.pdf.ImageRenderedAdapter;
        cm = specialinvoke this.<org.apache.fop.render.pdf.ImageRenderedAdapter: java.awt.image.ColorModel getEffectiveColorModel()>();
        $z0 = cm instanceof java.awt.image.IndexColorModel;
        if $z0 == 0 goto label0;

        $i0 = virtualinvoke cm.<java.awt.image.ColorModel: int getTransparency()>();
        if $i0 != 3 goto label0;

        return 1;

     label0:
        $r0 = virtualinvoke this.<org.apache.fop.render.pdf.ImageRenderedAdapter: org.apache.xmlgraphics.image.loader.impl.ImageRendered getImage()>();
        $r1 = virtualinvoke $r0.<org.apache.xmlgraphics.image.loader.impl.ImageRendered: java.awt.Color getTransparentColor()>();
        if $r1 == null goto label1;

        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static java.lang.Integer getIndexOfFirstTransparentColorInPalette(java.awt.image.RenderedImage)
    {
        java.awt.image.RenderedImage image;
        java.awt.image.ColorModel cm;
        java.awt.image.IndexColorModel icm, $r0;
        byte[] alphas, reds, greens, blues;
        int i, $i0, $i1;
        boolean $z0;
        byte $b2;
        short $s3;
        java.lang.Integer $r1;

        image := @parameter0: java.awt.image.RenderedImage;
        cm = interfaceinvoke image.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();
        $z0 = cm instanceof java.awt.image.IndexColorModel;
        if $z0 == 0 goto label2;

        icm = (java.awt.image.IndexColorModel) cm;
        $i0 = virtualinvoke icm.<java.awt.image.IndexColorModel: int getMapSize()>();
        alphas = newarray (byte)[$i0];
        $i0 = virtualinvoke icm.<java.awt.image.IndexColorModel: int getMapSize()>();
        reds = newarray (byte)[$i0];
        $i0 = virtualinvoke icm.<java.awt.image.IndexColorModel: int getMapSize()>();
        greens = newarray (byte)[$i0];
        $i0 = virtualinvoke icm.<java.awt.image.IndexColorModel: int getMapSize()>();
        blues = newarray (byte)[$i0];
        virtualinvoke icm.<java.awt.image.IndexColorModel: void getAlphas(byte[])>(alphas);
        virtualinvoke icm.<java.awt.image.IndexColorModel: void getReds(byte[])>(reds);
        virtualinvoke icm.<java.awt.image.IndexColorModel: void getGreens(byte[])>(greens);
        virtualinvoke icm.<java.awt.image.IndexColorModel: void getBlues(byte[])>(blues);
        i = 0;

     label0:
        $r0 = (java.awt.image.IndexColorModel) cm;
        $i1 = virtualinvoke $r0.<java.awt.image.IndexColorModel: int getMapSize()>();
        if i >= $i1 goto label2;

        $b2 = alphas[i];
        $s3 = $b2 & 255;
        if $s3 != 0 goto label1;

        $r1 = new java.lang.Integer;
        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i);
        return $r1;

     label1:
        i = i + 1;
        goto label0;

     label2:
        return null;
    }

    public org.apache.fop.pdf.PDFColor getTransparentColor()
    {
        org.apache.fop.render.pdf.ImageRenderedAdapter this;
        java.awt.image.ColorModel cm;
        java.awt.image.IndexColorModel icm;
        int transPixel, $i0, $i1, $i2, $i3;
        boolean $z0;
        org.apache.fop.pdf.PDFColor $r0;
        org.apache.xmlgraphics.image.loader.impl.ImageRendered $r1;
        java.awt.Color $r2;

        this := @this: org.apache.fop.render.pdf.ImageRenderedAdapter;
        cm = specialinvoke this.<org.apache.fop.render.pdf.ImageRenderedAdapter: java.awt.image.ColorModel getEffectiveColorModel()>();
        $z0 = cm instanceof java.awt.image.IndexColorModel;
        if $z0 == 0 goto label0;

        icm = (java.awt.image.IndexColorModel) cm;
        $i0 = virtualinvoke cm.<java.awt.image.ColorModel: int getTransparency()>();
        if $i0 != 3 goto label0;

        transPixel = virtualinvoke icm.<java.awt.image.IndexColorModel: int getTransparentPixel()>();
        $r0 = new org.apache.fop.pdf.PDFColor;
        $i1 = virtualinvoke icm.<java.awt.image.IndexColorModel: int getRed(int)>(transPixel);
        $i2 = virtualinvoke icm.<java.awt.image.IndexColorModel: int getGreen(int)>(transPixel);
        $i3 = virtualinvoke icm.<java.awt.image.IndexColorModel: int getBlue(int)>(transPixel);
        specialinvoke $r0.<org.apache.fop.pdf.PDFColor: void <init>(int,int,int)>($i1, $i2, $i3);
        return $r0;

     label0:
        $r0 = new org.apache.fop.pdf.PDFColor;
        $r1 = virtualinvoke this.<org.apache.fop.render.pdf.ImageRenderedAdapter: org.apache.xmlgraphics.image.loader.impl.ImageRendered getImage()>();
        $r2 = virtualinvoke $r1.<org.apache.xmlgraphics.image.loader.impl.ImageRendered: java.awt.Color getTransparentColor()>();
        specialinvoke $r0.<org.apache.fop.pdf.PDFColor: void <init>(java.awt.Color)>($r2);
        return $r0;
    }

    public java.lang.String getMask()
    {
        org.apache.fop.render.pdf.ImageRenderedAdapter this;
        java.lang.String $r0;

        this := @this: org.apache.fop.render.pdf.ImageRenderedAdapter;
        $r0 = this.<org.apache.fop.render.pdf.ImageRenderedAdapter: java.lang.String maskRef>;
        return $r0;
    }

    public org.apache.fop.pdf.PDFReference getSoftMaskReference()
    {
        org.apache.fop.render.pdf.ImageRenderedAdapter this;
        org.apache.fop.pdf.PDFReference $r0;

        this := @this: org.apache.fop.render.pdf.ImageRenderedAdapter;
        $r0 = this.<org.apache.fop.render.pdf.ImageRenderedAdapter: org.apache.fop.pdf.PDFReference softMask>;
        return $r0;
    }

    public org.apache.fop.pdf.PDFFilter getPDFFilter()
    {
        org.apache.fop.render.pdf.ImageRenderedAdapter this;
        org.apache.fop.pdf.PDFFilter $r0;

        this := @this: org.apache.fop.render.pdf.ImageRenderedAdapter;
        $r0 = this.<org.apache.fop.render.pdf.ImageRenderedAdapter: org.apache.fop.pdf.PDFFilter pdfFilter>;
        return $r0;
    }

    public void outputContents(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.fop.render.pdf.ImageRenderedAdapter this;
        java.io.OutputStream out;
        org.apache.xmlgraphics.ps.ImageEncodingHelper $r0;

        this := @this: org.apache.fop.render.pdf.ImageRenderedAdapter;
        out := @parameter0: java.io.OutputStream;
        $r0 = this.<org.apache.fop.render.pdf.ImageRenderedAdapter: org.apache.xmlgraphics.ps.ImageEncodingHelper encodingHelper>;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.ImageEncodingHelper: void encode(java.io.OutputStream)>(out);
        return;
    }

    public void populateXObjectDictionary(org.apache.fop.pdf.PDFDictionary)
    {
        org.apache.fop.render.pdf.ImageRenderedAdapter this;
        org.apache.fop.pdf.PDFDictionary dict;
        java.awt.image.ColorModel cm;
        java.awt.image.IndexColorModel icm;
        org.apache.fop.pdf.PDFArray indexed, mask, $r0;
        int c, hival, i, entry, $i0, $i1, $i2;
        int[] palette;
        org.apache.commons.io.output.ByteArrayOutputStream baout, $r14;
        java.lang.Integer index, $r13;
        boolean $z0;
        org.apache.fop.pdf.PDFName $r1;
        java.awt.color.ColorSpace $r2, $r5, $r9;
        org.apache.commons.logging.Log $r3;
        java.lang.StringBuffer $r4;
        org.apache.xmlgraphics.image.loader.Image $r6;
        org.apache.xmlgraphics.image.loader.ImageInfo $r7;
        java.lang.String $r8, $r11;
        org.apache.fop.pdf.PDFDeviceColorSpace $r10;
        java.lang.UnsupportedOperationException $r12;
        byte[] $r15;
        org.apache.xmlgraphics.image.loader.impl.ImageRendered $r16;
        java.awt.image.RenderedImage $r17;

        this := @this: org.apache.fop.render.pdf.ImageRenderedAdapter;
        dict := @parameter0: org.apache.fop.pdf.PDFDictionary;
        cm = specialinvoke this.<org.apache.fop.render.pdf.ImageRenderedAdapter: java.awt.image.ColorModel getEffectiveColorModel()>();
        $z0 = cm instanceof java.awt.image.IndexColorModel;
        if $z0 == 0 goto label4;

        icm = (java.awt.image.IndexColorModel) cm;
        $r0 = new org.apache.fop.pdf.PDFArray;
        specialinvoke $r0.<org.apache.fop.pdf.PDFArray: void <init>(org.apache.fop.pdf.PDFObject)>(dict);
        indexed = $r0;
        $r1 = new org.apache.fop.pdf.PDFName;
        specialinvoke $r1.<org.apache.fop.pdf.PDFName: void <init>(java.lang.String)>("Indexed");
        virtualinvoke indexed.<org.apache.fop.pdf.PDFArray: void add(java.lang.Object)>($r1);
        $r2 = virtualinvoke icm.<java.awt.image.IndexColorModel: java.awt.color.ColorSpace getColorSpace()>();
        $i0 = virtualinvoke $r2.<java.awt.color.ColorSpace: int getType()>();
        if $i0 == 5 goto label0;

        $r3 = <org.apache.fop.render.pdf.ImageRenderedAdapter: org.apache.commons.logging.Log log>;
        $r4 = new java.lang.StringBuffer;
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Indexed color space is not using RGB as base color space. The image may not be handled correctly. Base color space: ");
        $r5 = virtualinvoke icm.<java.awt.image.IndexColorModel: java.awt.color.ColorSpace getColorSpace()>();
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Image: ");
        $r6 = this.<org.apache.fop.render.pdf.ImageRenderedAdapter: org.apache.xmlgraphics.image.loader.Image image>;
        $r7 = interfaceinvoke $r6.<org.apache.xmlgraphics.image.loader.Image: org.apache.xmlgraphics.image.loader.ImageInfo getInfo()>();
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7);
        $r8 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r3.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r8);

     label0:
        $r1 = new org.apache.fop.pdf.PDFName;
        $r9 = virtualinvoke icm.<java.awt.image.IndexColorModel: java.awt.color.ColorSpace getColorSpace()>();
        $r10 = staticinvoke <org.apache.fop.render.pdf.ImageRenderedAdapter: org.apache.fop.pdf.PDFDeviceColorSpace toPDFColorSpace(java.awt.color.ColorSpace)>($r9);
        $r11 = virtualinvoke $r10.<org.apache.fop.pdf.PDFDeviceColorSpace: java.lang.String getName()>();
        specialinvoke $r1.<org.apache.fop.pdf.PDFName: void <init>(java.lang.String)>($r11);
        virtualinvoke indexed.<org.apache.fop.pdf.PDFArray: void add(java.lang.Object)>($r1);
        c = virtualinvoke icm.<java.awt.image.IndexColorModel: int getMapSize()>();
        hival = c - 1;
        if hival <= 255 goto label1;

        $r12 = new java.lang.UnsupportedOperationException;
        specialinvoke $r12.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("hival must not go beyond 255");
        throw $r12;

     label1:
        $r13 = new java.lang.Integer;
        specialinvoke $r13.<java.lang.Integer: void <init>(int)>(hival);
        virtualinvoke indexed.<org.apache.fop.pdf.PDFArray: void add(java.lang.Object)>($r13);
        palette = newarray (int)[c];
        virtualinvoke icm.<java.awt.image.IndexColorModel: void getRGBs(int[])>(palette);
        $r14 = new org.apache.commons.io.output.ByteArrayOutputStream;
        specialinvoke $r14.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();
        baout = $r14;
        i = 0;

     label2:
        if i >= c goto label3;

        entry = palette[i];
        $i1 = entry & 16711680;
        $i1 = $i1 >> 16;
        virtualinvoke baout.<org.apache.commons.io.output.ByteArrayOutputStream: void write(int)>($i1);
        $i1 = entry & 65280;
        $i1 = $i1 >> 8;
        virtualinvoke baout.<org.apache.commons.io.output.ByteArrayOutputStream: void write(int)>($i1);
        $i1 = entry & 255;
        virtualinvoke baout.<org.apache.commons.io.output.ByteArrayOutputStream: void write(int)>($i1);
        i = i + 1;
        goto label2;

     label3:
        $r15 = virtualinvoke baout.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();
        virtualinvoke indexed.<org.apache.fop.pdf.PDFArray: void add(java.lang.Object)>($r15);
        virtualinvoke dict.<org.apache.fop.pdf.PDFDictionary: void put(java.lang.String,java.lang.Object)>("ColorSpace", indexed);
        $i2 = virtualinvoke icm.<java.awt.image.IndexColorModel: int getPixelSize()>();
        virtualinvoke dict.<org.apache.fop.pdf.PDFDictionary: void put(java.lang.String,int)>("BitsPerComponent", $i2);
        $r16 = virtualinvoke this.<org.apache.fop.render.pdf.ImageRenderedAdapter: org.apache.xmlgraphics.image.loader.impl.ImageRendered getImage()>();
        $r17 = virtualinvoke $r16.<org.apache.xmlgraphics.image.loader.impl.ImageRendered: java.awt.image.RenderedImage getRenderedImage()>();
        index = staticinvoke <org.apache.fop.render.pdf.ImageRenderedAdapter: java.lang.Integer getIndexOfFirstTransparentColorInPalette(java.awt.image.RenderedImage)>($r17);
        if index == null goto label4;

        $r0 = new org.apache.fop.pdf.PDFArray;
        specialinvoke $r0.<org.apache.fop.pdf.PDFArray: void <init>(org.apache.fop.pdf.PDFObject)>(dict);
        mask = $r0;
        virtualinvoke mask.<org.apache.fop.pdf.PDFArray: void add(java.lang.Object)>(index);
        virtualinvoke mask.<org.apache.fop.pdf.PDFArray: void add(java.lang.Object)>(index);
        virtualinvoke dict.<org.apache.fop.pdf.PDFDictionary: void put(java.lang.String,java.lang.Object)>("Mask", mask);

     label4:
        return;
    }

    public java.lang.String getFilterHint()
    {
        org.apache.fop.render.pdf.ImageRenderedAdapter this;

        this := @this: org.apache.fop.render.pdf.ImageRenderedAdapter;
        return "image";
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException l1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        l1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(l1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.apache.commons.logging.Log $r1;

        $r0 = <org.apache.fop.render.pdf.ImageRenderedAdapter: java.lang.Class class$org$apache$fop$render$pdf$ImageRenderedAdapter>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.fop.render.pdf.ImageRenderedAdapter: java.lang.Class class$(java.lang.String)>("org.apache.fop.render.pdf.ImageRenderedAdapter");
        <org.apache.fop.render.pdf.ImageRenderedAdapter: java.lang.Class class$org$apache$fop$render$pdf$ImageRenderedAdapter> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.fop.render.pdf.ImageRenderedAdapter: java.lang.Class class$org$apache$fop$render$pdf$ImageRenderedAdapter>;

     label1:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r0);
        <org.apache.fop.render.pdf.ImageRenderedAdapter: org.apache.commons.logging.Log log> = $r1;
        return;
    }
}
