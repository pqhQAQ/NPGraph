public class org.apache.fop.fo.flow.table.Table extends org.apache.fop.fo.flow.table.TableFObj implements org.apache.fop.fo.flow.table.ColumnNumberManagerHolder, org.apache.fop.fo.properties.BreakPropertySet
{
    private org.apache.fop.fo.properties.CommonBorderPaddingBackground commonBorderPaddingBackground;
    private org.apache.fop.fo.properties.CommonMarginBlock commonMarginBlock;
    private org.apache.fop.fo.properties.LengthRangeProperty blockProgressionDimension;
    private int borderCollapse;
    private org.apache.fop.fo.properties.LengthPairProperty borderSeparation;
    private int breakAfter;
    private int breakBefore;
    private org.apache.fop.fo.properties.LengthRangeProperty inlineProgressionDimension;
    private org.apache.fop.fo.properties.KeepProperty keepTogether;
    private org.apache.fop.fo.properties.KeepProperty keepWithNext;
    private org.apache.fop.fo.properties.KeepProperty keepWithPrevious;
    private int tableLayout;
    private int tableOmitFooterAtBreak;
    private int tableOmitHeaderAtBreak;
    private org.apache.fop.datatypes.Length widowContentLimit;
    private org.apache.fop.datatypes.Length orphanContentLimit;
    private java.util.List columns;
    private org.apache.fop.fo.flow.table.ColumnNumberManager columnNumberManager;
    private org.apache.fop.fo.flow.table.TableBody tableHeader;
    private org.apache.fop.fo.flow.table.TableBody tableFooter;
    private boolean tableColumnFound;
    private boolean tableHeaderFound;
    private boolean tableFooterFound;
    private boolean tableBodyFound;
    private boolean hasExplicitColumns;
    private boolean columnsFinalized;
    private org.apache.fop.fo.flow.table.RowGroupBuilder rowGroupBuilder;
    private org.apache.fop.fo.PropertyList propList;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$apache$fop$fo$flow$table$Table;

    public void <init>(org.apache.fop.fo.FONode)
    {
        org.apache.fop.fo.flow.table.Table this;
        org.apache.fop.fo.FONode parent;
        java.util.ArrayList $r0;
        org.apache.fop.fo.flow.table.ColumnNumberManager $r1;

        this := @this: org.apache.fop.fo.flow.table.Table;
        parent := @parameter0: org.apache.fop.fo.FONode;
        specialinvoke this.<org.apache.fop.fo.flow.table.TableFObj: void <init>(org.apache.fop.fo.FONode)>(parent);
        $r0 = new java.util.ArrayList;
        specialinvoke $r0.<java.util.ArrayList: void <init>()>();
        this.<org.apache.fop.fo.flow.table.Table: java.util.List columns> = $r0;
        $r1 = new org.apache.fop.fo.flow.table.ColumnNumberManager;
        specialinvoke $r1.<org.apache.fop.fo.flow.table.ColumnNumberManager: void <init>()>();
        this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.flow.table.ColumnNumberManager columnNumberManager> = $r1;
        this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.flow.table.TableBody tableHeader> = null;
        this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.flow.table.TableBody tableFooter> = null;
        this.<org.apache.fop.fo.flow.table.Table: boolean tableColumnFound> = 0;
        this.<org.apache.fop.fo.flow.table.Table: boolean tableHeaderFound> = 0;
        this.<org.apache.fop.fo.flow.table.Table: boolean tableFooterFound> = 0;
        this.<org.apache.fop.fo.flow.table.Table: boolean tableBodyFound> = 0;
        this.<org.apache.fop.fo.flow.table.Table: boolean hasExplicitColumns> = 0;
        this.<org.apache.fop.fo.flow.table.Table: boolean columnsFinalized> = 0;
        return;
    }

    public void bind(org.apache.fop.fo.PropertyList) throws org.apache.fop.apps.FOPException
    {
        org.apache.fop.fo.flow.table.Table this;
        org.apache.fop.fo.PropertyList pList;
        org.apache.fop.fo.properties.CommonBorderPaddingBackground $r0, $r9;
        org.apache.fop.fo.properties.CommonMarginBlock $r1;
        org.apache.fop.fo.properties.Property $r2, $r8;
        org.apache.fop.fo.properties.LengthRangeProperty $r3, $r7;
        int $i0, $i1;
        org.apache.fop.fo.properties.LengthPairProperty $r4;
        org.apache.fop.fo.properties.KeepProperty $r5;
        org.apache.fop.datatypes.Length $r6;
        boolean $z0;
        org.apache.fop.datatypes.PercentBaseContext $r10;

        this := @this: org.apache.fop.fo.flow.table.Table;
        pList := @parameter0: org.apache.fop.fo.PropertyList;
        specialinvoke this.<org.apache.fop.fo.flow.table.TableFObj: void bind(org.apache.fop.fo.PropertyList)>(pList);
        $r0 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.CommonBorderPaddingBackground getBorderPaddingBackgroundProps()>();
        this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.properties.CommonBorderPaddingBackground commonBorderPaddingBackground> = $r0;
        $r1 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.CommonMarginBlock getMarginBlockProps()>();
        this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.properties.CommonMarginBlock commonMarginBlock> = $r1;
        $r2 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(17);
        $r3 = virtualinvoke $r2.<org.apache.fop.fo.properties.Property: org.apache.fop.fo.properties.LengthRangeProperty getLengthRange()>();
        this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.properties.LengthRangeProperty blockProgressionDimension> = $r3;
        $r2 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(31);
        $i0 = virtualinvoke $r2.<org.apache.fop.fo.properties.Property: int getEnum()>();
        this.<org.apache.fop.fo.flow.table.Table: int borderCollapse> = $i0;
        $r2 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(45);
        $r4 = virtualinvoke $r2.<org.apache.fop.fo.properties.Property: org.apache.fop.fo.properties.LengthPairProperty getLengthPair()>();
        this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.properties.LengthPairProperty borderSeparation> = $r4;
        $r2 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(58);
        $i0 = virtualinvoke $r2.<org.apache.fop.fo.properties.Property: int getEnum()>();
        this.<org.apache.fop.fo.flow.table.Table: int breakAfter> = $i0;
        $r2 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(59);
        $i0 = virtualinvoke $r2.<org.apache.fop.fo.properties.Property: int getEnum()>();
        this.<org.apache.fop.fo.flow.table.Table: int breakBefore> = $i0;
        $r2 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(116);
        $r3 = virtualinvoke $r2.<org.apache.fop.fo.properties.Property: org.apache.fop.fo.properties.LengthRangeProperty getLengthRange()>();
        this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.properties.LengthRangeProperty inlineProgressionDimension> = $r3;
        $r2 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(118);
        $r5 = virtualinvoke $r2.<org.apache.fop.fo.properties.Property: org.apache.fop.fo.properties.KeepProperty getKeep()>();
        this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.properties.KeepProperty keepTogether> = $r5;
        $r2 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(119);
        $r5 = virtualinvoke $r2.<org.apache.fop.fo.properties.Property: org.apache.fop.fo.properties.KeepProperty getKeep()>();
        this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.properties.KeepProperty keepWithNext> = $r5;
        $r2 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(120);
        $r5 = virtualinvoke $r2.<org.apache.fop.fo.properties.Property: org.apache.fop.fo.properties.KeepProperty getKeep()>();
        this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.properties.KeepProperty keepWithPrevious> = $r5;
        $r2 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(217);
        $i0 = virtualinvoke $r2.<org.apache.fop.fo.properties.Property: int getEnum()>();
        this.<org.apache.fop.fo.flow.table.Table: int tableLayout> = $i0;
        $r2 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(218);
        $i0 = virtualinvoke $r2.<org.apache.fop.fo.properties.Property: int getEnum()>();
        this.<org.apache.fop.fo.flow.table.Table: int tableOmitFooterAtBreak> = $i0;
        $r2 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(219);
        $i0 = virtualinvoke $r2.<org.apache.fop.fo.properties.Property: int getEnum()>();
        this.<org.apache.fop.fo.flow.table.Table: int tableOmitHeaderAtBreak> = $i0;
        $r2 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(252);
        $r6 = virtualinvoke $r2.<org.apache.fop.fo.properties.Property: org.apache.fop.datatypes.Length getLength()>();
        this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.datatypes.Length widowContentLimit> = $r6;
        $r2 = virtualinvoke pList.<org.apache.fop.fo.PropertyList: org.apache.fop.fo.properties.Property get(int)>(253);
        $r6 = virtualinvoke $r2.<org.apache.fop.fo.properties.Property: org.apache.fop.datatypes.Length getLength()>();
        this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.datatypes.Length orphanContentLimit> = $r6;
        $r7 = this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.properties.LengthRangeProperty blockProgressionDimension>;
        $r8 = virtualinvoke $r7.<org.apache.fop.fo.properties.LengthRangeProperty: org.apache.fop.fo.properties.Property getOptimum(org.apache.fop.datatypes.PercentBaseContext)>(null);
        $z0 = virtualinvoke $r8.<org.apache.fop.fo.properties.Property: boolean isAuto()>();
        if $z0 != 0 goto label0;

        virtualinvoke this.<org.apache.fop.fo.flow.table.Table: void attributeWarning(java.lang.String)>("only a value of \"auto\" for block-progression-dimension has a well-specified behavior on fo:table. Falling back to \"auto\"");

     label0:
        $i1 = this.<org.apache.fop.fo.flow.table.Table: int tableLayout>;
        if $i1 != 9 goto label1;

        virtualinvoke this.<org.apache.fop.fo.flow.table.Table: void attributeWarning(java.lang.String)>("table-layout=\"auto\" is currently not supported by FOP");

     label1:
        $z0 = virtualinvoke this.<org.apache.fop.fo.flow.table.Table: boolean isSeparateBorderModel()>();
        if $z0 != 0 goto label2;

        $r9 = virtualinvoke this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.properties.CommonBorderPaddingBackground getCommonBorderPaddingBackground()>();
        $r10 = staticinvoke <org.apache.fop.datatypes.ValidationPercentBaseContext: org.apache.fop.datatypes.PercentBaseContext getPseudoContext()>();
        $z0 = virtualinvoke $r9.<org.apache.fop.fo.properties.CommonBorderPaddingBackground: boolean hasPadding(org.apache.fop.datatypes.PercentBaseContext)>($r10);
        if $z0 == 0 goto label2;

        virtualinvoke this.<org.apache.fop.fo.flow.table.Table: void attributeWarning(java.lang.String)>("In collapsing border model a table does not have padding (see http://www.w3.org/TR/REC-CSS2/tables.html#collapsing-borders), but a non-zero value for padding was found. The padding will be ignored.");

     label2:
        this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.PropertyList propList> = pList;
        return;
    }

    public void startOfNode() throws org.apache.fop.apps.FOPException
    {
        org.apache.fop.fo.flow.table.Table this;
        org.apache.fop.fo.FOEventHandler $r0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        specialinvoke this.<org.apache.fop.fo.flow.table.TableFObj: void startOfNode()>();
        $r0 = virtualinvoke this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.FOEventHandler getFOEventHandler()>();
        virtualinvoke $r0.<org.apache.fop.fo.FOEventHandler: void startTable(org.apache.fop.fo.flow.table.Table)>(this);
        return;
    }

    protected void validateChildNode(org.xml.sax.Locator, java.lang.String, java.lang.String) throws org.apache.fop.fo.ValidationException
    {
        org.apache.fop.fo.flow.table.Table this;
        org.xml.sax.Locator loc;
        java.lang.String nsURI, localName, $r0;
        boolean $z0;
        org.apache.fop.apps.FOUserAgent $r1;

        this := @this: org.apache.fop.fo.flow.table.Table;
        loc := @parameter0: org.xml.sax.Locator;
        nsURI := @parameter1: java.lang.String;
        localName := @parameter2: java.lang.String;
        $r0 = "http://www.w3.org/1999/XSL/Format";
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(nsURI);
        if $z0 == 0 goto label11;

        $r0 = "marker";
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(localName);
        if $z0 == 0 goto label1;

        $z0 = this.<org.apache.fop.fo.flow.table.Table: boolean tableColumnFound>;
        if $z0 != 0 goto label0;

        $z0 = this.<org.apache.fop.fo.flow.table.Table: boolean tableHeaderFound>;
        if $z0 != 0 goto label0;

        $z0 = this.<org.apache.fop.fo.flow.table.Table: boolean tableFooterFound>;
        if $z0 != 0 goto label0;

        $z0 = this.<org.apache.fop.fo.flow.table.Table: boolean tableBodyFound>;
        if $z0 == 0 goto label12;

     label0:
        virtualinvoke this.<org.apache.fop.fo.flow.table.Table: void nodesOutOfOrderError(org.xml.sax.Locator,java.lang.String,java.lang.String)>(loc, "fo:marker", "(table-column*,table-header?,table-footer?,table-body+)");
        goto label12;

     label1:
        $r0 = "table-column";
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(localName);
        if $z0 == 0 goto label3;

        this.<org.apache.fop.fo.flow.table.Table: boolean tableColumnFound> = 1;
        $z0 = this.<org.apache.fop.fo.flow.table.Table: boolean tableHeaderFound>;
        if $z0 != 0 goto label2;

        $z0 = this.<org.apache.fop.fo.flow.table.Table: boolean tableFooterFound>;
        if $z0 != 0 goto label2;

        $z0 = this.<org.apache.fop.fo.flow.table.Table: boolean tableBodyFound>;
        if $z0 == 0 goto label12;

     label2:
        virtualinvoke this.<org.apache.fop.fo.flow.table.Table: void nodesOutOfOrderError(org.xml.sax.Locator,java.lang.String,java.lang.String)>(loc, "fo:table-column", "(table-header?,table-footer?,table-body+)");
        goto label12;

     label3:
        $r0 = "table-header";
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(localName);
        if $z0 == 0 goto label6;

        $z0 = this.<org.apache.fop.fo.flow.table.Table: boolean tableHeaderFound>;
        if $z0 == 0 goto label4;

        virtualinvoke this.<org.apache.fop.fo.flow.table.Table: void tooManyNodesError(org.xml.sax.Locator,java.lang.String)>(loc, "table-header");
        goto label12;

     label4:
        this.<org.apache.fop.fo.flow.table.Table: boolean tableHeaderFound> = 1;
        $z0 = this.<org.apache.fop.fo.flow.table.Table: boolean tableFooterFound>;
        if $z0 != 0 goto label5;

        $z0 = this.<org.apache.fop.fo.flow.table.Table: boolean tableBodyFound>;
        if $z0 == 0 goto label12;

     label5:
        virtualinvoke this.<org.apache.fop.fo.flow.table.Table: void nodesOutOfOrderError(org.xml.sax.Locator,java.lang.String,java.lang.String)>(loc, "fo:table-header", "(table-footer?,table-body+)");
        goto label12;

     label6:
        $r0 = "table-footer";
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(localName);
        if $z0 == 0 goto label9;

        $z0 = this.<org.apache.fop.fo.flow.table.Table: boolean tableFooterFound>;
        if $z0 == 0 goto label7;

        virtualinvoke this.<org.apache.fop.fo.flow.table.Table: void tooManyNodesError(org.xml.sax.Locator,java.lang.String)>(loc, "table-footer");
        goto label12;

     label7:
        this.<org.apache.fop.fo.flow.table.Table: boolean tableFooterFound> = 1;
        $z0 = this.<org.apache.fop.fo.flow.table.Table: boolean tableBodyFound>;
        if $z0 == 0 goto label12;

        $r1 = virtualinvoke this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.apps.FOUserAgent getUserAgent()>();
        $z0 = virtualinvoke $r1.<org.apache.fop.apps.FOUserAgent: boolean validateStrictly()>();
        if $z0 == 0 goto label8;

        virtualinvoke this.<org.apache.fop.fo.flow.table.Table: void nodesOutOfOrderError(org.xml.sax.Locator,java.lang.String,java.lang.String)>(loc, "fo:table-footer", "(table-body+)");
        goto label12;

     label8:
        $z0 = virtualinvoke this.<org.apache.fop.fo.flow.table.Table: boolean isSeparateBorderModel()>();
        if $z0 != 0 goto label12;

        virtualinvoke this.<org.apache.fop.fo.flow.table.Table: void nodesOutOfOrderError(org.xml.sax.Locator,java.lang.String,java.lang.String)>(loc, "fo:table-footer", "(table-body+). This table uses the collapsing border model. In order to resolve borders in an efficient way the table-footer must be known before any table-body is parsed. Either put the footer at the correct place or switch to the separate border model");
        goto label12;

     label9:
        $r0 = "table-body";
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(localName);
        if $z0 == 0 goto label10;

        this.<org.apache.fop.fo.flow.table.Table: boolean tableBodyFound> = 1;
        goto label12;

     label10:
        virtualinvoke this.<org.apache.fop.fo.flow.table.Table: void invalidChildError(org.xml.sax.Locator,java.lang.String,java.lang.String)>(loc, nsURI, localName);
        goto label12;

     label11:
        virtualinvoke this.<org.apache.fop.fo.flow.table.Table: void invalidChildError(org.xml.sax.Locator,java.lang.String,java.lang.String)>(loc, nsURI, localName);

     label12:
        return;
    }

    public void endOfNode() throws org.apache.fop.apps.FOPException
    {
        org.apache.fop.fo.flow.table.Table this;
        int i;
        org.apache.fop.fo.flow.table.TableColumn col;
        boolean $z0;
        org.apache.fop.fo.flow.table.RowGroupBuilder $r0;
        java.util.List $r1;
        java.lang.Object $r2;
        org.apache.fop.fo.FOEventHandler $r3;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $z0 = this.<org.apache.fop.fo.flow.table.Table: boolean tableBodyFound>;
        if $z0 != 0 goto label0;

        virtualinvoke this.<org.apache.fop.fo.flow.table.Table: void missingChildElementError(java.lang.String)>("(marker*,table-column*,table-header?,table-footer?,table-body+)");

     label0:
        $z0 = virtualinvoke this.<org.apache.fop.fo.flow.table.Table: boolean inMarker()>();
        if $z0 != 0 goto label4;

        $r0 = this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.flow.table.RowGroupBuilder rowGroupBuilder>;
        virtualinvoke $r0.<org.apache.fop.fo.flow.table.RowGroupBuilder: void endTable()>();
        $r1 = this.<org.apache.fop.fo.flow.table.Table: java.util.List columns>;
        i = interfaceinvoke $r1.<java.util.List: int size()>();

     label1:
        i = i + -1;
        if i < 0 goto label3;

        $r1 = this.<org.apache.fop.fo.flow.table.Table: java.util.List columns>;
        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i);
        col = (org.apache.fop.fo.flow.table.TableColumn) $r2;
        if col == null goto label2;

        virtualinvoke col.<org.apache.fop.fo.flow.table.TableColumn: void releasePropertyList()>();

     label2:
        goto label1;

     label3:
        this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.PropertyList propList> = null;
        this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.flow.table.RowGroupBuilder rowGroupBuilder> = null;

     label4:
        $r3 = virtualinvoke this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.FOEventHandler getFOEventHandler()>();
        virtualinvoke $r3.<org.apache.fop.fo.FOEventHandler: void endTable(org.apache.fop.fo.flow.table.Table)>(this);
        return;
    }

    protected void addChildNode(org.apache.fop.fo.FONode) throws org.apache.fop.apps.FOPException
    {
        org.apache.fop.fo.flow.table.Table this;
        org.apache.fop.fo.FONode child;
        int childId;
        boolean $z0;
        org.apache.fop.fo.flow.table.TableColumn $r0;
        java.util.List $r1;
        org.apache.fop.fo.flow.table.FixedColRowGroupBuilder $r2;
        org.apache.fop.fo.flow.table.VariableColRowGroupBuilder $r3;
        org.apache.fop.fo.flow.table.TableBody $r4;

        this := @this: org.apache.fop.fo.flow.table.Table;
        child := @parameter0: org.apache.fop.fo.FONode;
        childId = virtualinvoke child.<org.apache.fop.fo.FONode: int getNameId()>();
        tableswitch(childId)
        {
            case 48: goto label2;
            case 49: goto label8;
            case 50: goto label8;
            case 51: goto label0;
            case 52: goto label2;
            case 53: goto label2;
            default: goto label8;
        };

     label0:
        this.<org.apache.fop.fo.flow.table.Table: boolean hasExplicitColumns> = 1;
        $z0 = virtualinvoke this.<org.apache.fop.fo.flow.table.Table: boolean inMarker()>();
        if $z0 != 0 goto label1;

        $r0 = (org.apache.fop.fo.flow.table.TableColumn) child;
        specialinvoke this.<org.apache.fop.fo.flow.table.Table: void addColumnNode(org.apache.fop.fo.flow.table.TableColumn)>($r0);
        goto label9;

     label1:
        $r1 = this.<org.apache.fop.fo.flow.table.Table: java.util.List columns>;
        $r0 = (org.apache.fop.fo.flow.table.TableColumn) child;
        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r0);
        goto label9;

     label2:
        $z0 = this.<org.apache.fop.fo.flow.table.Table: boolean columnsFinalized>;
        if $z0 != 0 goto label4;

        this.<org.apache.fop.fo.flow.table.Table: boolean columnsFinalized> = 1;
        $z0 = this.<org.apache.fop.fo.flow.table.Table: boolean hasExplicitColumns>;
        if $z0 == 0 goto label3;

        specialinvoke this.<org.apache.fop.fo.flow.table.Table: void finalizeColumns()>();
        $r2 = new org.apache.fop.fo.flow.table.FixedColRowGroupBuilder;
        specialinvoke $r2.<org.apache.fop.fo.flow.table.FixedColRowGroupBuilder: void <init>(org.apache.fop.fo.flow.table.Table)>(this);
        this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.flow.table.RowGroupBuilder rowGroupBuilder> = $r2;
        goto label4;

     label3:
        $r3 = new org.apache.fop.fo.flow.table.VariableColRowGroupBuilder;
        specialinvoke $r3.<org.apache.fop.fo.flow.table.VariableColRowGroupBuilder: void <init>(org.apache.fop.fo.flow.table.Table)>(this);
        this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.flow.table.RowGroupBuilder rowGroupBuilder> = $r3;

     label4:
        lookupswitch(childId)
        {
            case 52: goto label5;
            case 53: goto label6;
            default: goto label7;
        };

     label5:
        $r4 = (org.apache.fop.fo.flow.table.TableBody) child;
        this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.flow.table.TableBody tableFooter> = $r4;
        goto label9;

     label6:
        $r4 = (org.apache.fop.fo.flow.table.TableBody) child;
        this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.flow.table.TableBody tableHeader> = $r4;
        goto label9;

     label7:
        specialinvoke this.<org.apache.fop.fo.flow.table.TableFObj: void addChildNode(org.apache.fop.fo.FONode)>(child);
        goto label9;

     label8:
        specialinvoke this.<org.apache.fop.fo.flow.table.TableFObj: void addChildNode(org.apache.fop.fo.FONode)>(child);

     label9:
        return;
    }

    protected void setCollapsedBorders()
    {
        org.apache.fop.fo.flow.table.Table this;

        this := @this: org.apache.fop.fo.flow.table.Table;
        virtualinvoke this.<org.apache.fop.fo.flow.table.Table: void createBorder(int)>(2);
        virtualinvoke this.<org.apache.fop.fo.flow.table.Table: void createBorder(int)>(3);
        virtualinvoke this.<org.apache.fop.fo.flow.table.Table: void createBorder(int)>(0);
        virtualinvoke this.<org.apache.fop.fo.flow.table.Table: void createBorder(int)>(1);
        return;
    }

    private void finalizeColumns() throws org.apache.fop.apps.FOPException
    {
        org.apache.fop.fo.flow.table.Table this;
        int i, $i0, $i1;
        java.util.List $r0, $r1;
        java.lang.Object $r2;
        org.apache.fop.fo.flow.table.TableColumn $r3;

        this := @this: org.apache.fop.fo.flow.table.Table;
        i = 0;

     label0:
        $r0 = this.<org.apache.fop.fo.flow.table.Table: java.util.List columns>;
        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();
        if i >= $i0 goto label2;

        $r1 = this.<org.apache.fop.fo.flow.table.Table: java.util.List columns>;
        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i);
        if $r2 != null goto label1;

        $r1 = this.<org.apache.fop.fo.flow.table.Table: java.util.List columns>;
        $i1 = i + 1;
        $r3 = specialinvoke this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.flow.table.TableColumn createImplicitColumn(int)>($i1);
        interfaceinvoke $r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i, $r3);

     label1:
        i = i + 1;
        goto label0;

     label2:
        return;
    }

    public org.apache.fop.fo.flow.table.Table getTable()
    {
        org.apache.fop.fo.flow.table.Table this;

        this := @this: org.apache.fop.fo.flow.table.Table;
        return this;
    }

    void ensureColumnNumber(int) throws org.apache.fop.apps.FOPException
    {
        org.apache.fop.fo.flow.table.Table this;
        int columnNumber, i, $i0;
        boolean $z0;
        java.lang.AssertionError $r0;
        java.util.List $r1;
        org.apache.fop.fo.flow.table.TableColumn $r2;

        this := @this: org.apache.fop.fo.flow.table.Table;
        columnNumber := @parameter0: int;
        $z0 = <org.apache.fop.fo.flow.table.Table: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $z0 = this.<org.apache.fop.fo.flow.table.Table: boolean hasExplicitColumns>;
        if $z0 == 0 goto label0;

        $r0 = new java.lang.AssertionError;
        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();
        throw $r0;

     label0:
        $r1 = this.<org.apache.fop.fo.flow.table.Table: java.util.List columns>;
        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();
        i = $i0 + 1;

     label1:
        if i > columnNumber goto label2;

        $r1 = this.<org.apache.fop.fo.flow.table.Table: java.util.List columns>;
        $r2 = specialinvoke this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.flow.table.TableColumn createImplicitColumn(int)>(i);
        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);
        i = i + 1;
        goto label1;

     label2:
        return;
    }

    private org.apache.fop.fo.flow.table.TableColumn createImplicitColumn(int) throws org.apache.fop.apps.FOPException
    {
        org.apache.fop.fo.flow.table.Table this;
        int colNumber;
        org.apache.fop.fo.flow.table.TableColumn $r0, implicitColumn;
        org.apache.fop.fo.StaticPropertyList pList, $r1;
        org.apache.fop.fo.PropertyList $r2;
        org.apache.fop.fo.properties.TableColLength $r3;
        boolean $z0;
        org.apache.fop.layoutmgr.table.CollapsingBorderModel $r4;

        this := @this: org.apache.fop.fo.flow.table.Table;
        colNumber := @parameter0: int;
        $r0 = new org.apache.fop.fo.flow.table.TableColumn;
        specialinvoke $r0.<org.apache.fop.fo.flow.table.TableColumn: void <init>(org.apache.fop.fo.FONode,boolean)>(this, 1);
        implicitColumn = $r0;
        $r1 = new org.apache.fop.fo.StaticPropertyList;
        $r2 = this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.PropertyList propList>;
        specialinvoke $r1.<org.apache.fop.fo.StaticPropertyList: void <init>(org.apache.fop.fo.FObj,org.apache.fop.fo.PropertyList)>(implicitColumn, $r2);
        pList = $r1;
        virtualinvoke pList.<org.apache.fop.fo.PropertyList: void setWritingMode()>();
        virtualinvoke implicitColumn.<org.apache.fop.fo.flow.table.TableColumn: void bind(org.apache.fop.fo.PropertyList)>(pList);
        $r3 = new org.apache.fop.fo.properties.TableColLength;
        specialinvoke $r3.<org.apache.fop.fo.properties.TableColLength: void <init>(double,org.apache.fop.fo.FObj)>(1.0, implicitColumn);
        virtualinvoke implicitColumn.<org.apache.fop.fo.flow.table.TableColumn: void setColumnWidth(org.apache.fop.datatypes.Length)>($r3);
        virtualinvoke implicitColumn.<org.apache.fop.fo.flow.table.TableColumn: void setColumnNumber(int)>(colNumber);
        $z0 = virtualinvoke this.<org.apache.fop.fo.flow.table.Table: boolean isSeparateBorderModel()>();
        if $z0 != 0 goto label0;

        $r4 = this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.layoutmgr.table.CollapsingBorderModel collapsingBorderModel>;
        virtualinvoke implicitColumn.<org.apache.fop.fo.flow.table.TableColumn: void setCollapsedBorders(org.apache.fop.layoutmgr.table.CollapsingBorderModel)>($r4);

     label0:
        return implicitColumn;
    }

    private void addColumnNode(org.apache.fop.fo.flow.table.TableColumn)
    {
        org.apache.fop.fo.flow.table.Table this;
        org.apache.fop.fo.flow.table.TableColumn col;
        int colNumber, colRepeat, i, $i0, $i1, $i2;
        java.util.List $r0;
        org.apache.fop.fo.flow.table.ColumnNumberManager $r2;

        this := @this: org.apache.fop.fo.flow.table.Table;
        col := @parameter0: org.apache.fop.fo.flow.table.TableColumn;
        colNumber = virtualinvoke col.<org.apache.fop.fo.flow.table.TableColumn: int getColumnNumber()>();
        colRepeat = virtualinvoke col.<org.apache.fop.fo.flow.table.TableColumn: int getNumberColumnsRepeated()>();

     label0:
        $r0 = this.<org.apache.fop.fo.flow.table.Table: java.util.List columns>;
        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();
        $i1 = colNumber + colRepeat;
        $i1 = $i1 - 1;
        if $i0 >= $i1 goto label1;

        $r0 = this.<org.apache.fop.fo.flow.table.Table: java.util.List columns>;
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(null);
        goto label0;

     label1:
        i = colNumber - 1;

     label2:
        $i1 = colNumber + colRepeat;
        $i1 = $i1 - 1;
        if i >= $i1 goto label3;

        $r0 = this.<org.apache.fop.fo.flow.table.Table: java.util.List columns>;
        interfaceinvoke $r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i, col);
        i = i + 1;
        goto label2;

     label3:
        $r2 = this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.flow.table.ColumnNumberManager columnNumberManager>;
        $i2 = colNumber + colRepeat;
        $i2 = $i2 - 1;
        virtualinvoke $r2.<org.apache.fop.fo.flow.table.ColumnNumberManager: void signalUsedColumnNumbers(int,int)>(colNumber, $i2);
        return;
    }

    boolean hasExplicitColumns()
    {
        org.apache.fop.fo.flow.table.Table this;
        boolean $z0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $z0 = this.<org.apache.fop.fo.flow.table.Table: boolean hasExplicitColumns>;
        return $z0;
    }

    public boolean isAutoLayout()
    {
        org.apache.fop.fo.flow.table.Table this;
        int $i0;
        boolean $z0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $i0 = this.<org.apache.fop.fo.flow.table.Table: int tableLayout>;
        if $i0 != 9 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.util.List getColumns()
    {
        org.apache.fop.fo.flow.table.Table this;
        java.util.List $r0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $r0 = this.<org.apache.fop.fo.flow.table.Table: java.util.List columns>;
        return $r0;
    }

    public org.apache.fop.fo.flow.table.TableColumn getColumn(int)
    {
        org.apache.fop.fo.flow.table.Table this;
        int index;
        java.util.List $r0;
        java.lang.Object $r1;
        org.apache.fop.fo.flow.table.TableColumn $r2;

        this := @this: org.apache.fop.fo.flow.table.Table;
        index := @parameter0: int;
        $r0 = this.<org.apache.fop.fo.flow.table.Table: java.util.List columns>;
        $r1 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(index);
        $r2 = (org.apache.fop.fo.flow.table.TableColumn) $r1;
        return $r2;
    }

    public int getNumberOfColumns()
    {
        org.apache.fop.fo.flow.table.Table this;
        java.util.List $r0;
        int $i0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $r0 = this.<org.apache.fop.fo.flow.table.Table: java.util.List columns>;
        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();
        return $i0;
    }

    public org.apache.fop.fo.flow.table.TableBody getTableHeader()
    {
        org.apache.fop.fo.flow.table.Table this;
        org.apache.fop.fo.flow.table.TableBody $r0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $r0 = this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.flow.table.TableBody tableHeader>;
        return $r0;
    }

    public org.apache.fop.fo.flow.table.TableBody getTableFooter()
    {
        org.apache.fop.fo.flow.table.Table this;
        org.apache.fop.fo.flow.table.TableBody $r0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $r0 = this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.flow.table.TableBody tableFooter>;
        return $r0;
    }

    public boolean omitHeaderAtBreak()
    {
        org.apache.fop.fo.flow.table.Table this;
        int $i0;
        boolean $z0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $i0 = this.<org.apache.fop.fo.flow.table.Table: int tableOmitHeaderAtBreak>;
        if $i0 != 149 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean omitFooterAtBreak()
    {
        org.apache.fop.fo.flow.table.Table this;
        int $i0;
        boolean $z0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $i0 = this.<org.apache.fop.fo.flow.table.Table: int tableOmitFooterAtBreak>;
        if $i0 != 149 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public org.apache.fop.fo.properties.LengthRangeProperty getInlineProgressionDimension()
    {
        org.apache.fop.fo.flow.table.Table this;
        org.apache.fop.fo.properties.LengthRangeProperty $r0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $r0 = this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.properties.LengthRangeProperty inlineProgressionDimension>;
        return $r0;
    }

    public org.apache.fop.fo.properties.LengthRangeProperty getBlockProgressionDimension()
    {
        org.apache.fop.fo.flow.table.Table this;
        org.apache.fop.fo.properties.LengthRangeProperty $r0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $r0 = this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.properties.LengthRangeProperty blockProgressionDimension>;
        return $r0;
    }

    public org.apache.fop.fo.properties.CommonMarginBlock getCommonMarginBlock()
    {
        org.apache.fop.fo.flow.table.Table this;
        org.apache.fop.fo.properties.CommonMarginBlock $r0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $r0 = this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.properties.CommonMarginBlock commonMarginBlock>;
        return $r0;
    }

    public org.apache.fop.fo.properties.CommonBorderPaddingBackground getCommonBorderPaddingBackground()
    {
        org.apache.fop.fo.flow.table.Table this;
        org.apache.fop.fo.properties.CommonBorderPaddingBackground $r0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $r0 = this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.properties.CommonBorderPaddingBackground commonBorderPaddingBackground>;
        return $r0;
    }

    public int getBreakAfter()
    {
        org.apache.fop.fo.flow.table.Table this;
        int $i0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $i0 = this.<org.apache.fop.fo.flow.table.Table: int breakAfter>;
        return $i0;
    }

    public int getBreakBefore()
    {
        org.apache.fop.fo.flow.table.Table this;
        int $i0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $i0 = this.<org.apache.fop.fo.flow.table.Table: int breakBefore>;
        return $i0;
    }

    public org.apache.fop.fo.properties.KeepProperty getKeepWithNext()
    {
        org.apache.fop.fo.flow.table.Table this;
        org.apache.fop.fo.properties.KeepProperty $r0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $r0 = this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.properties.KeepProperty keepWithNext>;
        return $r0;
    }

    public org.apache.fop.fo.properties.KeepProperty getKeepWithPrevious()
    {
        org.apache.fop.fo.flow.table.Table this;
        org.apache.fop.fo.properties.KeepProperty $r0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $r0 = this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.properties.KeepProperty keepWithPrevious>;
        return $r0;
    }

    public org.apache.fop.fo.properties.KeepProperty getKeepTogether()
    {
        org.apache.fop.fo.flow.table.Table this;
        org.apache.fop.fo.properties.KeepProperty $r0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $r0 = this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.properties.KeepProperty keepTogether>;
        return $r0;
    }

    public boolean mustKeepTogether()
    {
        org.apache.fop.fo.flow.table.Table this;
        org.apache.fop.fo.properties.KeepProperty $r0;
        org.apache.fop.fo.properties.Property $r1;
        boolean $z0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $r0 = virtualinvoke this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.properties.KeepProperty getKeepTogether()>();
        $r1 = virtualinvoke $r0.<org.apache.fop.fo.properties.KeepProperty: org.apache.fop.fo.properties.Property getWithinPage()>();
        $z0 = virtualinvoke $r1.<org.apache.fop.fo.properties.Property: boolean isAuto()>();
        if $z0 == 0 goto label0;

        $r0 = virtualinvoke this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.properties.KeepProperty getKeepTogether()>();
        $r1 = virtualinvoke $r0.<org.apache.fop.fo.properties.KeepProperty: org.apache.fop.fo.properties.Property getWithinColumn()>();
        $z0 = virtualinvoke $r1.<org.apache.fop.fo.properties.Property: boolean isAuto()>();
        if $z0 != 0 goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getBorderCollapse()
    {
        org.apache.fop.fo.flow.table.Table this;
        int $i0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $i0 = this.<org.apache.fop.fo.flow.table.Table: int borderCollapse>;
        return $i0;
    }

    public boolean isSeparateBorderModel()
    {
        org.apache.fop.fo.flow.table.Table this;
        int $i0;
        boolean $z0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $i0 = virtualinvoke this.<org.apache.fop.fo.flow.table.Table: int getBorderCollapse()>();
        if $i0 != 129 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public org.apache.fop.fo.properties.LengthPairProperty getBorderSeparation()
    {
        org.apache.fop.fo.flow.table.Table this;
        org.apache.fop.fo.properties.LengthPairProperty $r0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $r0 = this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.properties.LengthPairProperty borderSeparation>;
        return $r0;
    }

    public org.apache.fop.datatypes.Length getWidowContentLimit()
    {
        org.apache.fop.fo.flow.table.Table this;
        org.apache.fop.datatypes.Length $r0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $r0 = this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.datatypes.Length widowContentLimit>;
        return $r0;
    }

    public org.apache.fop.datatypes.Length getOrphanContentLimit()
    {
        org.apache.fop.fo.flow.table.Table this;
        org.apache.fop.datatypes.Length $r0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $r0 = this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.datatypes.Length orphanContentLimit>;
        return $r0;
    }

    public java.lang.String getLocalName()
    {
        org.apache.fop.fo.flow.table.Table this;

        this := @this: org.apache.fop.fo.flow.table.Table;
        return "table";
    }

    public int getNameId()
    {
        org.apache.fop.fo.flow.table.Table this;

        this := @this: org.apache.fop.fo.flow.table.Table;
        return 46;
    }

    public org.apache.fop.fo.FONode clone(org.apache.fop.fo.FONode, boolean) throws org.apache.fop.apps.FOPException
    {
        org.apache.fop.fo.flow.table.Table this, clone;
        org.apache.fop.fo.FONode parent, $r0;
        boolean removeChildren;
        java.util.ArrayList $r1;

        this := @this: org.apache.fop.fo.flow.table.Table;
        parent := @parameter0: org.apache.fop.fo.FONode;
        removeChildren := @parameter1: boolean;
        $r0 = specialinvoke this.<org.apache.fop.fo.flow.table.TableFObj: org.apache.fop.fo.FONode clone(org.apache.fop.fo.FONode,boolean)>(parent, removeChildren);
        clone = (org.apache.fop.fo.flow.table.Table) $r0;
        clone.<org.apache.fop.fo.flow.table.Table: boolean columnsFinalized> = 0;
        if removeChildren == 0 goto label0;

        $r1 = new java.util.ArrayList;
        specialinvoke $r1.<java.util.ArrayList: void <init>()>();
        clone.<org.apache.fop.fo.flow.table.Table: java.util.List columns> = $r1;
        clone.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.flow.table.TableBody tableHeader> = null;
        clone.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.flow.table.TableBody tableFooter> = null;

     label0:
        return clone;
    }

    public org.apache.fop.fo.flow.table.ColumnNumberManager getColumnNumberManager()
    {
        org.apache.fop.fo.flow.table.Table this;
        org.apache.fop.fo.flow.table.ColumnNumberManager $r0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $r0 = this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.flow.table.ColumnNumberManager columnNumberManager>;
        return $r0;
    }

    org.apache.fop.fo.flow.table.RowGroupBuilder getRowGroupBuilder()
    {
        org.apache.fop.fo.flow.table.Table this;
        org.apache.fop.fo.flow.table.RowGroupBuilder $r0;

        this := @this: org.apache.fop.fo.flow.table.Table;
        $r0 = this.<org.apache.fop.fo.flow.table.Table: org.apache.fop.fo.flow.table.RowGroupBuilder rowGroupBuilder>;
        return $r0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException l1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        l1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(l1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0;

        $r0 = <org.apache.fop.fo.flow.table.Table: java.lang.Class class$org$apache$fop$fo$flow$table$Table>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.fop.fo.flow.table.Table: java.lang.Class class$(java.lang.String)>("org.apache.fop.fo.flow.table.Table");
        <org.apache.fop.fo.flow.table.Table: java.lang.Class class$org$apache$fop$fo$flow$table$Table> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.fop.fo.flow.table.Table: java.lang.Class class$org$apache$fop$fo$flow$table$Table>;

     label1:
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label2;

        $z0 = 1;
        goto label3;

     label2:
        $z0 = 0;

     label3:
        <org.apache.fop.fo.flow.table.Table: boolean $assertionsDisabled> = $z0;
        return;
    }
}
