public abstract class org.apache.fop.render.AbstractPathOrientedRenderer extends org.apache.fop.render.PrintRenderer
{
    private static final org.apache.fop.util.QName FOX_TRANSFORM;

    public void <init>()
    {
        org.apache.fop.render.AbstractPathOrientedRenderer this;

        this := @this: org.apache.fop.render.AbstractPathOrientedRenderer;
        specialinvoke this.<org.apache.fop.render.PrintRenderer: void <init>()>();
        return;
    }

    protected void handleBlockTraits(org.apache.fop.area.Block)
    {
        org.apache.fop.render.AbstractPathOrientedRenderer this;
        org.apache.fop.area.Block block;
        int borderPaddingStart, borderPaddingBefore, $i0, $i1;
        float startx, starty, width, height, $f0, $f1;

        this := @this: org.apache.fop.render.AbstractPathOrientedRenderer;
        block := @parameter0: org.apache.fop.area.Block;
        borderPaddingStart = virtualinvoke block.<org.apache.fop.area.Block: int getBorderAndPaddingWidthStart()>();
        borderPaddingBefore = virtualinvoke block.<org.apache.fop.area.Block: int getBorderAndPaddingWidthBefore()>();
        $i0 = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentIPPosition>;
        $f0 = (float) $i0;
        startx = $f0 / 1000.0F;
        $i0 = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition>;
        $f0 = (float) $i0;
        starty = $f0 / 1000.0F;
        $i0 = virtualinvoke block.<org.apache.fop.area.Block: int getIPD()>();
        $f0 = (float) $i0;
        width = $f0 / 1000.0F;
        $i0 = virtualinvoke block.<org.apache.fop.area.Block: int getBPD()>();
        $f0 = (float) $i0;
        height = $f0 / 1000.0F;
        $i1 = virtualinvoke block.<org.apache.fop.area.Block: int getStartIndent()>();
        $f1 = (float) $i1;
        $f1 = $f1 / 1000.0F;
        startx = startx + $f1;
        $i1 = virtualinvoke block.<org.apache.fop.area.Block: int getBorderAndPaddingWidthStart()>();
        $f1 = (float) $i1;
        $f1 = $f1 / 1000.0F;
        startx = startx - $f1;
        $f1 = (float) borderPaddingStart;
        $f1 = $f1 / 1000.0F;
        width = width + $f1;
        $i1 = virtualinvoke block.<org.apache.fop.area.Block: int getBorderAndPaddingWidthEnd()>();
        $f1 = (float) $i1;
        $f1 = $f1 / 1000.0F;
        width = width + $f1;
        $f1 = (float) borderPaddingBefore;
        $f1 = $f1 / 1000.0F;
        height = height + $f1;
        $i1 = virtualinvoke block.<org.apache.fop.area.Block: int getBorderAndPaddingWidthAfter()>();
        $f1 = (float) $i1;
        $f1 = $f1 / 1000.0F;
        height = height + $f1;
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void drawBackAndBorders(org.apache.fop.area.Area,float,float,float,float)>(block, startx, starty, width, height);
        return;
    }

    protected void handleRegionTraits(org.apache.fop.area.RegionViewport)
    {
        org.apache.fop.render.AbstractPathOrientedRenderer this;
        org.apache.fop.area.RegionViewport region;
        java.awt.geom.Rectangle2D viewArea;
        float startx, starty, width, height;
        double $d0;
        org.apache.fop.area.RegionReference $r0;
        int $i0, $i1;

        this := @this: org.apache.fop.render.AbstractPathOrientedRenderer;
        region := @parameter0: org.apache.fop.area.RegionViewport;
        viewArea = virtualinvoke region.<org.apache.fop.area.RegionViewport: java.awt.geom.Rectangle2D getViewArea()>();
        $d0 = virtualinvoke viewArea.<java.awt.geom.Rectangle2D: double getX()>();
        $d0 = $d0 / 1000.0;
        startx = (float) $d0;
        $d0 = virtualinvoke viewArea.<java.awt.geom.Rectangle2D: double getY()>();
        $d0 = $d0 / 1000.0;
        starty = (float) $d0;
        $d0 = virtualinvoke viewArea.<java.awt.geom.Rectangle2D: double getWidth()>();
        $d0 = $d0 / 1000.0;
        width = (float) $d0;
        $d0 = virtualinvoke viewArea.<java.awt.geom.Rectangle2D: double getHeight()>();
        $d0 = $d0 / 1000.0;
        height = (float) $d0;
        $r0 = virtualinvoke region.<org.apache.fop.area.RegionViewport: org.apache.fop.area.RegionReference getRegionReference()>();
        $i0 = virtualinvoke $r0.<org.apache.fop.area.RegionReference: int getRegionClass()>();
        if $i0 != 36 goto label0;

        $i1 = virtualinvoke region.<org.apache.fop.area.RegionViewport: int getBorderAndPaddingWidthBefore()>();
        this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition> = $i1;
        $i1 = virtualinvoke region.<org.apache.fop.area.RegionViewport: int getBorderAndPaddingWidthStart()>();
        this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentIPPosition> = $i1;

     label0:
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void drawBackAndBorders(org.apache.fop.area.Area,float,float,float,float)>(region, startx, starty, width, height);
        return;
    }

    protected void drawBackAndBorders(org.apache.fop.area.Area, float, float, float, float)
    {
        org.apache.fop.render.AbstractPathOrientedRenderer this;
        org.apache.fop.area.Area area;
        float startx, starty, width, height, sx, sy, paddRectWidth, paddRectHeight, $f0, $f1, $f2, $f3, $f4, $f5;
        java.lang.Integer $r0;
        org.apache.fop.traits.BorderProps bpsBefore, bpsAfter, bpsStart, bpsEnd;
        org.apache.fop.area.Trait$Background back;
        org.apache.xmlgraphics.image.loader.ImageSize imageSize;
        int horzCount, vertCount, x, y, $i0, $i1, $i2, $i3, $i4;
        java.awt.geom.Rectangle2D$Float pos, borderRect, $r5;
        java.lang.Object $r1;
        java.awt.Color $r2, $r3;
        org.apache.xmlgraphics.image.loader.ImageInfo $r4;
        java.lang.String $r6;

        this := @this: org.apache.fop.render.AbstractPathOrientedRenderer;
        area := @parameter0: org.apache.fop.area.Area;
        startx := @parameter1: float;
        starty := @parameter2: float;
        width := @parameter3: float;
        height := @parameter4: float;
        $r0 = <org.apache.fop.area.Trait: java.lang.Integer BORDER_BEFORE>;
        $r1 = virtualinvoke area.<org.apache.fop.area.Area: java.lang.Object getTrait(java.lang.Object)>($r0);
        bpsBefore = (org.apache.fop.traits.BorderProps) $r1;
        $r0 = <org.apache.fop.area.Trait: java.lang.Integer BORDER_AFTER>;
        $r1 = virtualinvoke area.<org.apache.fop.area.Area: java.lang.Object getTrait(java.lang.Object)>($r0);
        bpsAfter = (org.apache.fop.traits.BorderProps) $r1;
        $r0 = <org.apache.fop.area.Trait: java.lang.Integer BORDER_START>;
        $r1 = virtualinvoke area.<org.apache.fop.area.Area: java.lang.Object getTrait(java.lang.Object)>($r0);
        bpsStart = (org.apache.fop.traits.BorderProps) $r1;
        $r0 = <org.apache.fop.area.Trait: java.lang.Integer BORDER_END>;
        $r1 = virtualinvoke area.<org.apache.fop.area.Area: java.lang.Object getTrait(java.lang.Object)>($r0);
        bpsEnd = (org.apache.fop.traits.BorderProps) $r1;
        $r0 = <org.apache.fop.area.Trait: java.lang.Integer BACKGROUND>;
        $r1 = virtualinvoke area.<org.apache.fop.area.Area: java.lang.Object getTrait(java.lang.Object)>($r0);
        back = (org.apache.fop.area.Trait$Background) $r1;
        if back == null goto label14;

        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void endTextObject()>();
        sx = startx;
        sy = starty;
        paddRectWidth = width;
        paddRectHeight = height;
        if bpsStart == null goto label0;

        $i0 = bpsStart.<org.apache.fop.traits.BorderProps: int width>;
        $f0 = (float) $i0;
        $f0 = $f0 / 1000.0F;
        sx = sx + $f0;
        $i0 = bpsStart.<org.apache.fop.traits.BorderProps: int width>;
        $f0 = (float) $i0;
        $f0 = $f0 / 1000.0F;
        paddRectWidth = paddRectWidth - $f0;

     label0:
        if bpsBefore == null goto label1;

        $i0 = bpsBefore.<org.apache.fop.traits.BorderProps: int width>;
        $f0 = (float) $i0;
        $f0 = $f0 / 1000.0F;
        sy = sy + $f0;
        $i0 = bpsBefore.<org.apache.fop.traits.BorderProps: int width>;
        $f0 = (float) $i0;
        $f0 = $f0 / 1000.0F;
        paddRectHeight = paddRectHeight - $f0;

     label1:
        if bpsEnd == null goto label2;

        $i0 = bpsEnd.<org.apache.fop.traits.BorderProps: int width>;
        $f0 = (float) $i0;
        $f0 = $f0 / 1000.0F;
        paddRectWidth = paddRectWidth - $f0;

     label2:
        if bpsAfter == null goto label3;

        $i0 = bpsAfter.<org.apache.fop.traits.BorderProps: int width>;
        $f0 = (float) $i0;
        $f0 = $f0 / 1000.0F;
        paddRectHeight = paddRectHeight - $f0;

     label3:
        $r2 = virtualinvoke back.<org.apache.fop.area.Trait$Background: java.awt.Color getColor()>();
        if $r2 == null goto label4;

        $r3 = virtualinvoke back.<org.apache.fop.area.Trait$Background: java.awt.Color getColor()>();
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void updateColor(java.awt.Color,boolean)>($r3, 1);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void fillRect(float,float,float,float)>(sx, sy, paddRectWidth, paddRectHeight);

     label4:
        $r4 = virtualinvoke back.<org.apache.fop.area.Trait$Background: org.apache.xmlgraphics.image.loader.ImageInfo getImageInfo()>();
        if $r4 == null goto label14;

        $r4 = virtualinvoke back.<org.apache.fop.area.Trait$Background: org.apache.xmlgraphics.image.loader.ImageInfo getImageInfo()>();
        imageSize = virtualinvoke $r4.<org.apache.xmlgraphics.image.loader.ImageInfo: org.apache.xmlgraphics.image.loader.ImageSize getSize()>();
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void saveGraphicsState()>();
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void clipRect(float,float,float,float)>(sx, sy, paddRectWidth, paddRectHeight);
        $f1 = paddRectWidth * 1000.0F;
        $i0 = virtualinvoke imageSize.<org.apache.xmlgraphics.image.loader.ImageSize: int getWidthMpt()>();
        $f0 = (float) $i0;
        $f1 = $f1 / $f0;
        $f1 = $f1 + 1.0F;
        horzCount = (int) $f1;
        $f1 = paddRectHeight * 1000.0F;
        $i0 = virtualinvoke imageSize.<org.apache.xmlgraphics.image.loader.ImageSize: int getHeightMpt()>();
        $f0 = (float) $i0;
        $f1 = $f1 / $f0;
        $f1 = $f1 + 1.0F;
        vertCount = (int) $f1;
        $i1 = virtualinvoke back.<org.apache.fop.area.Trait$Background: int getRepeat()>();
        if $i1 != 96 goto label5;

        horzCount = 1;
        vertCount = 1;
        goto label7;

     label5:
        $i1 = virtualinvoke back.<org.apache.fop.area.Trait$Background: int getRepeat()>();
        if $i1 != 113 goto label6;

        vertCount = 1;
        goto label7;

     label6:
        $i1 = virtualinvoke back.<org.apache.fop.area.Trait$Background: int getRepeat()>();
        if $i1 != 114 goto label7;

        horzCount = 1;

     label7:
        sx = sx * 1000.0F;
        sy = sy * 1000.0F;
        if horzCount != 1 goto label8;

        $i0 = virtualinvoke back.<org.apache.fop.area.Trait$Background: int getHoriz()>();
        $f0 = (float) $i0;
        sx = sx + $f0;

     label8:
        if vertCount != 1 goto label9;

        $i0 = virtualinvoke back.<org.apache.fop.area.Trait$Background: int getVertical()>();
        $f0 = (float) $i0;
        sy = sy + $f0;

     label9:
        x = 0;

     label10:
        if x >= horzCount goto label13;

        y = 0;

     label11:
        if y >= vertCount goto label12;

        $r5 = new java.awt.geom.Rectangle2D$Float;
        $i2 = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentIPPosition>;
        $f2 = (float) $i2;
        $f3 = sx - $f2;
        $i3 = virtualinvoke imageSize.<org.apache.xmlgraphics.image.loader.ImageSize: int getWidthMpt()>();
        $i2 = x * $i3;
        $f2 = (float) $i2;
        $f3 = $f3 + $f2;
        $i3 = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition>;
        $f4 = (float) $i3;
        $f2 = sy - $f4;
        $i4 = virtualinvoke imageSize.<org.apache.xmlgraphics.image.loader.ImageSize: int getHeightMpt()>();
        $i3 = y * $i4;
        $f4 = (float) $i3;
        $f2 = $f2 + $f4;
        $i3 = virtualinvoke imageSize.<org.apache.xmlgraphics.image.loader.ImageSize: int getWidthMpt()>();
        $f4 = (float) $i3;
        $i4 = virtualinvoke imageSize.<org.apache.xmlgraphics.image.loader.ImageSize: int getHeightMpt()>();
        $f5 = (float) $i4;
        specialinvoke $r5.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>($f3, $f2, $f4, $f5);
        pos = $r5;
        $r6 = virtualinvoke back.<org.apache.fop.area.Trait$Background: java.lang.String getURL()>();
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void drawImage(java.lang.String,java.awt.geom.Rectangle2D)>($r6, pos);
        y = y + 1;
        goto label11;

     label12:
        x = x + 1;
        goto label10;

     label13:
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void restoreGraphicsState()>();

     label14:
        $r5 = new java.awt.geom.Rectangle2D$Float;
        specialinvoke $r5.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>(startx, starty, width, height);
        borderRect = $r5;
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void drawBorders(java.awt.geom.Rectangle2D$Float,org.apache.fop.traits.BorderProps,org.apache.fop.traits.BorderProps,org.apache.fop.traits.BorderProps,org.apache.fop.traits.BorderProps)>(borderRect, bpsBefore, bpsAfter, bpsStart, bpsEnd);
        return;
    }

    protected void drawBorders(java.awt.geom.Rectangle2D$Float, org.apache.fop.traits.BorderProps, org.apache.fop.traits.BorderProps, org.apache.fop.traits.BorderProps, org.apache.fop.traits.BorderProps)
    {
        org.apache.fop.render.AbstractPathOrientedRenderer this;
        java.awt.geom.Rectangle2D$Float borderRect;
        org.apache.fop.traits.BorderProps bpsBefore, bpsAfter, bpsStart, bpsEnd;
        float startx, starty, width, height, sx1, sx2, ex1, ex2, outery, clipy, innery, sx1a, ex1a, sy1, sy2, ey1, ey2, outerx, clipx, innerx, sy1a, ey1a, $f0, $f1, $f2;
        boolean[] $r0, b, slant, $r1;
        byte $b0;
        float[] bw, clipw, $r2, $r3;
        boolean $z0, $z1;
        int $i1, $i2, $i3;
        java.awt.Color $r4;

        this := @this: org.apache.fop.render.AbstractPathOrientedRenderer;
        borderRect := @parameter0: java.awt.geom.Rectangle2D$Float;
        bpsBefore := @parameter1: org.apache.fop.traits.BorderProps;
        bpsAfter := @parameter2: org.apache.fop.traits.BorderProps;
        bpsStart := @parameter3: org.apache.fop.traits.BorderProps;
        bpsEnd := @parameter4: org.apache.fop.traits.BorderProps;
        startx = borderRect.<java.awt.geom.Rectangle2D$Float: float x>;
        starty = borderRect.<java.awt.geom.Rectangle2D$Float: float y>;
        width = borderRect.<java.awt.geom.Rectangle2D$Float: float width>;
        height = borderRect.<java.awt.geom.Rectangle2D$Float: float height>;
        $r1 = newarray (boolean)[4];
        $r0 = $r1;
        $b0 = 0;
        if bpsBefore == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        $r0[$b0] = $z0;
        $r0 = $r1;
        $b0 = 1;
        if bpsEnd == null goto label2;

        $z0 = 1;
        goto label3;

     label2:
        $z0 = 0;

     label3:
        $r0[$b0] = $z0;
        $r0 = $r1;
        $b0 = 2;
        if bpsAfter == null goto label4;

        $z0 = 1;
        goto label5;

     label4:
        $z0 = 0;

     label5:
        $r0[$b0] = $z0;
        $r0 = $r1;
        $b0 = 3;
        if bpsStart == null goto label6;

        $z0 = 1;
        goto label7;

     label6:
        $z0 = 0;

     label7:
        $r0[$b0] = $z0;
        b = $r1;
        $z1 = b[0];
        if $z1 != 0 goto label8;

        $z1 = b[1];
        if $z1 != 0 goto label8;

        $z1 = b[2];
        if $z1 != 0 goto label8;

        $z1 = b[3];
        if $z1 != 0 goto label8;

        return;

     label8:
        $r2 = newarray (float)[4];
        $r3 = $r2;
        $b0 = 0;
        $z0 = b[0];
        if $z0 == 0 goto label9;

        $i1 = bpsBefore.<org.apache.fop.traits.BorderProps: int width>;
        $f0 = (float) $i1;
        $f0 = $f0 / 1000.0F;
        goto label10;

     label9:
        $f0 = 0.0F;

     label10:
        $r3[$b0] = $f0;
        $r3 = $r2;
        $b0 = 1;
        $z0 = b[1];
        if $z0 == 0 goto label11;

        $i1 = bpsEnd.<org.apache.fop.traits.BorderProps: int width>;
        $f0 = (float) $i1;
        $f0 = $f0 / 1000.0F;
        goto label12;

     label11:
        $f0 = 0.0F;

     label12:
        $r3[$b0] = $f0;
        $r3 = $r2;
        $b0 = 2;
        $z0 = b[2];
        if $z0 == 0 goto label13;

        $i1 = bpsAfter.<org.apache.fop.traits.BorderProps: int width>;
        $f0 = (float) $i1;
        $f0 = $f0 / 1000.0F;
        goto label14;

     label13:
        $f0 = 0.0F;

     label14:
        $r3[$b0] = $f0;
        $r3 = $r2;
        $b0 = 3;
        $z0 = b[3];
        if $z0 == 0 goto label15;

        $i1 = bpsStart.<org.apache.fop.traits.BorderProps: int width>;
        $f0 = (float) $i1;
        $f0 = $f0 / 1000.0F;
        goto label16;

     label15:
        $f0 = 0.0F;

     label16:
        $r3[$b0] = $f0;
        bw = $r2;
        $r2 = newarray (float)[4];
        $i1 = staticinvoke <org.apache.fop.traits.BorderProps: int getClippedWidth(org.apache.fop.traits.BorderProps)>(bpsBefore);
        $f0 = (float) $i1;
        $f0 = $f0 / 1000.0F;
        $r2[0] = $f0;
        $i1 = staticinvoke <org.apache.fop.traits.BorderProps: int getClippedWidth(org.apache.fop.traits.BorderProps)>(bpsEnd);
        $f0 = (float) $i1;
        $f0 = $f0 / 1000.0F;
        $r2[1] = $f0;
        $i1 = staticinvoke <org.apache.fop.traits.BorderProps: int getClippedWidth(org.apache.fop.traits.BorderProps)>(bpsAfter);
        $f0 = (float) $i1;
        $f0 = $f0 / 1000.0F;
        $r2[2] = $f0;
        $i1 = staticinvoke <org.apache.fop.traits.BorderProps: int getClippedWidth(org.apache.fop.traits.BorderProps)>(bpsStart);
        $f0 = (float) $i1;
        $f0 = $f0 / 1000.0F;
        $r2[3] = $f0;
        clipw = $r2;
        $f1 = clipw[0];
        starty = starty + $f1;
        $f1 = clipw[0];
        height = height - $f1;
        $f1 = clipw[2];
        height = height - $f1;
        $f1 = clipw[3];
        startx = startx + $f1;
        $f1 = clipw[3];
        width = width - $f1;
        $f1 = clipw[1];
        width = width - $f1;
        $r1 = newarray (boolean)[4];
        $r0 = $r1;
        $b0 = 0;
        $z0 = b[3];
        if $z0 == 0 goto label17;

        $z0 = b[0];
        if $z0 == 0 goto label17;

        $z0 = 1;
        goto label18;

     label17:
        $z0 = 0;

     label18:
        $r0[$b0] = $z0;
        $r0 = $r1;
        $b0 = 1;
        $z0 = b[0];
        if $z0 == 0 goto label19;

        $z0 = b[1];
        if $z0 == 0 goto label19;

        $z0 = 1;
        goto label20;

     label19:
        $z0 = 0;

     label20:
        $r0[$b0] = $z0;
        $r0 = $r1;
        $b0 = 2;
        $z0 = b[1];
        if $z0 == 0 goto label21;

        $z0 = b[2];
        if $z0 == 0 goto label21;

        $z0 = 1;
        goto label22;

     label21:
        $z0 = 0;

     label22:
        $r0[$b0] = $z0;
        $r0 = $r1;
        $b0 = 3;
        $z0 = b[2];
        if $z0 == 0 goto label23;

        $z0 = b[3];
        if $z0 == 0 goto label23;

        $z0 = 1;
        goto label24;

     label23:
        $z0 = 0;

     label24:
        $r0[$b0] = $z0;
        slant = $r1;
        if bpsBefore == null goto label32;

        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void endTextObject()>();
        sx1 = startx;
        $z1 = slant[0];
        if $z1 == 0 goto label25;

        $f1 = bw[3];
        $f2 = sx1 + $f1;
        $f1 = clipw[3];
        $f2 = $f2 - $f1;
        goto label26;

     label25:
        $f2 = sx1;

     label26:
        sx2 = $f2;
        ex1 = startx + width;
        $z1 = slant[1];
        if $z1 == 0 goto label27;

        $f1 = bw[1];
        $f2 = ex1 - $f1;
        $f1 = clipw[1];
        $f2 = $f2 + $f1;
        goto label28;

     label27:
        $f2 = ex1;

     label28:
        ex2 = $f2;
        $f1 = clipw[0];
        outery = starty - $f1;
        $f1 = clipw[0];
        clipy = outery + $f1;
        $f1 = bw[0];
        innery = outery + $f1;
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void saveGraphicsState()>();
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void moveTo(float,float)>(sx1, clipy);
        sx1a = sx1;
        ex1a = ex1;
        $i2 = bpsBefore.<org.apache.fop.traits.BorderProps: int mode>;
        if $i2 != 2 goto label31;

        if bpsStart == null goto label29;

        $i2 = bpsStart.<org.apache.fop.traits.BorderProps: int mode>;
        if $i2 != 2 goto label29;

        $f1 = clipw[3];
        sx1a = sx1a - $f1;

     label29:
        if bpsEnd == null goto label30;

        $i2 = bpsEnd.<org.apache.fop.traits.BorderProps: int mode>;
        if $i2 != 2 goto label30;

        $f1 = clipw[1];
        ex1a = ex1a + $f1;

     label30:
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void lineTo(float,float)>(sx1a, outery);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void lineTo(float,float)>(ex1a, outery);

     label31:
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void lineTo(float,float)>(ex1, clipy);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void lineTo(float,float)>(ex2, innery);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void lineTo(float,float)>(sx2, innery);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void closePath()>();
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void clip()>();
        $i3 = bpsBefore.<org.apache.fop.traits.BorderProps: int style>;
        $r4 = bpsBefore.<org.apache.fop.traits.BorderProps: java.awt.Color color>;
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void drawBorderLine(float,float,float,float,boolean,boolean,int,java.awt.Color)>(sx1a, outery, ex1a, innery, 1, 1, $i3, $r4);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void restoreGraphicsState()>();

     label32:
        if bpsEnd == null goto label40;

        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void endTextObject()>();
        sy1 = starty;
        $z1 = slant[1];
        if $z1 == 0 goto label33;

        $f1 = bw[0];
        $f2 = sy1 + $f1;
        $f1 = clipw[0];
        $f2 = $f2 - $f1;
        goto label34;

     label33:
        $f2 = sy1;

     label34:
        sy2 = $f2;
        ey1 = starty + height;
        $z1 = slant[2];
        if $z1 == 0 goto label35;

        $f1 = bw[2];
        $f2 = ey1 - $f1;
        $f1 = clipw[2];
        $f2 = $f2 + $f1;
        goto label36;

     label35:
        $f2 = ey1;

     label36:
        ey2 = $f2;
        $f2 = startx + width;
        $f1 = clipw[1];
        outerx = $f2 + $f1;
        $f1 = clipw[1];
        clipx = outerx - $f1;
        $f1 = bw[1];
        innerx = outerx - $f1;
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void saveGraphicsState()>();
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void moveTo(float,float)>(clipx, sy1);
        sy1a = sy1;
        ey1a = ey1;
        $i2 = bpsEnd.<org.apache.fop.traits.BorderProps: int mode>;
        if $i2 != 2 goto label39;

        if bpsBefore == null goto label37;

        $i2 = bpsBefore.<org.apache.fop.traits.BorderProps: int mode>;
        if $i2 != 2 goto label37;

        $f1 = clipw[0];
        sy1a = sy1a - $f1;

     label37:
        if bpsAfter == null goto label38;

        $i2 = bpsAfter.<org.apache.fop.traits.BorderProps: int mode>;
        if $i2 != 2 goto label38;

        $f1 = clipw[2];
        ey1a = ey1a + $f1;

     label38:
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void lineTo(float,float)>(outerx, sy1a);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void lineTo(float,float)>(outerx, ey1a);

     label39:
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void lineTo(float,float)>(clipx, ey1);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void lineTo(float,float)>(innerx, ey2);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void lineTo(float,float)>(innerx, sy2);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void closePath()>();
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void clip()>();
        $i3 = bpsEnd.<org.apache.fop.traits.BorderProps: int style>;
        $r4 = bpsEnd.<org.apache.fop.traits.BorderProps: java.awt.Color color>;
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void drawBorderLine(float,float,float,float,boolean,boolean,int,java.awt.Color)>(innerx, sy1a, outerx, ey1a, 0, 0, $i3, $r4);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void restoreGraphicsState()>();

     label40:
        if bpsAfter == null goto label48;

        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void endTextObject()>();
        sx1 = startx;
        $z1 = slant[3];
        if $z1 == 0 goto label41;

        $f1 = bw[3];
        $f2 = sx1 + $f1;
        $f1 = clipw[3];
        $f2 = $f2 - $f1;
        goto label42;

     label41:
        $f2 = sx1;

     label42:
        sx2 = $f2;
        ex1 = startx + width;
        $z1 = slant[2];
        if $z1 == 0 goto label43;

        $f1 = bw[1];
        $f2 = ex1 - $f1;
        $f1 = clipw[1];
        $f2 = $f2 + $f1;
        goto label44;

     label43:
        $f2 = ex1;

     label44:
        ex2 = $f2;
        $f2 = starty + height;
        $f1 = clipw[2];
        outery = $f2 + $f1;
        $f1 = clipw[2];
        clipy = outery - $f1;
        $f1 = bw[2];
        innery = outery - $f1;
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void saveGraphicsState()>();
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void moveTo(float,float)>(ex1, clipy);
        sx1a = sx1;
        ex1a = ex1;
        $i2 = bpsAfter.<org.apache.fop.traits.BorderProps: int mode>;
        if $i2 != 2 goto label47;

        if bpsStart == null goto label45;

        $i2 = bpsStart.<org.apache.fop.traits.BorderProps: int mode>;
        if $i2 != 2 goto label45;

        $f1 = clipw[3];
        sx1a = sx1a - $f1;

     label45:
        if bpsEnd == null goto label46;

        $i2 = bpsEnd.<org.apache.fop.traits.BorderProps: int mode>;
        if $i2 != 2 goto label46;

        $f1 = clipw[1];
        ex1a = ex1a + $f1;

     label46:
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void lineTo(float,float)>(ex1a, outery);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void lineTo(float,float)>(sx1a, outery);

     label47:
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void lineTo(float,float)>(sx1, clipy);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void lineTo(float,float)>(sx2, innery);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void lineTo(float,float)>(ex2, innery);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void closePath()>();
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void clip()>();
        $i3 = bpsAfter.<org.apache.fop.traits.BorderProps: int style>;
        $r4 = bpsAfter.<org.apache.fop.traits.BorderProps: java.awt.Color color>;
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void drawBorderLine(float,float,float,float,boolean,boolean,int,java.awt.Color)>(sx1a, innery, ex1a, outery, 1, 0, $i3, $r4);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void restoreGraphicsState()>();

     label48:
        if bpsStart == null goto label56;

        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void endTextObject()>();
        sy1 = starty;
        $z1 = slant[0];
        if $z1 == 0 goto label49;

        $f1 = bw[0];
        $f2 = sy1 + $f1;
        $f1 = clipw[0];
        $f2 = $f2 - $f1;
        goto label50;

     label49:
        $f2 = sy1;

     label50:
        sy2 = $f2;
        ey1 = sy1 + height;
        $z1 = slant[3];
        if $z1 == 0 goto label51;

        $f1 = bw[2];
        $f2 = ey1 - $f1;
        $f1 = clipw[2];
        $f2 = $f2 + $f1;
        goto label52;

     label51:
        $f2 = ey1;

     label52:
        ey2 = $f2;
        $f1 = clipw[3];
        outerx = startx - $f1;
        $f1 = clipw[3];
        clipx = outerx + $f1;
        $f1 = bw[3];
        innerx = outerx + $f1;
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void saveGraphicsState()>();
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void moveTo(float,float)>(clipx, ey1);
        sy1a = sy1;
        ey1a = ey1;
        $i2 = bpsStart.<org.apache.fop.traits.BorderProps: int mode>;
        if $i2 != 2 goto label55;

        if bpsBefore == null goto label53;

        $i2 = bpsBefore.<org.apache.fop.traits.BorderProps: int mode>;
        if $i2 != 2 goto label53;

        $f1 = clipw[0];
        sy1a = sy1a - $f1;

     label53:
        if bpsAfter == null goto label54;

        $i2 = bpsAfter.<org.apache.fop.traits.BorderProps: int mode>;
        if $i2 != 2 goto label54;

        $f1 = clipw[2];
        ey1a = ey1a + $f1;

     label54:
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void lineTo(float,float)>(outerx, ey1a);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void lineTo(float,float)>(outerx, sy1a);

     label55:
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void lineTo(float,float)>(clipx, sy1);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void lineTo(float,float)>(innerx, sy2);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void lineTo(float,float)>(innerx, ey2);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void closePath()>();
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void clip()>();
        $i3 = bpsStart.<org.apache.fop.traits.BorderProps: int style>;
        $r4 = bpsStart.<org.apache.fop.traits.BorderProps: java.awt.Color color>;
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void drawBorderLine(float,float,float,float,boolean,boolean,int,java.awt.Color)>(outerx, sy1a, innerx, ey1a, 0, 1, $i3, $r4);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void restoreGraphicsState()>();

     label56:
        return;
    }

    protected void renderInlineAreaBackAndBorders(org.apache.fop.area.inline.InlineArea)
    {
        org.apache.fop.render.AbstractPathOrientedRenderer this;
        org.apache.fop.area.inline.InlineArea area;
        float x, y, width, height, borderPaddingStart, borderPaddingBefore, bpwidth, bpheight, $f0, $f1, $f2, $f3, $f4;
        int $i0, $i1;
        byte $b2;

        this := @this: org.apache.fop.render.AbstractPathOrientedRenderer;
        area := @parameter0: org.apache.fop.area.inline.InlineArea;
        $i0 = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentIPPosition>;
        $f0 = (float) $i0;
        x = $f0 / 1000.0F;
        $i0 = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition>;
        $i1 = virtualinvoke area.<org.apache.fop.area.inline.InlineArea: int getOffset()>();
        $i0 = $i0 + $i1;
        $f0 = (float) $i0;
        y = $f0 / 1000.0F;
        $i0 = virtualinvoke area.<org.apache.fop.area.inline.InlineArea: int getIPD()>();
        $f0 = (float) $i0;
        width = $f0 / 1000.0F;
        $i0 = virtualinvoke area.<org.apache.fop.area.inline.InlineArea: int getBPD()>();
        $f0 = (float) $i0;
        height = $f0 / 1000.0F;
        $i0 = virtualinvoke area.<org.apache.fop.area.inline.InlineArea: int getBorderAndPaddingWidthStart()>();
        $f0 = (float) $i0;
        borderPaddingStart = $f0 / 1000.0F;
        $i0 = virtualinvoke area.<org.apache.fop.area.inline.InlineArea: int getBorderAndPaddingWidthBefore()>();
        $f0 = (float) $i0;
        borderPaddingBefore = $f0 / 1000.0F;
        $i1 = virtualinvoke area.<org.apache.fop.area.inline.InlineArea: int getBorderAndPaddingWidthEnd()>();
        $f1 = (float) $i1;
        $f1 = $f1 / 1000.0F;
        bpwidth = borderPaddingStart + $f1;
        $i1 = virtualinvoke area.<org.apache.fop.area.inline.InlineArea: int getBorderAndPaddingWidthAfter()>();
        $f1 = (float) $i1;
        $f1 = $f1 / 1000.0F;
        bpheight = borderPaddingBefore + $f1;
        $b2 = height cmpl 0.0F;
        if $b2 != 0 goto label0;

        $b2 = bpheight cmpl 0.0F;
        if $b2 == 0 goto label1;

        $b2 = bpwidth cmpl 0.0F;
        if $b2 == 0 goto label1;

     label0:
        $f2 = y - borderPaddingBefore;
        $f3 = width + bpwidth;
        $f4 = height + bpheight;
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void drawBackAndBorders(org.apache.fop.area.Area,float,float,float,float)>(area, x, $f2, $f3, $f4);

     label1:
        return;
    }

    protected void renderBlockViewport(org.apache.fop.area.BlockViewport, java.util.List)
    {
        org.apache.fop.render.AbstractPathOrientedRenderer this;
        org.apache.fop.area.BlockViewport bv;
        java.util.List children, breakOutList;
        int saveIP, saveBP, borderPaddingStart, borderPaddingBefore, $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.fop.area.CTM ctm, tempctm, $r4;
        float width, height, bpwidth, bpheight, $f0, $f1, $f2;
        java.awt.geom.AffineTransform positionTransform, freeTransform, contentRectTransform, contentTransform, $r0, $r2;
        java.lang.String transf;
        java.awt.Rectangle clippingRect, $r5;
        double $d0, $d1, $d2, $d3;
        org.apache.fop.util.QName $r1;
        boolean $z0;

        this := @this: org.apache.fop.render.AbstractPathOrientedRenderer;
        bv := @parameter0: org.apache.fop.area.BlockViewport;
        children := @parameter1: java.util.List;
        saveIP = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentIPPosition>;
        saveBP = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition>;
        ctm = virtualinvoke bv.<org.apache.fop.area.BlockViewport: org.apache.fop.area.CTM getCTM()>();
        borderPaddingStart = virtualinvoke bv.<org.apache.fop.area.BlockViewport: int getBorderAndPaddingWidthStart()>();
        borderPaddingBefore = virtualinvoke bv.<org.apache.fop.area.BlockViewport: int getBorderAndPaddingWidthBefore()>();
        $i0 = virtualinvoke bv.<org.apache.fop.area.BlockViewport: int getIPD()>();
        $f0 = (float) $i0;
        width = $f0 / 1000.0F;
        $i0 = virtualinvoke bv.<org.apache.fop.area.BlockViewport: int getBPD()>();
        $f0 = (float) $i0;
        height = $f0 / 1000.0F;
        $i0 = virtualinvoke bv.<org.apache.fop.area.BlockViewport: int getPositioning()>();
        if $i0 == 2 goto label0;

        $i0 = virtualinvoke bv.<org.apache.fop.area.BlockViewport: int getPositioning()>();
        if $i0 != 3 goto label5;

     label0:
        breakOutList = null;
        $i0 = virtualinvoke bv.<org.apache.fop.area.BlockViewport: int getPositioning()>();
        if $i0 != 3 goto label1;

        breakOutList = virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: java.util.List breakOutOfStateStack()>();

     label1:
        $r0 = new java.awt.geom.AffineTransform;
        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>()>();
        positionTransform = $r0;
        $i1 = virtualinvoke bv.<org.apache.fop.area.BlockViewport: int getXOffset()>();
        $d0 = (double) $i1;
        $i2 = virtualinvoke bv.<org.apache.fop.area.BlockViewport: int getYOffset()>();
        $d1 = (double) $i2;
        virtualinvoke positionTransform.<java.awt.geom.AffineTransform: void translate(double,double)>($d0, $d1);
        $i1 = neg borderPaddingStart;
        $d0 = (double) $i1;
        $i2 = neg borderPaddingBefore;
        $d1 = (double) $i2;
        virtualinvoke positionTransform.<java.awt.geom.AffineTransform: void translate(double,double)>($d0, $d1);
        $r1 = <org.apache.fop.render.AbstractPathOrientedRenderer: org.apache.fop.util.QName FOX_TRANSFORM>;
        transf = virtualinvoke bv.<org.apache.fop.area.BlockViewport: java.lang.String getForeignAttributeValue(org.apache.fop.util.QName)>($r1);
        if transf == null goto label2;

        freeTransform = staticinvoke <org.apache.batik.parser.AWTTransformProducer: java.awt.geom.AffineTransform createAffineTransform(java.lang.String)>(transf);
        virtualinvoke positionTransform.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>(freeTransform);

     label2:
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void saveGraphicsState()>();
        $r2 = virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: java.awt.geom.AffineTransform mptToPt(java.awt.geom.AffineTransform)>(positionTransform);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void concatenateTransformationMatrix(java.awt.geom.AffineTransform)>($r2);
        $i1 = virtualinvoke bv.<org.apache.fop.area.BlockViewport: int getBorderAndPaddingWidthEnd()>();
        $i0 = borderPaddingStart + $i1;
        $f0 = (float) $i0;
        bpwidth = $f0 / 1000.0F;
        $i1 = virtualinvoke bv.<org.apache.fop.area.BlockViewport: int getBorderAndPaddingWidthAfter()>();
        $i0 = borderPaddingBefore + $i1;
        $f0 = (float) $i0;
        bpheight = $f0 / 1000.0F;
        $f1 = width + bpwidth;
        $f2 = height + bpheight;
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void drawBackAndBorders(org.apache.fop.area.Area,float,float,float,float)>(bv, 0.0F, 0.0F, $f1, $f2);
        $r0 = new java.awt.geom.AffineTransform;
        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>()>();
        contentRectTransform = $r0;
        $d0 = (double) borderPaddingStart;
        $d1 = (double) borderPaddingBefore;
        virtualinvoke contentRectTransform.<java.awt.geom.AffineTransform: void translate(double,double)>($d0, $d1);
        $r2 = virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: java.awt.geom.AffineTransform mptToPt(java.awt.geom.AffineTransform)>(contentRectTransform);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void concatenateTransformationMatrix(java.awt.geom.AffineTransform)>($r2);
        $z0 = virtualinvoke bv.<org.apache.fop.area.BlockViewport: boolean getClip()>();
        if $z0 == 0 goto label3;

        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void clipRect(float,float,float,float)>(0.0F, 0.0F, width, height);

     label3:
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void saveGraphicsState()>();
        contentTransform = virtualinvoke ctm.<org.apache.fop.area.CTM: java.awt.geom.AffineTransform toAffineTransform()>();
        $r2 = virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: java.awt.geom.AffineTransform mptToPt(java.awt.geom.AffineTransform)>(contentTransform);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void concatenateTransformationMatrix(java.awt.geom.AffineTransform)>($r2);
        this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentIPPosition> = 0;
        this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition> = 0;
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void renderBlocks(org.apache.fop.area.Block,java.util.List)>(bv, children);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void restoreGraphicsState()>();
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void restoreGraphicsState()>();
        if breakOutList == null goto label4;

        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void restoreStateStackAfterBreakOut(java.util.List)>(breakOutList);

     label4:
        this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentIPPosition> = saveIP;
        this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition> = saveBP;
        goto label7;

     label5:
        $i1 = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition>;
        $i3 = virtualinvoke bv.<org.apache.fop.area.BlockViewport: int getSpaceBefore()>();
        $i1 = $i1 + $i3;
        this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition> = $i1;
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void handleBlockTraits(org.apache.fop.area.Block)>(bv);
        $i1 = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentIPPosition>;
        $i3 = virtualinvoke bv.<org.apache.fop.area.BlockViewport: int getStartIndent()>();
        $i1 = $i1 + $i3;
        this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentIPPosition> = $i1;
        $r4 = new org.apache.fop.area.CTM;
        $i3 = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int containingIPPosition>;
        $d2 = (double) $i3;
        $i4 = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition>;
        $d3 = (double) $i4;
        specialinvoke $r4.<org.apache.fop.area.CTM: void <init>(double,double)>($d2, $d3);
        tempctm = $r4;
        ctm = virtualinvoke tempctm.<org.apache.fop.area.CTM: org.apache.fop.area.CTM multiply(org.apache.fop.area.CTM)>(ctm);
        $i1 = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition>;
        $i1 = $i1 + borderPaddingBefore;
        this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition> = $i1;
        clippingRect = null;
        $z0 = virtualinvoke bv.<org.apache.fop.area.BlockViewport: boolean getClip()>();
        if $z0 == 0 goto label6;

        $r5 = new java.awt.Rectangle;
        $i3 = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentIPPosition>;
        $i2 = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition>;
        $i4 = virtualinvoke bv.<org.apache.fop.area.BlockViewport: int getIPD()>();
        $i5 = virtualinvoke bv.<org.apache.fop.area.BlockViewport: int getBPD()>();
        specialinvoke $r5.<java.awt.Rectangle: void <init>(int,int,int,int)>($i3, $i2, $i4, $i5);
        clippingRect = $r5;

     label6:
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void startVParea(org.apache.fop.area.CTM,java.awt.geom.Rectangle2D)>(ctm, clippingRect);
        this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentIPPosition> = 0;
        this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition> = 0;
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void renderBlocks(org.apache.fop.area.Block,java.util.List)>(bv, children);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void endVParea()>();
        this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentIPPosition> = saveIP;
        this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition> = saveBP;
        $i1 = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition>;
        $i3 = virtualinvoke bv.<org.apache.fop.area.BlockViewport: int getAllocBPD()>();
        $i1 = $i1 + $i3;
        this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition> = $i1;

     label7:
        return;
    }

    protected void renderReferenceArea(org.apache.fop.area.Block)
    {
        org.apache.fop.render.AbstractPathOrientedRenderer this;
        org.apache.fop.area.Block block;
        int saveIP, saveBP, $i0, $i1;
        java.awt.geom.AffineTransform at, $r0, $r1;
        java.util.List children;
        double $d0, $d1;
        boolean $z0;

        this := @this: org.apache.fop.render.AbstractPathOrientedRenderer;
        block := @parameter0: org.apache.fop.area.Block;
        saveIP = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentIPPosition>;
        saveBP = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition>;
        $r0 = new java.awt.geom.AffineTransform;
        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>()>();
        at = $r0;
        $i0 = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentIPPosition>;
        $d0 = (double) $i0;
        $i1 = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition>;
        $d1 = (double) $i1;
        virtualinvoke at.<java.awt.geom.AffineTransform: void translate(double,double)>($d0, $d1);
        $i0 = virtualinvoke block.<org.apache.fop.area.Block: int getXOffset()>();
        $d0 = (double) $i0;
        $i1 = virtualinvoke block.<org.apache.fop.area.Block: int getYOffset()>();
        $d1 = (double) $i1;
        virtualinvoke at.<java.awt.geom.AffineTransform: void translate(double,double)>($d0, $d1);
        $i1 = virtualinvoke block.<org.apache.fop.area.Block: int getSpaceBefore()>();
        $d1 = (double) $i1;
        virtualinvoke at.<java.awt.geom.AffineTransform: void translate(double,double)>(0.0, $d1);
        $z0 = virtualinvoke at.<java.awt.geom.AffineTransform: boolean isIdentity()>();
        if $z0 != 0 goto label0;

        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void saveGraphicsState()>();
        $r1 = virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: java.awt.geom.AffineTransform mptToPt(java.awt.geom.AffineTransform)>(at);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void concatenateTransformationMatrix(java.awt.geom.AffineTransform)>($r1);

     label0:
        this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentIPPosition> = 0;
        this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition> = 0;
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void handleBlockTraits(org.apache.fop.area.Block)>(block);
        children = virtualinvoke block.<org.apache.fop.area.Block: java.util.List getChildAreas()>();
        if children == null goto label1;

        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void renderBlocks(org.apache.fop.area.Block,java.util.List)>(block, children);

     label1:
        $z0 = virtualinvoke at.<java.awt.geom.AffineTransform: boolean isIdentity()>();
        if $z0 != 0 goto label2;

        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void restoreGraphicsState()>();

     label2:
        this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentIPPosition> = saveIP;
        this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition> = saveBP;
        return;
    }

    protected void renderFlow(org.apache.fop.area.NormalFlow)
    {
        org.apache.fop.render.AbstractPathOrientedRenderer this;
        org.apache.fop.area.NormalFlow flow;
        int saveIP, saveBP, $i0, $i1;
        java.awt.geom.AffineTransform at, $r0, $r1;
        double $d0, $d1;
        boolean $z0;

        this := @this: org.apache.fop.render.AbstractPathOrientedRenderer;
        flow := @parameter0: org.apache.fop.area.NormalFlow;
        saveIP = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentIPPosition>;
        saveBP = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition>;
        $r0 = new java.awt.geom.AffineTransform;
        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>()>();
        at = $r0;
        $i0 = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentIPPosition>;
        $d0 = (double) $i0;
        $i1 = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition>;
        $d1 = (double) $i1;
        virtualinvoke at.<java.awt.geom.AffineTransform: void translate(double,double)>($d0, $d1);
        $z0 = virtualinvoke at.<java.awt.geom.AffineTransform: boolean isIdentity()>();
        if $z0 != 0 goto label0;

        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void saveGraphicsState()>();
        $r1 = virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: java.awt.geom.AffineTransform mptToPt(java.awt.geom.AffineTransform)>(at);
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void concatenateTransformationMatrix(java.awt.geom.AffineTransform)>($r1);

     label0:
        this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentIPPosition> = 0;
        this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition> = 0;
        specialinvoke this.<org.apache.fop.render.PrintRenderer: void renderFlow(org.apache.fop.area.NormalFlow)>(flow);
        $z0 = virtualinvoke at.<java.awt.geom.AffineTransform: boolean isIdentity()>();
        if $z0 != 0 goto label1;

        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void restoreGraphicsState()>();

     label1:
        this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentIPPosition> = saveIP;
        this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition> = saveBP;
        return;
    }

    protected abstract void concatenateTransformationMatrix(java.awt.geom.AffineTransform);

    public void renderViewport(org.apache.fop.area.inline.Viewport)
    {
        org.apache.fop.render.AbstractPathOrientedRenderer this;
        org.apache.fop.area.inline.Viewport viewport;
        float x, y, width, height, borderPaddingStart, borderPaddingBefore, bpwidth, bpheight, $f0, $f1, $f2, $f3, $f4;
        int $i0, $i1;
        boolean $z0;

        this := @this: org.apache.fop.render.AbstractPathOrientedRenderer;
        viewport := @parameter0: org.apache.fop.area.inline.Viewport;
        $i0 = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentIPPosition>;
        $f0 = (float) $i0;
        x = $f0 / 1000.0F;
        $i0 = this.<org.apache.fop.render.AbstractPathOrientedRenderer: int currentBPPosition>;
        $i1 = virtualinvoke viewport.<org.apache.fop.area.inline.Viewport: int getOffset()>();
        $i0 = $i0 + $i1;
        $f0 = (float) $i0;
        y = $f0 / 1000.0F;
        $i0 = virtualinvoke viewport.<org.apache.fop.area.inline.Viewport: int getIPD()>();
        $f0 = (float) $i0;
        width = $f0 / 1000.0F;
        $i0 = virtualinvoke viewport.<org.apache.fop.area.inline.Viewport: int getBPD()>();
        $f0 = (float) $i0;
        height = $f0 / 1000.0F;
        $i0 = virtualinvoke viewport.<org.apache.fop.area.inline.Viewport: int getBorderAndPaddingWidthStart()>();
        $f0 = (float) $i0;
        borderPaddingStart = $f0 / 1000.0F;
        $i0 = virtualinvoke viewport.<org.apache.fop.area.inline.Viewport: int getBorderAndPaddingWidthBefore()>();
        $f0 = (float) $i0;
        borderPaddingBefore = $f0 / 1000.0F;
        $i1 = virtualinvoke viewport.<org.apache.fop.area.inline.Viewport: int getBorderAndPaddingWidthEnd()>();
        $f1 = (float) $i1;
        $f1 = $f1 / 1000.0F;
        bpwidth = borderPaddingStart + $f1;
        $i1 = virtualinvoke viewport.<org.apache.fop.area.inline.Viewport: int getBorderAndPaddingWidthAfter()>();
        $f1 = (float) $i1;
        $f1 = $f1 / 1000.0F;
        bpheight = borderPaddingBefore + $f1;
        $f2 = width + bpwidth;
        $f3 = height + bpheight;
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void drawBackAndBorders(org.apache.fop.area.Area,float,float,float,float)>(viewport, x, y, $f2, $f3);
        $z0 = virtualinvoke viewport.<org.apache.fop.area.inline.Viewport: boolean getClip()>();
        if $z0 == 0 goto label0;

        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void saveGraphicsState()>();
        $f1 = x + borderPaddingStart;
        $f4 = y + borderPaddingBefore;
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void clipRect(float,float,float,float)>($f1, $f4, width, height);

     label0:
        specialinvoke this.<org.apache.fop.render.PrintRenderer: void renderViewport(org.apache.fop.area.inline.Viewport)>(viewport);
        $z0 = virtualinvoke viewport.<org.apache.fop.area.inline.Viewport: boolean getClip()>();
        if $z0 == 0 goto label1;

        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void restoreGraphicsState()>();

     label1:
        return;
    }

    protected abstract void restoreStateStackAfterBreakOut(java.util.List);

    protected abstract java.util.List breakOutOfStateStack();

    protected abstract void saveGraphicsState();

    protected abstract void restoreGraphicsState();

    protected abstract void beginTextObject();

    protected abstract void endTextObject();

    protected void renderTextDecoration(org.apache.fop.fonts.FontMetrics, int, org.apache.fop.area.inline.InlineArea, int, int)
    {
        org.apache.fop.render.AbstractPathOrientedRenderer this;
        org.apache.fop.fonts.FontMetrics fm;
        int fontsize, baseline, startx, $i0, $i1;
        org.apache.fop.area.inline.InlineArea inline;
        boolean hasTextDeco, $z0;
        float descender, capHeight, halfLineWidth, endx, y, $f0, $f1, $f2, $f3;
        java.awt.Color ct;
        java.lang.Integer $r0;
        java.lang.Object $r1;
        double $d0, $d1, $d2;

        this := @this: org.apache.fop.render.AbstractPathOrientedRenderer;
        fm := @parameter0: org.apache.fop.fonts.FontMetrics;
        fontsize := @parameter1: int;
        inline := @parameter2: org.apache.fop.area.inline.InlineArea;
        baseline := @parameter3: int;
        startx := @parameter4: int;
        $z0 = virtualinvoke inline.<org.apache.fop.area.inline.InlineArea: boolean hasUnderline()>();
        if $z0 != 0 goto label0;

        $z0 = virtualinvoke inline.<org.apache.fop.area.inline.InlineArea: boolean hasOverline()>();
        if $z0 != 0 goto label0;

        $z0 = virtualinvoke inline.<org.apache.fop.area.inline.InlineArea: boolean hasLineThrough()>();
        if $z0 == 0 goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        hasTextDeco = $z0;
        if hasTextDeco == 0 goto label5;

        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void endTextObject()>();
        $i0 = interfaceinvoke fm.<org.apache.fop.fonts.FontMetrics: int getDescender(int)>(fontsize);
        $f0 = (float) $i0;
        descender = $f0 / 1000.0F;
        $i0 = interfaceinvoke fm.<org.apache.fop.fonts.FontMetrics: int getCapHeight(int)>(fontsize);
        $f0 = (float) $i0;
        capHeight = $f0 / 1000.0F;
        $f0 = descender / -8.0F;
        halfLineWidth = $f0 / 2.0F;
        $i1 = virtualinvoke inline.<org.apache.fop.area.inline.InlineArea: int getIPD()>();
        $i0 = startx + $i1;
        $f0 = (float) $i0;
        endx = $f0 / 1000.0F;
        $z0 = virtualinvoke inline.<org.apache.fop.area.inline.InlineArea: boolean hasUnderline()>();
        if $z0 == 0 goto label3;

        $r0 = <org.apache.fop.area.Trait: java.lang.Integer UNDERLINE_COLOR>;
        $r1 = virtualinvoke inline.<org.apache.fop.area.inline.InlineArea: java.lang.Object getTrait(java.lang.Object)>($r0);
        ct = (java.awt.Color) $r1;
        $f0 = (float) baseline;
        $f1 = descender / 2.0F;
        y = $f0 - $f1;
        $f1 = (float) startx;
        $f1 = $f1 / 1000.0F;
        $f2 = y - halfLineWidth;
        $f2 = $f2 / 1000.0F;
        $f3 = y + halfLineWidth;
        $f3 = $f3 / 1000.0F;
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void drawBorderLine(float,float,float,float,boolean,boolean,int,java.awt.Color)>($f1, $f2, endx, $f3, 1, 1, 133, ct);

     label3:
        $z0 = virtualinvoke inline.<org.apache.fop.area.inline.InlineArea: boolean hasOverline()>();
        if $z0 == 0 goto label4;

        $r0 = <org.apache.fop.area.Trait: java.lang.Integer OVERLINE_COLOR>;
        $r1 = virtualinvoke inline.<org.apache.fop.area.inline.InlineArea: java.lang.Object getTrait(java.lang.Object)>($r0);
        ct = (java.awt.Color) $r1;
        $d0 = (double) baseline;
        $d1 = (double) capHeight;
        $d2 = 1.1 * $d1;
        $d0 = $d0 - $d2;
        y = (float) $d0;
        $f1 = (float) startx;
        $f1 = $f1 / 1000.0F;
        $f2 = y - halfLineWidth;
        $f2 = $f2 / 1000.0F;
        $f3 = y + halfLineWidth;
        $f3 = $f3 / 1000.0F;
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void drawBorderLine(float,float,float,float,boolean,boolean,int,java.awt.Color)>($f1, $f2, endx, $f3, 1, 1, 133, ct);

     label4:
        $z0 = virtualinvoke inline.<org.apache.fop.area.inline.InlineArea: boolean hasLineThrough()>();
        if $z0 == 0 goto label5;

        $r0 = <org.apache.fop.area.Trait: java.lang.Integer LINETHROUGH_COLOR>;
        $r1 = virtualinvoke inline.<org.apache.fop.area.inline.InlineArea: java.lang.Object getTrait(java.lang.Object)>($r0);
        ct = (java.awt.Color) $r1;
        $d0 = (double) baseline;
        $d1 = (double) capHeight;
        $d2 = 0.45 * $d1;
        $d0 = $d0 - $d2;
        y = (float) $d0;
        $f1 = (float) startx;
        $f1 = $f1 / 1000.0F;
        $f2 = y - halfLineWidth;
        $f2 = $f2 / 1000.0F;
        $f3 = y + halfLineWidth;
        $f3 = $f3 / 1000.0F;
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void drawBorderLine(float,float,float,float,boolean,boolean,int,java.awt.Color)>($f1, $f2, endx, $f3, 1, 1, 133, ct);

     label5:
        return;
    }

    protected abstract void clip();

    protected abstract void clipRect(float, float, float, float);

    protected abstract void moveTo(float, float);

    protected abstract void lineTo(float, float);

    protected abstract void closePath();

    protected abstract void fillRect(float, float, float, float);

    protected abstract void updateColor(java.awt.Color, boolean);

    protected abstract void drawImage(java.lang.String, java.awt.geom.Rectangle2D, java.util.Map);

    protected final void drawImage(java.lang.String, java.awt.geom.Rectangle2D)
    {
        org.apache.fop.render.AbstractPathOrientedRenderer this;
        java.lang.String url;
        java.awt.geom.Rectangle2D pos;

        this := @this: org.apache.fop.render.AbstractPathOrientedRenderer;
        url := @parameter0: java.lang.String;
        pos := @parameter1: java.awt.geom.Rectangle2D;
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void drawImage(java.lang.String,java.awt.geom.Rectangle2D,java.util.Map)>(url, pos, null);
        return;
    }

    protected abstract void drawBorderLine(float, float, float, float, boolean, boolean, int, java.awt.Color);

    public void renderForeignObject(org.apache.fop.area.inline.ForeignObject, java.awt.geom.Rectangle2D)
    {
        org.apache.fop.render.AbstractPathOrientedRenderer this;
        org.apache.fop.area.inline.ForeignObject fo;
        java.awt.geom.Rectangle2D pos;
        org.w3c.dom.Document doc;
        java.lang.String ns;
        java.util.Map $r0;

        this := @this: org.apache.fop.render.AbstractPathOrientedRenderer;
        fo := @parameter0: org.apache.fop.area.inline.ForeignObject;
        pos := @parameter1: java.awt.geom.Rectangle2D;
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void endTextObject()>();
        doc = virtualinvoke fo.<org.apache.fop.area.inline.ForeignObject: org.w3c.dom.Document getDocument()>();
        ns = virtualinvoke fo.<org.apache.fop.area.inline.ForeignObject: java.lang.String getNameSpace()>();
        $r0 = virtualinvoke fo.<org.apache.fop.area.inline.ForeignObject: java.util.Map getForeignAttributes()>();
        virtualinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void renderDocument(org.w3c.dom.Document,java.lang.String,java.awt.geom.Rectangle2D,java.util.Map)>(doc, ns, pos, $r0);
        return;
    }

    static void <clinit>()
    {
        org.apache.fop.util.QName $r0;

        $r0 = new org.apache.fop.util.QName;
        specialinvoke $r0.<org.apache.fop.util.QName: void <init>(java.lang.String,java.lang.String)>("http://xmlgraphics.apache.org/fop/extensions", "fox:transform");
        <org.apache.fop.render.AbstractPathOrientedRenderer: org.apache.fop.util.QName FOX_TRANSFORM> = $r0;
        return;
    }
}
