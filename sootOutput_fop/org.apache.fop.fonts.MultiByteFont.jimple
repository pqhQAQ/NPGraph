public class org.apache.fop.fonts.MultiByteFont extends org.apache.fop.fonts.CIDFont
{
    private static int uniqueCounter;
    private java.lang.String ttcName;
    private java.lang.String encoding;
    private int defaultWidth;
    private org.apache.fop.fonts.CIDFontType cidType;
    private java.lang.String namePrefix;
    private org.apache.fop.fonts.BFEntry[] bfentries;
    public static final char INVALID_UNICODE_CHAR;

    public void <init>()
    {
        org.apache.fop.fonts.MultiByteFont this;
        java.lang.Class l1, $r6;
        java.lang.Throwable l2, $r7;
        java.text.DecimalFormat counterFormat, $r8;
        java.lang.String cntString, $r10;
        java.lang.StringBuffer sb, $r9;
        int i, c, $i0, $i1;
        org.apache.fop.fonts.CIDFontType $r0;
        java.util.Map $r1;
        java.lang.Integer $r2, $r3;
        long $l2;
        char $c3;
        org.apache.fop.fonts.FontType $r11;

        this := @this: org.apache.fop.fonts.MultiByteFont;
        specialinvoke this.<org.apache.fop.fonts.CIDFont: void <init>()>();
        this.<org.apache.fop.fonts.MultiByteFont: java.lang.String ttcName> = null;
        this.<org.apache.fop.fonts.MultiByteFont: java.lang.String encoding> = "Identity-H";
        this.<org.apache.fop.fonts.MultiByteFont: int defaultWidth> = 0;
        $r0 = <org.apache.fop.fonts.CIDFontType: org.apache.fop.fonts.CIDFontType CIDTYPE2>;
        this.<org.apache.fop.fonts.MultiByteFont: org.apache.fop.fonts.CIDFontType cidType> = $r0;
        this.<org.apache.fop.fonts.MultiByteFont: java.lang.String namePrefix> = null;
        this.<org.apache.fop.fonts.MultiByteFont: org.apache.fop.fonts.BFEntry[] bfentries> = null;
        $r1 = this.<org.apache.fop.fonts.MultiByteFont: java.util.Map usedGlyphs>;
        $r2 = new java.lang.Integer;
        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(0);
        $r3 = new java.lang.Integer;
        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(0);
        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);
        $r1 = this.<org.apache.fop.fonts.MultiByteFont: java.util.Map usedGlyphsIndex>;
        $r2 = new java.lang.Integer;
        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(0);
        $r3 = new java.lang.Integer;
        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(0);
        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);
        $i0 = this.<org.apache.fop.fonts.MultiByteFont: int usedGlyphsCount>;
        $i0 = $i0 + 1;
        this.<org.apache.fop.fonts.MultiByteFont: int usedGlyphsCount> = $i0;
        $r1 = this.<org.apache.fop.fonts.MultiByteFont: java.util.Map usedGlyphs>;
        $r2 = new java.lang.Integer;
        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(1);
        $r3 = new java.lang.Integer;
        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(1);
        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);
        $r1 = this.<org.apache.fop.fonts.MultiByteFont: java.util.Map usedGlyphsIndex>;
        $r2 = new java.lang.Integer;
        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(1);
        $r3 = new java.lang.Integer;
        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(1);
        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);
        $i0 = this.<org.apache.fop.fonts.MultiByteFont: int usedGlyphsCount>;
        $i0 = $i0 + 1;
        this.<org.apache.fop.fonts.MultiByteFont: int usedGlyphsCount> = $i0;
        $r1 = this.<org.apache.fop.fonts.MultiByteFont: java.util.Map usedGlyphs>;
        $r2 = new java.lang.Integer;
        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(2);
        $r3 = new java.lang.Integer;
        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(2);
        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);
        $r1 = this.<org.apache.fop.fonts.MultiByteFont: java.util.Map usedGlyphsIndex>;
        $r2 = new java.lang.Integer;
        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(2);
        $r3 = new java.lang.Integer;
        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(2);
        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);
        $i0 = this.<org.apache.fop.fonts.MultiByteFont: int usedGlyphsCount>;
        $i0 = $i0 + 1;
        this.<org.apache.fop.fonts.MultiByteFont: int usedGlyphsCount> = $i0;
        $r6 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();
        l1 = $r6;
        entermonitor $r6;

     label0:
        $i1 = <org.apache.fop.fonts.MultiByteFont: int uniqueCounter>;
        $i1 = $i1 + 1;
        <org.apache.fop.fonts.MultiByteFont: int uniqueCounter> = $i1;
        $i1 = <org.apache.fop.fonts.MultiByteFont: int uniqueCounter>;
        if $i1 > 99999 goto label1;

        $i1 = <org.apache.fop.fonts.MultiByteFont: int uniqueCounter>;
        if $i1 >= 0 goto label2;

     label1:
        <org.apache.fop.fonts.MultiByteFont: int uniqueCounter> = 0;

     label2:
        exitmonitor l1;

     label3:
        goto label7;

     label4:
        $r7 := @caughtexception;

     label5:
        l2 = $r7;
        exitmonitor l1;

     label6:
        throw l2;

     label7:
        $r8 = new java.text.DecimalFormat;
        specialinvoke $r8.<java.text.DecimalFormat: void <init>(java.lang.String)>("00000");
        counterFormat = $r8;
        $i0 = <org.apache.fop.fonts.MultiByteFont: int uniqueCounter>;
        $l2 = (long) $i0;
        cntString = virtualinvoke counterFormat.<java.text.DecimalFormat: java.lang.String format(long)>($l2);
        $r9 = new java.lang.StringBuffer;
        specialinvoke $r9.<java.lang.StringBuffer: void <init>(java.lang.String)>("E");
        sb = $r9;
        i = 0;
        c = virtualinvoke cntString.<java.lang.String: int length()>();

     label8:
        if i >= c goto label9;

        $c3 = virtualinvoke cntString.<java.lang.String: char charAt(int)>(i);
        $i0 = $c3 + 17;
        $c3 = (char) $i0;
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);
        i = i + 1;
        goto label8;

     label9:
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("+");
        $r10 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.String toString()>();
        this.<org.apache.fop.fonts.MultiByteFont: java.lang.String namePrefix> = $r10;
        $r11 = <org.apache.fop.fonts.FontType: org.apache.fop.fonts.FontType TYPE0>;
        virtualinvoke this.<org.apache.fop.fonts.MultiByteFont: void setFontType(org.apache.fop.fonts.FontType)>($r11);
        return;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int getDefaultWidth()
    {
        org.apache.fop.fonts.MultiByteFont this;
        int $i0;

        this := @this: org.apache.fop.fonts.MultiByteFont;
        $i0 = this.<org.apache.fop.fonts.MultiByteFont: int defaultWidth>;
        return $i0;
    }

    public java.lang.String getRegistry()
    {
        org.apache.fop.fonts.MultiByteFont this;

        this := @this: org.apache.fop.fonts.MultiByteFont;
        return "Adobe";
    }

    public java.lang.String getOrdering()
    {
        org.apache.fop.fonts.MultiByteFont this;

        this := @this: org.apache.fop.fonts.MultiByteFont;
        return "UCS";
    }

    public int getSupplement()
    {
        org.apache.fop.fonts.MultiByteFont this;

        this := @this: org.apache.fop.fonts.MultiByteFont;
        return 0;
    }

    public org.apache.fop.fonts.CIDFontType getCIDType()
    {
        org.apache.fop.fonts.MultiByteFont this;
        org.apache.fop.fonts.CIDFontType $r0;

        this := @this: org.apache.fop.fonts.MultiByteFont;
        $r0 = this.<org.apache.fop.fonts.MultiByteFont: org.apache.fop.fonts.CIDFontType cidType>;
        return $r0;
    }

    public void setCIDType(org.apache.fop.fonts.CIDFontType)
    {
        org.apache.fop.fonts.MultiByteFont this;
        org.apache.fop.fonts.CIDFontType cidType;

        this := @this: org.apache.fop.fonts.MultiByteFont;
        cidType := @parameter0: org.apache.fop.fonts.CIDFontType;
        this.<org.apache.fop.fonts.MultiByteFont: org.apache.fop.fonts.CIDFontType cidType> = cidType;
        return;
    }

    private java.lang.String getPrefixedFontName()
    {
        org.apache.fop.fonts.MultiByteFont this;
        java.lang.StringBuffer $r0;
        java.lang.String $r1, $r2;

        this := @this: org.apache.fop.fonts.MultiByteFont;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r1 = this.<org.apache.fop.fonts.MultiByteFont: java.lang.String namePrefix>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);
        $r1 = specialinvoke this.<org.apache.fop.fonts.CIDFont: java.lang.String getFontName()>();
        $r1 = staticinvoke <org.apache.fop.fonts.FontUtil: java.lang.String stripWhiteSpace(java.lang.String)>($r1);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);
        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r2;
    }

    public java.lang.String getEmbedFontName()
    {
        org.apache.fop.fonts.MultiByteFont this;
        boolean $z0;
        java.lang.String $r0;

        this := @this: org.apache.fop.fonts.MultiByteFont;
        $z0 = virtualinvoke this.<org.apache.fop.fonts.MultiByteFont: boolean isEmbeddable()>();
        if $z0 == 0 goto label0;

        $r0 = specialinvoke this.<org.apache.fop.fonts.MultiByteFont: java.lang.String getPrefixedFontName()>();
        return $r0;

     label0:
        $r0 = specialinvoke this.<org.apache.fop.fonts.CIDFont: java.lang.String getFontName()>();
        return $r0;
    }

    public boolean isEmbeddable()
    {
        org.apache.fop.fonts.MultiByteFont this;
        java.lang.String $r0;
        boolean $z0;

        this := @this: org.apache.fop.fonts.MultiByteFont;
        $r0 = virtualinvoke this.<org.apache.fop.fonts.MultiByteFont: java.lang.String getEmbedFileName()>();
        if $r0 != null goto label0;

        $r0 = virtualinvoke this.<org.apache.fop.fonts.MultiByteFont: java.lang.String getEmbedResourceName()>();
        if $r0 == null goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String getEncoding()
    {
        org.apache.fop.fonts.MultiByteFont this;
        java.lang.String $r0;

        this := @this: org.apache.fop.fonts.MultiByteFont;
        $r0 = this.<org.apache.fop.fonts.MultiByteFont: java.lang.String encoding>;
        return $r0;
    }

    public int getWidth(int, int)
    {
        org.apache.fop.fonts.MultiByteFont this;
        int i, size, $i0, $i1, $i2;
        java.lang.Integer $r0, idx;
        boolean $z0;
        java.util.Map $r1;
        java.lang.Object $r2;
        int[] $r3;

        this := @this: org.apache.fop.fonts.MultiByteFont;
        i := @parameter0: int;
        size := @parameter1: int;
        $z0 = virtualinvoke this.<org.apache.fop.fonts.MultiByteFont: boolean isEmbeddable()>();
        if $z0 == 0 goto label0;

        $r1 = this.<org.apache.fop.fonts.MultiByteFont: java.util.Map usedGlyphsIndex>;
        $r0 = new java.lang.Integer;
        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(i);
        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);
        idx = (java.lang.Integer) $r2;
        $r3 = this.<org.apache.fop.fonts.MultiByteFont: int[] width>;
        $i0 = virtualinvoke idx.<java.lang.Integer: int intValue()>();
        $i1 = $r3[$i0];
        $i2 = size * $i1;
        return $i2;

     label0:
        $r3 = this.<org.apache.fop.fonts.MultiByteFont: int[] width>;
        $i1 = $r3[i];
        $i2 = size * $i1;
        return $i2;
    }

    public int[] getWidths()
    {
        org.apache.fop.fonts.MultiByteFont this;
        int[] arr, $r0, $r1;
        int $i0, $i1;

        this := @this: org.apache.fop.fonts.MultiByteFont;
        $r0 = this.<org.apache.fop.fonts.MultiByteFont: int[] width>;
        $i0 = lengthof $r0;
        arr = newarray (int)[$i0];
        $r0 = this.<org.apache.fop.fonts.MultiByteFont: int[] width>;
        $r1 = this.<org.apache.fop.fonts.MultiByteFont: int[] width>;
        $i1 = lengthof $r1;
        $i1 = $i1 - 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, arr, 0, $i1);
        return arr;
    }

    private int findGlyphIndex(char)
    {
        org.apache.fop.fonts.MultiByteFont this;
        char c, idx;
        int retIdx, i, $i0, $i1;
        org.apache.fop.fonts.BFEntry[] $r0, $r1;
        org.apache.fop.fonts.BFEntry $r2, $r3;

        this := @this: org.apache.fop.fonts.MultiByteFont;
        c := @parameter0: char;
        idx = c;
        retIdx = 0;
        i = 0;

     label0:
        $r0 = this.<org.apache.fop.fonts.MultiByteFont: org.apache.fop.fonts.BFEntry[] bfentries>;
        $i0 = lengthof $r0;
        if i >= $i0 goto label2;

        if retIdx != 0 goto label2;

        $r1 = this.<org.apache.fop.fonts.MultiByteFont: org.apache.fop.fonts.BFEntry[] bfentries>;
        $r2 = $r1[i];
        $i1 = virtualinvoke $r2.<org.apache.fop.fonts.BFEntry: int getUnicodeStart()>();
        if $i1 > idx goto label1;

        $r1 = this.<org.apache.fop.fonts.MultiByteFont: org.apache.fop.fonts.BFEntry[] bfentries>;
        $r2 = $r1[i];
        $i1 = virtualinvoke $r2.<org.apache.fop.fonts.BFEntry: int getUnicodeEnd()>();
        if $i1 < idx goto label1;

        $r1 = this.<org.apache.fop.fonts.MultiByteFont: org.apache.fop.fonts.BFEntry[] bfentries>;
        $r2 = $r1[i];
        $i1 = virtualinvoke $r2.<org.apache.fop.fonts.BFEntry: int getGlyphStartIndex()>();
        $i1 = $i1 + idx;
        $r0 = this.<org.apache.fop.fonts.MultiByteFont: org.apache.fop.fonts.BFEntry[] bfentries>;
        $r3 = $r0[i];
        $i0 = virtualinvoke $r3.<org.apache.fop.fonts.BFEntry: int getUnicodeStart()>();
        retIdx = $i1 - $i0;

     label1:
        i = i + 1;
        goto label0;

     label2:
        return retIdx;
    }

    public char mapChar(char)
    {
        org.apache.fop.fonts.MultiByteFont this;
        char c, $c3;
        int retIdx, $i0, $i1, $i2;
        java.lang.Integer newIdx, $r1, $r3;
        boolean $z0;
        java.util.Map $r0;
        java.lang.Object $r2;

        this := @this: org.apache.fop.fonts.MultiByteFont;
        c := @parameter0: char;
        virtualinvoke this.<org.apache.fop.fonts.MultiByteFont: void notifyMapOperation()>();
        retIdx = specialinvoke this.<org.apache.fop.fonts.MultiByteFont: int findGlyphIndex(char)>(c);
        $z0 = virtualinvoke this.<org.apache.fop.fonts.MultiByteFont: boolean isEmbeddable()>();
        if $z0 == 0 goto label1;

        $r0 = this.<org.apache.fop.fonts.MultiByteFont: java.util.Map usedGlyphs>;
        $r1 = new java.lang.Integer;
        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(retIdx);
        $r2 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);
        newIdx = (java.lang.Integer) $r2;
        if newIdx != null goto label0;

        $r0 = this.<org.apache.fop.fonts.MultiByteFont: java.util.Map usedGlyphs>;
        $r1 = new java.lang.Integer;
        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(retIdx);
        $r3 = new java.lang.Integer;
        $i0 = this.<org.apache.fop.fonts.MultiByteFont: int usedGlyphsCount>;
        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i0);
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r3);
        $r0 = this.<org.apache.fop.fonts.MultiByteFont: java.util.Map usedGlyphsIndex>;
        $r1 = new java.lang.Integer;
        $i1 = this.<org.apache.fop.fonts.MultiByteFont: int usedGlyphsCount>;
        specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i1);
        $r3 = new java.lang.Integer;
        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(retIdx);
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r3);
        $r0 = this.<org.apache.fop.fonts.MultiByteFont: java.util.Map usedCharsIndex>;
        $r1 = new java.lang.Integer;
        $i1 = this.<org.apache.fop.fonts.MultiByteFont: int usedGlyphsCount>;
        specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i1);
        $r3 = new java.lang.Integer;
        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(c);
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r3);
        retIdx = this.<org.apache.fop.fonts.MultiByteFont: int usedGlyphsCount>;
        $i2 = this.<org.apache.fop.fonts.MultiByteFont: int usedGlyphsCount>;
        $i2 = $i2 + 1;
        this.<org.apache.fop.fonts.MultiByteFont: int usedGlyphsCount> = $i2;
        goto label1;

     label0:
        retIdx = virtualinvoke newIdx.<java.lang.Integer: int intValue()>();

     label1:
        $c3 = (char) retIdx;
        return $c3;
    }

    public boolean hasChar(char)
    {
        org.apache.fop.fonts.MultiByteFont this;
        char c;
        int $i0;
        boolean $z0;

        this := @this: org.apache.fop.fonts.MultiByteFont;
        c := @parameter0: char;
        $i0 = specialinvoke this.<org.apache.fop.fonts.MultiByteFont: int findGlyphIndex(char)>(c);
        if $i0 <= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public void setBFEntries(org.apache.fop.fonts.BFEntry[])
    {
        org.apache.fop.fonts.MultiByteFont this;
        org.apache.fop.fonts.BFEntry[] bfentries;

        this := @this: org.apache.fop.fonts.MultiByteFont;
        bfentries := @parameter0: org.apache.fop.fonts.BFEntry[];
        this.<org.apache.fop.fonts.MultiByteFont: org.apache.fop.fonts.BFEntry[] bfentries> = bfentries;
        return;
    }

    public void setDefaultWidth(int)
    {
        org.apache.fop.fonts.MultiByteFont this;
        int defaultWidth;

        this := @this: org.apache.fop.fonts.MultiByteFont;
        defaultWidth := @parameter0: int;
        this.<org.apache.fop.fonts.MultiByteFont: int defaultWidth> = defaultWidth;
        return;
    }

    public java.lang.String getTTCName()
    {
        org.apache.fop.fonts.MultiByteFont this;
        java.lang.String $r0;

        this := @this: org.apache.fop.fonts.MultiByteFont;
        $r0 = this.<org.apache.fop.fonts.MultiByteFont: java.lang.String ttcName>;
        return $r0;
    }

    public void setTTCName(java.lang.String)
    {
        org.apache.fop.fonts.MultiByteFont this;
        java.lang.String ttcName;

        this := @this: org.apache.fop.fonts.MultiByteFont;
        ttcName := @parameter0: java.lang.String;
        this.<org.apache.fop.fonts.MultiByteFont: java.lang.String ttcName> = ttcName;
        return;
    }

    public void setWidthArray(int[])
    {
        org.apache.fop.fonts.MultiByteFont this;
        int[] wds;

        this := @this: org.apache.fop.fonts.MultiByteFont;
        wds := @parameter0: int[];
        this.<org.apache.fop.fonts.MultiByteFont: int[] width> = wds;
        return;
    }

    public java.util.Map getUsedGlyphs()
    {
        org.apache.fop.fonts.MultiByteFont this;
        java.util.Map $r0;

        this := @this: org.apache.fop.fonts.MultiByteFont;
        $r0 = this.<org.apache.fop.fonts.MultiByteFont: java.util.Map usedGlyphs>;
        return $r0;
    }

    public char[] getCharsUsed()
    {
        org.apache.fop.fonts.MultiByteFont this;
        char[] charArray;
        int i, $i0, $i1;
        java.lang.Integer mapValue, $r1;
        char arrayItem;
        boolean $z0;
        java.util.Map $r0;
        java.lang.Object $r2;

        this := @this: org.apache.fop.fonts.MultiByteFont;
        $z0 = virtualinvoke this.<org.apache.fop.fonts.MultiByteFont: boolean isEmbeddable()>();
        if $z0 != 0 goto label0;

        return null;

     label0:
        $i0 = this.<org.apache.fop.fonts.MultiByteFont: int usedGlyphsCount>;
        charArray = newarray (char)[$i0];
        i = 0;

     label1:
        $i1 = this.<org.apache.fop.fonts.MultiByteFont: int usedGlyphsCount>;
        if i >= $i1 goto label4;

        $r0 = this.<org.apache.fop.fonts.MultiByteFont: java.util.Map usedCharsIndex>;
        $r1 = new java.lang.Integer;
        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i);
        $r2 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);
        mapValue = (java.lang.Integer) $r2;
        if mapValue == null goto label2;

        $i0 = virtualinvoke mapValue.<java.lang.Integer: int intValue()>();
        arrayItem = (char) $i0;
        charArray[i] = arrayItem;
        goto label3;

     label2:
        charArray[i] = 65535;

     label3:
        i = i + 1;
        goto label1;

     label4:
        return charArray;
    }

    static void <clinit>()
    {
        <org.apache.fop.fonts.MultiByteFont: int uniqueCounter> = -1;
        return;
    }
}
