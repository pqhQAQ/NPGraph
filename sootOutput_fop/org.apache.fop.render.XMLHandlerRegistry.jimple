public class org.apache.fop.render.XMLHandlerRegistry extends java.lang.Object
{
    private static org.apache.commons.logging.Log log;
    private java.util.Map handlers;
    static java.lang.Class class$org$apache$fop$render$XMLHandlerRegistry;
    static java.lang.Class class$org$apache$fop$render$XMLHandler;

    public void <init>()
    {
        org.apache.fop.render.XMLHandlerRegistry this;
        java.util.HashMap $r0;

        this := @this: org.apache.fop.render.XMLHandlerRegistry;
        specialinvoke this.<java.lang.Object: void <init>()>();
        $r0 = new java.util.HashMap;
        specialinvoke $r0.<java.util.HashMap: void <init>()>();
        this.<org.apache.fop.render.XMLHandlerRegistry: java.util.Map handlers> = $r0;
        specialinvoke this.<org.apache.fop.render.XMLHandlerRegistry: void discoverXMLHandlers()>();
        return;
    }

    private void setDefaultXMLHandler(org.apache.fop.render.XMLHandler)
    {
        org.apache.fop.render.XMLHandlerRegistry this;
        org.apache.fop.render.XMLHandler handler;

        this := @this: org.apache.fop.render.XMLHandlerRegistry;
        handler := @parameter0: org.apache.fop.render.XMLHandler;
        specialinvoke this.<org.apache.fop.render.XMLHandlerRegistry: void addXMLHandler(java.lang.String,org.apache.fop.render.XMLHandler)>("*", handler);
        return;
    }

    public void addXMLHandler(java.lang.String)
    {
        org.apache.fop.render.XMLHandlerRegistry this;
        java.lang.String classname, $r5, $r11;
        org.apache.fop.render.XMLHandler handlerInstance;
        java.lang.ClassNotFoundException e, $r3;
        java.lang.StringBuffer $r0;
        java.lang.Class $r1, $r10;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r4, $r9;
        java.lang.InstantiationException $r6, e;
        java.lang.IllegalAccessException $r7, e;
        java.lang.ClassCastException $r8, e;

        this := @this: org.apache.fop.render.XMLHandlerRegistry;
        classname := @parameter0: java.lang.String;

     label0:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(classname);
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();
        handlerInstance = (org.apache.fop.render.XMLHandler) $r2;
        virtualinvoke this.<org.apache.fop.render.XMLHandlerRegistry: void addXMLHandler(org.apache.fop.render.XMLHandler)>(handlerInstance);

     label1:
        goto label8;

     label2:
        $r3 := @caughtexception;
        e = $r3;
        $r4 = new java.lang.IllegalArgumentException;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not find ");
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(classname);
        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r4;

     label3:
        $r6 := @caughtexception;
        e = $r6;
        $r4 = new java.lang.IllegalArgumentException;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not instantiate ");
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(classname);
        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r4;

     label4:
        $r7 := @caughtexception;
        e = $r7;
        $r4 = new java.lang.IllegalArgumentException;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not access ");
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(classname);
        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r4;

     label5:
        $r8 := @caughtexception;
        e = $r8;
        $r4 = new java.lang.IllegalArgumentException;
        $r9 = $r4;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(classname);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not an ");
        $r10 = <org.apache.fop.render.XMLHandlerRegistry: java.lang.Class class$org$apache$fop$render$XMLHandler>;
        if $r10 != null goto label6;

        $r10 = staticinvoke <org.apache.fop.render.XMLHandlerRegistry: java.lang.Class class$(java.lang.String)>("org.apache.fop.render.XMLHandler");
        <org.apache.fop.render.XMLHandlerRegistry: java.lang.Class class$org$apache$fop$render$XMLHandler> = $r10;
        goto label7;

     label6:
        $r10 = <org.apache.fop.render.XMLHandlerRegistry: java.lang.Class class$org$apache$fop$render$XMLHandler>;

     label7:
        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);
        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r4;

     label8:
        return;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
        catch java.lang.InstantiationException from label0 to label1 with label3;
        catch java.lang.IllegalAccessException from label0 to label1 with label4;
        catch java.lang.ClassCastException from label0 to label1 with label5;
    }

    public void addXMLHandler(org.apache.fop.render.XMLHandler)
    {
        org.apache.fop.render.XMLHandlerRegistry this;
        org.apache.fop.render.XMLHandler handler;
        java.lang.String ns;

        this := @this: org.apache.fop.render.XMLHandlerRegistry;
        handler := @parameter0: org.apache.fop.render.XMLHandler;
        ns = interfaceinvoke handler.<org.apache.fop.render.XMLHandler: java.lang.String getNamespace()>();
        if ns != null goto label0;

        specialinvoke this.<org.apache.fop.render.XMLHandlerRegistry: void setDefaultXMLHandler(org.apache.fop.render.XMLHandler)>(handler);
        goto label1;

     label0:
        specialinvoke this.<org.apache.fop.render.XMLHandlerRegistry: void addXMLHandler(java.lang.String,org.apache.fop.render.XMLHandler)>(ns, handler);

     label1:
        return;
    }

    private void addXMLHandler(java.lang.String, org.apache.fop.render.XMLHandler)
    {
        org.apache.fop.render.XMLHandlerRegistry this;
        java.lang.String ns;
        org.apache.fop.render.XMLHandler handler;
        java.util.List lst;
        java.util.Map $r0;
        java.lang.Object $r1;
        java.util.ArrayList $r2;

        this := @this: org.apache.fop.render.XMLHandlerRegistry;
        ns := @parameter0: java.lang.String;
        handler := @parameter1: org.apache.fop.render.XMLHandler;
        $r0 = this.<org.apache.fop.render.XMLHandlerRegistry: java.util.Map handlers>;
        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(ns);
        lst = (java.util.List) $r1;
        if lst != null goto label0;

        $r2 = new java.util.ArrayList;
        specialinvoke $r2.<java.util.ArrayList: void <init>()>();
        lst = $r2;
        $r0 = this.<org.apache.fop.render.XMLHandlerRegistry: java.util.Map handlers>;
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(ns, lst);

     label0:
        interfaceinvoke lst.<java.util.List: boolean add(java.lang.Object)>(handler);
        return;
    }

    public org.apache.fop.render.XMLHandler getXMLHandler(org.apache.fop.render.Renderer, java.lang.String)
    {
        org.apache.fop.render.XMLHandlerRegistry this;
        org.apache.fop.render.Renderer renderer;
        java.lang.String ns;
        java.util.List lst;
        org.apache.fop.render.XMLHandler handler;
        java.util.Map $r0;
        java.lang.Object $r1;

        this := @this: org.apache.fop.render.XMLHandlerRegistry;
        renderer := @parameter0: org.apache.fop.render.Renderer;
        ns := @parameter1: java.lang.String;
        $r0 = this.<org.apache.fop.render.XMLHandlerRegistry: java.util.Map handlers>;
        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(ns);
        lst = (java.util.List) $r1;
        handler = specialinvoke this.<org.apache.fop.render.XMLHandlerRegistry: org.apache.fop.render.XMLHandler getXMLHandler(org.apache.fop.render.Renderer,java.util.List)>(renderer, lst);
        if handler != null goto label0;

        $r0 = this.<org.apache.fop.render.XMLHandlerRegistry: java.util.Map handlers>;
        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("*");
        lst = (java.util.List) $r1;
        handler = specialinvoke this.<org.apache.fop.render.XMLHandlerRegistry: org.apache.fop.render.XMLHandler getXMLHandler(org.apache.fop.render.Renderer,java.util.List)>(renderer, lst);

     label0:
        return handler;
    }

    private org.apache.fop.render.XMLHandler getXMLHandler(org.apache.fop.render.Renderer, java.util.List)
    {
        org.apache.fop.render.XMLHandlerRegistry this;
        org.apache.fop.render.Renderer renderer;
        java.util.List lst;
        int i, c;
        org.apache.fop.render.XMLHandler handler;
        java.lang.Object $r0;
        boolean $z0;

        this := @this: org.apache.fop.render.XMLHandlerRegistry;
        renderer := @parameter0: org.apache.fop.render.Renderer;
        lst := @parameter1: java.util.List;
        if lst == null goto label2;

        i = 0;
        c = interfaceinvoke lst.<java.util.List: int size()>();

     label0:
        if i >= c goto label2;

        $r0 = interfaceinvoke lst.<java.util.List: java.lang.Object get(int)>(i);
        handler = (org.apache.fop.render.XMLHandler) $r0;
        $z0 = interfaceinvoke handler.<org.apache.fop.render.XMLHandler: boolean supportsRenderer(org.apache.fop.render.Renderer)>(renderer);
        if $z0 == 0 goto label1;

        return handler;

     label1:
        i = i + 1;
        goto label0;

     label2:
        return null;
    }

    private void discoverXMLHandlers()
    {
        org.apache.fop.render.XMLHandlerRegistry this;
        java.lang.Class $r0, $r4;
        java.util.Iterator providers;
        org.apache.fop.render.XMLHandler handler;
        java.lang.IllegalArgumentException e, $r7;
        boolean $z0;
        java.lang.Object $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.StringBuffer $r3;
        java.lang.String $r5, $r6;

        this := @this: org.apache.fop.render.XMLHandlerRegistry;
        $r0 = <org.apache.fop.render.XMLHandlerRegistry: java.lang.Class class$org$apache$fop$render$XMLHandler>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.fop.render.XMLHandlerRegistry: java.lang.Class class$(java.lang.String)>("org.apache.fop.render.XMLHandler");
        <org.apache.fop.render.XMLHandlerRegistry: java.lang.Class class$org$apache$fop$render$XMLHandler> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.fop.render.XMLHandlerRegistry: java.lang.Class class$org$apache$fop$render$XMLHandler>;

     label1:
        providers = staticinvoke <org.apache.xmlgraphics.util.Service: java.util.Iterator providers(java.lang.Class)>($r0);
        if providers == null goto label8;

     label2:
        $z0 = interfaceinvoke providers.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label8;

        $r1 = interfaceinvoke providers.<java.util.Iterator: java.lang.Object next()>();
        handler = (org.apache.fop.render.XMLHandler) $r1;

     label3:
        $r2 = <org.apache.fop.render.XMLHandlerRegistry: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label4;

        $r2 = <org.apache.fop.render.XMLHandlerRegistry: org.apache.commons.logging.Log log>;
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Dynamically adding XMLHandler: ");
        $r4 = virtualinvoke handler.<java.lang.Object: java.lang.Class getClass()>();
        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r6);

     label4:
        virtualinvoke this.<org.apache.fop.render.XMLHandlerRegistry: void addXMLHandler(org.apache.fop.render.XMLHandler)>(handler);

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;
        e = $r7;
        $r2 = <org.apache.fop.render.XMLHandlerRegistry: org.apache.commons.logging.Log log>;
        interfaceinvoke $r2.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("Error while adding XMLHandler", e);

     label7:
        goto label2;

     label8:
        return;

        catch java.lang.IllegalArgumentException from label3 to label5 with label6;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException l1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        l1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(l1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.apache.commons.logging.Log $r1;

        $r0 = <org.apache.fop.render.XMLHandlerRegistry: java.lang.Class class$org$apache$fop$render$XMLHandlerRegistry>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.fop.render.XMLHandlerRegistry: java.lang.Class class$(java.lang.String)>("org.apache.fop.render.XMLHandlerRegistry");
        <org.apache.fop.render.XMLHandlerRegistry: java.lang.Class class$org$apache$fop$render$XMLHandlerRegistry> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.fop.render.XMLHandlerRegistry: java.lang.Class class$org$apache$fop$render$XMLHandlerRegistry>;

     label1:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r0);
        <org.apache.fop.render.XMLHandlerRegistry: org.apache.commons.logging.Log log> = $r1;
        return;
    }
}
