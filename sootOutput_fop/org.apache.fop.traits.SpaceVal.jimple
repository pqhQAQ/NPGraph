public class org.apache.fop.traits.SpaceVal extends java.lang.Object
{
    private final org.apache.fop.traits.MinOptMax space;
    private final boolean bConditional;
    private final boolean bForcing;
    private final int iPrecedence;

    public void <init>(org.apache.fop.fo.properties.SpaceProperty, org.apache.fop.datatypes.PercentBaseContext)
    {
        org.apache.fop.traits.SpaceVal this;
        org.apache.fop.fo.properties.SpaceProperty spaceprop;
        org.apache.fop.datatypes.PercentBaseContext context;
        org.apache.fop.traits.MinOptMax $r0;
        org.apache.fop.fo.properties.Property precProp, $r1, $r3, $r5, $r8;
        org.apache.fop.datatypes.Length $r2, $r4, $r6;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.Number $r9, $r10;

        this := @this: org.apache.fop.traits.SpaceVal;
        spaceprop := @parameter0: org.apache.fop.fo.properties.SpaceProperty;
        context := @parameter1: org.apache.fop.datatypes.PercentBaseContext;
        specialinvoke this.<java.lang.Object: void <init>()>();
        $r0 = new org.apache.fop.traits.MinOptMax;
        $r1 = virtualinvoke spaceprop.<org.apache.fop.fo.properties.SpaceProperty: org.apache.fop.fo.properties.Property getMinimum(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $r2 = virtualinvoke $r1.<org.apache.fop.fo.properties.Property: org.apache.fop.datatypes.Length getLength()>();
        $i0 = interfaceinvoke $r2.<org.apache.fop.datatypes.Length: int getValue(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $r3 = virtualinvoke spaceprop.<org.apache.fop.fo.properties.SpaceProperty: org.apache.fop.fo.properties.Property getOptimum(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $r4 = virtualinvoke $r3.<org.apache.fop.fo.properties.Property: org.apache.fop.datatypes.Length getLength()>();
        $i1 = interfaceinvoke $r4.<org.apache.fop.datatypes.Length: int getValue(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $r5 = virtualinvoke spaceprop.<org.apache.fop.fo.properties.SpaceProperty: org.apache.fop.fo.properties.Property getMaximum(org.apache.fop.datatypes.PercentBaseContext)>(context);
        $r6 = virtualinvoke $r5.<org.apache.fop.fo.properties.Property: org.apache.fop.datatypes.Length getLength()>();
        $i2 = interfaceinvoke $r6.<org.apache.fop.datatypes.Length: int getValue(org.apache.fop.datatypes.PercentBaseContext)>(context);
        specialinvoke $r0.<org.apache.fop.traits.MinOptMax: void <init>(int,int,int)>($i0, $i1, $i2);
        this.<org.apache.fop.traits.SpaceVal: org.apache.fop.traits.MinOptMax space> = $r0;
        $r8 = virtualinvoke spaceprop.<org.apache.fop.fo.properties.SpaceProperty: org.apache.fop.fo.properties.Property getConditionality()>();
        $i3 = virtualinvoke $r8.<org.apache.fop.fo.properties.Property: int getEnum()>();
        if $i3 != 32 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        this.<org.apache.fop.traits.SpaceVal: boolean bConditional> = $z0;
        precProp = virtualinvoke spaceprop.<org.apache.fop.fo.properties.SpaceProperty: org.apache.fop.fo.properties.Property getPrecedence()>();
        $r9 = virtualinvoke precProp.<org.apache.fop.fo.properties.Property: java.lang.Number getNumber()>();
        if $r9 == null goto label2;

        $r10 = virtualinvoke precProp.<org.apache.fop.fo.properties.Property: java.lang.Number getNumber()>();
        $i3 = virtualinvoke $r10.<java.lang.Number: int intValue()>();
        this.<org.apache.fop.traits.SpaceVal: int iPrecedence> = $i3;
        this.<org.apache.fop.traits.SpaceVal: boolean bForcing> = 0;
        goto label5;

     label2:
        $i3 = virtualinvoke precProp.<org.apache.fop.fo.properties.Property: int getEnum()>();
        if $i3 != 53 goto label3;

        $z0 = 1;
        goto label4;

     label3:
        $z0 = 0;

     label4:
        this.<org.apache.fop.traits.SpaceVal: boolean bForcing> = $z0;
        this.<org.apache.fop.traits.SpaceVal: int iPrecedence> = 0;

     label5:
        return;
    }

    public void <init>(org.apache.fop.traits.MinOptMax, boolean, boolean, int)
    {
        org.apache.fop.traits.SpaceVal this;
        org.apache.fop.traits.MinOptMax space;
        boolean bConditional, bForcing;
        int iPrecedence;

        this := @this: org.apache.fop.traits.SpaceVal;
        space := @parameter0: org.apache.fop.traits.MinOptMax;
        bConditional := @parameter1: boolean;
        bForcing := @parameter2: boolean;
        iPrecedence := @parameter3: int;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<org.apache.fop.traits.SpaceVal: org.apache.fop.traits.MinOptMax space> = space;
        this.<org.apache.fop.traits.SpaceVal: boolean bConditional> = bConditional;
        this.<org.apache.fop.traits.SpaceVal: boolean bForcing> = bForcing;
        this.<org.apache.fop.traits.SpaceVal: int iPrecedence> = iPrecedence;
        return;
    }

    public static org.apache.fop.traits.SpaceVal makeWordSpacing(org.apache.fop.fo.properties.Property, org.apache.fop.traits.SpaceVal, org.apache.fop.fonts.Font)
    {
        org.apache.fop.fo.properties.Property wordSpacing;
        org.apache.fop.traits.SpaceVal letterSpacing, $r1;
        org.apache.fop.fonts.Font fs;
        int spaceCharIPD, $i0, $i1, $i2;
        org.apache.fop.traits.MinOptMax space, $r0, $r2, $r3;
        org.apache.fop.fo.properties.SpaceProperty $r4;

        wordSpacing := @parameter0: org.apache.fop.fo.properties.Property;
        letterSpacing := @parameter1: org.apache.fop.traits.SpaceVal;
        fs := @parameter2: org.apache.fop.fonts.Font;
        $i0 = virtualinvoke wordSpacing.<org.apache.fop.fo.properties.Property: int getEnum()>();
        if $i0 != 97 goto label0;

        spaceCharIPD = virtualinvoke fs.<org.apache.fop.fonts.Font: int getCharWidth(char)>(32);
        $r0 = new org.apache.fop.traits.MinOptMax;
        $i1 = neg spaceCharIPD;
        $i1 = $i1 / 3;
        $i2 = spaceCharIPD / 2;
        specialinvoke $r0.<org.apache.fop.traits.MinOptMax: void <init>(int,int,int)>($i1, 0, $i2);
        space = $r0;
        $r1 = new org.apache.fop.traits.SpaceVal;
        $r2 = virtualinvoke letterSpacing.<org.apache.fop.traits.SpaceVal: org.apache.fop.traits.MinOptMax getSpace()>();
        $r2 = staticinvoke <org.apache.fop.traits.MinOptMax: org.apache.fop.traits.MinOptMax multiply(org.apache.fop.traits.MinOptMax,double)>($r2, 2.0);
        $r3 = staticinvoke <org.apache.fop.traits.MinOptMax: org.apache.fop.traits.MinOptMax add(org.apache.fop.traits.MinOptMax,org.apache.fop.traits.MinOptMax)>(space, $r2);
        specialinvoke $r1.<org.apache.fop.traits.SpaceVal: void <init>(org.apache.fop.traits.MinOptMax,boolean,boolean,int)>($r3, 1, 1, 0);
        return $r1;

     label0:
        $r1 = new org.apache.fop.traits.SpaceVal;
        $r4 = virtualinvoke wordSpacing.<org.apache.fop.fo.properties.Property: org.apache.fop.fo.properties.SpaceProperty getSpace()>();
        specialinvoke $r1.<org.apache.fop.traits.SpaceVal: void <init>(org.apache.fop.fo.properties.SpaceProperty,org.apache.fop.datatypes.PercentBaseContext)>($r4, null);
        return $r1;
    }

    public static org.apache.fop.traits.SpaceVal makeLetterSpacing(org.apache.fop.fo.properties.Property)
    {
        org.apache.fop.fo.properties.Property letterSpacing;
        org.apache.fop.traits.MinOptMax $r0;
        int $i0;
        org.apache.fop.traits.SpaceVal $r1;
        org.apache.fop.fo.properties.SpaceProperty $r2;

        letterSpacing := @parameter0: org.apache.fop.fo.properties.Property;
        $i0 = virtualinvoke letterSpacing.<org.apache.fop.fo.properties.Property: int getEnum()>();
        if $i0 != 97 goto label0;

        $r1 = new org.apache.fop.traits.SpaceVal;
        $r0 = new org.apache.fop.traits.MinOptMax;
        specialinvoke $r0.<org.apache.fop.traits.MinOptMax: void <init>(int)>(0);
        specialinvoke $r1.<org.apache.fop.traits.SpaceVal: void <init>(org.apache.fop.traits.MinOptMax,boolean,boolean,int)>($r0, 1, 1, 0);
        return $r1;

     label0:
        $r1 = new org.apache.fop.traits.SpaceVal;
        $r2 = virtualinvoke letterSpacing.<org.apache.fop.fo.properties.Property: org.apache.fop.fo.properties.SpaceProperty getSpace()>();
        specialinvoke $r1.<org.apache.fop.traits.SpaceVal: void <init>(org.apache.fop.fo.properties.SpaceProperty,org.apache.fop.datatypes.PercentBaseContext)>($r2, null);
        return $r1;
    }

    public boolean isConditional()
    {
        org.apache.fop.traits.SpaceVal this;
        boolean $z0;

        this := @this: org.apache.fop.traits.SpaceVal;
        $z0 = this.<org.apache.fop.traits.SpaceVal: boolean bConditional>;
        return $z0;
    }

    public boolean isForcing()
    {
        org.apache.fop.traits.SpaceVal this;
        boolean $z0;

        this := @this: org.apache.fop.traits.SpaceVal;
        $z0 = this.<org.apache.fop.traits.SpaceVal: boolean bForcing>;
        return $z0;
    }

    public int getPrecedence()
    {
        org.apache.fop.traits.SpaceVal this;
        int $i0;

        this := @this: org.apache.fop.traits.SpaceVal;
        $i0 = this.<org.apache.fop.traits.SpaceVal: int iPrecedence>;
        return $i0;
    }

    public org.apache.fop.traits.MinOptMax getSpace()
    {
        org.apache.fop.traits.SpaceVal this;
        org.apache.fop.traits.MinOptMax $r0;

        this := @this: org.apache.fop.traits.SpaceVal;
        $r0 = this.<org.apache.fop.traits.SpaceVal: org.apache.fop.traits.MinOptMax space>;
        return $r0;
    }

    public java.lang.String toString()
    {
        org.apache.fop.traits.SpaceVal this;
        java.lang.StringBuffer $r0;
        org.apache.fop.traits.MinOptMax $r1;
        java.lang.String $r2, $r3;

        this := @this: org.apache.fop.traits.SpaceVal;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SpaceVal: ");
        $r1 = virtualinvoke this.<org.apache.fop.traits.SpaceVal: org.apache.fop.traits.MinOptMax getSpace()>();
        $r2 = virtualinvoke $r1.<org.apache.fop.traits.MinOptMax: java.lang.String toString()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r3;
    }
}
