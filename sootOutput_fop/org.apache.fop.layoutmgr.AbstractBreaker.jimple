public abstract class org.apache.fop.layoutmgr.AbstractBreaker extends java.lang.Object
{
    protected static org.apache.commons.logging.Log log;
    private int blockListIndex;
    private java.util.List blockLists;
    protected int alignment;
    private int alignmentLast;
    protected org.apache.fop.traits.MinOptMax footnoteSeparatorLength;
    static java.lang.Class class$org$apache$fop$layoutmgr$AbstractBreaker;

    public void <init>()
    {
        org.apache.fop.layoutmgr.AbstractBreaker this;
        org.apache.fop.traits.MinOptMax $r0;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<org.apache.fop.layoutmgr.AbstractBreaker: int blockListIndex> = 0;
        this.<org.apache.fop.layoutmgr.AbstractBreaker: java.util.List blockLists> = null;
        $r0 = new org.apache.fop.traits.MinOptMax;
        specialinvoke $r0.<org.apache.fop.traits.MinOptMax: void <init>(int)>(0);
        this.<org.apache.fop.layoutmgr.AbstractBreaker: org.apache.fop.traits.MinOptMax footnoteSeparatorLength> = $r0;
        return;
    }

    protected abstract int getCurrentDisplayAlign();

    protected abstract boolean hasMoreContent();

    protected abstract void addAreas(org.apache.fop.layoutmgr.PositionIterator, org.apache.fop.layoutmgr.LayoutContext);

    protected abstract org.apache.fop.layoutmgr.LayoutManager getTopLevelLM();

    protected abstract org.apache.fop.layoutmgr.LayoutManager getCurrentChildLM();

    protected boolean isPartOverflowRecoveryActivated()
    {
        org.apache.fop.layoutmgr.AbstractBreaker this;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker;
        return 1;
    }

    protected boolean isSinglePartFavored()
    {
        org.apache.fop.layoutmgr.AbstractBreaker this;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker;
        return 0;
    }

    protected org.apache.fop.layoutmgr.PageProvider getPageProvider()
    {
        org.apache.fop.layoutmgr.AbstractBreaker this;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker;
        return null;
    }

    protected org.apache.fop.layoutmgr.PageBreakingAlgorithm$PageBreakingLayoutListener getLayoutListener()
    {
        org.apache.fop.layoutmgr.AbstractBreaker this;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker;
        return null;
    }

    protected abstract java.util.LinkedList getNextKnuthElements(org.apache.fop.layoutmgr.LayoutContext, int);

    public boolean isEmpty()
    {
        org.apache.fop.layoutmgr.AbstractBreaker this;
        java.util.List $r0;
        int $i0;
        boolean $z0;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker;
        $r0 = this.<org.apache.fop.layoutmgr.AbstractBreaker: java.util.List blockLists>;
        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();
        if $i0 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    protected void startPart(org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence, int)
    {
        org.apache.fop.layoutmgr.AbstractBreaker this;
        org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence list;
        int breakClass;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker;
        list := @parameter0: org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence;
        breakClass := @parameter1: int;
        return;
    }

    protected void handleEmptyContent()
    {
        org.apache.fop.layoutmgr.AbstractBreaker this;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker;
        return;
    }

    protected abstract void finishPart(org.apache.fop.layoutmgr.PageBreakingAlgorithm, org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition);

    protected org.apache.fop.layoutmgr.LayoutContext createLayoutContext()
    {
        org.apache.fop.layoutmgr.AbstractBreaker this;
        org.apache.fop.layoutmgr.LayoutContext $r0;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker;
        $r0 = new org.apache.fop.layoutmgr.LayoutContext;
        specialinvoke $r0.<org.apache.fop.layoutmgr.LayoutContext: void <init>(int)>(0);
        return $r0;
    }

    protected void updateLayoutContext(org.apache.fop.layoutmgr.LayoutContext)
    {
        org.apache.fop.layoutmgr.AbstractBreaker this;
        org.apache.fop.layoutmgr.LayoutContext context;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker;
        context := @parameter0: org.apache.fop.layoutmgr.LayoutContext;
        return;
    }

    protected void observeElementList(java.util.List)
    {
        org.apache.fop.layoutmgr.AbstractBreaker this;
        java.util.List elementList;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker;
        elementList := @parameter0: java.util.List;
        staticinvoke <org.apache.fop.layoutmgr.ElementListObserver: void observe(java.util.List,java.lang.String,java.lang.String)>(elementList, "breaker", null);
        return;
    }

    public void doLayout(int)
    {
        org.apache.fop.layoutmgr.AbstractBreaker this;
        int flowBPD;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker;
        flowBPD := @parameter0: int;
        virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: void doLayout(int,boolean)>(flowBPD, 0);
        return;
    }

    public void doLayout(int, boolean)
    {
        org.apache.fop.layoutmgr.AbstractBreaker this;
        int flowBPD, nextSequenceStartsOn, iOptPageCount, $i0, $i1, $i2, $i3, $i4;
        boolean autoHeight, $z0, $z1, $z2;
        org.apache.fop.layoutmgr.LayoutContext childLC;
        org.apache.fop.traits.MinOptMax $r0, $r16;
        org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence blockList, effectiveList;
        java.lang.String pagina, $r4, $r9, $r11;
        org.apache.fop.layoutmgr.PageBreakingAlgorithm alg, $r12;
        java.util.ArrayList $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.StringBuffer $r3;
        java.util.List $r5, $r6, $r7;
        java.lang.Object $r8;
        java.lang.Class $r10;
        org.apache.fop.layoutmgr.LayoutManager $r13;
        org.apache.fop.layoutmgr.PageProvider $r14;
        org.apache.fop.layoutmgr.PageBreakingAlgorithm$PageBreakingLayoutListener $r15;
        java.util.LinkedList $r17;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker;
        flowBPD := @parameter0: int;
        autoHeight := @parameter1: boolean;
        childLC = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: org.apache.fop.layoutmgr.LayoutContext createLayoutContext()>();
        $r0 = new org.apache.fop.traits.MinOptMax;
        specialinvoke $r0.<org.apache.fop.traits.MinOptMax: void <init>(int)>(flowBPD);
        virtualinvoke childLC.<org.apache.fop.layoutmgr.LayoutContext: void setStackLimitBP(org.apache.fop.traits.MinOptMax)>($r0);
        $i0 = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: int getCurrentDisplayAlign()>();
        if $i0 != 162 goto label0;

        this.<org.apache.fop.layoutmgr.AbstractBreaker: int alignment> = 70;
        goto label2;

     label0:
        $i0 = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: int getCurrentDisplayAlign()>();
        if $i0 != 163 goto label1;

        this.<org.apache.fop.layoutmgr.AbstractBreaker: int alignment> = 70;
        goto label2;

     label1:
        this.<org.apache.fop.layoutmgr.AbstractBreaker: int alignment> = 135;

     label2:
        this.<org.apache.fop.layoutmgr.AbstractBreaker: int alignmentLast> = 135;
        $z0 = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: boolean isSinglePartFavored()>();
        if $z0 == 0 goto label3;

        $i0 = this.<org.apache.fop.layoutmgr.AbstractBreaker: int alignment>;
        if $i0 != 70 goto label3;

        this.<org.apache.fop.layoutmgr.AbstractBreaker: int alignmentLast> = 70;

     label3:
        $i1 = this.<org.apache.fop.layoutmgr.AbstractBreaker: int alignment>;
        virtualinvoke childLC.<org.apache.fop.layoutmgr.LayoutContext: void setBPAlignment(int)>($i1);
        $r1 = new java.util.ArrayList;
        specialinvoke $r1.<java.util.ArrayList: void <init>()>();
        this.<org.apache.fop.layoutmgr.AbstractBreaker: java.util.List blockLists> = $r1;
        $r2 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PLM> flow BPD =");
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(flowBPD);
        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r4);
        nextSequenceStartsOn = 8;

     label4:
        $z0 = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: boolean hasMoreContent()>();
        if $z0 == 0 goto label12;

        $r5 = this.<org.apache.fop.layoutmgr.AbstractBreaker: java.util.List blockLists>;
        interfaceinvoke $r5.<java.util.List: void clear()>();
        nextSequenceStartsOn = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: int getNextBlockList(org.apache.fop.layoutmgr.LayoutContext,int)>(childLC, nextSequenceStartsOn);
        $r2 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PLM> blockLists.size() = ");
        $r6 = this.<org.apache.fop.layoutmgr.AbstractBreaker: java.util.List blockLists>;
        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);
        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r4);
        this.<org.apache.fop.layoutmgr.AbstractBreaker: int blockListIndex> = 0;

     label5:
        $i0 = this.<org.apache.fop.layoutmgr.AbstractBreaker: int blockListIndex>;
        $r7 = this.<org.apache.fop.layoutmgr.AbstractBreaker: java.util.List blockLists>;
        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();
        if $i0 >= $i1 goto label4;

        $r5 = this.<org.apache.fop.layoutmgr.AbstractBreaker: java.util.List blockLists>;
        $i1 = this.<org.apache.fop.layoutmgr.AbstractBreaker: int blockListIndex>;
        $r8 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i1);
        blockList = (org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence) $r8;
        $r2 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label9;

        $r2 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  blockListIndex = ");
        $i2 = this.<org.apache.fop.layoutmgr.AbstractBreaker: int blockListIndex>;
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);
        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r4);
        $i0 = staticinvoke <org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int access$000(org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence)>(blockList);
        if $i0 != 8 goto label6;

        $r9 = "any page";
        goto label8;

     label6:
        $i0 = staticinvoke <org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int access$000(org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence)>(blockList);
        if $i0 != 100 goto label7;

        $r9 = "odd page";
        goto label8;

     label7:
        $r9 = "even page";

     label8:
        pagina = $r9;
        $r2 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  sequence starts on ");
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(pagina);
        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r4);

     label9:
        virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: void observeElementList(java.util.List)>(blockList);
        $r2 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PLM> start of algorithm (");
        $r10 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();
        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("), flow BPD =");
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(flowBPD);
        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r4);
        $r12 = new org.apache.fop.layoutmgr.PageBreakingAlgorithm;
        $r13 = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: org.apache.fop.layoutmgr.LayoutManager getTopLevelLM()>();
        $r14 = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: org.apache.fop.layoutmgr.PageProvider getPageProvider()>();
        $r15 = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: org.apache.fop.layoutmgr.PageBreakingAlgorithm$PageBreakingLayoutListener getLayoutListener()>();
        $i3 = this.<org.apache.fop.layoutmgr.AbstractBreaker: int alignment>;
        $i4 = this.<org.apache.fop.layoutmgr.AbstractBreaker: int alignmentLast>;
        $r16 = this.<org.apache.fop.layoutmgr.AbstractBreaker: org.apache.fop.traits.MinOptMax footnoteSeparatorLength>;
        $z1 = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: boolean isPartOverflowRecoveryActivated()>();
        $z2 = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: boolean isSinglePartFavored()>();
        specialinvoke $r12.<org.apache.fop.layoutmgr.PageBreakingAlgorithm: void <init>(org.apache.fop.layoutmgr.LayoutManager,org.apache.fop.layoutmgr.PageProvider,org.apache.fop.layoutmgr.PageBreakingAlgorithm$PageBreakingLayoutListener,int,int,org.apache.fop.traits.MinOptMax,boolean,boolean,boolean)>($r13, $r14, $r15, $i3, $i4, $r16, $z1, autoHeight, $z2);
        alg = $r12;
        $i0 = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: int getCurrentDisplayAlign()>();
        if $i0 != 162 goto label10;

        effectiveList = specialinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence justifyBoxes(org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence,org.apache.fop.layoutmgr.PageBreakingAlgorithm,int)>(blockList, alg, flowBPD);
        goto label11;

     label10:
        effectiveList = blockList;

     label11:
        virtualinvoke alg.<org.apache.fop.layoutmgr.PageBreakingAlgorithm: void setConstantLineWidth(int)>(flowBPD);
        iOptPageCount = virtualinvoke alg.<org.apache.fop.layoutmgr.PageBreakingAlgorithm: int findBreakingPoints(org.apache.fop.layoutmgr.KnuthSequence,double,boolean,int)>(effectiveList, 1.0, 1, 0);
        $r2 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PLM> iOptPageCount= ");
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(iOptPageCount);
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" pageBreaks.size()= ");
        $r17 = virtualinvoke alg.<org.apache.fop.layoutmgr.PageBreakingAlgorithm: java.util.LinkedList getPageBreaks()>();
        $i2 = virtualinvoke $r17.<java.util.LinkedList: int size()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);
        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r4);
        virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: void doPhase3(org.apache.fop.layoutmgr.PageBreakingAlgorithm,int,org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence,org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence)>(alg, iOptPageCount, blockList, effectiveList);
        $i1 = this.<org.apache.fop.layoutmgr.AbstractBreaker: int blockListIndex>;
        $i1 = $i1 + 1;
        this.<org.apache.fop.layoutmgr.AbstractBreaker: int blockListIndex> = $i1;
        goto label5;

     label12:
        return;
    }

    protected abstract void doPhase3(org.apache.fop.layoutmgr.PageBreakingAlgorithm, int, org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence, org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence);

    protected void addAreas(org.apache.fop.layoutmgr.PageBreakingAlgorithm, int, org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence, org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence)
    {
        org.apache.fop.layoutmgr.AbstractBreaker this;
        org.apache.fop.layoutmgr.PageBreakingAlgorithm alg;
        int partCount;
        org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence originalList, effectiveList;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker;
        alg := @parameter0: org.apache.fop.layoutmgr.PageBreakingAlgorithm;
        partCount := @parameter1: int;
        originalList := @parameter2: org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence;
        effectiveList := @parameter3: org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence;
        virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: void addAreas(org.apache.fop.layoutmgr.PageBreakingAlgorithm,int,int,org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence,org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence)>(alg, 0, partCount, originalList, effectiveList);
        return;
    }

    protected void addAreas(org.apache.fop.layoutmgr.PageBreakingAlgorithm, int, int, org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence, org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence)
    {
        org.apache.fop.layoutmgr.AbstractBreaker this;
        org.apache.fop.layoutmgr.PageBreakingAlgorithm alg;
        int startPart, partCount, startElementIndex, endElementIndex, lastBreak, p, lastBreakClass, displayAlign, notificationEndElementIndex, boxCount, averageLineLength, $i0, $i1, $i2, $i3;
        org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence originalList, effectiveList;
        java.util.ListIterator effectiveListIterator;
        org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition pbp;
        org.apache.fop.layoutmgr.ListElement lastBreakElement;
        org.apache.fop.layoutmgr.KnuthPenalty pen;
        org.apache.fop.layoutmgr.KnuthElement firstElement, tempEl, $r5;
        org.apache.fop.layoutmgr.LayoutContext childLC, $r6;
        java.util.LinkedList $r0;
        java.lang.Object $r1;
        boolean $z0;
        org.apache.commons.logging.Log $r2;
        java.lang.StringBuffer $r3;
        java.lang.String $r4;
        double $d0;
        org.apache.fop.traits.MinOptMax $r7;
        org.apache.fop.layoutmgr.KnuthPossPosIter $r8;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker;
        alg := @parameter0: org.apache.fop.layoutmgr.PageBreakingAlgorithm;
        startPart := @parameter1: int;
        partCount := @parameter2: int;
        originalList := @parameter3: org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence;
        effectiveList := @parameter4: org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence;
        virtualinvoke effectiveList.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: java.util.ListIterator listIterator()>();
        startElementIndex = 0;
        endElementIndex = 0;
        lastBreak = -1;
        p = startPart;

     label0:
        $i0 = startPart + partCount;
        if p >= $i0 goto label21;

        $r0 = virtualinvoke alg.<org.apache.fop.layoutmgr.PageBreakingAlgorithm: java.util.LinkedList getPageBreaks()>();
        $r1 = virtualinvoke $r0.<java.util.LinkedList: java.lang.Object get(int)>(p);
        pbp = (org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition) $r1;
        if p != 0 goto label1;

        lastBreakClass = virtualinvoke effectiveList.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int getStartOn()>();
        goto label3;

     label1:
        lastBreakElement = virtualinvoke effectiveList.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: org.apache.fop.layoutmgr.ListElement getElement(int)>(endElementIndex);
        $z0 = virtualinvoke lastBreakElement.<org.apache.fop.layoutmgr.ListElement: boolean isPenalty()>();
        if $z0 == 0 goto label2;

        pen = (org.apache.fop.layoutmgr.KnuthPenalty) lastBreakElement;
        lastBreakClass = virtualinvoke pen.<org.apache.fop.layoutmgr.KnuthPenalty: int getBreakClass()>();
        goto label3;

     label2:
        lastBreakClass = 28;

     label3:
        endElementIndex = virtualinvoke pbp.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int getLeafPos()>();
        $i1 = startElementIndex;
        if startElementIndex != 0 goto label4;

        $i0 = effectiveList.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int ignoreAtStart>;
        goto label5;

     label4:
        $i0 = 0;

     label5:
        startElementIndex = $i1 + $i0;
        $r2 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PLM> part: ");
        $i2 = p + 1;
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", start at pos ");
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(startElementIndex);
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", break at pos ");
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(endElementIndex);
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", break class = ");
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(lastBreakClass);
        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r4);
        virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: void startPart(org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence,int)>(effectiveList, lastBreakClass);
        displayAlign = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: int getCurrentDisplayAlign()>();
        notificationEndElementIndex = endElementIndex;
        $i1 = endElementIndex;
        $i2 = virtualinvoke originalList.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int size()>();
        $i2 = $i2 - 1;
        if endElementIndex != $i2 goto label6;

        $i0 = effectiveList.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int ignoreAtEnd>;
        goto label7;

     label6:
        $i0 = 0;

     label7:
        endElementIndex = $i1 - $i0;
        $r1 = virtualinvoke effectiveList.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: java.lang.Object get(int)>(endElementIndex);
        $r5 = (org.apache.fop.layoutmgr.KnuthElement) $r1;
        $z0 = virtualinvoke $r5.<org.apache.fop.layoutmgr.KnuthElement: boolean isGlue()>();
        if $z0 == 0 goto label8;

        endElementIndex = endElementIndex + -1;

     label8:
        effectiveListIterator = virtualinvoke effectiveList.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: java.util.ListIterator listIterator(int)>(startElementIndex);

     label9:
        $z0 = interfaceinvoke effectiveListIterator.<java.util.ListIterator: boolean hasNext()>();
        if $z0 == 0 goto label10;

        $r1 = interfaceinvoke effectiveListIterator.<java.util.ListIterator: java.lang.Object next()>();
        $r5 = (org.apache.fop.layoutmgr.KnuthElement) $r1;
        firstElement = $r5;
        $z0 = virtualinvoke $r5.<org.apache.fop.layoutmgr.KnuthElement: boolean isBox()>();
        if $z0 != 0 goto label10;

        startElementIndex = startElementIndex + 1;
        goto label9;

     label10:
        if startElementIndex > endElementIndex goto label19;

        $r2 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label11;

        $r2 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("     addAreas from ");
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(startElementIndex);
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to ");
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(endElementIndex);
        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r4);

     label11:
        $r6 = new org.apache.fop.layoutmgr.LayoutContext;
        specialinvoke $r6.<org.apache.fop.layoutmgr.LayoutContext: void <init>(int)>(0);
        childLC = $r6;
        $d0 = pbp.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: double bpdAdjust>;
        virtualinvoke childLC.<org.apache.fop.layoutmgr.LayoutContext: void setSpaceAdjust(double)>($d0);
        $i1 = pbp.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int difference>;
        if $i1 == 0 goto label12;

        if displayAlign != 23 goto label12;

        $i0 = pbp.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int difference>;
        $i0 = $i0 / 2;
        virtualinvoke childLC.<org.apache.fop.layoutmgr.LayoutContext: void setSpaceBefore(int)>($i0);
        goto label17;

     label12:
        $i1 = pbp.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int difference>;
        if $i1 == 0 goto label13;

        if displayAlign != 3 goto label13;

        $i0 = pbp.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int difference>;
        virtualinvoke childLC.<org.apache.fop.layoutmgr.LayoutContext: void setSpaceBefore(int)>($i0);
        goto label17;

     label13:
        $i1 = pbp.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int difference>;
        if $i1 == 0 goto label17;

        if displayAlign != 163 goto label17;

        $i0 = partCount - 1;
        if p >= $i0 goto label17;

        boxCount = 0;
        effectiveListIterator = virtualinvoke effectiveList.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: java.util.ListIterator listIterator(int)>(startElementIndex);

     label14:
        $i1 = interfaceinvoke effectiveListIterator.<java.util.ListIterator: int nextIndex()>();
        if $i1 > endElementIndex goto label16;

        $r1 = interfaceinvoke effectiveListIterator.<java.util.ListIterator: java.lang.Object next()>();
        tempEl = (org.apache.fop.layoutmgr.KnuthElement) $r1;
        $z0 = virtualinvoke tempEl.<org.apache.fop.layoutmgr.KnuthElement: boolean isBox()>();
        if $z0 == 0 goto label15;

        $i1 = virtualinvoke tempEl.<org.apache.fop.layoutmgr.KnuthElement: int getW()>();
        if $i1 <= 0 goto label15;

        boxCount = boxCount + 1;

     label15:
        goto label14;

     label16:
        if boxCount < 2 goto label17;

        $i0 = pbp.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int difference>;
        $i2 = boxCount - 1;
        $i0 = $i0 / $i2;
        virtualinvoke childLC.<org.apache.fop.layoutmgr.LayoutContext: void setSpaceAfter(int)>($i0);

     label17:
        if displayAlign != 162 goto label18;

        averageLineLength = specialinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: int optimizeLineLength(org.apache.fop.layoutmgr.KnuthSequence,int,int)>(effectiveList, startElementIndex, endElementIndex);
        if averageLineLength == 0 goto label18;

        $r7 = new org.apache.fop.traits.MinOptMax;
        specialinvoke $r7.<org.apache.fop.traits.MinOptMax: void <init>(int)>(averageLineLength);
        virtualinvoke childLC.<org.apache.fop.layoutmgr.LayoutContext: void setStackLimitBP(org.apache.fop.traits.MinOptMax)>($r7);

     label18:
        staticinvoke <org.apache.fop.layoutmgr.SpaceResolver: void performConditionalsNotification(java.util.List,int,int,int)>(effectiveList, startElementIndex, notificationEndElementIndex, lastBreak);
        $r8 = new org.apache.fop.layoutmgr.KnuthPossPosIter;
        $i3 = endElementIndex + 1;
        specialinvoke $r8.<org.apache.fop.layoutmgr.KnuthPossPosIter: void <init>(java.util.List,int,int)>(effectiveList, startElementIndex, $i3);
        virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: void addAreas(org.apache.fop.layoutmgr.PositionIterator,org.apache.fop.layoutmgr.LayoutContext)>($r8, childLC);
        goto label20;

     label19:
        virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: void handleEmptyContent()>();

     label20:
        virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: void finishPart(org.apache.fop.layoutmgr.PageBreakingAlgorithm,org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition)>(alg, pbp);
        lastBreak = endElementIndex;
        $i1 = virtualinvoke pbp.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int getLeafPos()>();
        startElementIndex = $i1 + 1;
        p = p + 1;
        goto label0;

     label21:
        return;
    }

    protected int handleSpanChange(org.apache.fop.layoutmgr.LayoutContext, int)
    {
        org.apache.fop.layoutmgr.AbstractBreaker this;
        org.apache.fop.layoutmgr.LayoutContext childLC;
        int nextSequenceStartsOn;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker;
        childLC := @parameter0: org.apache.fop.layoutmgr.LayoutContext;
        nextSequenceStartsOn := @parameter1: int;
        return nextSequenceStartsOn;
    }

    protected int getNextBlockList(org.apache.fop.layoutmgr.LayoutContext, int)
    {
        org.apache.fop.layoutmgr.AbstractBreaker this;
        org.apache.fop.layoutmgr.LayoutContext childLC;
        int nextSequenceStartsOn, $i0, $i1, nextSequenceStartsOn, $i2, $i3;
        java.util.LinkedList returnedList;
        org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence blockList, $r0, seq;
        org.apache.fop.layoutmgr.Position breakPosition;
        org.apache.fop.layoutmgr.KnuthPenalty breakPenalty;
        null_type seq;
        java.lang.Object $r1;
        org.apache.fop.layoutmgr.KnuthElement $r2;
        boolean $z0;
        org.apache.commons.logging.Log $r3;
        java.lang.IllegalStateException $r4;
        java.lang.StringBuffer $r5;
        java.lang.String $r6;
        java.util.List $r7;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker;
        childLC := @parameter0: org.apache.fop.layoutmgr.LayoutContext;
        nextSequenceStartsOn := @parameter1: int;
        virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: void updateLayoutContext(org.apache.fop.layoutmgr.LayoutContext)>(childLC);
        virtualinvoke childLC.<org.apache.fop.layoutmgr.LayoutContext: void signalSpanChange(int)>(0);
        $i0 = this.<org.apache.fop.layoutmgr.AbstractBreaker: int alignment>;
        returnedList = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: java.util.LinkedList getNextKnuthElements(org.apache.fop.layoutmgr.LayoutContext,int)>(childLC, $i0);
        if returnedList == null goto label7;

        $i1 = virtualinvoke returnedList.<java.util.LinkedList: int size()>();
        if $i1 != 0 goto label0;

        nextSequenceStartsOn = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: int handleSpanChange(org.apache.fop.layoutmgr.LayoutContext,int)>(childLC, nextSequenceStartsOn);
        return nextSequenceStartsOn;

     label0:
        $r0 = new org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence;
        $i2 = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: int getCurrentDisplayAlign()>();
        specialinvoke $r0.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: void <init>(org.apache.fop.layoutmgr.AbstractBreaker,int,int)>(this, nextSequenceStartsOn, $i2);
        blockList = $r0;
        nextSequenceStartsOn = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: int handleSpanChange(org.apache.fop.layoutmgr.LayoutContext,int)>(childLC, nextSequenceStartsOn);
        breakPosition = null;
        $r1 = virtualinvoke returnedList.<java.util.LinkedList: java.lang.Object getLast()>();
        $r2 = (org.apache.fop.layoutmgr.KnuthElement) $r1;
        $z0 = virtualinvoke $r2.<org.apache.fop.layoutmgr.KnuthElement: boolean isForcedBreak()>();
        if $z0 == 0 goto label6;

        $r1 = virtualinvoke returnedList.<java.util.LinkedList: java.lang.Object removeLast()>();
        breakPenalty = (org.apache.fop.layoutmgr.KnuthPenalty) $r1;
        breakPosition = virtualinvoke breakPenalty.<org.apache.fop.layoutmgr.KnuthPenalty: org.apache.fop.layoutmgr.Position getPosition()>();
        $i1 = virtualinvoke breakPenalty.<org.apache.fop.layoutmgr.KnuthPenalty: int getBreakClass()>();
        lookupswitch($i1)
        {
            case 28: goto label2;
            case 44: goto label4;
            case 100: goto label3;
            case 104: goto label1;
            default: goto label5;
        };

     label1:
        $r3 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("PLM> break - PAGE");
        nextSequenceStartsOn = 8;
        goto label6;

     label2:
        $r3 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("PLM> break - COLUMN");
        nextSequenceStartsOn = 28;
        goto label6;

     label3:
        $r3 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("PLM> break - ODD PAGE");
        nextSequenceStartsOn = 100;
        goto label6;

     label4:
        $r3 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("PLM> break - EVEN PAGE");
        nextSequenceStartsOn = 44;
        goto label6;

     label5:
        $r4 = new java.lang.IllegalStateException;
        $r5 = new java.lang.StringBuffer;
        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid break class: ");
        $i3 = virtualinvoke breakPenalty.<org.apache.fop.layoutmgr.KnuthPenalty: int getBreakClass()>();
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);
        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);
        throw $r4;

     label6:
        virtualinvoke blockList.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: boolean addAll(java.util.Collection)>(returnedList);
        seq = null;
        seq = virtualinvoke blockList.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence endBlockSequence(org.apache.fop.layoutmgr.Position)>(breakPosition);
        if seq == null goto label7;

        $r7 = this.<org.apache.fop.layoutmgr.AbstractBreaker: java.util.List blockLists>;
        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(seq);

     label7:
        return nextSequenceStartsOn;
    }

    private int optimizeLineLength(org.apache.fop.layoutmgr.KnuthSequence, int, int)
    {
        org.apache.fop.layoutmgr.AbstractBreaker this;
        org.apache.fop.layoutmgr.KnuthSequence effectiveList;
        int startElementIndex, endElementIndex, boxCount, accumulatedLineLength, greatestMinimumLength, averageLineLength, $i0, $i1, $i2;
        java.util.ListIterator effectiveListIterator;
        org.apache.fop.layoutmgr.KnuthElement tempEl;
        org.apache.fop.layoutmgr.KnuthBlockBox blockBox, $r5;
        java.lang.Object $r0;
        boolean $z0;
        org.apache.commons.logging.Log $r1;
        java.lang.StringBuffer $r2;
        java.lang.String $r3;
        org.apache.fop.traits.MinOptMax $r4, $r6;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker;
        effectiveList := @parameter0: org.apache.fop.layoutmgr.KnuthSequence;
        startElementIndex := @parameter1: int;
        endElementIndex := @parameter2: int;
        boxCount = 0;
        accumulatedLineLength = 0;
        greatestMinimumLength = 0;
        effectiveListIterator = virtualinvoke effectiveList.<org.apache.fop.layoutmgr.KnuthSequence: java.util.ListIterator listIterator(int)>(startElementIndex);

     label0:
        $i0 = interfaceinvoke effectiveListIterator.<java.util.ListIterator: int nextIndex()>();
        if $i0 > endElementIndex goto label3;

        $r0 = interfaceinvoke effectiveListIterator.<java.util.ListIterator: java.lang.Object next()>();
        tempEl = (org.apache.fop.layoutmgr.KnuthElement) $r0;
        $z0 = tempEl instanceof org.apache.fop.layoutmgr.KnuthBlockBox;
        if $z0 == 0 goto label2;

        blockBox = (org.apache.fop.layoutmgr.KnuthBlockBox) tempEl;
        $i0 = virtualinvoke blockBox.<org.apache.fop.layoutmgr.KnuthBlockBox: int getBPD()>();
        if $i0 <= 0 goto label1;

        $r1 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PSLM> nominal length of line = ");
        $i1 = virtualinvoke blockBox.<org.apache.fop.layoutmgr.KnuthBlockBox: int getBPD()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r3);
        $r1 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("      range = ");
        $r4 = virtualinvoke blockBox.<org.apache.fop.layoutmgr.KnuthBlockBox: org.apache.fop.traits.MinOptMax getIPDRange()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r3);
        boxCount = boxCount + 1;
        $r5 = (org.apache.fop.layoutmgr.KnuthBlockBox) tempEl;
        $i2 = virtualinvoke $r5.<org.apache.fop.layoutmgr.KnuthBlockBox: int getBPD()>();
        accumulatedLineLength = accumulatedLineLength + $i2;

     label1:
        $r6 = virtualinvoke blockBox.<org.apache.fop.layoutmgr.KnuthBlockBox: org.apache.fop.traits.MinOptMax getIPDRange()>();
        $i0 = $r6.<org.apache.fop.traits.MinOptMax: int min>;
        if $i0 <= greatestMinimumLength goto label2;

        $r6 = virtualinvoke blockBox.<org.apache.fop.layoutmgr.KnuthBlockBox: org.apache.fop.traits.MinOptMax getIPDRange()>();
        greatestMinimumLength = $r6.<org.apache.fop.traits.MinOptMax: int min>;

     label2:
        goto label0;

     label3:
        averageLineLength = 0;
        if accumulatedLineLength <= 0 goto label4;

        if boxCount <= 0 goto label4;

        averageLineLength = accumulatedLineLength / boxCount;
        $r1 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Average line length = ");
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(averageLineLength);
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r3);
        if averageLineLength >= greatestMinimumLength goto label4;

        averageLineLength = greatestMinimumLength;
        $r1 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Correction to: ");
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(averageLineLength);
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r3);

     label4:
        return averageLineLength;
    }

    private org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence justifyBoxes(org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence, org.apache.fop.layoutmgr.PageBreakingAlgorithm, int)
    {
        org.apache.fop.layoutmgr.AbstractBreaker this;
        org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence blockList, effectiveList, $r15;
        org.apache.fop.layoutmgr.PageBreakingAlgorithm alg;
        int availableBPD, iOptPageNumber, $i0, $i1, $i2, $i4, $i5, adjustedDiff, $i7;
        java.util.ListIterator sequenceIterator, breakIterator;
        org.apache.fop.layoutmgr.KnuthElement thisElement, firstElement, $r5;
        org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition thisBreak;
        boolean accumulatedS, bBoxSeen, $z0;
        byte adjustedDiff, $b3, $b6;
        org.apache.fop.traits.MinOptMax lineNumberMaxAdjustment, spaceMaxAdjustment, $r9;
        double spaceAdjustmentRatio, $d0, $d1;
        java.util.LinkedList blockSpacesList, unconfirmedList, adjustableLinesList, $r3, $r18;
        org.apache.fop.layoutmgr.KnuthGlue blockSpace, $r8, $r10, $r11;
        org.apache.commons.logging.Log $r0;
        java.lang.StringBuffer $r1;
        java.lang.String $r2, $r14;
        java.lang.Object $r4;
        org.apache.fop.layoutmgr.LayoutManager $r6, $r16;
        org.apache.fop.layoutmgr.BlockLevelLayoutManager $r7;
        java.util.List $r17;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker;
        blockList := @parameter0: org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence;
        alg := @parameter1: org.apache.fop.layoutmgr.PageBreakingAlgorithm;
        availableBPD := @parameter2: int;
        virtualinvoke alg.<org.apache.fop.layoutmgr.PageBreakingAlgorithm: void setConstantLineWidth(int)>(availableBPD);
        iOptPageNumber = virtualinvoke alg.<org.apache.fop.layoutmgr.PageBreakingAlgorithm: int findBreakingPoints(org.apache.fop.layoutmgr.KnuthSequence,double,boolean,int)>(blockList, 1.0, 1, 0);
        $r0 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PLM> iOptPageNumber= ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(iOptPageNumber);
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r2);
        sequenceIterator = virtualinvoke blockList.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: java.util.ListIterator listIterator()>();
        $r3 = virtualinvoke alg.<org.apache.fop.layoutmgr.PageBreakingAlgorithm: java.util.LinkedList getPageBreaks()>();
        breakIterator = virtualinvoke $r3.<java.util.LinkedList: java.util.ListIterator listIterator()>();
        thisElement = null;

     label0:
        $z0 = interfaceinvoke breakIterator.<java.util.ListIterator: boolean hasNext()>();
        if $z0 == 0 goto label32;

        $r4 = interfaceinvoke breakIterator.<java.util.ListIterator: java.lang.Object next()>();
        thisBreak = (org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition) $r4;
        $r0 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label1;

        $r0 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("| first page: break= ");
        $i0 = virtualinvoke thisBreak.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int getLeafPos()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" difference= ");
        $i0 = thisBreak.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int difference>;
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ratio= ");
        $d0 = thisBreak.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: double bpdAdjust>;
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0);
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r2);

     label1:
        accumulatedS = 0;
        adjustedDiff = 0;

     label2:
        $r4 = interfaceinvoke sequenceIterator.<java.util.ListIterator: java.lang.Object next()>();
        $r5 = (org.apache.fop.layoutmgr.KnuthElement) $r4;
        firstElement = $r5;
        $z0 = virtualinvoke $r5.<org.apache.fop.layoutmgr.KnuthElement: boolean isBox()>();
        if $z0 != 0 goto label3;

        $r0 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("PLM> ignoring glue or penalty element at the beginning of the sequence");
        $z0 = virtualinvoke firstElement.<org.apache.fop.layoutmgr.KnuthElement: boolean isGlue()>();
        if $z0 == 0 goto label2;

        $r6 = virtualinvoke firstElement.<org.apache.fop.layoutmgr.KnuthElement: org.apache.fop.layoutmgr.LayoutManager getLayoutManager()>();
        $r7 = (org.apache.fop.layoutmgr.BlockLevelLayoutManager) $r6;
        $r8 = (org.apache.fop.layoutmgr.KnuthGlue) firstElement;
        interfaceinvoke $r7.<org.apache.fop.layoutmgr.BlockLevelLayoutManager: void discardSpace(org.apache.fop.layoutmgr.KnuthGlue)>($r8);
        goto label2;

     label3:
        interfaceinvoke sequenceIterator.<java.util.ListIterator: int previousIndex()>();
        interfaceinvoke sequenceIterator.<java.util.ListIterator: java.lang.Object previous()>();
        $r9 = new org.apache.fop.traits.MinOptMax;
        specialinvoke $r9.<org.apache.fop.traits.MinOptMax: void <init>(int)>(0);
        lineNumberMaxAdjustment = $r9;
        $r9 = new org.apache.fop.traits.MinOptMax;
        specialinvoke $r9.<org.apache.fop.traits.MinOptMax: void <init>(int)>(0);
        spaceMaxAdjustment = $r9;
        spaceAdjustmentRatio = 0.0;
        $r3 = new java.util.LinkedList;
        specialinvoke $r3.<java.util.LinkedList: void <init>()>();
        blockSpacesList = $r3;
        $r3 = new java.util.LinkedList;
        specialinvoke $r3.<java.util.LinkedList: void <init>()>();
        unconfirmedList = $r3;
        $r3 = new java.util.LinkedList;
        specialinvoke $r3.<java.util.LinkedList: void <init>()>();
        adjustableLinesList = $r3;
        bBoxSeen = 0;

     label4:
        $z0 = interfaceinvoke sequenceIterator.<java.util.ListIterator: boolean hasNext()>();
        if $z0 == 0 goto label12;

        $i1 = interfaceinvoke sequenceIterator.<java.util.ListIterator: int nextIndex()>();
        $i2 = virtualinvoke thisBreak.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int getLeafPos()>();
        if $i1 > $i2 goto label12;

        $r4 = interfaceinvoke sequenceIterator.<java.util.ListIterator: java.lang.Object next()>();
        thisElement = (org.apache.fop.layoutmgr.KnuthElement) $r4;
        $z0 = virtualinvoke thisElement.<org.apache.fop.layoutmgr.KnuthElement: boolean isGlue()>();
        if $z0 == 0 goto label9;

        $r10 = (org.apache.fop.layoutmgr.KnuthGlue) thisElement;
        $i1 = virtualinvoke $r10.<org.apache.fop.layoutmgr.KnuthGlue: int getAdjustmentClass()>();
        tableswitch($i1)
        {
            case 0: goto label5;
            case 1: goto label5;
            case 2: goto label6;
            case 3: goto label7;
            default: goto label8;
        };

     label5:
        virtualinvoke unconfirmedList.<java.util.LinkedList: boolean add(java.lang.Object)>(thisElement);
        goto label4;

     label6:
        $i2 = lineNumberMaxAdjustment.<org.apache.fop.traits.MinOptMax: int max>;
        $r11 = (org.apache.fop.layoutmgr.KnuthGlue) thisElement;
        $i0 = virtualinvoke $r11.<org.apache.fop.layoutmgr.KnuthGlue: int getY()>();
        $i2 = $i2 + $i0;
        lineNumberMaxAdjustment.<org.apache.fop.traits.MinOptMax: int max> = $i2;
        $i2 = lineNumberMaxAdjustment.<org.apache.fop.traits.MinOptMax: int min>;
        $r11 = (org.apache.fop.layoutmgr.KnuthGlue) thisElement;
        $i0 = virtualinvoke $r11.<org.apache.fop.layoutmgr.KnuthGlue: int getZ()>();
        $i2 = $i2 - $i0;
        lineNumberMaxAdjustment.<org.apache.fop.traits.MinOptMax: int min> = $i2;
        virtualinvoke adjustableLinesList.<java.util.LinkedList: boolean add(java.lang.Object)>(thisElement);
        goto label4;

     label7:
        goto label4;

     label8:
        goto label4;

     label9:
        $z0 = virtualinvoke thisElement.<org.apache.fop.layoutmgr.KnuthElement: boolean isBox()>();
        if $z0 == 0 goto label4;

        if bBoxSeen != 0 goto label10;

        bBoxSeen = 1;
        goto label4;

     label10:
        $i1 = virtualinvoke unconfirmedList.<java.util.LinkedList: int size()>();
        if $i1 <= 0 goto label4;

     label11:
        $i1 = virtualinvoke unconfirmedList.<java.util.LinkedList: int size()>();
        if $i1 <= 0 goto label4;

        $r4 = virtualinvoke unconfirmedList.<java.util.LinkedList: java.lang.Object removeFirst()>();
        blockSpace = (org.apache.fop.layoutmgr.KnuthGlue) $r4;
        $i2 = spaceMaxAdjustment.<org.apache.fop.traits.MinOptMax: int max>;
        $i0 = virtualinvoke blockSpace.<org.apache.fop.layoutmgr.KnuthGlue: int getY()>();
        $i2 = $i2 + $i0;
        spaceMaxAdjustment.<org.apache.fop.traits.MinOptMax: int max> = $i2;
        $i2 = spaceMaxAdjustment.<org.apache.fop.traits.MinOptMax: int min>;
        $i0 = virtualinvoke blockSpace.<org.apache.fop.layoutmgr.KnuthGlue: int getZ()>();
        $i2 = $i2 - $i0;
        spaceMaxAdjustment.<org.apache.fop.traits.MinOptMax: int min> = $i2;
        virtualinvoke blockSpacesList.<java.util.LinkedList: boolean add(java.lang.Object)>(blockSpace);
        goto label11;

     label12:
        $r0 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("| line number adj= ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(lineNumberMaxAdjustment);
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r2);
        $r0 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("| space adj      = ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(spaceMaxAdjustment);
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r2);
        $z0 = virtualinvoke thisElement.<org.apache.fop.layoutmgr.KnuthElement: boolean isPenalty()>();
        if $z0 == 0 goto label13;

        $i1 = virtualinvoke thisElement.<org.apache.fop.layoutmgr.KnuthElement: int getW()>();
        if $i1 <= 0 goto label13;

        $r0 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("  mandatory variation to the number of lines!");
        $r6 = virtualinvoke thisElement.<org.apache.fop.layoutmgr.KnuthElement: org.apache.fop.layoutmgr.LayoutManager getLayoutManager()>();
        $r7 = (org.apache.fop.layoutmgr.BlockLevelLayoutManager) $r6;
        $i2 = virtualinvoke thisElement.<org.apache.fop.layoutmgr.KnuthElement: int getW()>();
        interfaceinvoke $r7.<org.apache.fop.layoutmgr.BlockLevelLayoutManager: int negotiateBPDAdjustment(int,org.apache.fop.layoutmgr.KnuthElement)>($i2, thisElement);

     label13:
        $d1 = thisBreak.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: double bpdAdjust>;
        $b3 = $d1 cmpl 0.0;
        if $b3 == 0 goto label14;

        $i1 = thisBreak.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int difference>;
        if $i1 <= 0 goto label14;

        $i1 = thisBreak.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int difference>;
        $i2 = spaceMaxAdjustment.<org.apache.fop.traits.MinOptMax: int max>;
        if $i1 <= $i2 goto label15;

     label14:
        $i1 = thisBreak.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int difference>;
        if $i1 >= 0 goto label23;

        $i1 = thisBreak.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int difference>;
        $i2 = spaceMaxAdjustment.<org.apache.fop.traits.MinOptMax: int min>;
        if $i1 < $i2 goto label23;

     label15:
        $i1 = thisBreak.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int difference>;
        $d1 = (double) $i1;
        $i0 = thisBreak.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int difference>;
        if $i0 <= 0 goto label16;

        $i0 = spaceMaxAdjustment.<org.apache.fop.traits.MinOptMax: int max>;
        goto label17;

     label16:
        $i0 = spaceMaxAdjustment.<org.apache.fop.traits.MinOptMax: int min>;

     label17:
        $d0 = (double) $i0;
        spaceAdjustmentRatio = $d1 / $d0;
        $i4 = thisBreak.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int difference>;
        $i5 = thisBreak.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int difference>;
        if $i5 <= 0 goto label18;

        $i5 = spaceMaxAdjustment.<org.apache.fop.traits.MinOptMax: int max>;
        goto label19;

     label18:
        $i5 = spaceMaxAdjustment.<org.apache.fop.traits.MinOptMax: int min>;
        $i5 = neg $i5;

     label19:
        $i2 = specialinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: int adjustBlockSpaces(java.util.LinkedList,int,int)>(blockSpacesList, $i4, $i5);
        adjustedDiff = adjustedDiff + $i2;
        $r0 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("single space: ");
        $i4 = thisBreak.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int difference>;
        if adjustedDiff == $i4 goto label20;

        $d0 = thisBreak.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: double bpdAdjust>;
        $b6 = $d0 cmpl 0.0;
        if $b6 != 0 goto label21;

     label20:
        $r14 = "ok";
        goto label22;

     label21:
        $r14 = "ERROR";

     label22:
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r2);
        goto label31;

     label23:
        $d1 = thisBreak.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: double bpdAdjust>;
        $b3 = $d1 cmpl 0.0;
        if $b3 == 0 goto label31;

        $i4 = thisBreak.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int difference>;
        $i5 = thisBreak.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int difference>;
        if $i5 <= 0 goto label24;

        $i5 = lineNumberMaxAdjustment.<org.apache.fop.traits.MinOptMax: int max>;
        goto label25;

     label24:
        $i5 = lineNumberMaxAdjustment.<org.apache.fop.traits.MinOptMax: int min>;
        $i5 = neg $i5;

     label25:
        $i2 = specialinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: int adjustLineNumbers(java.util.LinkedList,int,int)>(adjustableLinesList, $i4, $i5);
        adjustedDiff = adjustedDiff + $i2;
        $i1 = adjustedDiff;
        $i4 = thisBreak.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int difference>;
        $i4 = $i4 - adjustedDiff;
        $i5 = thisBreak.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int difference>;
        $i5 = $i5 - adjustedDiff;
        if $i5 <= 0 goto label26;

        $i5 = spaceMaxAdjustment.<org.apache.fop.traits.MinOptMax: int max>;
        goto label27;

     label26:
        $i5 = spaceMaxAdjustment.<org.apache.fop.traits.MinOptMax: int min>;
        $i5 = neg $i5;

     label27:
        $i2 = specialinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: int adjustBlockSpaces(java.util.LinkedList,int,int)>(blockSpacesList, $i4, $i5);
        adjustedDiff = $i1 + $i2;
        $r0 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("lines and space: ");
        $i4 = thisBreak.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: int difference>;
        if adjustedDiff == $i4 goto label28;

        $d0 = thisBreak.<org.apache.fop.layoutmgr.AbstractBreaker$PageBreakPosition: double bpdAdjust>;
        $b6 = $d0 cmpl 0.0;
        if $b6 != 0 goto label29;

     label28:
        $r14 = "ok";
        goto label30;

     label29:
        $r14 = "ERROR";

     label30:
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r2);

     label31:
        goto label0;

     label32:
        $r15 = new org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence;
        $i4 = virtualinvoke blockList.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int getStartOn()>();
        $i5 = virtualinvoke blockList.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int getDisplayAlign()>();
        specialinvoke $r15.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: void <init>(org.apache.fop.layoutmgr.AbstractBreaker,int,int)>(this, $i4, $i5);
        effectiveList = $r15;
        $r16 = virtualinvoke this.<org.apache.fop.layoutmgr.AbstractBreaker: org.apache.fop.layoutmgr.LayoutManager getCurrentChildLM()>();
        $i5 = virtualinvoke blockList.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int size()>();
        $i7 = blockList.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: int ignoreAtEnd>;
        $i5 = $i5 - $i7;
        $r17 = virtualinvoke blockList.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: java.util.List subList(int,int)>(0, $i5);
        $r18 = interfaceinvoke $r16.<org.apache.fop.layoutmgr.LayoutManager: java.util.LinkedList getChangedKnuthElements(java.util.List,int)>($r17, 0);
        virtualinvoke effectiveList.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: boolean addAll(java.util.Collection)>($r18);
        virtualinvoke effectiveList.<org.apache.fop.layoutmgr.AbstractBreaker$BlockSequence: org.apache.fop.layoutmgr.KnuthSequence endSequence()>();
        staticinvoke <org.apache.fop.layoutmgr.ElementListObserver: void observe(java.util.List,java.lang.String,java.lang.String)>(effectiveList, "breaker-effective", null);
        $r3 = virtualinvoke alg.<org.apache.fop.layoutmgr.PageBreakingAlgorithm: java.util.LinkedList getPageBreaks()>();
        virtualinvoke $r3.<java.util.LinkedList: void clear()>();
        return effectiveList;
    }

    private int adjustBlockSpaces(java.util.LinkedList, int, int)
    {
        org.apache.fop.layoutmgr.AbstractBreaker this;
        java.util.LinkedList spaceList;
        int difference, total, adjustedDiff, partial, newAdjust, $i0, $i1, $i2;
        org.apache.commons.logging.Log $r0;
        java.lang.StringBuffer $r1;
        java.util.ListIterator spaceListIterator;
        org.apache.fop.layoutmgr.KnuthGlue blockSpace;
        boolean $z0;
        java.lang.String $r2;
        java.lang.Object $r3;
        float $f0, $f1, $f2;
        org.apache.fop.layoutmgr.LayoutManager $r4;
        org.apache.fop.layoutmgr.BlockLevelLayoutManager $r5;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker;
        spaceList := @parameter0: java.util.LinkedList;
        difference := @parameter1: int;
        total := @parameter2: int;
        $r0 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label0;

        $r0 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("AdjustBlockSpaces: difference ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(difference);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" / ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(total);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" on ");
        $i0 = virtualinvoke spaceList.<java.util.LinkedList: int size()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" spaces in block");
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r2);

     label0:
        spaceListIterator = virtualinvoke spaceList.<java.util.LinkedList: java.util.ListIterator listIterator()>();
        adjustedDiff = 0;
        partial = 0;

     label1:
        $z0 = interfaceinvoke spaceListIterator.<java.util.ListIterator: boolean hasNext()>();
        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke spaceListIterator.<java.util.ListIterator: java.lang.Object next()>();
        blockSpace = (org.apache.fop.layoutmgr.KnuthGlue) $r3;
        $i1 = partial;
        if difference <= 0 goto label2;

        $i2 = virtualinvoke blockSpace.<org.apache.fop.layoutmgr.KnuthGlue: int getY()>();
        goto label3;

     label2:
        $i2 = virtualinvoke blockSpace.<org.apache.fop.layoutmgr.KnuthGlue: int getZ()>();

     label3:
        partial = $i1 + $i2;
        $r0 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label4;

        $r0 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("available = ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(partial);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" / ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(total);
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r2);
        $r0 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("competenza  = ");
        $f0 = (float) partial;
        $f1 = (float) difference;
        $f0 = $f0 * $f1;
        $f1 = (float) total;
        $f0 = $f0 / $f1;
        $i0 = (int) $f0;
        $i0 = $i0 - adjustedDiff;
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" / ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(difference);
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r2);

     label4:
        $r4 = virtualinvoke blockSpace.<org.apache.fop.layoutmgr.KnuthGlue: org.apache.fop.layoutmgr.LayoutManager getLayoutManager()>();
        $r5 = (org.apache.fop.layoutmgr.BlockLevelLayoutManager) $r4;
        $f2 = (float) partial;
        $f0 = (float) difference;
        $f2 = $f2 * $f0;
        $f0 = (float) total;
        $f2 = $f2 / $f0;
        $i2 = (int) $f2;
        $i2 = $i2 - adjustedDiff;
        newAdjust = interfaceinvoke $r5.<org.apache.fop.layoutmgr.BlockLevelLayoutManager: int negotiateBPDAdjustment(int,org.apache.fop.layoutmgr.KnuthElement)>($i2, blockSpace);
        adjustedDiff = adjustedDiff + newAdjust;
        goto label1;

     label5:
        return adjustedDiff;
    }

    private int adjustLineNumbers(java.util.LinkedList, int, int)
    {
        org.apache.fop.layoutmgr.AbstractBreaker this;
        java.util.LinkedList lineList;
        int difference, total, adjustedDiff, partial, newAdjust, $i0, $i1, $i2;
        org.apache.commons.logging.Log $r0;
        java.lang.StringBuffer $r1;
        java.util.ListIterator lineListIterator;
        org.apache.fop.layoutmgr.KnuthGlue line;
        boolean $z0;
        java.lang.String $r2;
        java.lang.Object $r3;
        org.apache.fop.layoutmgr.LayoutManager $r4;
        org.apache.fop.layoutmgr.BlockLevelLayoutManager $r5;
        float $f0, $f1;

        this := @this: org.apache.fop.layoutmgr.AbstractBreaker;
        lineList := @parameter0: java.util.LinkedList;
        difference := @parameter1: int;
        total := @parameter2: int;
        $r0 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label0;

        $r0 = <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("AdjustLineNumbers: difference ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(difference);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" / ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(total);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" on ");
        $i0 = virtualinvoke lineList.<java.util.LinkedList: int size()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" elements");
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r2);

     label0:
        lineListIterator = virtualinvoke lineList.<java.util.LinkedList: java.util.ListIterator listIterator()>();
        adjustedDiff = 0;
        partial = 0;

     label1:
        $z0 = interfaceinvoke lineListIterator.<java.util.ListIterator: boolean hasNext()>();
        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke lineListIterator.<java.util.ListIterator: java.lang.Object next()>();
        line = (org.apache.fop.layoutmgr.KnuthGlue) $r3;
        $i1 = partial;
        if difference <= 0 goto label2;

        $i2 = virtualinvoke line.<org.apache.fop.layoutmgr.KnuthGlue: int getY()>();
        goto label3;

     label2:
        $i2 = virtualinvoke line.<org.apache.fop.layoutmgr.KnuthGlue: int getZ()>();

     label3:
        partial = $i1 + $i2;
        $r4 = virtualinvoke line.<org.apache.fop.layoutmgr.KnuthGlue: org.apache.fop.layoutmgr.LayoutManager getLayoutManager()>();
        $r5 = (org.apache.fop.layoutmgr.BlockLevelLayoutManager) $r4;
        $f0 = (float) partial;
        $f1 = (float) difference;
        $f0 = $f0 * $f1;
        $f1 = (float) total;
        $f0 = $f0 / $f1;
        $i2 = (int) $f0;
        $i2 = $i2 - adjustedDiff;
        newAdjust = interfaceinvoke $r5.<org.apache.fop.layoutmgr.BlockLevelLayoutManager: int negotiateBPDAdjustment(int,org.apache.fop.layoutmgr.KnuthElement)>($i2, line);
        adjustedDiff = adjustedDiff + newAdjust;
        goto label1;

     label4:
        return adjustedDiff;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException l1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        l1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(l1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.apache.commons.logging.Log $r1;

        $r0 = <org.apache.fop.layoutmgr.AbstractBreaker: java.lang.Class class$org$apache$fop$layoutmgr$AbstractBreaker>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.fop.layoutmgr.AbstractBreaker: java.lang.Class class$(java.lang.String)>("org.apache.fop.layoutmgr.AbstractBreaker");
        <org.apache.fop.layoutmgr.AbstractBreaker: java.lang.Class class$org$apache$fop$layoutmgr$AbstractBreaker> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.fop.layoutmgr.AbstractBreaker: java.lang.Class class$org$apache$fop$layoutmgr$AbstractBreaker>;

     label1:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r0);
        <org.apache.fop.layoutmgr.AbstractBreaker: org.apache.commons.logging.Log log> = $r1;
        return;
    }
}
