public class org.apache.fop.image.loader.batik.ImageConverterSVG2G2D extends org.apache.xmlgraphics.image.loader.impl.AbstractImageConverter
{

    public void <init>()
    {
        org.apache.fop.image.loader.batik.ImageConverterSVG2G2D this;

        this := @this: org.apache.fop.image.loader.batik.ImageConverterSVG2G2D;
        specialinvoke this.<org.apache.xmlgraphics.image.loader.impl.AbstractImageConverter: void <init>()>();
        return;
    }

    public org.apache.xmlgraphics.image.loader.Image convert(org.apache.xmlgraphics.image.loader.Image, java.util.Map) throws org.apache.xmlgraphics.image.loader.ImageException
    {
        org.apache.fop.image.loader.batik.ImageConverterSVG2G2D this;
        org.apache.xmlgraphics.image.loader.Image src;
        java.util.Map hints;
        org.apache.xmlgraphics.image.loader.impl.ImageXMLDOM svg;
        java.lang.StringBuffer $r0;
        float pxToMillimeter;
        java.lang.Number ptm;
        org.apache.fop.svg.SVGUserAgent ua, $r8;
        org.apache.batik.bridge.GVTBuilder builder, $r10;
        org.apache.batik.bridge.BridgeContext ctx, $r11;
        org.apache.batik.gvt.GraphicsNode root;
        java.lang.Exception e, $r13;
        org.apache.fop.image.loader.batik.ImageConverterSVG2G2D$1 painter, $r15;
        org.apache.xmlgraphics.image.loader.impl.ImageGraphics2D g2dImage, $r16;
        java.lang.String $r1, $r2, $r4, $r5;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.Object $r6, $r7;
        double $d0, $d1;
        java.awt.geom.AffineTransform $r9;
        org.w3c.dom.Document $r12;
        org.apache.xmlgraphics.image.loader.ImageException $r14;
        org.apache.xmlgraphics.image.loader.ImageInfo $r17;

        this := @this: org.apache.fop.image.loader.batik.ImageConverterSVG2G2D;
        src := @parameter0: org.apache.xmlgraphics.image.loader.Image;
        hints := @parameter1: java.util.Map;
        virtualinvoke this.<org.apache.fop.image.loader.batik.ImageConverterSVG2G2D: void checkSourceFlavor(org.apache.xmlgraphics.image.loader.Image)>(src);
        svg = (org.apache.xmlgraphics.image.loader.impl.ImageXMLDOM) src;
        $r1 = "http://www.w3.org/2000/svg";
        $r2 = virtualinvoke svg.<org.apache.xmlgraphics.image.loader.impl.ImageXMLDOM: java.lang.String getRootNamespace()>();
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);
        if $z0 != 0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("XML DOM is not in the SVG namespace: ");
        $r4 = virtualinvoke svg.<org.apache.xmlgraphics.image.loader.impl.ImageXMLDOM: java.lang.String getRootNamespace()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);
        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r3;

     label0:
        pxToMillimeter = 0.35277778F;
        $r6 = <org.apache.xmlgraphics.image.loader.ImageProcessingHints: java.lang.Object SOURCE_RESOLUTION>;
        $r7 = interfaceinvoke hints.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);
        ptm = (java.lang.Number) $r7;
        if ptm == null goto label1;

        $d0 = virtualinvoke ptm.<java.lang.Number: double doubleValue()>();
        $d1 = 25.399999618530273 / $d0;
        pxToMillimeter = (float) $d1;

     label1:
        $r8 = new org.apache.fop.svg.SVGUserAgent;
        $r9 = new java.awt.geom.AffineTransform;
        specialinvoke $r9.<java.awt.geom.AffineTransform: void <init>()>();
        specialinvoke $r8.<org.apache.fop.svg.SVGUserAgent: void <init>(float,java.awt.geom.AffineTransform)>(pxToMillimeter, $r9);
        ua = $r8;
        $r10 = new org.apache.batik.bridge.GVTBuilder;
        specialinvoke $r10.<org.apache.batik.bridge.GVTBuilder: void <init>()>();
        builder = $r10;
        $r11 = new org.apache.batik.bridge.BridgeContext;
        specialinvoke $r11.<org.apache.batik.bridge.BridgeContext: void <init>(org.apache.batik.bridge.UserAgent)>(ua);
        ctx = $r11;

     label2:
        $r12 = virtualinvoke svg.<org.apache.xmlgraphics.image.loader.impl.ImageXMLDOM: org.w3c.dom.Document getDocument()>();
        root = virtualinvoke builder.<org.apache.batik.bridge.GVTBuilder: org.apache.batik.gvt.GraphicsNode build(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Document)>(ctx, $r12);

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;
        e = $r13;
        $r14 = new org.apache.xmlgraphics.image.loader.ImageException;
        specialinvoke $r14.<org.apache.xmlgraphics.image.loader.ImageException: void <init>(java.lang.String,java.lang.Throwable)>("GVT tree could not be built for SVG graphic", e);
        throw $r14;

     label5:
        $r15 = new org.apache.fop.image.loader.batik.ImageConverterSVG2G2D$1;
        specialinvoke $r15.<org.apache.fop.image.loader.batik.ImageConverterSVG2G2D$1: void <init>(org.apache.fop.image.loader.batik.ImageConverterSVG2G2D,org.apache.batik.bridge.BridgeContext,org.apache.batik.gvt.GraphicsNode,org.apache.xmlgraphics.image.loader.impl.ImageXMLDOM)>(this, ctx, root, svg);
        painter = $r15;
        $r16 = new org.apache.xmlgraphics.image.loader.impl.ImageGraphics2D;
        $r17 = interfaceinvoke src.<org.apache.xmlgraphics.image.loader.Image: org.apache.xmlgraphics.image.loader.ImageInfo getInfo()>();
        specialinvoke $r16.<org.apache.xmlgraphics.image.loader.impl.ImageGraphics2D: void <init>(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.java2d.Graphics2DImagePainter)>($r17, painter);
        g2dImage = $r16;
        return g2dImage;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public org.apache.xmlgraphics.image.loader.ImageFlavor getSourceFlavor()
    {
        org.apache.fop.image.loader.batik.ImageConverterSVG2G2D this;
        org.apache.xmlgraphics.image.loader.ImageFlavor $r0;

        this := @this: org.apache.fop.image.loader.batik.ImageConverterSVG2G2D;
        $r0 = <org.apache.xmlgraphics.image.loader.ImageFlavor: org.apache.xmlgraphics.image.loader.ImageFlavor XML_DOM>;
        return $r0;
    }

    public org.apache.xmlgraphics.image.loader.ImageFlavor getTargetFlavor()
    {
        org.apache.fop.image.loader.batik.ImageConverterSVG2G2D this;
        org.apache.xmlgraphics.image.loader.ImageFlavor $r0;

        this := @this: org.apache.fop.image.loader.batik.ImageConverterSVG2G2D;
        $r0 = <org.apache.xmlgraphics.image.loader.ImageFlavor: org.apache.xmlgraphics.image.loader.ImageFlavor GRAPHICS2D>;
        return $r0;
    }
}
