public class org.apache.fop.render.ps.PSSVGHandler extends java.lang.Object implements org.apache.fop.render.XMLHandler, org.apache.fop.render.ps.PSRendererContextConstants
{
    private static org.apache.commons.logging.Log log;
    static java.lang.Class class$org$apache$fop$render$ps$PSSVGHandler;

    public void <init>()
    {
        org.apache.fop.render.ps.PSSVGHandler this;

        this := @this: org.apache.fop.render.ps.PSSVGHandler;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }

    public void handleXML(org.apache.fop.render.RendererContext, org.w3c.dom.Document, java.lang.String) throws java.lang.Exception
    {
        org.apache.fop.render.ps.PSSVGHandler this;
        org.apache.fop.render.RendererContext context;
        org.w3c.dom.Document doc;
        java.lang.String ns, $r0;
        org.apache.fop.render.ps.PSSVGHandler$PSInfo psi;
        boolean $z0;

        this := @this: org.apache.fop.render.ps.PSSVGHandler;
        context := @parameter0: org.apache.fop.render.RendererContext;
        doc := @parameter1: org.w3c.dom.Document;
        ns := @parameter2: java.lang.String;
        psi = staticinvoke <org.apache.fop.render.ps.PSSVGHandler: org.apache.fop.render.ps.PSSVGHandler$PSInfo getPSInfo(org.apache.fop.render.RendererContext)>(context);
        $r0 = "http://www.w3.org/2000/svg";
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(ns);
        if $z0 == 0 goto label0;

        virtualinvoke this.<org.apache.fop.render.ps.PSSVGHandler: void renderSVGDocument(org.apache.fop.render.RendererContext,org.w3c.dom.Document,org.apache.fop.render.ps.PSSVGHandler$PSInfo)>(context, doc, psi);

     label0:
        return;
    }

    public static org.apache.fop.render.ps.PSSVGHandler$PSInfo getPSInfo(org.apache.fop.render.RendererContext)
    {
        org.apache.fop.render.RendererContext context;
        org.apache.fop.render.ps.PSSVGHandler$PSInfo $r0, psi;
        java.lang.Object $r1;
        org.apache.xmlgraphics.ps.PSGenerator $r2;
        org.apache.fop.fonts.FontInfo $r4;
        java.lang.Integer $r6;
        int $i0;
        org.apache.avalon.framework.configuration.Configuration $r7;

        context := @parameter0: org.apache.fop.render.RendererContext;
        $r0 = new org.apache.fop.render.ps.PSSVGHandler$PSInfo;
        specialinvoke $r0.<org.apache.fop.render.ps.PSSVGHandler$PSInfo: void <init>()>();
        psi = $r0;
        $r1 = virtualinvoke context.<org.apache.fop.render.RendererContext: java.lang.Object getProperty(java.lang.String)>("psGenerator");
        $r2 = (org.apache.xmlgraphics.ps.PSGenerator) $r1;
        staticinvoke <org.apache.fop.render.ps.PSSVGHandler$PSInfo: org.apache.xmlgraphics.ps.PSGenerator access$002(org.apache.fop.render.ps.PSSVGHandler$PSInfo,org.apache.xmlgraphics.ps.PSGenerator)>(psi, $r2);
        $r1 = virtualinvoke context.<org.apache.fop.render.RendererContext: java.lang.Object getProperty(java.lang.String)>("psFontInfo");
        $r4 = (org.apache.fop.fonts.FontInfo) $r1;
        staticinvoke <org.apache.fop.render.ps.PSSVGHandler$PSInfo: org.apache.fop.fonts.FontInfo access$102(org.apache.fop.render.ps.PSSVGHandler$PSInfo,org.apache.fop.fonts.FontInfo)>(psi, $r4);
        $r1 = virtualinvoke context.<org.apache.fop.render.RendererContext: java.lang.Object getProperty(java.lang.String)>("width");
        $r6 = (java.lang.Integer) $r1;
        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();
        staticinvoke <org.apache.fop.render.ps.PSSVGHandler$PSInfo: int access$202(org.apache.fop.render.ps.PSSVGHandler$PSInfo,int)>(psi, $i0);
        $r1 = virtualinvoke context.<org.apache.fop.render.RendererContext: java.lang.Object getProperty(java.lang.String)>("height");
        $r6 = (java.lang.Integer) $r1;
        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();
        staticinvoke <org.apache.fop.render.ps.PSSVGHandler$PSInfo: int access$302(org.apache.fop.render.ps.PSSVGHandler$PSInfo,int)>(psi, $i0);
        $r1 = virtualinvoke context.<org.apache.fop.render.RendererContext: java.lang.Object getProperty(java.lang.String)>("xpos");
        $r6 = (java.lang.Integer) $r1;
        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();
        staticinvoke <org.apache.fop.render.ps.PSSVGHandler$PSInfo: int access$402(org.apache.fop.render.ps.PSSVGHandler$PSInfo,int)>(psi, $i0);
        $r1 = virtualinvoke context.<org.apache.fop.render.RendererContext: java.lang.Object getProperty(java.lang.String)>("ypos");
        $r6 = (java.lang.Integer) $r1;
        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();
        staticinvoke <org.apache.fop.render.ps.PSSVGHandler$PSInfo: int access$502(org.apache.fop.render.ps.PSSVGHandler$PSInfo,int)>(psi, $i0);
        $r1 = virtualinvoke context.<org.apache.fop.render.RendererContext: java.lang.Object getProperty(java.lang.String)>("cfg");
        $r7 = (org.apache.avalon.framework.configuration.Configuration) $r1;
        staticinvoke <org.apache.fop.render.ps.PSSVGHandler$PSInfo: org.apache.avalon.framework.configuration.Configuration access$602(org.apache.fop.render.ps.PSSVGHandler$PSInfo,org.apache.avalon.framework.configuration.Configuration)>(psi, $r7);
        return psi;
    }

    protected void renderSVGDocument(org.apache.fop.render.RendererContext, org.w3c.dom.Document, org.apache.fop.render.ps.PSSVGHandler$PSInfo)
    {
        org.apache.fop.render.ps.PSSVGHandler this;
        org.apache.fop.render.RendererContext context;
        org.w3c.dom.Document doc;
        org.apache.fop.render.ps.PSSVGHandler$PSInfo psInfo;
        int xOffset, yOffset, $i0, $i1, $i2, $i3, $i4;
        org.apache.xmlgraphics.ps.PSGenerator gen;
        boolean strokeText;
        org.apache.avalon.framework.configuration.Configuration cfg, $r1;
        java.awt.geom.AffineTransform $r0, transform, $r19;
        org.apache.fop.svg.SVGUserAgent ua, $r2;
        org.apache.xmlgraphics.java2d.ps.PSGraphics2D graphics, $r4;
        org.apache.batik.bridge.GVTBuilder builder, $r6;
        null_type nativeTextHandler, ctx, builder;
        org.apache.batik.bridge.BridgeContext ctx, $r7;
        org.apache.fop.render.ps.PSTextPainter textPainter, $r10;
        org.apache.fop.render.ps.PSTextElementBridge tBridge, $r11;
        org.apache.batik.gvt.GraphicsNode root;
        java.lang.Exception e, $r12, $r21;
        float w, h, sx, sy, $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        org.w3c.dom.svg.SVGSVGElement svg;
        java.io.IOException ioe, $r22;
        org.apache.fop.apps.FOUserAgent $r3;
        org.apache.xmlgraphics.java2d.GraphicContext $r5;
        org.apache.fop.render.ps.NativeTextHandler $r8, nativeTextHandler;
        org.apache.fop.fonts.FontInfo $r9;
        org.apache.commons.logging.Log $r13;
        java.lang.StringBuffer $r14;
        java.lang.String $r15, $r16;
        java.awt.geom.Dimension2D $r17;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        org.w3c.dom.svg.SVGDocument $r18;
        org.apache.xmlgraphics.ps.PSState $r20;

        this := @this: org.apache.fop.render.ps.PSSVGHandler;
        context := @parameter0: org.apache.fop.render.RendererContext;
        doc := @parameter1: org.w3c.dom.Document;
        psInfo := @parameter2: org.apache.fop.render.ps.PSSVGHandler$PSInfo;
        xOffset = staticinvoke <org.apache.fop.render.ps.PSSVGHandler$PSInfo: int access$400(org.apache.fop.render.ps.PSSVGHandler$PSInfo)>(psInfo);
        yOffset = staticinvoke <org.apache.fop.render.ps.PSSVGHandler$PSInfo: int access$500(org.apache.fop.render.ps.PSSVGHandler$PSInfo)>(psInfo);
        gen = staticinvoke <org.apache.fop.render.ps.PSSVGHandler$PSInfo: org.apache.xmlgraphics.ps.PSGenerator access$000(org.apache.fop.render.ps.PSSVGHandler$PSInfo)>(psInfo);
        strokeText = 0;
        cfg = virtualinvoke psInfo.<org.apache.fop.render.ps.PSSVGHandler$PSInfo: org.apache.avalon.framework.configuration.Configuration getHandlerConfiguration()>();
        if cfg == null goto label0;

        $r1 = interfaceinvoke cfg.<org.apache.avalon.framework.configuration.Configuration: org.apache.avalon.framework.configuration.Configuration getChild(java.lang.String,boolean)>("stroke-text", 1);
        strokeText = interfaceinvoke $r1.<org.apache.avalon.framework.configuration.Configuration: boolean getValueAsBoolean(boolean)>(strokeText);

     label0:
        $r2 = new org.apache.fop.svg.SVGUserAgent;
        $r3 = virtualinvoke context.<org.apache.fop.render.RendererContext: org.apache.fop.apps.FOUserAgent getUserAgent()>();
        $f0 = virtualinvoke $r3.<org.apache.fop.apps.FOUserAgent: float getSourcePixelUnitToMillimeter()>();
        $r0 = new java.awt.geom.AffineTransform;
        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>()>();
        specialinvoke $r2.<org.apache.fop.svg.SVGUserAgent: void <init>(float,java.awt.geom.AffineTransform)>($f0, $r0);
        ua = $r2;
        $r4 = new org.apache.xmlgraphics.java2d.ps.PSGraphics2D;
        specialinvoke $r4.<org.apache.xmlgraphics.java2d.ps.PSGraphics2D: void <init>(boolean,org.apache.xmlgraphics.ps.PSGenerator)>(strokeText, gen);
        graphics = $r4;
        $r5 = new org.apache.xmlgraphics.java2d.GraphicContext;
        specialinvoke $r5.<org.apache.xmlgraphics.java2d.GraphicContext: void <init>()>();
        virtualinvoke graphics.<org.apache.xmlgraphics.java2d.ps.PSGraphics2D: void setGraphicContext(org.apache.xmlgraphics.java2d.GraphicContext)>($r5);
        $r6 = new org.apache.batik.bridge.GVTBuilder;
        specialinvoke $r6.<org.apache.batik.bridge.GVTBuilder: void <init>()>();
        builder = $r6;
        nativeTextHandler = null;
        $r7 = new org.apache.batik.bridge.BridgeContext;
        specialinvoke $r7.<org.apache.batik.bridge.BridgeContext: void <init>(org.apache.batik.bridge.UserAgent)>(ua);
        ctx = $r7;
        if strokeText != 0 goto label1;

        $r8 = new org.apache.fop.render.ps.NativeTextHandler;
        $r9 = virtualinvoke psInfo.<org.apache.fop.render.ps.PSSVGHandler$PSInfo: org.apache.fop.fonts.FontInfo getFontInfo()>();
        specialinvoke $r8.<org.apache.fop.render.ps.NativeTextHandler: void <init>(org.apache.xmlgraphics.java2d.ps.PSGraphics2D,org.apache.fop.fonts.FontInfo)>(graphics, $r9);
        nativeTextHandler = $r8;
        virtualinvoke graphics.<org.apache.xmlgraphics.java2d.ps.PSGraphics2D: void setCustomTextHandler(org.apache.xmlgraphics.java2d.TextHandler)>(nativeTextHandler);
        $r10 = new org.apache.fop.render.ps.PSTextPainter;
        specialinvoke $r10.<org.apache.fop.render.ps.PSTextPainter: void <init>(org.apache.fop.render.ps.NativeTextHandler)>(nativeTextHandler);
        textPainter = $r10;
        virtualinvoke ctx.<org.apache.batik.bridge.BridgeContext: void setTextPainter(org.apache.batik.gvt.TextPainter)>(textPainter);
        $r11 = new org.apache.fop.render.ps.PSTextElementBridge;
        specialinvoke $r11.<org.apache.fop.render.ps.PSTextElementBridge: void <init>(org.apache.fop.render.ps.PSTextPainter)>(textPainter);
        tBridge = $r11;
        virtualinvoke ctx.<org.apache.batik.bridge.BridgeContext: void putBridge(org.apache.batik.bridge.Bridge)>(tBridge);

     label1:
        root = virtualinvoke builder.<org.apache.batik.bridge.GVTBuilder: org.apache.batik.gvt.GraphicsNode build(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Document)>(ctx, doc);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;
        e = $r12;
        $r13 = <org.apache.fop.render.ps.PSSVGHandler: org.apache.commons.logging.Log log>;
        $r14 = new java.lang.StringBuffer;
        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();
        $r14 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SVG graphic could not be built: ");
        $r15 = virtualinvoke e.<java.lang.Exception: java.lang.String getMessage()>();
        $r14 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);
        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r13.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r16, e);
        return;

     label4:
        $r17 = virtualinvoke ctx.<org.apache.batik.bridge.BridgeContext: java.awt.geom.Dimension2D getDocumentSize()>();
        $d0 = virtualinvoke $r17.<java.awt.geom.Dimension2D: double getWidth()>();
        $f1 = (float) $d0;
        w = $f1 * 1000.0F;
        $r17 = virtualinvoke ctx.<org.apache.batik.bridge.BridgeContext: java.awt.geom.Dimension2D getDocumentSize()>();
        $d0 = virtualinvoke $r17.<java.awt.geom.Dimension2D: double getHeight()>();
        $f1 = (float) $d0;
        h = $f1 * 1000.0F;
        $i0 = virtualinvoke psInfo.<org.apache.fop.render.ps.PSSVGHandler$PSInfo: int getWidth()>();
        $f1 = (float) $i0;
        sx = $f1 / w;
        $i0 = virtualinvoke psInfo.<org.apache.fop.render.ps.PSSVGHandler$PSInfo: int getHeight()>();
        $f1 = (float) $i0;
        sy = $f1 / h;
        ctx = null;
        builder = null;

     label5:
        virtualinvoke gen.<org.apache.xmlgraphics.ps.PSGenerator: void commentln(java.lang.String)>("%FOPBeginSVG");
        virtualinvoke gen.<org.apache.xmlgraphics.ps.PSGenerator: void saveGraphicsState()>();
        virtualinvoke gen.<org.apache.xmlgraphics.ps.PSGenerator: void writeln(java.lang.String)>("newpath");
        $f2 = (float) xOffset;
        $f2 = $f2 / 1000.0F;
        $d1 = (double) $f2;
        $f3 = (float) yOffset;
        $f3 = $f3 / 1000.0F;
        $d2 = (double) $f3;
        $i1 = virtualinvoke psInfo.<org.apache.fop.render.ps.PSSVGHandler$PSInfo: int getWidth()>();
        $f4 = (float) $i1;
        $f4 = $f4 / 1000.0F;
        $d3 = (double) $f4;
        $i2 = virtualinvoke psInfo.<org.apache.fop.render.ps.PSSVGHandler$PSInfo: int getHeight()>();
        $f5 = (float) $i2;
        $f5 = $f5 / 1000.0F;
        $d4 = (double) $f5;
        virtualinvoke gen.<org.apache.xmlgraphics.ps.PSGenerator: void defineRect(double,double,double,double)>($d1, $d2, $d3, $d4);
        virtualinvoke gen.<org.apache.xmlgraphics.ps.PSGenerator: void writeln(java.lang.String)>("clip");
        $d1 = (double) sx;
        $d4 = (double) sy;
        $f6 = (float) xOffset;
        $f6 = $f6 / 1000.0F;
        $d5 = (double) $f6;
        $f7 = (float) yOffset;
        $f7 = $f7 / 1000.0F;
        $d6 = (double) $f7;
        virtualinvoke gen.<org.apache.xmlgraphics.ps.PSGenerator: void concatMatrix(double,double,double,double,double,double)>($d1, 0.0, 0.0, $d4, $d5, $d6);
        $r18 = (org.w3c.dom.svg.SVGDocument) doc;
        svg = interfaceinvoke $r18.<org.w3c.dom.svg.SVGDocument: org.w3c.dom.svg.SVGSVGElement getRootElement()>();
        $i3 = virtualinvoke psInfo.<org.apache.fop.render.ps.PSSVGHandler$PSInfo: int getWidth()>();
        $f2 = (float) $i3;
        $f2 = $f2 / 1000.0F;
        $i4 = virtualinvoke psInfo.<org.apache.fop.render.ps.PSSVGHandler$PSInfo: int getHeight()>();
        $f0 = (float) $i4;
        $f0 = $f0 / 1000.0F;
        staticinvoke <org.apache.batik.bridge.ViewBox: java.awt.geom.AffineTransform getPreserveAspectRatioTransform(org.w3c.dom.Element,float,float)>(svg, $f2, $f0);
        $r19 = new java.awt.geom.AffineTransform;
        specialinvoke $r19.<java.awt.geom.AffineTransform: void <init>()>();
        transform = $r19;
        $d1 = (double) xOffset;
        $d2 = (double) yOffset;
        virtualinvoke transform.<java.awt.geom.AffineTransform: void translate(double,double)>($d1, $d2);
        $r20 = virtualinvoke gen.<org.apache.xmlgraphics.ps.PSGenerator: org.apache.xmlgraphics.ps.PSState getCurrentState()>();
        virtualinvoke $r20.<org.apache.xmlgraphics.ps.PSState: void concatMatrix(java.awt.geom.AffineTransform)>(transform);

     label6:
        interfaceinvoke root.<org.apache.batik.gvt.GraphicsNode: void paint(java.awt.Graphics2D)>(graphics);

     label7:
        goto label9;

     label8:
        $r21 := @caughtexception;
        e = $r21;
        $r13 = <org.apache.fop.render.ps.PSSVGHandler: org.apache.commons.logging.Log log>;
        $r14 = new java.lang.StringBuffer;
        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();
        $r14 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SVG graphic could not be rendered: ");
        $r15 = virtualinvoke e.<java.lang.Exception: java.lang.String getMessage()>();
        $r14 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);
        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r13.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r16, e);

     label9:
        virtualinvoke gen.<org.apache.xmlgraphics.ps.PSGenerator: boolean restoreGraphicsState()>();
        virtualinvoke gen.<org.apache.xmlgraphics.ps.PSGenerator: void commentln(java.lang.String)>("%FOPEndSVG");

     label10:
        goto label12;

     label11:
        $r22 := @caughtexception;
        ioe = $r22;
        $r13 = <org.apache.fop.render.ps.PSSVGHandler: org.apache.commons.logging.Log log>;
        $r14 = new java.lang.StringBuffer;
        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();
        $r14 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SVG graphic could not be rendered: ");
        $r15 = virtualinvoke ioe.<java.io.IOException: java.lang.String getMessage()>();
        $r14 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);
        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r13.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r16, ioe);

     label12:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label6 to label7 with label8;
        catch java.io.IOException from label5 to label10 with label11;
    }

    public boolean supportsRenderer(org.apache.fop.render.Renderer)
    {
        org.apache.fop.render.ps.PSSVGHandler this;
        org.apache.fop.render.Renderer renderer;
        boolean $z0;

        this := @this: org.apache.fop.render.ps.PSSVGHandler;
        renderer := @parameter0: org.apache.fop.render.Renderer;
        $z0 = renderer instanceof org.apache.fop.render.ps.PSRenderer;
        return $z0;
    }

    public java.lang.String getNamespace()
    {
        org.apache.fop.render.ps.PSSVGHandler this;

        this := @this: org.apache.fop.render.ps.PSSVGHandler;
        return "http://www.w3.org/2000/svg";
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException l1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        l1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(l1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.apache.commons.logging.Log $r1;

        $r0 = <org.apache.fop.render.ps.PSSVGHandler: java.lang.Class class$org$apache$fop$render$ps$PSSVGHandler>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.fop.render.ps.PSSVGHandler: java.lang.Class class$(java.lang.String)>("org.apache.fop.render.ps.PSSVGHandler");
        <org.apache.fop.render.ps.PSSVGHandler: java.lang.Class class$org$apache$fop$render$ps$PSSVGHandler> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.fop.render.ps.PSSVGHandler: java.lang.Class class$org$apache$fop$render$ps$PSSVGHandler>;

     label1:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r0);
        <org.apache.fop.render.ps.PSSVGHandler: org.apache.commons.logging.Log log> = $r1;
        return;
    }
}
