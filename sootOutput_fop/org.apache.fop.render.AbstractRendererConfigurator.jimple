public abstract class org.apache.fop.render.AbstractRendererConfigurator extends java.lang.Object
{
    protected static org.apache.commons.logging.Log log;
    protected org.apache.fop.apps.FOUserAgent userAgent;
    static java.lang.Class class$org$apache$fop$render$AbstractRendererConfigurator;

    public void <init>(org.apache.fop.apps.FOUserAgent)
    {
        org.apache.fop.render.AbstractRendererConfigurator this;
        org.apache.fop.apps.FOUserAgent userAgent;

        this := @this: org.apache.fop.render.AbstractRendererConfigurator;
        userAgent := @parameter0: org.apache.fop.apps.FOUserAgent;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<org.apache.fop.render.AbstractRendererConfigurator: org.apache.fop.apps.FOUserAgent userAgent> = null;
        this.<org.apache.fop.render.AbstractRendererConfigurator: org.apache.fop.apps.FOUserAgent userAgent> = userAgent;
        return;
    }

    protected org.apache.avalon.framework.configuration.Configuration getRendererConfig(org.apache.fop.render.Renderer)
    {
        org.apache.fop.render.AbstractRendererConfigurator this;
        org.apache.fop.render.Renderer renderer;
        java.lang.String mimeType;
        org.apache.commons.logging.Log $r0;
        boolean $z0;
        org.apache.fop.apps.FOUserAgent $r1;
        org.apache.avalon.framework.configuration.Configuration $r2;

        this := @this: org.apache.fop.render.AbstractRendererConfigurator;
        renderer := @parameter0: org.apache.fop.render.Renderer;
        mimeType = interfaceinvoke renderer.<org.apache.fop.render.Renderer: java.lang.String getMimeType()>();
        if mimeType != null goto label1;

        $r0 = <org.apache.fop.render.AbstractRendererConfigurator: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();
        if $z0 == 0 goto label0;

        $r0 = <org.apache.fop.render.AbstractRendererConfigurator: org.apache.commons.logging.Log log>;
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void info(java.lang.Object)>("renderer mimeType is null");

     label0:
        return null;

     label1:
        $r1 = this.<org.apache.fop.render.AbstractRendererConfigurator: org.apache.fop.apps.FOUserAgent userAgent>;
        $r2 = staticinvoke <org.apache.fop.render.AbstractRendererConfigurator: org.apache.avalon.framework.configuration.Configuration getRendererConfig(org.apache.fop.apps.FOUserAgent,java.lang.String)>($r1, mimeType);
        return $r2;
    }

    public static org.apache.avalon.framework.configuration.Configuration getRendererConfig(org.apache.fop.apps.FOUserAgent, java.lang.String)
    {
        org.apache.fop.apps.FOUserAgent userAgent;
        java.lang.String mimeType, $r3, $r6, $r7;
        org.apache.avalon.framework.configuration.Configuration cfg, userRendererConfig, child, $r2;
        org.apache.avalon.framework.configuration.Configuration[] cfgs;
        int i, $i0;
        org.apache.avalon.framework.configuration.ConfigurationException l7, $r4;
        org.apache.fop.apps.FopFactory $r0;
        org.apache.commons.logging.Log $r1;
        boolean $z0;
        java.lang.StringBuffer $r5;

        userAgent := @parameter0: org.apache.fop.apps.FOUserAgent;
        mimeType := @parameter1: java.lang.String;
        $r0 = virtualinvoke userAgent.<org.apache.fop.apps.FOUserAgent: org.apache.fop.apps.FopFactory getFactory()>();
        cfg = virtualinvoke $r0.<org.apache.fop.apps.FopFactory: org.apache.avalon.framework.configuration.Configuration getUserConfig()>();
        if cfg != null goto label1;

        $r1 = <org.apache.fop.render.AbstractRendererConfigurator: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label0;

        $r1 = <org.apache.fop.render.AbstractRendererConfigurator: org.apache.commons.logging.Log log>;
        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("userconfig is null");

     label0:
        return null;

     label1:
        userRendererConfig = null;
        $r2 = interfaceinvoke cfg.<org.apache.avalon.framework.configuration.Configuration: org.apache.avalon.framework.configuration.Configuration getChild(java.lang.String)>("renderers");
        cfgs = interfaceinvoke $r2.<org.apache.avalon.framework.configuration.Configuration: org.apache.avalon.framework.configuration.Configuration[] getChildren(java.lang.String)>("renderer");
        i = 0;

     label2:
        $i0 = lengthof cfgs;
        if i >= $i0 goto label8;

        child = cfgs[i];

     label3:
        $r3 = interfaceinvoke child.<org.apache.avalon.framework.configuration.Configuration: java.lang.String getAttribute(java.lang.String)>("mime");
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(mimeType);
        if $z0 == 0 goto label5;

        userRendererConfig = child;

     label4:
        goto label8;

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;
        l7 = $r4;

     label7:
        i = i + 1;
        goto label2;

     label8:
        $r1 = <org.apache.fop.render.AbstractRendererConfigurator: org.apache.commons.logging.Log log>;
        $r5 = new java.lang.StringBuffer;
        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();
        if userRendererConfig != null goto label9;

        $r6 = "No u";
        goto label10;

     label9:
        $r6 = "U";

     label10:
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ser configuration found for MIME type ");
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(mimeType);
        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r7);
        return userRendererConfig;

        catch org.apache.avalon.framework.configuration.ConfigurationException from label3 to label4 with label6;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException l1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        l1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(l1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.apache.commons.logging.Log $r1;

        $r0 = <org.apache.fop.render.AbstractRendererConfigurator: java.lang.Class class$org$apache$fop$render$AbstractRendererConfigurator>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.fop.render.AbstractRendererConfigurator: java.lang.Class class$(java.lang.String)>("org.apache.fop.render.AbstractRendererConfigurator");
        <org.apache.fop.render.AbstractRendererConfigurator: java.lang.Class class$org$apache$fop$render$AbstractRendererConfigurator> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.fop.render.AbstractRendererConfigurator: java.lang.Class class$org$apache$fop$render$AbstractRendererConfigurator>;

     label1:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r0);
        <org.apache.fop.render.AbstractRendererConfigurator: org.apache.commons.logging.Log log> = $r1;
        return;
    }
}
