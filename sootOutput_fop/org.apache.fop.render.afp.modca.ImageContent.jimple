public class org.apache.fop.render.afp.modca.ImageContent extends org.apache.fop.render.afp.modca.AbstractAFPObject
{
    private org.apache.fop.render.afp.modca.ImageSizeParameter _imageSizeParameter;
    private byte _encoding;
    private byte _size;
    private byte _compression;
    private byte _colorModel;
    private byte[] _data;

    public void <init>()
    {
        org.apache.fop.render.afp.modca.ImageContent this;

        this := @this: org.apache.fop.render.afp.modca.ImageContent;
        specialinvoke this.<org.apache.fop.render.afp.modca.AbstractAFPObject: void <init>()>();
        this.<org.apache.fop.render.afp.modca.ImageContent: org.apache.fop.render.afp.modca.ImageSizeParameter _imageSizeParameter> = null;
        this.<org.apache.fop.render.afp.modca.ImageContent: byte _encoding> = 3;
        this.<org.apache.fop.render.afp.modca.ImageContent: byte _size> = 1;
        this.<org.apache.fop.render.afp.modca.ImageContent: byte _compression> = -64;
        this.<org.apache.fop.render.afp.modca.ImageContent: byte _colorModel> = 1;
        this.<org.apache.fop.render.afp.modca.ImageContent: byte[] _data> = null;
        return;
    }

    public void setImageSize(int, int, int, int)
    {
        org.apache.fop.render.afp.modca.ImageContent this;
        int hresol, vresol, hsize, vsize;
        org.apache.fop.render.afp.modca.ImageSizeParameter $r0;

        this := @this: org.apache.fop.render.afp.modca.ImageContent;
        hresol := @parameter0: int;
        vresol := @parameter1: int;
        hsize := @parameter2: int;
        vsize := @parameter3: int;
        $r0 = new org.apache.fop.render.afp.modca.ImageSizeParameter;
        specialinvoke $r0.<org.apache.fop.render.afp.modca.ImageSizeParameter: void <init>(int,int,int,int)>(hresol, vresol, hsize, vsize);
        this.<org.apache.fop.render.afp.modca.ImageContent: org.apache.fop.render.afp.modca.ImageSizeParameter _imageSizeParameter> = $r0;
        return;
    }

    public void setImageEncoding(byte)
    {
        org.apache.fop.render.afp.modca.ImageContent this;
        byte encoding;

        this := @this: org.apache.fop.render.afp.modca.ImageContent;
        encoding := @parameter0: byte;
        this.<org.apache.fop.render.afp.modca.ImageContent: byte _encoding> = encoding;
        return;
    }

    public void setImageCompression(byte)
    {
        org.apache.fop.render.afp.modca.ImageContent this;
        byte compression;

        this := @this: org.apache.fop.render.afp.modca.ImageContent;
        compression := @parameter0: byte;
        this.<org.apache.fop.render.afp.modca.ImageContent: byte _compression> = compression;
        return;
    }

    public void setImageIDESize(byte)
    {
        org.apache.fop.render.afp.modca.ImageContent this;
        byte size;

        this := @this: org.apache.fop.render.afp.modca.ImageContent;
        size := @parameter0: byte;
        this.<org.apache.fop.render.afp.modca.ImageContent: byte _size> = size;
        return;
    }

    public void setImageIDEColorModel(byte)
    {
        org.apache.fop.render.afp.modca.ImageContent this;
        byte colorModel;

        this := @this: org.apache.fop.render.afp.modca.ImageContent;
        colorModel := @parameter0: byte;
        this.<org.apache.fop.render.afp.modca.ImageContent: byte _colorModel> = colorModel;
        return;
    }

    public void setImageData(byte[])
    {
        org.apache.fop.render.afp.modca.ImageContent this;
        byte[] data;

        this := @this: org.apache.fop.render.afp.modca.ImageContent;
        data := @parameter0: byte[];
        this.<org.apache.fop.render.afp.modca.ImageContent: byte[] _data> = data;
        return;
    }

    public void writeDataStream(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.fop.render.afp.modca.ImageContent this;
        java.io.OutputStream os;
        int off, len, $i0;
        org.apache.fop.render.afp.modca.ImageSizeParameter $r0;
        byte[] $r1, $r2;

        this := @this: org.apache.fop.render.afp.modca.ImageContent;
        os := @parameter0: java.io.OutputStream;
        specialinvoke this.<org.apache.fop.render.afp.modca.ImageContent: void writeStart(java.io.OutputStream)>(os);
        $r0 = this.<org.apache.fop.render.afp.modca.ImageContent: org.apache.fop.render.afp.modca.ImageSizeParameter _imageSizeParameter>;
        if $r0 == null goto label0;

        $r0 = this.<org.apache.fop.render.afp.modca.ImageContent: org.apache.fop.render.afp.modca.ImageSizeParameter _imageSizeParameter>;
        virtualinvoke $r0.<org.apache.fop.render.afp.modca.ImageSizeParameter: void writeDataStream(java.io.OutputStream)>(os);

     label0:
        $r1 = specialinvoke this.<org.apache.fop.render.afp.modca.ImageContent: byte[] getImageEncodingParameter()>();
        virtualinvoke os.<java.io.OutputStream: void write(byte[])>($r1);
        $r1 = specialinvoke this.<org.apache.fop.render.afp.modca.ImageContent: byte[] getImageIDESizeParameter()>();
        virtualinvoke os.<java.io.OutputStream: void write(byte[])>($r1);
        $r1 = specialinvoke this.<org.apache.fop.render.afp.modca.ImageContent: byte[] getIDEStructureParameter()>();
        virtualinvoke os.<java.io.OutputStream: void write(byte[])>($r1);
        $r1 = specialinvoke this.<org.apache.fop.render.afp.modca.ImageContent: byte[] getExternalAlgorithmParameter()>();
        virtualinvoke os.<java.io.OutputStream: void write(byte[])>($r1);
        $r2 = this.<org.apache.fop.render.afp.modca.ImageContent: byte[] _data>;
        if $r2 == null goto label2;

        off = 0;

     label1:
        $r1 = this.<org.apache.fop.render.afp.modca.ImageContent: byte[] _data>;
        $i0 = lengthof $r1;
        if off >= $i0 goto label2;

        $r1 = this.<org.apache.fop.render.afp.modca.ImageContent: byte[] _data>;
        $i0 = lengthof $r1;
        $i0 = $i0 - off;
        len = staticinvoke <java.lang.Math: int min(int,int)>(30000, $i0);
        $r1 = specialinvoke this.<org.apache.fop.render.afp.modca.ImageContent: byte[] getImageDataStart(int)>(len);
        virtualinvoke os.<java.io.OutputStream: void write(byte[])>($r1);
        $r1 = this.<org.apache.fop.render.afp.modca.ImageContent: byte[] _data>;
        virtualinvoke os.<java.io.OutputStream: void write(byte[],int,int)>($r1, off, len);
        off = off + len;
        goto label1;

     label2:
        specialinvoke this.<org.apache.fop.render.afp.modca.ImageContent: void writeEnd(java.io.OutputStream)>(os);
        return;
    }

    private void writeStart(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.fop.render.afp.modca.ImageContent this;
        java.io.OutputStream os;
        byte[] data, $r0;

        this := @this: org.apache.fop.render.afp.modca.ImageContent;
        os := @parameter0: java.io.OutputStream;
        $r0 = newarray (byte)[3];
        $r0[0] = -111;
        $r0[1] = 1;
        $r0[2] = -1;
        data = $r0;
        virtualinvoke os.<java.io.OutputStream: void write(byte[])>(data);
        return;
    }

    private void writeEnd(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.fop.render.afp.modca.ImageContent this;
        java.io.OutputStream os;
        byte[] data, $r0;

        this := @this: org.apache.fop.render.afp.modca.ImageContent;
        os := @parameter0: java.io.OutputStream;
        $r0 = newarray (byte)[2];
        $r0[0] = -109;
        $r0[1] = 0;
        data = $r0;
        virtualinvoke os.<java.io.OutputStream: void write(byte[])>(data);
        return;
    }

    private byte[] getImageDataStart(int)
    {
        org.apache.fop.render.afp.modca.ImageContent this;
        int len;
        byte[] data, l, $r0;
        byte $b0;

        this := @this: org.apache.fop.render.afp.modca.ImageContent;
        len := @parameter0: int;
        $r0 = newarray (byte)[4];
        $r0[0] = -2;
        $r0[1] = -110;
        $r0[2] = 0;
        $r0[3] = 0;
        data = $r0;
        l = staticinvoke <org.apache.fop.render.afp.tools.BinaryUtils: byte[] convert(int,int)>(len, 2);
        $b0 = l[0];
        data[2] = $b0;
        $b0 = l[1];
        data[3] = $b0;
        return data;
    }

    private byte[] getImageEncodingParameter()
    {
        org.apache.fop.render.afp.modca.ImageContent this;
        byte[] data, $r0;
        byte $b0;

        this := @this: org.apache.fop.render.afp.modca.ImageContent;
        $r0 = newarray (byte)[4];
        $r0[0] = -107;
        $r0[1] = 2;
        $b0 = this.<org.apache.fop.render.afp.modca.ImageContent: byte _encoding>;
        $r0[2] = $b0;
        $r0[3] = 1;
        data = $r0;
        return data;
    }

    private byte[] getExternalAlgorithmParameter()
    {
        org.apache.fop.render.afp.modca.ImageContent this;
        byte[] data, $r0;
        byte $b0, $b1, $b3;
        int $i2;

        this := @this: org.apache.fop.render.afp.modca.ImageContent;
        $b0 = this.<org.apache.fop.render.afp.modca.ImageContent: byte _encoding>;
        if $b0 != -125 goto label0;

        $b0 = this.<org.apache.fop.render.afp.modca.ImageContent: byte _compression>;
        if $b0 == 0 goto label0;

        $r0 = newarray (byte)[12];
        $r0[0] = -107;
        $r0[1] = 0;
        $r0[2] = 16;
        $r0[3] = 0;
        $r0[4] = -125;
        $r0[5] = 0;
        $r0[6] = 0;
        $r0[7] = 0;
        $b1 = this.<org.apache.fop.render.afp.modca.ImageContent: byte _compression>;
        $r0[8] = $b1;
        $r0[9] = 0;
        $r0[10] = 0;
        $r0[11] = 0;
        data = $r0;
        $i2 = lengthof data;
        $i2 = $i2 - 2;
        $b3 = (byte) $i2;
        data[1] = $b3;
        return data;

     label0:
        $r0 = newarray (byte)[0];
        return $r0;
    }

    private byte[] getImageIDESizeParameter()
    {
        org.apache.fop.render.afp.modca.ImageContent this;
        byte[] data, $r0;
        byte $b0;

        this := @this: org.apache.fop.render.afp.modca.ImageContent;
        $r0 = newarray (byte)[3];
        $r0[0] = -106;
        $r0[1] = 1;
        $b0 = this.<org.apache.fop.render.afp.modca.ImageContent: byte _size>;
        $r0[2] = $b0;
        data = $r0;
        return data;
    }

    private byte[] getIDEStructureParameter()
    {
        org.apache.fop.render.afp.modca.ImageContent this;
        byte bits, $b0, $b2, $b4;
        byte[] data, $r0;
        int $i1, $i3;

        this := @this: org.apache.fop.render.afp.modca.ImageContent;
        $b0 = this.<org.apache.fop.render.afp.modca.ImageContent: byte _colorModel>;
        if $b0 == 0 goto label0;

        $b0 = this.<org.apache.fop.render.afp.modca.ImageContent: byte _size>;
        if $b0 != 24 goto label0;

        $b0 = this.<org.apache.fop.render.afp.modca.ImageContent: byte _size>;
        $i1 = $b0 / 3;
        bits = (byte) $i1;
        $r0 = newarray (byte)[11];
        $r0[0] = -101;
        $r0[1] = 0;
        $r0[2] = 0;
        $r0[3] = 0;
        $b2 = this.<org.apache.fop.render.afp.modca.ImageContent: byte _colorModel>;
        $r0[4] = $b2;
        $r0[5] = 0;
        $r0[6] = 0;
        $r0[7] = 0;
        $r0[8] = bits;
        $r0[9] = bits;
        $r0[10] = bits;
        data = $r0;
        $i3 = lengthof data;
        $i3 = $i3 - 2;
        $b4 = (byte) $i3;
        data[1] = $b4;
        return data;

     label0:
        $r0 = newarray (byte)[0];
        return $r0;
    }
}
