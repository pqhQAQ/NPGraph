public class org.apache.fop.render.ps.PSFontUtils extends org.apache.xmlgraphics.ps.PSFontUtils
{
    protected static org.apache.commons.logging.Log log;
    static java.lang.Class class$org$apache$fop$render$ps$PSFontUtils;

    public void <init>()
    {
        org.apache.fop.render.ps.PSFontUtils this;

        this := @this: org.apache.fop.render.ps.PSFontUtils;
        specialinvoke this.<org.apache.xmlgraphics.ps.PSFontUtils: void <init>()>();
        return;
    }

    public static java.util.Map writeFontDict(org.apache.xmlgraphics.ps.PSGenerator, org.apache.fop.fonts.FontInfo) throws java.io.IOException
    {
        org.apache.xmlgraphics.ps.PSGenerator gen;
        org.apache.fop.fonts.FontInfo fontInfo;
        java.util.Map $r0, $r1;

        gen := @parameter0: org.apache.xmlgraphics.ps.PSGenerator;
        fontInfo := @parameter1: org.apache.fop.fonts.FontInfo;
        $r0 = virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: java.util.Map getFonts()>();
        $r1 = staticinvoke <org.apache.fop.render.ps.PSFontUtils: java.util.Map writeFontDict(org.apache.xmlgraphics.ps.PSGenerator,org.apache.fop.fonts.FontInfo,java.util.Map)>(gen, fontInfo, $r0);
        return $r1;
    }

    public static java.util.Map writeFontDict(org.apache.xmlgraphics.ps.PSGenerator, org.apache.fop.fonts.FontInfo, java.util.Map) throws java.io.IOException
    {
        org.apache.xmlgraphics.ps.PSGenerator gen;
        org.apache.fop.fonts.FontInfo fontInfo;
        java.util.Map fonts;
        java.util.HashMap fontResources, $r0;
        java.util.Iterator iter;
        java.lang.String key, $r4;
        org.apache.fop.fonts.Typeface tf;
        org.apache.xmlgraphics.ps.PSResource fontRes, $r3;
        java.util.Set $r1;
        boolean $z0;
        java.lang.Object $r2;

        gen := @parameter0: org.apache.xmlgraphics.ps.PSGenerator;
        fontInfo := @parameter1: org.apache.fop.fonts.FontInfo;
        fonts := @parameter2: java.util.Map;
        virtualinvoke gen.<org.apache.xmlgraphics.ps.PSGenerator: void commentln(java.lang.String)>("%FOPBeginFontDict");
        $r0 = new java.util.HashMap;
        specialinvoke $r0.<java.util.HashMap: void <init>()>();
        fontResources = $r0;
        $r1 = interfaceinvoke fonts.<java.util.Map: java.util.Set keySet()>();
        iter = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();
        key = (java.lang.String) $r2;
        tf = staticinvoke <org.apache.fop.render.ps.PSFontUtils: org.apache.fop.fonts.Typeface getTypeFace(org.apache.fop.fonts.FontInfo,java.util.Map,java.lang.String)>(fontInfo, fonts, key);
        $r3 = new org.apache.xmlgraphics.ps.PSResource;
        $r4 = virtualinvoke tf.<org.apache.fop.fonts.Typeface: java.lang.String getFontName()>();
        specialinvoke $r3.<org.apache.xmlgraphics.ps.PSResource: void <init>(java.lang.String,java.lang.String)>("font", $r4);
        fontRes = $r3;
        interfaceinvoke fontResources.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, fontRes);
        staticinvoke <org.apache.fop.render.ps.PSFontUtils: void embedFont(org.apache.xmlgraphics.ps.PSGenerator,org.apache.fop.fonts.Typeface,org.apache.xmlgraphics.ps.PSResource)>(gen, tf, fontRes);
        goto label0;

     label1:
        virtualinvoke gen.<org.apache.xmlgraphics.ps.PSGenerator: void commentln(java.lang.String)>("%FOPEndFontDict");
        staticinvoke <org.apache.fop.render.ps.PSFontUtils: void reencodeFonts(org.apache.xmlgraphics.ps.PSGenerator,java.util.Map)>(gen, fonts);
        return fontResources;
    }

    private static void reencodeFonts(org.apache.xmlgraphics.ps.PSGenerator, java.util.Map) throws java.io.IOException
    {
        org.apache.xmlgraphics.ps.PSGenerator gen;
        java.util.Map fonts;
        java.util.Iterator iter;
        java.lang.String key, $r4, $r5, $r6;
        org.apache.fop.fonts.Typeface fm, $r3;
        java.util.Set $r0;
        boolean $z0;
        java.lang.Object $r1;
        org.apache.fop.fonts.LazyFont $r2;

        gen := @parameter0: org.apache.xmlgraphics.ps.PSGenerator;
        fonts := @parameter1: java.util.Map;
        virtualinvoke gen.<org.apache.xmlgraphics.ps.PSGenerator: void commentln(java.lang.String)>("%FOPBeginFontReencode");
        staticinvoke <org.apache.fop.render.ps.PSFontUtils: void defineWinAnsiEncoding(org.apache.xmlgraphics.ps.PSGenerator)>(gen);
        $r0 = interfaceinvoke fonts.<java.util.Map: java.util.Set keySet()>();
        iter = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label6;

        $r1 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();
        key = (java.lang.String) $r1;
        $r1 = interfaceinvoke fonts.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);
        fm = (org.apache.fop.fonts.Typeface) $r1;
        $z0 = fm instanceof org.apache.fop.fonts.LazyFont;
        if $z0 == 0 goto label1;

        $r2 = (org.apache.fop.fonts.LazyFont) fm;
        $r3 = virtualinvoke $r2.<org.apache.fop.fonts.LazyFont: org.apache.fop.fonts.Typeface getRealFont()>();
        if $r3 != null goto label1;

        goto label0;

     label1:
        $r4 = virtualinvoke fm.<org.apache.fop.fonts.Typeface: java.lang.String getEncoding()>();
        if null != $r4 goto label2;

        goto label5;

     label2:
        $r5 = "SymbolEncoding";
        $r4 = virtualinvoke fm.<org.apache.fop.fonts.Typeface: java.lang.String getEncoding()>();
        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);
        if $z0 == 0 goto label3;

        goto label5;

     label3:
        $r5 = "ZapfDingbatsEncoding";
        $r4 = virtualinvoke fm.<org.apache.fop.fonts.Typeface: java.lang.String getEncoding()>();
        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);
        if $z0 == 0 goto label4;

        goto label5;

     label4:
        $r5 = "WinAnsiEncoding";
        $r4 = virtualinvoke fm.<org.apache.fop.fonts.Typeface: java.lang.String getEncoding()>();
        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);
        if $z0 == 0 goto label5;

        $r4 = virtualinvoke fm.<org.apache.fop.fonts.Typeface: java.lang.String getFontName()>();
        $r6 = virtualinvoke fm.<org.apache.fop.fonts.Typeface: java.lang.String getEncoding()>();
        staticinvoke <org.apache.fop.render.ps.PSFontUtils: void redefineFontEncoding(org.apache.xmlgraphics.ps.PSGenerator,java.lang.String,java.lang.String)>(gen, $r4, $r6);

     label5:
        goto label0;

     label6:
        virtualinvoke gen.<org.apache.xmlgraphics.ps.PSGenerator: void commentln(java.lang.String)>("%FOPEndFontReencode");
        return;
    }

    private static org.apache.fop.fonts.Typeface getTypeFace(org.apache.fop.fonts.FontInfo, java.util.Map, java.lang.String)
    {
        org.apache.fop.fonts.FontInfo fontInfo;
        java.util.Map fonts;
        java.lang.String key, fallbackKey;
        org.apache.fop.fonts.Typeface tf;
        java.lang.Object $r0;
        boolean $z0;
        org.apache.fop.fonts.LazyFont $r1;
        org.apache.fop.fonts.FontTriplet $r2;

        fontInfo := @parameter0: org.apache.fop.fonts.FontInfo;
        fonts := @parameter1: java.util.Map;
        key := @parameter2: java.lang.String;
        $r0 = interfaceinvoke fonts.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);
        tf = (org.apache.fop.fonts.Typeface) $r0;
        $z0 = tf instanceof org.apache.fop.fonts.LazyFont;
        if $z0 == 0 goto label0;

        $r1 = (org.apache.fop.fonts.LazyFont) tf;
        tf = virtualinvoke $r1.<org.apache.fop.fonts.LazyFont: org.apache.fop.fonts.Typeface getRealFont()>();

     label0:
        if tf != null goto label1;

        $r2 = <org.apache.fop.fonts.Font: org.apache.fop.fonts.FontTriplet DEFAULT_FONT>;
        fallbackKey = virtualinvoke fontInfo.<org.apache.fop.fonts.FontInfo: java.lang.String getInternalFontKey(org.apache.fop.fonts.FontTriplet)>($r2);
        $r0 = interfaceinvoke fonts.<java.util.Map: java.lang.Object get(java.lang.Object)>(fallbackKey);
        tf = (org.apache.fop.fonts.Typeface) $r0;

     label1:
        return tf;
    }

    public static void embedFont(org.apache.xmlgraphics.ps.PSGenerator, org.apache.fop.fonts.Typeface, org.apache.xmlgraphics.ps.PSResource) throws java.io.IOException
    {
        org.apache.xmlgraphics.ps.PSGenerator gen;
        org.apache.fop.fonts.Typeface tf;
        org.apache.xmlgraphics.ps.PSResource fontRes;
        boolean embeddedFont, $z0;
        org.apache.fop.fonts.CustomFont cf;
        java.io.InputStream in;
        org.apache.fop.fonts.FontType $r0, $r1;
        org.apache.xmlgraphics.ps.dsc.ResourceTracker $r2;
        java.lang.StringBuffer $r3;
        java.lang.String $r4, $r5;
        org.apache.commons.logging.Log $r6;

        gen := @parameter0: org.apache.xmlgraphics.ps.PSGenerator;
        tf := @parameter1: org.apache.fop.fonts.Typeface;
        fontRes := @parameter2: org.apache.xmlgraphics.ps.PSResource;
        embeddedFont = 0;
        $r0 = <org.apache.fop.fonts.FontType: org.apache.fop.fonts.FontType TYPE1>;
        $r1 = virtualinvoke tf.<org.apache.fop.fonts.Typeface: org.apache.fop.fonts.FontType getFontType()>();
        if $r0 != $r1 goto label1;

        $z0 = tf instanceof org.apache.fop.fonts.CustomFont;
        if $z0 == 0 goto label1;

        cf = (org.apache.fop.fonts.CustomFont) tf;
        $z0 = staticinvoke <org.apache.fop.render.ps.PSFontUtils: boolean isEmbeddable(org.apache.fop.fonts.CustomFont)>(cf);
        if $z0 == 0 goto label1;

        in = staticinvoke <org.apache.fop.render.ps.PSFontUtils: java.io.InputStream getInputStreamOnFont(org.apache.xmlgraphics.ps.PSGenerator,org.apache.fop.fonts.CustomFont)>(gen, cf);
        if in == null goto label0;

        virtualinvoke gen.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String,java.lang.Object)>("BeginResource", fontRes);
        staticinvoke <org.apache.fop.render.ps.PSFontUtils: void embedType1Font(org.apache.xmlgraphics.ps.PSGenerator,java.io.InputStream)>(gen, in);
        virtualinvoke gen.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String)>("EndResource");
        $r2 = virtualinvoke gen.<org.apache.xmlgraphics.ps.PSGenerator: org.apache.xmlgraphics.ps.dsc.ResourceTracker getResourceTracker()>();
        virtualinvoke $r2.<org.apache.xmlgraphics.ps.dsc.ResourceTracker: void registerSuppliedResource(org.apache.xmlgraphics.ps.PSResource)>(fontRes);
        embeddedFont = 1;
        goto label1;

     label0:
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("%WARNING: Could not embed font: ");
        $r4 = virtualinvoke cf.<org.apache.fop.fonts.CustomFont: java.lang.String getFontName()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);
        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke gen.<org.apache.xmlgraphics.ps.PSGenerator: void commentln(java.lang.String)>($r5);
        $r6 = <org.apache.fop.render.ps.PSFontUtils: org.apache.commons.logging.Log log>;
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Font ");
        $r4 = virtualinvoke cf.<org.apache.fop.fonts.CustomFont: java.lang.String getFontName()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is marked as supplied in the PostScript file but could not be embedded!");
        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r6.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r5);

     label1:
        if embeddedFont != 0 goto label2;

        virtualinvoke gen.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String,java.lang.Object)>("IncludeResource", fontRes);

     label2:
        return;
    }

    private static boolean isEmbeddable(org.apache.fop.fonts.CustomFont)
    {
        org.apache.fop.fonts.CustomFont font;
        boolean $z0;
        java.lang.String $r0;

        font := @parameter0: org.apache.fop.fonts.CustomFont;
        $z0 = virtualinvoke font.<org.apache.fop.fonts.CustomFont: boolean isEmbeddable()>();
        if $z0 == 0 goto label1;

        $r0 = virtualinvoke font.<org.apache.fop.fonts.CustomFont: java.lang.String getEmbedFileName()>();
        if $r0 != null goto label0;

        $r0 = virtualinvoke font.<org.apache.fop.fonts.CustomFont: java.lang.String getEmbedResourceName()>();
        if $r0 == null goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static java.io.InputStream getInputStreamOnFont(org.apache.xmlgraphics.ps.PSGenerator, org.apache.fop.fonts.CustomFont) throws java.io.IOException
    {
        org.apache.xmlgraphics.ps.PSGenerator gen;
        org.apache.fop.fonts.CustomFont font;
        javax.xml.transform.Source source;
        javax.xml.transform.stream.StreamSource $r0, $r3;
        java.lang.Class $r1;
        java.io.InputStream in, $r5;
        java.net.MalformedURLException e, $r8;
        boolean $z0;
        java.lang.String $r2, $r4, $r7;
        java.net.URL $r6;
        java.io.FileNotFoundException $r9;
        java.lang.StringBuffer $r10;
        java.io.BufferedInputStream $r11;

        gen := @parameter0: org.apache.xmlgraphics.ps.PSGenerator;
        font := @parameter1: org.apache.fop.fonts.CustomFont;
        $z0 = staticinvoke <org.apache.fop.render.ps.PSFontUtils: boolean isEmbeddable(org.apache.fop.fonts.CustomFont)>(font);
        if $z0 == 0 goto label11;

        source = virtualinvoke font.<org.apache.fop.fonts.CustomFont: javax.xml.transform.Source getEmbedFileSource()>();
        if source != null goto label2;

        $r2 = virtualinvoke font.<org.apache.fop.fonts.CustomFont: java.lang.String getEmbedResourceName()>();
        if $r2 == null goto label2;

        $r3 = new javax.xml.transform.stream.StreamSource;
        $r0 = $r3;
        $r1 = <org.apache.fop.render.ps.PSFontUtils: java.lang.Class class$org$apache$fop$render$ps$PSFontUtils>;
        if $r1 != null goto label0;

        $r1 = staticinvoke <org.apache.fop.render.ps.PSFontUtils: java.lang.Class class$(java.lang.String)>("org.apache.fop.render.ps.PSFontUtils");
        <org.apache.fop.render.ps.PSFontUtils: java.lang.Class class$org$apache$fop$render$ps$PSFontUtils> = $r1;
        goto label1;

     label0:
        $r1 = <org.apache.fop.render.ps.PSFontUtils: java.lang.Class class$org$apache$fop$render$ps$PSFontUtils>;

     label1:
        $r4 = virtualinvoke font.<org.apache.fop.fonts.CustomFont: java.lang.String getEmbedResourceName()>();
        $r5 = virtualinvoke $r1.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r4);
        specialinvoke $r0.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>($r5);
        source = $r3;

     label2:
        if source != null goto label3;

        return null;

     label3:
        in = null;
        $z0 = source instanceof javax.xml.transform.stream.StreamSource;
        if $z0 == 0 goto label4;

        $r3 = (javax.xml.transform.stream.StreamSource) source;
        in = virtualinvoke $r3.<javax.xml.transform.stream.StreamSource: java.io.InputStream getInputStream()>();

     label4:
        if in != null goto label8;

        $r2 = interfaceinvoke source.<javax.xml.transform.Source: java.lang.String getSystemId()>();
        if $r2 == null goto label8;

     label5:
        $r6 = new java.net.URL;
        $r7 = interfaceinvoke source.<javax.xml.transform.Source: java.lang.String getSystemId()>();
        specialinvoke $r6.<java.net.URL: void <init>(java.lang.String)>($r7);
        in = virtualinvoke $r6.<java.net.URL: java.io.InputStream openStream()>();

     label6:
        goto label8;

     label7:
        $r8 := @caughtexception;
        e = $r8;
        $r9 = new java.io.FileNotFoundException;
        $r10 = new java.lang.StringBuffer;
        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();
        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("File not found. URL could not be resolved: ");
        $r4 = virtualinvoke e.<java.net.MalformedURLException: java.lang.String getMessage()>();
        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);
        $r7 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r9.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r7);

     label8:
        if in != null goto label9;

        return null;

     label9:
        $z0 = in instanceof java.io.BufferedInputStream;
        if $z0 != 0 goto label10;

        $r11 = new java.io.BufferedInputStream;
        specialinvoke $r11.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(in);
        in = $r11;

     label10:
        return in;

     label11:
        return null;

        catch java.net.MalformedURLException from label5 to label6 with label7;
    }

    public static java.util.Map determineSuppliedFonts(org.apache.xmlgraphics.ps.dsc.ResourceTracker, org.apache.fop.fonts.FontInfo, java.util.Map)
    {
        org.apache.xmlgraphics.ps.dsc.ResourceTracker resTracker;
        org.apache.fop.fonts.FontInfo fontInfo;
        java.util.Map fonts;
        java.util.HashMap $r0, fontResources;
        java.util.Iterator iter;
        java.lang.String key, $r4;
        org.apache.fop.fonts.Typeface tf;
        org.apache.xmlgraphics.ps.PSResource fontRes, $r3;
        org.apache.fop.fonts.CustomFont cf;
        java.util.Set $r1;
        boolean $z0;
        java.lang.Object $r2;
        org.apache.fop.fonts.FontType $r5, $r6;

        resTracker := @parameter0: org.apache.xmlgraphics.ps.dsc.ResourceTracker;
        fontInfo := @parameter1: org.apache.fop.fonts.FontInfo;
        fonts := @parameter2: java.util.Map;
        $r0 = new java.util.HashMap;
        specialinvoke $r0.<java.util.HashMap: void <init>()>();
        fontResources = $r0;
        $r1 = interfaceinvoke fonts.<java.util.Map: java.util.Set keySet()>();
        iter = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();
        key = (java.lang.String) $r2;
        tf = staticinvoke <org.apache.fop.render.ps.PSFontUtils: org.apache.fop.fonts.Typeface getTypeFace(org.apache.fop.fonts.FontInfo,java.util.Map,java.lang.String)>(fontInfo, fonts, key);
        $r3 = new org.apache.xmlgraphics.ps.PSResource;
        $r4 = virtualinvoke tf.<org.apache.fop.fonts.Typeface: java.lang.String getFontName()>();
        specialinvoke $r3.<org.apache.xmlgraphics.ps.PSResource: void <init>(java.lang.String,java.lang.String)>("font", $r4);
        fontRes = $r3;
        interfaceinvoke fontResources.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, fontRes);
        $r5 = <org.apache.fop.fonts.FontType: org.apache.fop.fonts.FontType TYPE1>;
        $r6 = virtualinvoke tf.<org.apache.fop.fonts.Typeface: org.apache.fop.fonts.FontType getFontType()>();
        if $r5 != $r6 goto label1;

        $z0 = tf instanceof org.apache.fop.fonts.CustomFont;
        if $z0 == 0 goto label1;

        cf = (org.apache.fop.fonts.CustomFont) tf;
        $z0 = staticinvoke <org.apache.fop.render.ps.PSFontUtils: boolean isEmbeddable(org.apache.fop.fonts.CustomFont)>(cf);
        if $z0 == 0 goto label1;

        virtualinvoke resTracker.<org.apache.xmlgraphics.ps.dsc.ResourceTracker: void registerSuppliedResource(org.apache.xmlgraphics.ps.PSResource)>(fontRes);

     label1:
        goto label0;

     label2:
        return fontResources;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException l1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        l1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(l1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.apache.commons.logging.Log $r1;

        $r0 = <org.apache.fop.render.ps.PSFontUtils: java.lang.Class class$org$apache$fop$render$ps$PSFontUtils>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.fop.render.ps.PSFontUtils: java.lang.Class class$(java.lang.String)>("org.apache.fop.render.ps.PSFontUtils");
        <org.apache.fop.render.ps.PSFontUtils: java.lang.Class class$org$apache$fop$render$ps$PSFontUtils> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.fop.render.ps.PSFontUtils: java.lang.Class class$org$apache$fop$render$ps$PSFontUtils>;

     label1:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r0);
        <org.apache.fop.render.ps.PSFontUtils: org.apache.commons.logging.Log log> = $r1;
        return;
    }
}
