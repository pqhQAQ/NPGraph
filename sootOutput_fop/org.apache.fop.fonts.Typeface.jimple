public abstract class org.apache.fop.fonts.Typeface extends java.lang.Object implements org.apache.fop.fonts.FontMetrics
{
    private long charMapOps;

    public void <init>()
    {
        org.apache.fop.fonts.Typeface this;

        this := @this: org.apache.fop.fonts.Typeface;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<org.apache.fop.fonts.Typeface: long charMapOps> = 0L;
        return;
    }

    public abstract java.lang.String getEncoding();

    public abstract char mapChar(char);

    protected void notifyMapOperation()
    {
        org.apache.fop.fonts.Typeface this;
        long $l0;

        this := @this: org.apache.fop.fonts.Typeface;
        $l0 = this.<org.apache.fop.fonts.Typeface: long charMapOps>;
        $l0 = $l0 + 1L;
        this.<org.apache.fop.fonts.Typeface: long charMapOps> = $l0;
        return;
    }

    public boolean hadMappingOperations()
    {
        org.apache.fop.fonts.Typeface this;
        long $l0;
        byte $b1;
        boolean $z0;

        this := @this: org.apache.fop.fonts.Typeface;
        $l0 = this.<org.apache.fop.fonts.Typeface: long charMapOps>;
        $b1 = $l0 cmp 0L;
        if $b1 <= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public abstract boolean hasChar(char);

    public boolean isMultiByte()
    {
        org.apache.fop.fonts.Typeface this;

        this := @this: org.apache.fop.fonts.Typeface;
        return 0;
    }

    public int getMaxAscent(int)
    {
        org.apache.fop.fonts.Typeface this;
        int size, $i0;

        this := @this: org.apache.fop.fonts.Typeface;
        size := @parameter0: int;
        $i0 = virtualinvoke this.<org.apache.fop.fonts.Typeface: int getAscender(int)>(size);
        return $i0;
    }
}
