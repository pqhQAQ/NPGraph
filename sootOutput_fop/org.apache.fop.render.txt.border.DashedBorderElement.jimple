public class org.apache.fop.render.txt.border.DashedBorderElement extends org.apache.fop.render.txt.border.AbstractBorderElement
{
    private static final char DASH_HORIZONTAL;
    private static final char DASH_VERTICAL;
    private static final char UNDEFINED;
    private static final int UP2;
    private static final int RIGHT2;
    private static final int DOWN2;
    private static final int LEFT2;
    private static char[] map;

    public void <init>(int)
    {
        org.apache.fop.render.txt.border.DashedBorderElement this;
        int type;

        this := @this: org.apache.fop.render.txt.border.DashedBorderElement;
        type := @parameter0: int;
        specialinvoke this.<org.apache.fop.render.txt.border.AbstractBorderElement: void <init>(int)>(type);
        return;
    }

    private org.apache.fop.render.txt.border.AbstractBorderElement mergeSolid(org.apache.fop.render.txt.border.SolidAndDoubleBorderElement)
    {
        org.apache.fop.render.txt.border.DashedBorderElement this;
        org.apache.fop.render.txt.border.SolidAndDoubleBorderElement sdb, $r0, e;
        int i, $i0, $i1;
        int[] $r1;

        this := @this: org.apache.fop.render.txt.border.DashedBorderElement;
        sdb := @parameter0: org.apache.fop.render.txt.border.SolidAndDoubleBorderElement;
        $r0 = new org.apache.fop.render.txt.border.SolidAndDoubleBorderElement;
        specialinvoke $r0.<org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: void <init>(int,int)>(133, 0);
        e = $r0;
        i = 0;

     label0:
        if i >= 4 goto label1;

        $r1 = this.<org.apache.fop.render.txt.border.DashedBorderElement: int[] data>;
        $i0 = $r1[i];
        $i1 = virtualinvoke sdb.<org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: int getData(int)>(i);
        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);
        virtualinvoke e.<org.apache.fop.render.txt.border.AbstractBorderElement: void setData(int,int)>(i, $i0);
        i = i + 1;
        goto label0;

     label1:
        return e;
    }

    private org.apache.fop.render.txt.border.AbstractBorderElement mergeDashed(org.apache.fop.render.txt.border.DashedBorderElement)
    {
        org.apache.fop.render.txt.border.DashedBorderElement this, dbe;
        int i, $i0, $i1;
        int[] $r0, $r1;

        this := @this: org.apache.fop.render.txt.border.DashedBorderElement;
        dbe := @parameter0: org.apache.fop.render.txt.border.DashedBorderElement;
        i = 0;

     label0:
        if i >= 4 goto label1;

        $r0 = this.<org.apache.fop.render.txt.border.DashedBorderElement: int[] data>;
        $r1 = this.<org.apache.fop.render.txt.border.DashedBorderElement: int[] data>;
        $i0 = $r1[i];
        $i1 = virtualinvoke dbe.<org.apache.fop.render.txt.border.DashedBorderElement: int getData(int)>(i);
        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);
        $r0[i] = $i0;
        i = i + 1;
        goto label0;

     label1:
        return this;
    }

    private org.apache.fop.render.txt.border.AbstractBorderElement toSolidAndDouble()
    {
        org.apache.fop.render.txt.border.DashedBorderElement this;
        org.apache.fop.render.txt.border.SolidAndDoubleBorderElement $r0, e;
        int i, $i0;
        int[] $r1;

        this := @this: org.apache.fop.render.txt.border.DashedBorderElement;
        $r0 = new org.apache.fop.render.txt.border.SolidAndDoubleBorderElement;
        specialinvoke $r0.<org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: void <init>(int,int)>(133, 0);
        e = $r0;
        i = 0;

     label0:
        if i >= 4 goto label1;

        $r1 = this.<org.apache.fop.render.txt.border.DashedBorderElement: int[] data>;
        $i0 = $r1[i];
        virtualinvoke e.<org.apache.fop.render.txt.border.AbstractBorderElement: void setData(int,int)>(i, $i0);
        i = i + 1;
        goto label0;

     label1:
        return e;
    }

    public org.apache.fop.render.txt.border.AbstractBorderElement merge(org.apache.fop.render.txt.border.AbstractBorderElement)
    {
        org.apache.fop.render.txt.border.DashedBorderElement this, abe, $r1;
        org.apache.fop.render.txt.border.AbstractBorderElement e, abe;
        boolean $z0;
        org.apache.fop.render.txt.border.SolidAndDoubleBorderElement $r0;

        this := @this: org.apache.fop.render.txt.border.DashedBorderElement;
        e := @parameter0: org.apache.fop.render.txt.border.AbstractBorderElement;
        abe = this;
        $z0 = e instanceof org.apache.fop.render.txt.border.SolidAndDoubleBorderElement;
        if $z0 == 0 goto label0;

        $r0 = (org.apache.fop.render.txt.border.SolidAndDoubleBorderElement) e;
        abe = specialinvoke this.<org.apache.fop.render.txt.border.DashedBorderElement: org.apache.fop.render.txt.border.AbstractBorderElement mergeSolid(org.apache.fop.render.txt.border.SolidAndDoubleBorderElement)>($r0);
        goto label2;

     label0:
        $z0 = e instanceof org.apache.fop.render.txt.border.DashedBorderElement;
        if $z0 == 0 goto label1;

        $r1 = (org.apache.fop.render.txt.border.DashedBorderElement) e;
        abe = specialinvoke this.<org.apache.fop.render.txt.border.DashedBorderElement: org.apache.fop.render.txt.border.AbstractBorderElement mergeDashed(org.apache.fop.render.txt.border.DashedBorderElement)>($r1);
        goto label2;

     label1:
        abe = e;

     label2:
        return abe;
    }

    public char convert2Char()
    {
        org.apache.fop.render.txt.border.DashedBorderElement this;
        byte key;
        char ch;
        int[] $r0;
        int $i0, key;
        char[] $r1;
        org.apache.fop.render.txt.border.AbstractBorderElement $r2;

        this := @this: org.apache.fop.render.txt.border.DashedBorderElement;
        key = 0;
        $r0 = this.<org.apache.fop.render.txt.border.DashedBorderElement: int[] data>;
        $i0 = $r0[0];
        $i0 = $i0 * 1;
        key = key + $i0;
        $r0 = this.<org.apache.fop.render.txt.border.DashedBorderElement: int[] data>;
        $i0 = $r0[2];
        $i0 = $i0 * 4;
        key = key + $i0;
        $r0 = this.<org.apache.fop.render.txt.border.DashedBorderElement: int[] data>;
        $i0 = $r0[3];
        $i0 = $i0 * 8;
        key = key + $i0;
        $r0 = this.<org.apache.fop.render.txt.border.DashedBorderElement: int[] data>;
        $i0 = $r0[1];
        $i0 = $i0 * 2;
        key = key + $i0;
        $r1 = <org.apache.fop.render.txt.border.DashedBorderElement: char[] map>;
        ch = $r1[key];
        if ch != 63 goto label0;

        $r2 = specialinvoke this.<org.apache.fop.render.txt.border.DashedBorderElement: org.apache.fop.render.txt.border.AbstractBorderElement toSolidAndDouble()>();
        ch = virtualinvoke $r2.<org.apache.fop.render.txt.border.AbstractBorderElement: char convert2Char()>();

     label0:
        return ch;
    }

    static void <clinit>()
    {
        char[] $r0;

        $r0 = newarray (char)[20];
        <org.apache.fop.render.txt.border.DashedBorderElement: char[] map> = $r0;
        $r0 = <org.apache.fop.render.txt.border.DashedBorderElement: char[] map>;
        staticinvoke <java.util.Arrays: void fill(char[],char)>($r0, 63);
        $r0 = <org.apache.fop.render.txt.border.DashedBorderElement: char[] map>;
        $r0[0] = 32;
        $r0 = <org.apache.fop.render.txt.border.DashedBorderElement: char[] map>;
        $r0[1] = 124;
        $r0 = <org.apache.fop.render.txt.border.DashedBorderElement: char[] map>;
        $r0[4] = 124;
        $r0 = <org.apache.fop.render.txt.border.DashedBorderElement: char[] map>;
        $r0[5] = 124;
        $r0 = <org.apache.fop.render.txt.border.DashedBorderElement: char[] map>;
        $r0[8] = 45;
        $r0 = <org.apache.fop.render.txt.border.DashedBorderElement: char[] map>;
        $r0[2] = 45;
        $r0 = <org.apache.fop.render.txt.border.DashedBorderElement: char[] map>;
        $r0[10] = 45;
        return;
    }
}
