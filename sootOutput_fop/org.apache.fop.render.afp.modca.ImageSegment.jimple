public class org.apache.fop.render.afp.modca.ImageSegment extends org.apache.fop.render.afp.modca.AbstractAFPObject
{
    private static final java.lang.String DEFAULT_NAME;
    private java.lang.String name;
    private byte[] nameBytes;
    private org.apache.fop.render.afp.modca.ImageContent imageContent;

    public void <init>()
    {
        org.apache.fop.render.afp.modca.ImageSegment this;

        this := @this: org.apache.fop.render.afp.modca.ImageSegment;
        specialinvoke this.<org.apache.fop.render.afp.modca.ImageSegment: void <init>(java.lang.String)>("IS01");
        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.fop.render.afp.modca.ImageSegment this;
        java.lang.String name, msg, $r3;
        java.io.UnsupportedEncodingException usee, $r6;
        int $i0;
        java.lang.StringBuffer $r0, $r2;
        org.apache.commons.logging.Log $r1;
        java.lang.IllegalArgumentException $r4;
        byte[] $r5;

        this := @this: org.apache.fop.render.afp.modca.ImageSegment;
        name := @parameter0: java.lang.String;
        specialinvoke this.<org.apache.fop.render.afp.modca.AbstractAFPObject: void <init>()>();
        this.<org.apache.fop.render.afp.modca.ImageSegment: org.apache.fop.render.afp.modca.ImageContent imageContent> = null;
        $i0 = virtualinvoke name.<java.lang.String: int length()>();
        if $i0 == 4 goto label0;

        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Image segment name must be 4 characters long ");
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(name);
        msg = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        $r1 = <org.apache.fop.render.afp.modca.ImageSegment: org.apache.commons.logging.Log log>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Constructor:: ");
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(msg);
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r1.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r3);
        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(msg);
        throw $r4;

     label0:
        this.<org.apache.fop.render.afp.modca.ImageSegment: java.lang.String name> = name;

     label1:
        $r5 = virtualinvoke name.<java.lang.String: byte[] getBytes(java.lang.String)>("Cp1146");
        this.<org.apache.fop.render.afp.modca.ImageSegment: byte[] nameBytes> = $r5;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;
        usee = $r6;
        $r5 = virtualinvoke name.<java.lang.String: byte[] getBytes()>();
        this.<org.apache.fop.render.afp.modca.ImageSegment: byte[] nameBytes> = $r5;
        $r1 = <org.apache.fop.render.afp.modca.ImageSegment: org.apache.commons.logging.Log log>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Constructor:: UnsupportedEncodingException translating the name ");
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(name);
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r1.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r3);

     label4:
        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public void setImageSize(int, int, int, int)
    {
        org.apache.fop.render.afp.modca.ImageSegment this;
        int hresol, vresol, hsize, vsize;
        org.apache.fop.render.afp.modca.ImageContent $r0, $r1;

        this := @this: org.apache.fop.render.afp.modca.ImageSegment;
        hresol := @parameter0: int;
        vresol := @parameter1: int;
        hsize := @parameter2: int;
        vsize := @parameter3: int;
        $r1 = this.<org.apache.fop.render.afp.modca.ImageSegment: org.apache.fop.render.afp.modca.ImageContent imageContent>;
        if $r1 != null goto label0;

        $r0 = new org.apache.fop.render.afp.modca.ImageContent;
        specialinvoke $r0.<org.apache.fop.render.afp.modca.ImageContent: void <init>()>();
        this.<org.apache.fop.render.afp.modca.ImageSegment: org.apache.fop.render.afp.modca.ImageContent imageContent> = $r0;

     label0:
        $r1 = this.<org.apache.fop.render.afp.modca.ImageSegment: org.apache.fop.render.afp.modca.ImageContent imageContent>;
        virtualinvoke $r1.<org.apache.fop.render.afp.modca.ImageContent: void setImageSize(int,int,int,int)>(hresol, vresol, hsize, vsize);
        return;
    }

    public void setImageEncoding(byte)
    {
        org.apache.fop.render.afp.modca.ImageSegment this;
        byte encoding;
        org.apache.fop.render.afp.modca.ImageContent $r0, $r1;

        this := @this: org.apache.fop.render.afp.modca.ImageSegment;
        encoding := @parameter0: byte;
        $r1 = this.<org.apache.fop.render.afp.modca.ImageSegment: org.apache.fop.render.afp.modca.ImageContent imageContent>;
        if $r1 != null goto label0;

        $r0 = new org.apache.fop.render.afp.modca.ImageContent;
        specialinvoke $r0.<org.apache.fop.render.afp.modca.ImageContent: void <init>()>();
        this.<org.apache.fop.render.afp.modca.ImageSegment: org.apache.fop.render.afp.modca.ImageContent imageContent> = $r0;

     label0:
        $r1 = this.<org.apache.fop.render.afp.modca.ImageSegment: org.apache.fop.render.afp.modca.ImageContent imageContent>;
        virtualinvoke $r1.<org.apache.fop.render.afp.modca.ImageContent: void setImageEncoding(byte)>(encoding);
        return;
    }

    public void setImageCompression(byte)
    {
        org.apache.fop.render.afp.modca.ImageSegment this;
        byte compression;
        org.apache.fop.render.afp.modca.ImageContent $r0, $r1;

        this := @this: org.apache.fop.render.afp.modca.ImageSegment;
        compression := @parameter0: byte;
        $r1 = this.<org.apache.fop.render.afp.modca.ImageSegment: org.apache.fop.render.afp.modca.ImageContent imageContent>;
        if $r1 != null goto label0;

        $r0 = new org.apache.fop.render.afp.modca.ImageContent;
        specialinvoke $r0.<org.apache.fop.render.afp.modca.ImageContent: void <init>()>();
        this.<org.apache.fop.render.afp.modca.ImageSegment: org.apache.fop.render.afp.modca.ImageContent imageContent> = $r0;

     label0:
        $r1 = this.<org.apache.fop.render.afp.modca.ImageSegment: org.apache.fop.render.afp.modca.ImageContent imageContent>;
        virtualinvoke $r1.<org.apache.fop.render.afp.modca.ImageContent: void setImageCompression(byte)>(compression);
        return;
    }

    public void setImageIDESize(byte)
    {
        org.apache.fop.render.afp.modca.ImageSegment this;
        byte size;
        org.apache.fop.render.afp.modca.ImageContent $r0, $r1;

        this := @this: org.apache.fop.render.afp.modca.ImageSegment;
        size := @parameter0: byte;
        $r1 = this.<org.apache.fop.render.afp.modca.ImageSegment: org.apache.fop.render.afp.modca.ImageContent imageContent>;
        if $r1 != null goto label0;

        $r0 = new org.apache.fop.render.afp.modca.ImageContent;
        specialinvoke $r0.<org.apache.fop.render.afp.modca.ImageContent: void <init>()>();
        this.<org.apache.fop.render.afp.modca.ImageSegment: org.apache.fop.render.afp.modca.ImageContent imageContent> = $r0;

     label0:
        $r1 = this.<org.apache.fop.render.afp.modca.ImageSegment: org.apache.fop.render.afp.modca.ImageContent imageContent>;
        virtualinvoke $r1.<org.apache.fop.render.afp.modca.ImageContent: void setImageIDESize(byte)>(size);
        return;
    }

    public void setImageIDEColorModel(byte)
    {
        org.apache.fop.render.afp.modca.ImageSegment this;
        byte colorModel;
        org.apache.fop.render.afp.modca.ImageContent $r0, $r1;

        this := @this: org.apache.fop.render.afp.modca.ImageSegment;
        colorModel := @parameter0: byte;
        $r1 = this.<org.apache.fop.render.afp.modca.ImageSegment: org.apache.fop.render.afp.modca.ImageContent imageContent>;
        if $r1 != null goto label0;

        $r0 = new org.apache.fop.render.afp.modca.ImageContent;
        specialinvoke $r0.<org.apache.fop.render.afp.modca.ImageContent: void <init>()>();
        this.<org.apache.fop.render.afp.modca.ImageSegment: org.apache.fop.render.afp.modca.ImageContent imageContent> = $r0;

     label0:
        $r1 = this.<org.apache.fop.render.afp.modca.ImageSegment: org.apache.fop.render.afp.modca.ImageContent imageContent>;
        virtualinvoke $r1.<org.apache.fop.render.afp.modca.ImageContent: void setImageIDEColorModel(byte)>(colorModel);
        return;
    }

    public void setImageData(byte[])
    {
        org.apache.fop.render.afp.modca.ImageSegment this;
        byte[] data;
        org.apache.fop.render.afp.modca.ImageContent $r0, $r1;

        this := @this: org.apache.fop.render.afp.modca.ImageSegment;
        data := @parameter0: byte[];
        $r1 = this.<org.apache.fop.render.afp.modca.ImageSegment: org.apache.fop.render.afp.modca.ImageContent imageContent>;
        if $r1 != null goto label0;

        $r0 = new org.apache.fop.render.afp.modca.ImageContent;
        specialinvoke $r0.<org.apache.fop.render.afp.modca.ImageContent: void <init>()>();
        this.<org.apache.fop.render.afp.modca.ImageSegment: org.apache.fop.render.afp.modca.ImageContent imageContent> = $r0;

     label0:
        $r1 = this.<org.apache.fop.render.afp.modca.ImageSegment: org.apache.fop.render.afp.modca.ImageContent imageContent>;
        virtualinvoke $r1.<org.apache.fop.render.afp.modca.ImageContent: void setImageData(byte[])>(data);
        return;
    }

    public void writeDataStream(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.fop.render.afp.modca.ImageSegment this;
        java.io.OutputStream os;
        org.apache.fop.render.afp.modca.ImageContent $r0;

        this := @this: org.apache.fop.render.afp.modca.ImageSegment;
        os := @parameter0: java.io.OutputStream;
        specialinvoke this.<org.apache.fop.render.afp.modca.ImageSegment: void writeStart(java.io.OutputStream)>(os);
        $r0 = this.<org.apache.fop.render.afp.modca.ImageSegment: org.apache.fop.render.afp.modca.ImageContent imageContent>;
        if $r0 == null goto label0;

        $r0 = this.<org.apache.fop.render.afp.modca.ImageSegment: org.apache.fop.render.afp.modca.ImageContent imageContent>;
        virtualinvoke $r0.<org.apache.fop.render.afp.modca.ImageContent: void writeDataStream(java.io.OutputStream)>(os);

     label0:
        specialinvoke this.<org.apache.fop.render.afp.modca.ImageSegment: void writeEnd(java.io.OutputStream)>(os);
        return;
    }

    private void writeStart(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.fop.render.afp.modca.ImageSegment this;
        java.io.OutputStream os;
        byte[] data, $r0, $r1, $r2;
        int i, $i0;
        byte $b1;

        this := @this: org.apache.fop.render.afp.modca.ImageSegment;
        os := @parameter0: java.io.OutputStream;
        $r0 = newarray (byte)[6];
        $r0[0] = 112;
        $r0[1] = 4;
        $r0[2] = 0;
        $r0[3] = 0;
        $r0[4] = 0;
        $r0[5] = 0;
        data = $r0;
        i = 0;

     label0:
        $r1 = this.<org.apache.fop.render.afp.modca.ImageSegment: byte[] nameBytes>;
        $i0 = lengthof $r1;
        if i >= $i0 goto label1;

        $i0 = 2 + i;
        $r2 = this.<org.apache.fop.render.afp.modca.ImageSegment: byte[] nameBytes>;
        $b1 = $r2[i];
        data[$i0] = $b1;
        i = i + 1;
        goto label0;

     label1:
        virtualinvoke os.<java.io.OutputStream: void write(byte[])>(data);
        return;
    }

    private void writeEnd(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.fop.render.afp.modca.ImageSegment this;
        java.io.OutputStream os;
        byte[] data, $r0;

        this := @this: org.apache.fop.render.afp.modca.ImageSegment;
        os := @parameter0: java.io.OutputStream;
        $r0 = newarray (byte)[2];
        $r0[0] = 113;
        $r0[1] = 0;
        data = $r0;
        virtualinvoke os.<java.io.OutputStream: void write(byte[])>(data);
        return;
    }
}
