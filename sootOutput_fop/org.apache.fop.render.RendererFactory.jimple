public class org.apache.fop.render.RendererFactory extends java.lang.Object
{
    private static org.apache.commons.logging.Log log;
    private java.util.Map rendererMakerMapping;
    private java.util.Map eventHandlerMakerMapping;
    static java.lang.Class class$org$apache$fop$render$RendererFactory;
    static java.lang.Class class$org$apache$fop$render$AbstractRendererMaker;
    static java.lang.Class class$org$apache$fop$render$AbstractFOEventHandlerMaker;
    static java.lang.Class class$org$apache$fop$render$Renderer;
    static java.lang.Class class$org$apache$fop$fo$FOEventHandler;

    public void <init>()
    {
        org.apache.fop.render.RendererFactory this;
        java.util.HashMap $r0;

        this := @this: org.apache.fop.render.RendererFactory;
        specialinvoke this.<java.lang.Object: void <init>()>();
        $r0 = new java.util.HashMap;
        specialinvoke $r0.<java.util.HashMap: void <init>()>();
        this.<org.apache.fop.render.RendererFactory: java.util.Map rendererMakerMapping> = $r0;
        $r0 = new java.util.HashMap;
        specialinvoke $r0.<java.util.HashMap: void <init>()>();
        this.<org.apache.fop.render.RendererFactory: java.util.Map eventHandlerMakerMapping> = $r0;
        specialinvoke this.<org.apache.fop.render.RendererFactory: void discoverRenderers()>();
        specialinvoke this.<org.apache.fop.render.RendererFactory: void discoverFOEventHandlers()>();
        return;
    }

    public void addRendererMaker(org.apache.fop.render.AbstractRendererMaker)
    {
        org.apache.fop.render.RendererFactory this;
        org.apache.fop.render.AbstractRendererMaker maker;
        java.lang.String[] mimes;
        int i, $i0;
        java.util.Map $r0;
        java.lang.String $r1, $r5;
        java.lang.Object $r2;
        org.apache.commons.logging.Log $r3;
        java.lang.StringBuffer $r4;
        java.lang.Class $r6;

        this := @this: org.apache.fop.render.RendererFactory;
        maker := @parameter0: org.apache.fop.render.AbstractRendererMaker;
        mimes = virtualinvoke maker.<org.apache.fop.render.AbstractRendererMaker: java.lang.String[] getSupportedMimeTypes()>();
        i = 0;

     label0:
        $i0 = lengthof mimes;
        if i >= $i0 goto label2;

        $r0 = this.<org.apache.fop.render.RendererFactory: java.util.Map rendererMakerMapping>;
        $r1 = mimes[i];
        $r2 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);
        if $r2 == null goto label1;

        $r3 = <org.apache.fop.render.RendererFactory: org.apache.commons.logging.Log log>;
        $r4 = new java.lang.StringBuffer;
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Overriding renderer for ");
        $r5 = mimes[i];
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" with ");
        $r6 = virtualinvoke maker.<java.lang.Object: java.lang.Class getClass()>();
        $r5 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r1 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r1);

     label1:
        $r0 = this.<org.apache.fop.render.RendererFactory: java.util.Map rendererMakerMapping>;
        $r1 = mimes[i];
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, maker);
        i = i + 1;
        goto label0;

     label2:
        return;
    }

    public void addFOEventHandlerMaker(org.apache.fop.render.AbstractFOEventHandlerMaker)
    {
        org.apache.fop.render.RendererFactory this;
        org.apache.fop.render.AbstractFOEventHandlerMaker maker;
        java.lang.String[] mimes;
        int i, $i0;
        java.util.Map $r0;
        java.lang.String $r1, $r5;
        java.lang.Object $r2;
        org.apache.commons.logging.Log $r3;
        java.lang.StringBuffer $r4;
        java.lang.Class $r6;

        this := @this: org.apache.fop.render.RendererFactory;
        maker := @parameter0: org.apache.fop.render.AbstractFOEventHandlerMaker;
        mimes = virtualinvoke maker.<org.apache.fop.render.AbstractFOEventHandlerMaker: java.lang.String[] getSupportedMimeTypes()>();
        i = 0;

     label0:
        $i0 = lengthof mimes;
        if i >= $i0 goto label2;

        $r0 = this.<org.apache.fop.render.RendererFactory: java.util.Map eventHandlerMakerMapping>;
        $r1 = mimes[i];
        $r2 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);
        if $r2 == null goto label1;

        $r3 = <org.apache.fop.render.RendererFactory: org.apache.commons.logging.Log log>;
        $r4 = new java.lang.StringBuffer;
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Overriding FOEventHandler for ");
        $r5 = mimes[i];
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" with ");
        $r6 = virtualinvoke maker.<java.lang.Object: java.lang.Class getClass()>();
        $r5 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r1 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r1);

     label1:
        $r0 = this.<org.apache.fop.render.RendererFactory: java.util.Map eventHandlerMakerMapping>;
        $r1 = mimes[i];
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, maker);
        i = i + 1;
        goto label0;

     label2:
        return;
    }

    public void addRendererMaker(java.lang.String)
    {
        org.apache.fop.render.RendererFactory this;
        java.lang.String className, $r5, $r11;
        org.apache.fop.render.AbstractRendererMaker makerInstance;
        java.lang.ClassNotFoundException e, $r3;
        java.lang.StringBuffer $r0;
        java.lang.Class $r1, $r10;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r4, $r9;
        java.lang.InstantiationException $r6, e;
        java.lang.IllegalAccessException $r7, e;
        java.lang.ClassCastException $r8, e;

        this := @this: org.apache.fop.render.RendererFactory;
        className := @parameter0: java.lang.String;

     label0:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(className);
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();
        makerInstance = (org.apache.fop.render.AbstractRendererMaker) $r2;
        virtualinvoke this.<org.apache.fop.render.RendererFactory: void addRendererMaker(org.apache.fop.render.AbstractRendererMaker)>(makerInstance);

     label1:
        goto label8;

     label2:
        $r3 := @caughtexception;
        e = $r3;
        $r4 = new java.lang.IllegalArgumentException;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not find ");
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(className);
        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r4;

     label3:
        $r6 := @caughtexception;
        e = $r6;
        $r4 = new java.lang.IllegalArgumentException;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not instantiate ");
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(className);
        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r4;

     label4:
        $r7 := @caughtexception;
        e = $r7;
        $r4 = new java.lang.IllegalArgumentException;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not access ");
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(className);
        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r4;

     label5:
        $r8 := @caughtexception;
        e = $r8;
        $r4 = new java.lang.IllegalArgumentException;
        $r9 = $r4;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(className);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not an ");
        $r10 = <org.apache.fop.render.RendererFactory: java.lang.Class class$org$apache$fop$render$AbstractRendererMaker>;
        if $r10 != null goto label6;

        $r10 = staticinvoke <org.apache.fop.render.RendererFactory: java.lang.Class class$(java.lang.String)>("org.apache.fop.render.AbstractRendererMaker");
        <org.apache.fop.render.RendererFactory: java.lang.Class class$org$apache$fop$render$AbstractRendererMaker> = $r10;
        goto label7;

     label6:
        $r10 = <org.apache.fop.render.RendererFactory: java.lang.Class class$org$apache$fop$render$AbstractRendererMaker>;

     label7:
        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);
        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r4;

     label8:
        return;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
        catch java.lang.InstantiationException from label0 to label1 with label3;
        catch java.lang.IllegalAccessException from label0 to label1 with label4;
        catch java.lang.ClassCastException from label0 to label1 with label5;
    }

    public void addFOEventHandlerMaker(java.lang.String)
    {
        org.apache.fop.render.RendererFactory this;
        java.lang.String className, $r5, $r11;
        org.apache.fop.render.AbstractFOEventHandlerMaker makerInstance;
        java.lang.ClassNotFoundException e, $r3;
        java.lang.StringBuffer $r0;
        java.lang.Class $r1, $r10;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r4, $r9;
        java.lang.InstantiationException $r6, e;
        java.lang.IllegalAccessException $r7, e;
        java.lang.ClassCastException $r8, e;

        this := @this: org.apache.fop.render.RendererFactory;
        className := @parameter0: java.lang.String;

     label0:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(className);
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();
        makerInstance = (org.apache.fop.render.AbstractFOEventHandlerMaker) $r2;
        virtualinvoke this.<org.apache.fop.render.RendererFactory: void addFOEventHandlerMaker(org.apache.fop.render.AbstractFOEventHandlerMaker)>(makerInstance);

     label1:
        goto label8;

     label2:
        $r3 := @caughtexception;
        e = $r3;
        $r4 = new java.lang.IllegalArgumentException;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not find ");
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(className);
        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r4;

     label3:
        $r6 := @caughtexception;
        e = $r6;
        $r4 = new java.lang.IllegalArgumentException;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not instantiate ");
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(className);
        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r4;

     label4:
        $r7 := @caughtexception;
        e = $r7;
        $r4 = new java.lang.IllegalArgumentException;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not access ");
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(className);
        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r4;

     label5:
        $r8 := @caughtexception;
        e = $r8;
        $r4 = new java.lang.IllegalArgumentException;
        $r9 = $r4;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(className);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not an ");
        $r10 = <org.apache.fop.render.RendererFactory: java.lang.Class class$org$apache$fop$render$AbstractFOEventHandlerMaker>;
        if $r10 != null goto label6;

        $r10 = staticinvoke <org.apache.fop.render.RendererFactory: java.lang.Class class$(java.lang.String)>("org.apache.fop.render.AbstractFOEventHandlerMaker");
        <org.apache.fop.render.RendererFactory: java.lang.Class class$org$apache$fop$render$AbstractFOEventHandlerMaker> = $r10;
        goto label7;

     label6:
        $r10 = <org.apache.fop.render.RendererFactory: java.lang.Class class$org$apache$fop$render$AbstractFOEventHandlerMaker>;

     label7:
        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);
        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r4;

     label8:
        return;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
        catch java.lang.InstantiationException from label0 to label1 with label3;
        catch java.lang.IllegalAccessException from label0 to label1 with label4;
        catch java.lang.ClassCastException from label0 to label1 with label5;
    }

    public org.apache.fop.render.AbstractRendererMaker getRendererMaker(java.lang.String)
    {
        org.apache.fop.render.RendererFactory this;
        java.lang.String mime;
        org.apache.fop.render.AbstractRendererMaker maker;
        java.util.Map $r0;
        java.lang.Object $r1;

        this := @this: org.apache.fop.render.RendererFactory;
        mime := @parameter0: java.lang.String;
        $r0 = this.<org.apache.fop.render.RendererFactory: java.util.Map rendererMakerMapping>;
        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(mime);
        maker = (org.apache.fop.render.AbstractRendererMaker) $r1;
        return maker;
    }

    public org.apache.fop.render.AbstractFOEventHandlerMaker getFOEventHandlerMaker(java.lang.String)
    {
        org.apache.fop.render.RendererFactory this;
        java.lang.String mime;
        org.apache.fop.render.AbstractFOEventHandlerMaker maker;
        java.util.Map $r0;
        java.lang.Object $r1;

        this := @this: org.apache.fop.render.RendererFactory;
        mime := @parameter0: java.lang.String;
        $r0 = this.<org.apache.fop.render.RendererFactory: java.util.Map eventHandlerMakerMapping>;
        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(mime);
        maker = (org.apache.fop.render.AbstractFOEventHandlerMaker) $r1;
        return maker;
    }

    public org.apache.fop.render.Renderer createRenderer(org.apache.fop.apps.FOUserAgent, java.lang.String) throws org.apache.fop.apps.FOPException
    {
        org.apache.fop.render.RendererFactory this;
        org.apache.fop.apps.FOUserAgent userAgent;
        java.lang.String outputFormat, $r3;
        org.apache.fop.render.AbstractRendererMaker maker;
        java.lang.StringBuffer $r0;
        org.apache.fop.render.Renderer rend, $r1;
        org.apache.fop.render.RendererConfigurator configurator;
        java.lang.UnsupportedOperationException $r2;

        this := @this: org.apache.fop.render.RendererFactory;
        userAgent := @parameter0: org.apache.fop.apps.FOUserAgent;
        outputFormat := @parameter1: java.lang.String;
        $r1 = virtualinvoke userAgent.<org.apache.fop.apps.FOUserAgent: org.apache.fop.render.Renderer getRendererOverride()>();
        if $r1 == null goto label0;

        $r1 = virtualinvoke userAgent.<org.apache.fop.apps.FOUserAgent: org.apache.fop.render.Renderer getRendererOverride()>();
        return $r1;

     label0:
        maker = virtualinvoke this.<org.apache.fop.render.RendererFactory: org.apache.fop.render.AbstractRendererMaker getRendererMaker(java.lang.String)>(outputFormat);
        if maker != null goto label1;

        $r2 = new java.lang.UnsupportedOperationException;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No renderer for the requested format available: ");
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(outputFormat);
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r3);
        throw $r2;

     label1:
        rend = virtualinvoke maker.<org.apache.fop.render.AbstractRendererMaker: org.apache.fop.render.Renderer makeRenderer(org.apache.fop.apps.FOUserAgent)>(userAgent);
        interfaceinvoke rend.<org.apache.fop.render.Renderer: void setUserAgent(org.apache.fop.apps.FOUserAgent)>(userAgent);
        configurator = virtualinvoke maker.<org.apache.fop.render.AbstractRendererMaker: org.apache.fop.render.RendererConfigurator getConfigurator(org.apache.fop.apps.FOUserAgent)>(userAgent);
        if configurator == null goto label2;

        interfaceinvoke configurator.<org.apache.fop.render.RendererConfigurator: void configure(org.apache.fop.render.Renderer)>(rend);

     label2:
        return rend;
    }

    public org.apache.fop.fo.FOEventHandler createFOEventHandler(org.apache.fop.apps.FOUserAgent, java.lang.String, java.io.OutputStream) throws org.apache.fop.apps.FOPException
    {
        org.apache.fop.render.RendererFactory this;
        org.apache.fop.apps.FOUserAgent userAgent;
        java.lang.String outputFormat, $r4;
        java.io.OutputStream out;
        org.apache.fop.render.AbstractFOEventHandlerMaker maker;
        org.apache.fop.render.AbstractRendererMaker rendMaker;
        java.lang.StringBuffer $r0;
        org.apache.fop.fo.FOEventHandler $r1;
        org.apache.fop.render.Renderer $r2;
        java.lang.UnsupportedOperationException $r3;
        boolean $z0;
        org.apache.fop.apps.FOPException $r5;
        org.apache.fop.area.AreaTreeHandler $r6;

        this := @this: org.apache.fop.render.RendererFactory;
        userAgent := @parameter0: org.apache.fop.apps.FOUserAgent;
        outputFormat := @parameter1: java.lang.String;
        out := @parameter2: java.io.OutputStream;
        $r1 = virtualinvoke userAgent.<org.apache.fop.apps.FOUserAgent: org.apache.fop.fo.FOEventHandler getFOEventHandlerOverride()>();
        if $r1 == null goto label0;

        $r1 = virtualinvoke userAgent.<org.apache.fop.apps.FOUserAgent: org.apache.fop.fo.FOEventHandler getFOEventHandlerOverride()>();
        return $r1;

     label0:
        maker = virtualinvoke this.<org.apache.fop.render.RendererFactory: org.apache.fop.render.AbstractFOEventHandlerMaker getFOEventHandlerMaker(java.lang.String)>(outputFormat);
        if maker != null goto label3;

        rendMaker = virtualinvoke this.<org.apache.fop.render.RendererFactory: org.apache.fop.render.AbstractRendererMaker getRendererMaker(java.lang.String)>(outputFormat);
        if rendMaker != null goto label1;

        $r2 = virtualinvoke userAgent.<org.apache.fop.apps.FOUserAgent: org.apache.fop.render.Renderer getRendererOverride()>();
        if $r2 != null goto label1;

        $r3 = new java.lang.UnsupportedOperationException;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Don\'t know how to handle \"");
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(outputFormat);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" as an output format. Neither an FOEventHandler, nor a Renderer could be found for this output format.");
        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r4);
        throw $r3;

     label1:
        if out != null goto label2;

        $r2 = virtualinvoke userAgent.<org.apache.fop.apps.FOUserAgent: org.apache.fop.render.Renderer getRendererOverride()>();
        if $r2 != null goto label2;

        $z0 = virtualinvoke rendMaker.<org.apache.fop.render.AbstractRendererMaker: boolean needsOutputStream()>();
        if $z0 == 0 goto label2;

        $r5 = new org.apache.fop.apps.FOPException;
        specialinvoke $r5.<org.apache.fop.apps.FOPException: void <init>(java.lang.String)>("OutputStream has not been set");
        throw $r5;

     label2:
        $r6 = new org.apache.fop.area.AreaTreeHandler;
        specialinvoke $r6.<org.apache.fop.area.AreaTreeHandler: void <init>(org.apache.fop.apps.FOUserAgent,java.lang.String,java.io.OutputStream)>(userAgent, outputFormat, out);
        return $r6;

     label3:
        $r1 = virtualinvoke maker.<org.apache.fop.render.AbstractFOEventHandlerMaker: org.apache.fop.fo.FOEventHandler makeFOEventHandler(org.apache.fop.apps.FOUserAgent,java.io.OutputStream)>(userAgent, out);
        return $r1;
    }

    public java.lang.String[] listSupportedMimeTypes()
    {
        org.apache.fop.render.RendererFactory this;
        java.util.ArrayList $r0, lst;
        java.util.Iterator iter;
        java.util.Map $r1;
        java.util.Set $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.String $r4;
        int $i0;
        java.lang.String[] $r5, $r7;
        java.lang.Object[] $r6;

        this := @this: org.apache.fop.render.RendererFactory;
        $r0 = new java.util.ArrayList;
        specialinvoke $r0.<java.util.ArrayList: void <init>()>();
        lst = $r0;
        $r1 = this.<org.apache.fop.render.RendererFactory: java.util.Map rendererMakerMapping>;
        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();
        iter = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();
        $r4 = (java.lang.String) $r3;
        interfaceinvoke lst.<java.util.List: boolean add(java.lang.Object)>($r4);
        goto label0;

     label1:
        $r1 = this.<org.apache.fop.render.RendererFactory: java.util.Map eventHandlerMakerMapping>;
        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();
        iter = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();
        $r4 = (java.lang.String) $r3;
        interfaceinvoke lst.<java.util.List: boolean add(java.lang.Object)>($r4);
        goto label2;

     label3:
        staticinvoke <java.util.Collections: void sort(java.util.List)>(lst);
        $i0 = interfaceinvoke lst.<java.util.List: int size()>();
        $r5 = newarray (java.lang.String)[$i0];
        $r6 = interfaceinvoke lst.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);
        $r7 = (java.lang.String[]) $r6;
        $r7 = (java.lang.String[]) $r7;
        return $r7;
    }

    private void discoverRenderers()
    {
        org.apache.fop.render.RendererFactory this;
        java.lang.Class $r0, $r4;
        java.util.Iterator providers;
        org.apache.fop.render.AbstractRendererMaker maker;
        java.lang.IllegalArgumentException e, $r7;
        boolean $z0;
        java.lang.Object $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.StringBuffer $r3;
        java.lang.String $r5, $r6;

        this := @this: org.apache.fop.render.RendererFactory;
        $r0 = <org.apache.fop.render.RendererFactory: java.lang.Class class$org$apache$fop$render$Renderer>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.fop.render.RendererFactory: java.lang.Class class$(java.lang.String)>("org.apache.fop.render.Renderer");
        <org.apache.fop.render.RendererFactory: java.lang.Class class$org$apache$fop$render$Renderer> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.fop.render.RendererFactory: java.lang.Class class$org$apache$fop$render$Renderer>;

     label1:
        providers = staticinvoke <org.apache.xmlgraphics.util.Service: java.util.Iterator providers(java.lang.Class)>($r0);
        if providers == null goto label8;

     label2:
        $z0 = interfaceinvoke providers.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label8;

        $r1 = interfaceinvoke providers.<java.util.Iterator: java.lang.Object next()>();
        maker = (org.apache.fop.render.AbstractRendererMaker) $r1;

     label3:
        $r2 = <org.apache.fop.render.RendererFactory: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label4;

        $r2 = <org.apache.fop.render.RendererFactory: org.apache.commons.logging.Log log>;
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Dynamically adding maker for Renderer: ");
        $r4 = virtualinvoke maker.<java.lang.Object: java.lang.Class getClass()>();
        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r6);

     label4:
        virtualinvoke this.<org.apache.fop.render.RendererFactory: void addRendererMaker(org.apache.fop.render.AbstractRendererMaker)>(maker);

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;
        e = $r7;
        $r2 = <org.apache.fop.render.RendererFactory: org.apache.commons.logging.Log log>;
        interfaceinvoke $r2.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("Error while adding maker for Renderer", e);

     label7:
        goto label2;

     label8:
        return;

        catch java.lang.IllegalArgumentException from label3 to label5 with label6;
    }

    private void discoverFOEventHandlers()
    {
        org.apache.fop.render.RendererFactory this;
        java.lang.Class $r0, $r4;
        java.util.Iterator providers;
        org.apache.fop.render.AbstractFOEventHandlerMaker maker;
        java.lang.IllegalArgumentException e, $r7;
        boolean $z0;
        java.lang.Object $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.StringBuffer $r3;
        java.lang.String $r5, $r6;

        this := @this: org.apache.fop.render.RendererFactory;
        $r0 = <org.apache.fop.render.RendererFactory: java.lang.Class class$org$apache$fop$fo$FOEventHandler>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.fop.render.RendererFactory: java.lang.Class class$(java.lang.String)>("org.apache.fop.fo.FOEventHandler");
        <org.apache.fop.render.RendererFactory: java.lang.Class class$org$apache$fop$fo$FOEventHandler> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.fop.render.RendererFactory: java.lang.Class class$org$apache$fop$fo$FOEventHandler>;

     label1:
        providers = staticinvoke <org.apache.xmlgraphics.util.Service: java.util.Iterator providers(java.lang.Class)>($r0);
        if providers == null goto label8;

     label2:
        $z0 = interfaceinvoke providers.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label8;

        $r1 = interfaceinvoke providers.<java.util.Iterator: java.lang.Object next()>();
        maker = (org.apache.fop.render.AbstractFOEventHandlerMaker) $r1;

     label3:
        $r2 = <org.apache.fop.render.RendererFactory: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label4;

        $r2 = <org.apache.fop.render.RendererFactory: org.apache.commons.logging.Log log>;
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Dynamically adding maker for FOEventHandler: ");
        $r4 = virtualinvoke maker.<java.lang.Object: java.lang.Class getClass()>();
        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r6);

     label4:
        virtualinvoke this.<org.apache.fop.render.RendererFactory: void addFOEventHandlerMaker(org.apache.fop.render.AbstractFOEventHandlerMaker)>(maker);

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;
        e = $r7;
        $r2 = <org.apache.fop.render.RendererFactory: org.apache.commons.logging.Log log>;
        interfaceinvoke $r2.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("Error while adding maker for FOEventHandler", e);

     label7:
        goto label2;

     label8:
        return;

        catch java.lang.IllegalArgumentException from label3 to label5 with label6;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException l1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        l1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(l1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.apache.commons.logging.Log $r1;

        $r0 = <org.apache.fop.render.RendererFactory: java.lang.Class class$org$apache$fop$render$RendererFactory>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.fop.render.RendererFactory: java.lang.Class class$(java.lang.String)>("org.apache.fop.render.RendererFactory");
        <org.apache.fop.render.RendererFactory: java.lang.Class class$org$apache$fop$render$RendererFactory> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.fop.render.RendererFactory: java.lang.Class class$org$apache$fop$render$RendererFactory>;

     label1:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r0);
        <org.apache.fop.render.RendererFactory: org.apache.commons.logging.Log log> = $r1;
        return;
    }
}
