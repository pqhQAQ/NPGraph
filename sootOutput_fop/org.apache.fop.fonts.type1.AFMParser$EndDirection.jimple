class org.apache.fop.fonts.type1.AFMParser$EndDirection extends org.apache.fop.fonts.type1.AFMParser$AbstractValueHandler
{

    private void <init>()
    {
        org.apache.fop.fonts.type1.AFMParser$EndDirection this;

        this := @this: org.apache.fop.fonts.type1.AFMParser$EndDirection;
        specialinvoke this.<org.apache.fop.fonts.type1.AFMParser$AbstractValueHandler: void <init>(org.apache.fop.fonts.type1.AFMParser$1)>(null);
        return;
    }

    public void parse(java.lang.String, int, java.util.Stack) throws java.io.IOException
    {
        org.apache.fop.fonts.type1.AFMParser$EndDirection this;
        java.lang.String line;
        int startpos;
        java.util.Stack stack;
        java.lang.Object $r0;
        boolean $z0;
        java.io.IOException $r1;

        this := @this: org.apache.fop.fonts.type1.AFMParser$EndDirection;
        line := @parameter0: java.lang.String;
        startpos := @parameter1: int;
        stack := @parameter2: java.util.Stack;
        $r0 = virtualinvoke stack.<java.util.Stack: java.lang.Object pop()>();
        $z0 = $r0 instanceof org.apache.fop.fonts.type1.AFMWritingDirectionMetrics;
        if $z0 != 0 goto label0;

        $r1 = new java.io.IOException;
        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("AFM format error: nesting incorrect");
        throw $r1;

     label0:
        return;
    }

    void <init>(org.apache.fop.fonts.type1.AFMParser$1)
    {
        org.apache.fop.fonts.type1.AFMParser$EndDirection this;
        org.apache.fop.fonts.type1.AFMParser$1 x0;

        this := @this: org.apache.fop.fonts.type1.AFMParser$EndDirection;
        x0 := @parameter0: org.apache.fop.fonts.type1.AFMParser$1;
        specialinvoke this.<org.apache.fop.fonts.type1.AFMParser$EndDirection: void <init>()>();
        return;
    }
}
