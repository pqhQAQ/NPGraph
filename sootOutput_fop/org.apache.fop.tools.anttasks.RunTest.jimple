public class org.apache.fop.tools.anttasks.RunTest extends org.apache.tools.ant.Task
{
    private java.lang.String basedir;
    private java.lang.String testsuite;
    private java.lang.String referenceJar;
    private java.lang.String refVersion;
    static java.lang.Class class$java$lang$String;

    public void <init>()
    {
        org.apache.fop.tools.anttasks.RunTest this;

        this := @this: org.apache.fop.tools.anttasks.RunTest;
        specialinvoke this.<org.apache.tools.ant.Task: void <init>()>();
        this.<org.apache.fop.tools.anttasks.RunTest: java.lang.String testsuite> = "";
        this.<org.apache.fop.tools.anttasks.RunTest: java.lang.String referenceJar> = "";
        this.<org.apache.fop.tools.anttasks.RunTest: java.lang.String refVersion> = "";
        return;
    }

    public void setTestSuite(java.lang.String)
    {
        org.apache.fop.tools.anttasks.RunTest this;
        java.lang.String str;

        this := @this: org.apache.fop.tools.anttasks.RunTest;
        str := @parameter0: java.lang.String;
        this.<org.apache.fop.tools.anttasks.RunTest: java.lang.String testsuite> = str;
        return;
    }

    public void setBasedir(java.lang.String)
    {
        org.apache.fop.tools.anttasks.RunTest this;
        java.lang.String str;

        this := @this: org.apache.fop.tools.anttasks.RunTest;
        str := @parameter0: java.lang.String;
        this.<org.apache.fop.tools.anttasks.RunTest: java.lang.String basedir> = str;
        return;
    }

    public void setReference(java.lang.String)
    {
        org.apache.fop.tools.anttasks.RunTest this;
        java.lang.String str;

        this := @this: org.apache.fop.tools.anttasks.RunTest;
        str := @parameter0: java.lang.String;
        this.<org.apache.fop.tools.anttasks.RunTest: java.lang.String referenceJar> = str;
        return;
    }

    public void setRefVersion(java.lang.String)
    {
        org.apache.fop.tools.anttasks.RunTest this;
        java.lang.String str;

        this := @this: org.apache.fop.tools.anttasks.RunTest;
        str := @parameter0: java.lang.String;
        this.<org.apache.fop.tools.anttasks.RunTest: java.lang.String refVersion> = str;
        return;
    }

    public void execute() throws org.apache.tools.ant.BuildException
    {
        org.apache.fop.tools.anttasks.RunTest this;

        this := @this: org.apache.fop.tools.anttasks.RunTest;
        virtualinvoke this.<org.apache.fop.tools.anttasks.RunTest: void runReference()>();
        virtualinvoke this.<org.apache.fop.tools.anttasks.RunTest: void testNewBuild()>();
        return;
    }

    protected void testNewBuild()
    {
        org.apache.fop.tools.anttasks.RunTest this;
        java.net.URLClassLoader $r0, loader;
        java.util.Map diff;
        boolean broke, $z0;
        java.util.Iterator keys;
        java.lang.Object fname, $r4;
        java.lang.Boolean pass;
        java.net.MalformedURLException mue, $r8;
        java.net.URL[] $r1;
        java.io.PrintStream $r2;
        java.util.Set $r3;
        java.lang.StringBuffer $r5;
        java.lang.String $r6;
        org.apache.tools.ant.BuildException $r7;

        this := @this: org.apache.fop.tools.anttasks.RunTest;

     label0:
        $r0 = new java.net.URLClassLoader;
        $r1 = specialinvoke this.<org.apache.fop.tools.anttasks.RunTest: java.net.URL[] createUrls(java.lang.String)>("build/fop.jar");
        specialinvoke $r0.<java.net.URLClassLoader: void <init>(java.net.URL[])>($r1);
        loader = $r0;
        diff = virtualinvoke this.<org.apache.fop.tools.anttasks.RunTest: java.util.Map runConverter(java.lang.ClassLoader,java.lang.String,java.lang.String)>(loader, "areatree", "reference/output/");
        if diff == null goto label4;

        $z0 = interfaceinvoke diff.<java.util.Map: boolean isEmpty()>();
        if $z0 != 0 goto label4;

        $r2 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("====================================");
        $r2 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("The following files differ:");
        broke = 0;
        $r3 = interfaceinvoke diff.<java.util.Map: java.util.Set keySet()>();
        keys = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke keys.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        fname = interfaceinvoke keys.<java.util.Iterator: java.lang.Object next()>();
        $r4 = interfaceinvoke diff.<java.util.Map: java.lang.Object get(java.lang.Object)>(fname);
        pass = (java.lang.Boolean) $r4;
        $r2 = <java.lang.System: java.io.PrintStream out>;
        $r5 = new java.lang.StringBuffer;
        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("file: ");
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(fname);
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" - reference success: ");
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(pass);
        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);
        $z0 = virtualinvoke pass.<java.lang.Boolean: boolean booleanValue()>();
        if $z0 == 0 goto label2;

        broke = 1;

     label2:
        goto label1;

     label3:
        if broke == 0 goto label4;

        $r7 = new org.apache.tools.ant.BuildException;
        specialinvoke $r7.<org.apache.tools.ant.BuildException: void <init>(java.lang.String)>("Working tests have been changed.");
        throw $r7;

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;
        mue = $r8;
        virtualinvoke mue.<java.net.MalformedURLException: void printStackTrace()>();

     label6:
        return;

        catch java.net.MalformedURLException from label0 to label4 with label5;
    }

    protected void runReference() throws org.apache.tools.ant.BuildException
    {
        org.apache.fop.tools.anttasks.RunTest this;
        java.io.File $r0, f;
        java.lang.StringBuffer $r1;
        java.net.URLClassLoader loader, $r4;
        boolean failed, $z0;
        java.lang.Class cla;
        java.lang.reflect.Method get;
        java.lang.IllegalAccessException iae, $r11;
        java.lang.IllegalArgumentException are, $r12;
        java.net.MalformedURLException mue, $r17;
        java.lang.String $r2, $r3, $r9;
        java.net.URL[] $r5;
        java.lang.Class[] $r6;
        java.lang.Object[] $r7;
        java.lang.Object $r8;
        org.apache.tools.ant.BuildException $r10;
        java.lang.reflect.InvocationTargetException $r13, are;
        java.lang.ClassNotFoundException $r14, are;
        java.lang.NoSuchMethodException $r15, are;

        this := @this: org.apache.fop.tools.anttasks.RunTest;
        $r0 = new java.io.File;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r2 = this.<org.apache.fop.tools.anttasks.RunTest: java.lang.String basedir>;
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/reference/output/");
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r3);
        f = $r0;

     label0:
        $r4 = new java.net.URLClassLoader;
        $r2 = this.<org.apache.fop.tools.anttasks.RunTest: java.lang.String referenceJar>;
        $r5 = specialinvoke this.<org.apache.fop.tools.anttasks.RunTest: java.net.URL[] createUrls(java.lang.String)>($r2);
        specialinvoke $r4.<java.net.URLClassLoader: void <init>(java.net.URL[])>($r5);
        loader = $r4;
        failed = 0;

     label1:
        cla = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.apache.fop.apps.Fop", 1, loader);
        $r6 = newarray (java.lang.Class)[0];
        get = virtualinvoke cla.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getVersion", $r6);
        $r7 = newarray (java.lang.Object)[0];
        $r8 = virtualinvoke get.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r7);
        $r9 = this.<org.apache.fop.tools.anttasks.RunTest: java.lang.String refVersion>;
        $z0 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r9);
        if $z0 != 0 goto label2;

        $r10 = new org.apache.tools.ant.BuildException;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Reference jar is not correct version it must be: ");
        $r2 = this.<org.apache.fop.tools.anttasks.RunTest: java.lang.String refVersion>;
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r10.<org.apache.tools.ant.BuildException: void <init>(java.lang.String)>($r3);
        throw $r10;

     label2:
        goto label8;

     label3:
        $r11 := @caughtexception;
        iae = $r11;
        failed = 1;
        goto label8;

     label4:
        $r12 := @caughtexception;
        are = $r12;
        failed = 1;
        goto label8;

     label5:
        $r13 := @caughtexception;
        are = $r13;
        failed = 1;
        goto label8;

     label6:
        $r14 := @caughtexception;
        are = $r14;
        failed = 1;
        goto label8;

     label7:
        $r15 := @caughtexception;
        are = $r15;
        failed = 1;

     label8:
        if failed == 0 goto label9;

        $r10 = new org.apache.tools.ant.BuildException;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Reference jar could not be found in: ");
        $r2 = this.<org.apache.fop.tools.anttasks.RunTest: java.lang.String basedir>;
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/reference/");
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r10.<org.apache.tools.ant.BuildException: void <init>(java.lang.String)>($r3);
        throw $r10;

     label9:
        virtualinvoke f.<java.io.File: boolean mkdirs()>();
        virtualinvoke this.<org.apache.fop.tools.anttasks.RunTest: java.util.Map runConverter(java.lang.ClassLoader,java.lang.String,java.lang.String)>(loader, "reference/output/", null);

     label10:
        goto label12;

     label11:
        $r17 := @caughtexception;
        mue = $r17;
        virtualinvoke mue.<java.net.MalformedURLException: void printStackTrace()>();

     label12:
        return;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
        catch java.lang.ClassNotFoundException from label1 to label2 with label6;
        catch java.lang.NoSuchMethodException from label1 to label2 with label7;
        catch java.net.MalformedURLException from label0 to label10 with label11;
    }

    protected java.util.Map runConverter(java.lang.ClassLoader, java.lang.String, java.lang.String)
    {
        org.apache.fop.tools.anttasks.RunTest this;
        java.lang.ClassLoader loader;
        java.lang.String dest, compDir, converter, $r3, $r6;
        java.util.Map diff;
        java.lang.Class cla, $r1;
        java.lang.Object tc, $r7;
        java.lang.Class[] $r0, $r4;
        byte $b0;
        java.lang.reflect.Method meth;
        java.lang.Exception e, $r8;
        java.lang.Object[] $r5;

        this := @this: org.apache.fop.tools.anttasks.RunTest;
        loader := @parameter0: java.lang.ClassLoader;
        dest := @parameter1: java.lang.String;
        compDir := @parameter2: java.lang.String;
        converter = "org.apache.fop.tools.TestConverter";
        diff = null;

     label0:
        cla = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(converter, 1, loader);
        tc = virtualinvoke cla.<java.lang.Class: java.lang.Object newInstance()>();
        $r3 = "setBaseDir";
        $r4 = newarray (java.lang.Class)[1];
        $r0 = $r4;
        $b0 = 0;
        $r1 = <org.apache.fop.tools.anttasks.RunTest: java.lang.Class class$java$lang$String>;
        if $r1 != null goto label1;

        $r1 = staticinvoke <org.apache.fop.tools.anttasks.RunTest: java.lang.Class class$(java.lang.String)>("java.lang.String");
        <org.apache.fop.tools.anttasks.RunTest: java.lang.Class class$java$lang$String> = $r1;
        goto label2;

     label1:
        $r1 = <org.apache.fop.tools.anttasks.RunTest: java.lang.Class class$java$lang$String>;

     label2:
        $r0[$b0] = $r1;
        meth = virtualinvoke cla.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r3, $r4);
        $r5 = newarray (java.lang.Object)[1];
        $r6 = this.<org.apache.fop.tools.anttasks.RunTest: java.lang.String basedir>;
        $r5[0] = $r6;
        virtualinvoke meth.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(tc, $r5);
        $r3 = "runTests";
        $r4 = newarray (java.lang.Class)[3];
        $r0 = $r4;
        $b0 = 0;
        $r1 = <org.apache.fop.tools.anttasks.RunTest: java.lang.Class class$java$lang$String>;
        if $r1 != null goto label3;

        $r1 = staticinvoke <org.apache.fop.tools.anttasks.RunTest: java.lang.Class class$(java.lang.String)>("java.lang.String");
        <org.apache.fop.tools.anttasks.RunTest: java.lang.Class class$java$lang$String> = $r1;
        goto label4;

     label3:
        $r1 = <org.apache.fop.tools.anttasks.RunTest: java.lang.Class class$java$lang$String>;

     label4:
        $r0[$b0] = $r1;
        $r0 = $r4;
        $b0 = 1;
        $r1 = <org.apache.fop.tools.anttasks.RunTest: java.lang.Class class$java$lang$String>;
        if $r1 != null goto label5;

        $r1 = staticinvoke <org.apache.fop.tools.anttasks.RunTest: java.lang.Class class$(java.lang.String)>("java.lang.String");
        <org.apache.fop.tools.anttasks.RunTest: java.lang.Class class$java$lang$String> = $r1;
        goto label6;

     label5:
        $r1 = <org.apache.fop.tools.anttasks.RunTest: java.lang.Class class$java$lang$String>;

     label6:
        $r0[$b0] = $r1;
        $r0 = $r4;
        $b0 = 2;
        $r1 = <org.apache.fop.tools.anttasks.RunTest: java.lang.Class class$java$lang$String>;
        if $r1 != null goto label7;

        $r1 = staticinvoke <org.apache.fop.tools.anttasks.RunTest: java.lang.Class class$(java.lang.String)>("java.lang.String");
        <org.apache.fop.tools.anttasks.RunTest: java.lang.Class class$java$lang$String> = $r1;
        goto label8;

     label7:
        $r1 = <org.apache.fop.tools.anttasks.RunTest: java.lang.Class class$java$lang$String>;

     label8:
        $r0[$b0] = $r1;
        meth = virtualinvoke cla.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r3, $r4);
        $r5 = newarray (java.lang.Object)[3];
        $r6 = this.<org.apache.fop.tools.anttasks.RunTest: java.lang.String testsuite>;
        $r5[0] = $r6;
        $r5[1] = dest;
        $r5[2] = compDir;
        $r7 = virtualinvoke meth.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(tc, $r5);
        diff = (java.util.Map) $r7;

     label9:
        goto label11;

     label10:
        $r8 := @caughtexception;
        e = $r8;
        virtualinvoke e.<java.lang.Exception: void printStackTrace()>();

     label11:
        return diff;

        catch java.lang.Exception from label0 to label9 with label10;
    }

    private java.net.URL[] createUrls(java.lang.String) throws java.net.MalformedURLException
    {
        org.apache.fop.tools.anttasks.RunTest this;
        java.lang.String mainJar, $r4;
        java.util.ArrayList $r0, urls;
        java.io.File[] libFiles;
        int i, $i0;
        java.io.File $r1, $r3;
        java.net.URL $r2;
        boolean $z0;
        java.net.URL[] $r5, $r7;
        java.lang.Object[] $r6;

        this := @this: org.apache.fop.tools.anttasks.RunTest;
        mainJar := @parameter0: java.lang.String;
        $r0 = new java.util.ArrayList;
        specialinvoke $r0.<java.util.ArrayList: void <init>()>();
        urls = $r0;
        $r1 = new java.io.File;
        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(mainJar);
        $r2 = virtualinvoke $r1.<java.io.File: java.net.URL toURL()>();
        virtualinvoke urls.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);
        $r3 = new java.io.File;
        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>("lib");
        libFiles = virtualinvoke $r3.<java.io.File: java.io.File[] listFiles()>();
        i = 0;

     label0:
        $i0 = lengthof libFiles;
        if i >= $i0 goto label2;

        $r3 = libFiles[i];
        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getPath()>();
        $z0 = virtualinvoke $r4.<java.lang.String: boolean endsWith(java.lang.String)>(".jar");
        if $z0 == 0 goto label1;

        $r1 = libFiles[i];
        $r2 = virtualinvoke $r1.<java.io.File: java.net.URL toURL()>();
        virtualinvoke urls.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

     label1:
        i = i + 1;
        goto label0;

     label2:
        $i0 = virtualinvoke urls.<java.util.ArrayList: int size()>();
        $r5 = newarray (java.net.URL)[$i0];
        $r6 = virtualinvoke urls.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r5);
        $r7 = (java.net.URL[]) $r6;
        $r7 = (java.net.URL[]) $r7;
        return $r7;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException l1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        l1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(l1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }
}
