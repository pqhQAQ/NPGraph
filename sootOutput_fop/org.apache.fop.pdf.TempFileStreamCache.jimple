public class org.apache.fop.pdf.TempFileStreamCache extends java.lang.Object implements org.apache.fop.pdf.StreamCache
{
    private java.io.OutputStream output;
    private java.io.File tempFile;

    public void <init>() throws java.io.IOException
    {
        org.apache.fop.pdf.TempFileStreamCache this;
        java.io.File $r0, $r1;

        this := @this: org.apache.fop.pdf.TempFileStreamCache;
        specialinvoke this.<java.lang.Object: void <init>()>();
        $r0 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("org.apache.fop.pdf.StreamCache-", ".temp");
        this.<org.apache.fop.pdf.TempFileStreamCache: java.io.File tempFile> = $r0;
        $r1 = this.<org.apache.fop.pdf.TempFileStreamCache: java.io.File tempFile>;
        virtualinvoke $r1.<java.io.File: void deleteOnExit()>();
        return;
    }

    public java.io.OutputStream getOutputStream() throws java.io.IOException
    {
        org.apache.fop.pdf.TempFileStreamCache this;
        java.io.BufferedOutputStream $r0;
        java.io.FileOutputStream $r1;
        java.io.OutputStream $r2;
        java.io.File $r3;

        this := @this: org.apache.fop.pdf.TempFileStreamCache;
        $r2 = this.<org.apache.fop.pdf.TempFileStreamCache: java.io.OutputStream output>;
        if $r2 != null goto label0;

        $r0 = new java.io.BufferedOutputStream;
        $r1 = new java.io.FileOutputStream;
        $r3 = this.<org.apache.fop.pdf.TempFileStreamCache: java.io.File tempFile>;
        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.io.File)>($r3);
        specialinvoke $r0.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r1);
        this.<org.apache.fop.pdf.TempFileStreamCache: java.io.OutputStream output> = $r0;

     label0:
        $r2 = this.<org.apache.fop.pdf.TempFileStreamCache: java.io.OutputStream output>;
        return $r2;
    }

    public void write(byte[]) throws java.io.IOException
    {
        org.apache.fop.pdf.TempFileStreamCache this;
        byte[] data;
        java.io.OutputStream $r0;

        this := @this: org.apache.fop.pdf.TempFileStreamCache;
        data := @parameter0: byte[];
        $r0 = virtualinvoke this.<org.apache.fop.pdf.TempFileStreamCache: java.io.OutputStream getOutputStream()>();
        virtualinvoke $r0.<java.io.OutputStream: void write(byte[])>(data);
        return;
    }

    public int outputContents(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.fop.pdf.TempFileStreamCache this;
        java.io.OutputStream out, $r0;
        java.io.FileInputStream input, $r1;
        int l3;
        java.lang.Throwable l4, $r3;
        java.io.File $r2;

        this := @this: org.apache.fop.pdf.TempFileStreamCache;
        out := @parameter0: java.io.OutputStream;
        $r0 = this.<org.apache.fop.pdf.TempFileStreamCache: java.io.OutputStream output>;
        if $r0 != null goto label0;

        return 0;

     label0:
        $r0 = this.<org.apache.fop.pdf.TempFileStreamCache: java.io.OutputStream output>;
        virtualinvoke $r0.<java.io.OutputStream: void close()>();
        this.<org.apache.fop.pdf.TempFileStreamCache: java.io.OutputStream output> = null;
        $r1 = new java.io.FileInputStream;
        $r2 = this.<org.apache.fop.pdf.TempFileStreamCache: java.io.File tempFile>;
        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>($r2);
        input = $r1;

     label1:
        l3 = staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(input, out);

     label2:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(input);
        return l3;

     label3:
        $r3 := @caughtexception;

     label4:
        l4 = $r3;

     label5:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(input);
        throw l4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getSize() throws java.io.IOException
    {
        org.apache.fop.pdf.TempFileStreamCache this;
        java.io.OutputStream $r0;
        java.io.File $r1;
        long $l0;
        int $i1;

        this := @this: org.apache.fop.pdf.TempFileStreamCache;
        $r0 = this.<org.apache.fop.pdf.TempFileStreamCache: java.io.OutputStream output>;
        if $r0 == null goto label0;

        $r0 = this.<org.apache.fop.pdf.TempFileStreamCache: java.io.OutputStream output>;
        virtualinvoke $r0.<java.io.OutputStream: void flush()>();

     label0:
        $r1 = this.<org.apache.fop.pdf.TempFileStreamCache: java.io.File tempFile>;
        $l0 = virtualinvoke $r1.<java.io.File: long length()>();
        $i1 = (int) $l0;
        return $i1;
    }

    public void clear() throws java.io.IOException
    {
        org.apache.fop.pdf.TempFileStreamCache this;
        java.io.OutputStream $r0;
        java.io.File $r1;
        boolean $z0;

        this := @this: org.apache.fop.pdf.TempFileStreamCache;
        $r0 = this.<org.apache.fop.pdf.TempFileStreamCache: java.io.OutputStream output>;
        if $r0 == null goto label0;

        $r0 = this.<org.apache.fop.pdf.TempFileStreamCache: java.io.OutputStream output>;
        virtualinvoke $r0.<java.io.OutputStream: void close()>();
        this.<org.apache.fop.pdf.TempFileStreamCache: java.io.OutputStream output> = null;

     label0:
        $r1 = this.<org.apache.fop.pdf.TempFileStreamCache: java.io.File tempFile>;
        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();
        if $z0 == 0 goto label1;

        $r1 = this.<org.apache.fop.pdf.TempFileStreamCache: java.io.File tempFile>;
        virtualinvoke $r1.<java.io.File: boolean delete()>();

     label1:
        return;
    }
}
