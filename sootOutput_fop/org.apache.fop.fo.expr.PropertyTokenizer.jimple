class org.apache.fop.fo.expr.PropertyTokenizer extends java.lang.Object
{
    static final int TOK_EOF;
    static final int TOK_NCNAME;
    static final int TOK_MULTIPLY;
    static final int TOK_LPAR;
    static final int TOK_RPAR;
    static final int TOK_LITERAL;
    static final int TOK_NUMBER;
    static final int TOK_FUNCTION_LPAR;
    static final int TOK_PLUS;
    static final int TOK_MINUS;
    static final int TOK_MOD;
    static final int TOK_DIV;
    static final int TOK_NUMERIC;
    static final int TOK_COMMA;
    static final int TOK_PERCENT;
    static final int TOK_COLORSPEC;
    static final int TOK_FLOAT;
    static final int TOK_INTEGER;
    protected int currentToken;
    protected java.lang.String currentTokenValue;
    protected int currentUnitLength;
    private int currentTokenStartIndex;
    private java.lang.String expr;
    private int exprIndex;
    private int exprLength;
    private boolean recognizeOperator;
    private static final java.lang.String NAME_START_CHARS;
    private static final java.lang.String NAME_CHARS;
    private static final java.lang.String DIGITS;
    private static final java.lang.String HEX_CHARS;

    void <init>(java.lang.String)
    {
        org.apache.fop.fo.expr.PropertyTokenizer this;
        java.lang.String s;
        int $i0;

        this := @this: org.apache.fop.fo.expr.PropertyTokenizer;
        s := @parameter0: java.lang.String;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentToken> = 0;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String currentTokenValue> = null;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentUnitLength> = 0;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentTokenStartIndex> = 0;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex> = 0;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: boolean recognizeOperator> = 0;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String expr> = s;
        $i0 = virtualinvoke s.<java.lang.String: int length()>();
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprLength> = $i0;
        return;
    }

    void next() throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.fo.expr.PropertyTokenizer this;
        boolean currentMaybeOperator, bSawDecimal, $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        char c, $c7;
        java.lang.String $r0, $r2;
        org.apache.fop.fo.expr.PropertyException $r3;
        byte $b8;

        this := @this: org.apache.fop.fo.expr.PropertyTokenizer;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String currentTokenValue> = null;
        $i2 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentTokenStartIndex> = $i2;
        currentMaybeOperator = this.<org.apache.fop.fo.expr.PropertyTokenizer: boolean recognizeOperator>;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: boolean recognizeOperator> = 1;

     label0:
        $i3 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i2 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprLength>;
        if $i3 < $i2 goto label1;

        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentToken> = 0;
        return;

     label1:
        $r0 = this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String expr>;
        $i0 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i4 = $i0 + 1;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex> = $i4;
        c = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);
        tableswitch(c)
        {
            case 9: goto label2;
            case 10: goto label2;
            case 11: goto label21;
            case 12: goto label21;
            case 13: goto label2;
            case 14: goto label21;
            case 15: goto label21;
            case 16: goto label21;
            case 17: goto label21;
            case 18: goto label21;
            case 19: goto label21;
            case 20: goto label21;
            case 21: goto label21;
            case 22: goto label21;
            case 23: goto label21;
            case 24: goto label21;
            case 25: goto label21;
            case 26: goto label21;
            case 27: goto label21;
            case 28: goto label21;
            case 29: goto label21;
            case 30: goto label21;
            case 31: goto label21;
            case 32: goto label2;
            case 33: goto label21;
            case 34: goto label8;
            case 35: goto label20;
            case 36: goto label21;
            case 37: goto label21;
            case 38: goto label21;
            case 39: goto label8;
            case 40: goto label6;
            case 41: goto label7;
            case 42: goto label10;
            case 43: goto label4;
            case 44: goto label3;
            case 45: goto label5;
            case 46: goto label19;
            case 47: goto label21;
            case 48: goto label11;
            case 49: goto label11;
            case 50: goto label11;
            case 51: goto label11;
            case 52: goto label11;
            case 53: goto label11;
            case 54: goto label11;
            case 55: goto label11;
            case 56: goto label11;
            case 57: goto label11;
            default: goto label21;
        };

     label2:
        $i2 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentTokenStartIndex> = $i2;
        goto label27;

     label3:
        this.<org.apache.fop.fo.expr.PropertyTokenizer: boolean recognizeOperator> = 0;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentToken> = 13;
        return;

     label4:
        this.<org.apache.fop.fo.expr.PropertyTokenizer: boolean recognizeOperator> = 0;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentToken> = 8;
        return;

     label5:
        this.<org.apache.fop.fo.expr.PropertyTokenizer: boolean recognizeOperator> = 0;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentToken> = 9;
        return;

     label6:
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentToken> = 3;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: boolean recognizeOperator> = 0;
        return;

     label7:
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentToken> = 4;
        return;

     label8:
        $r2 = this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String expr>;
        $i4 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i2 = virtualinvoke $r2.<java.lang.String: int indexOf(int,int)>(c, $i4);
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex> = $i2;
        $i3 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        if $i3 >= 0 goto label9;

        $i2 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentTokenStartIndex>;
        $i2 = $i2 + 1;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex> = $i2;
        $r3 = new org.apache.fop.fo.expr.PropertyException;
        specialinvoke $r3.<org.apache.fop.fo.expr.PropertyException: void <init>(java.lang.String)>("missing quote");
        throw $r3;

     label9:
        $r2 = this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String expr>;
        $i5 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentTokenStartIndex>;
        $i5 = $i5 + 1;
        $i1 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i6 = $i1 + 1;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex> = $i6;
        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>($i5, $i1);
        this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String currentTokenValue> = $r2;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentToken> = 5;
        return;

     label10:
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentToken> = 2;
        return;

     label11:
        specialinvoke this.<org.apache.fop.fo.expr.PropertyTokenizer: void scanDigits()>();
        $i3 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i2 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprLength>;
        if $i3 >= $i2 goto label12;

        $r0 = this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String expr>;
        $i2 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $c7 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i2);
        if $c7 != 46 goto label12;

        $i2 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i2 = $i2 + 1;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex> = $i2;
        bSawDecimal = 1;
        $i3 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i2 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprLength>;
        if $i3 >= $i2 goto label13;

        $r0 = this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String expr>;
        $i2 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $c7 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i2);
        $z0 = staticinvoke <org.apache.fop.fo.expr.PropertyTokenizer: boolean isDigit(char)>($c7);
        if $z0 == 0 goto label13;

        $i2 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i2 = $i2 + 1;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex> = $i2;
        specialinvoke this.<org.apache.fop.fo.expr.PropertyTokenizer: void scanDigits()>();
        goto label13;

     label12:
        bSawDecimal = 0;

     label13:
        $i3 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i2 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprLength>;
        if $i3 >= $i2 goto label14;

        $r0 = this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String expr>;
        $i2 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $c7 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i2);
        if $c7 != 37 goto label14;

        $i2 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i2 = $i2 + 1;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex> = $i2;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentToken> = 14;
        goto label18;

     label14:
        $i2 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentUnitLength> = $i2;
        specialinvoke this.<org.apache.fop.fo.expr.PropertyTokenizer: void scanName()>();
        $i2 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i5 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentUnitLength>;
        $i2 = $i2 - $i5;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentUnitLength> = $i2;
        $i2 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentUnitLength>;
        if $i2 <= 0 goto label15;

        $b8 = 12;
        goto label17;

     label15:
        if bSawDecimal == 0 goto label16;

        $b8 = 16;
        goto label17;

     label16:
        $b8 = 17;

     label17:
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentToken> = $b8;

     label18:
        $r2 = this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String expr>;
        $i5 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentTokenStartIndex>;
        $i4 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>($i5, $i4);
        this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String currentTokenValue> = $r2;
        return;

     label19:
        specialinvoke this.<org.apache.fop.fo.expr.PropertyTokenizer: void nextDecimalPoint()>();
        return;

     label20:
        specialinvoke this.<org.apache.fop.fo.expr.PropertyTokenizer: void nextColor()>();
        return;

     label21:
        $i2 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i2 = $i2 - 1;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex> = $i2;
        specialinvoke this.<org.apache.fop.fo.expr.PropertyTokenizer: void scanName()>();
        $i3 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i2 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentTokenStartIndex>;
        if $i3 != $i2 goto label22;

        $r3 = new org.apache.fop.fo.expr.PropertyException;
        specialinvoke $r3.<org.apache.fop.fo.expr.PropertyException: void <init>(java.lang.String)>("illegal character");
        throw $r3;

     label22:
        $r2 = this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String expr>;
        $i5 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentTokenStartIndex>;
        $i4 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>($i5, $i4);
        this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String currentTokenValue> = $r2;
        $r0 = this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String currentTokenValue>;
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("mod");
        if $z0 == 0 goto label23;

        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentToken> = 10;
        return;

     label23:
        $r0 = this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String currentTokenValue>;
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("div");
        if $z0 == 0 goto label24;

        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentToken> = 11;
        return;

     label24:
        $z0 = specialinvoke this.<org.apache.fop.fo.expr.PropertyTokenizer: boolean followingParen()>();
        if $z0 == 0 goto label25;

        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentToken> = 7;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: boolean recognizeOperator> = 0;
        goto label26;

     label25:
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentToken> = 1;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: boolean recognizeOperator> = 0;

     label26:
        return;

     label27:
        goto label0;
    }

    private void nextDecimalPoint() throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.fo.expr.PropertyTokenizer this;
        int $i0, $i1, $i3, $i5;
        java.lang.String $r0, $r2;
        char $c2;
        boolean $z0;
        byte $b4;
        org.apache.fop.fo.expr.PropertyException $r3;

        this := @this: org.apache.fop.fo.expr.PropertyTokenizer;
        $i0 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i1 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprLength>;
        if $i0 >= $i1 goto label4;

        $r0 = this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String expr>;
        $i1 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);
        $z0 = staticinvoke <org.apache.fop.fo.expr.PropertyTokenizer: boolean isDigit(char)>($c2);
        if $z0 == 0 goto label4;

        $i1 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i1 = $i1 + 1;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex> = $i1;
        specialinvoke this.<org.apache.fop.fo.expr.PropertyTokenizer: void scanDigits()>();
        $i0 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i1 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprLength>;
        if $i0 >= $i1 goto label0;

        $r0 = this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String expr>;
        $i1 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);
        if $c2 != 37 goto label0;

        $i1 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i1 = $i1 + 1;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex> = $i1;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentToken> = 14;
        goto label3;

     label0:
        $i1 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentUnitLength> = $i1;
        specialinvoke this.<org.apache.fop.fo.expr.PropertyTokenizer: void scanName()>();
        $i1 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i3 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentUnitLength>;
        $i1 = $i1 - $i3;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentUnitLength> = $i1;
        $i1 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentUnitLength>;
        if $i1 <= 0 goto label1;

        $b4 = 12;
        goto label2;

     label1:
        $b4 = 16;

     label2:
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentToken> = $b4;

     label3:
        $r2 = this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String expr>;
        $i3 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentTokenStartIndex>;
        $i5 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>($i3, $i5);
        this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String currentTokenValue> = $r2;
        return;

     label4:
        $r3 = new org.apache.fop.fo.expr.PropertyException;
        specialinvoke $r3.<org.apache.fop.fo.expr.PropertyException: void <init>(java.lang.String)>("illegal character \'.\'");
        throw $r3;
    }

    private void nextColor() throws org.apache.fop.fo.expr.PropertyException
    {
        org.apache.fop.fo.expr.PropertyTokenizer this;
        int $i0, $i1, $i3, $i4;
        java.lang.String $r0, $r2;
        char $c2;
        boolean $z0;
        org.apache.fop.fo.expr.PropertyException $r3;

        this := @this: org.apache.fop.fo.expr.PropertyTokenizer;
        $i0 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i1 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprLength>;
        if $i0 >= $i1 goto label0;

        $r0 = this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String expr>;
        $i1 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);
        $z0 = staticinvoke <org.apache.fop.fo.expr.PropertyTokenizer: boolean isHexDigit(char)>($c2);
        if $z0 == 0 goto label0;

        $i1 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i1 = $i1 + 1;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex> = $i1;
        specialinvoke this.<org.apache.fop.fo.expr.PropertyTokenizer: void scanHexDigits()>();
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentToken> = 15;
        $r2 = this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String expr>;
        $i3 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int currentTokenStartIndex>;
        $i4 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>($i3, $i4);
        this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String currentTokenValue> = $r2;
        return;

     label0:
        $r3 = new org.apache.fop.fo.expr.PropertyException;
        specialinvoke $r3.<org.apache.fop.fo.expr.PropertyException: void <init>(java.lang.String)>("illegal character \'#\'");
        throw $r3;
    }

    private void scanName()
    {
        org.apache.fop.fo.expr.PropertyTokenizer this;
        int $i0, $i1, $i3;
        java.lang.String $r0;
        char $c2;
        boolean $z0;

        this := @this: org.apache.fop.fo.expr.PropertyTokenizer;
        $i0 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i1 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprLength>;
        if $i0 >= $i1 goto label1;

        $r0 = this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String expr>;
        $i1 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);
        $z0 = staticinvoke <org.apache.fop.fo.expr.PropertyTokenizer: boolean isNameStartChar(char)>($c2);
        if $z0 == 0 goto label1;

     label0:
        $i1 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i3 = $i1 + 1;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex> = $i3;
        $i1 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprLength>;
        if $i3 >= $i1 goto label1;

        $r0 = this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String expr>;
        $i1 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);
        $z0 = staticinvoke <org.apache.fop.fo.expr.PropertyTokenizer: boolean isNameChar(char)>($c2);
        if $z0 == 0 goto label1;

        goto label0;

     label1:
        return;
    }

    private void scanDigits()
    {
        org.apache.fop.fo.expr.PropertyTokenizer this;
        int $i0, $i1;
        java.lang.String $r0;
        char $c2;
        boolean $z0;

        this := @this: org.apache.fop.fo.expr.PropertyTokenizer;

     label0:
        $i0 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i1 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprLength>;
        if $i0 >= $i1 goto label1;

        $r0 = this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String expr>;
        $i1 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);
        $z0 = staticinvoke <org.apache.fop.fo.expr.PropertyTokenizer: boolean isDigit(char)>($c2);
        if $z0 == 0 goto label1;

        $i1 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i1 = $i1 + 1;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex> = $i1;
        goto label0;

     label1:
        return;
    }

    private void scanHexDigits()
    {
        org.apache.fop.fo.expr.PropertyTokenizer this;
        int $i0, $i1;
        java.lang.String $r0;
        char $c2;
        boolean $z0;

        this := @this: org.apache.fop.fo.expr.PropertyTokenizer;

     label0:
        $i0 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i1 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprLength>;
        if $i0 >= $i1 goto label1;

        $r0 = this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String expr>;
        $i1 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);
        $z0 = staticinvoke <org.apache.fop.fo.expr.PropertyTokenizer: boolean isHexDigit(char)>($c2);
        if $z0 == 0 goto label1;

        $i1 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;
        $i1 = $i1 + 1;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex> = $i1;
        goto label0;

     label1:
        return;
    }

    private boolean followingParen()
    {
        org.apache.fop.fo.expr.PropertyTokenizer this;
        int i, $i0;
        java.lang.String $r0;
        char $c1;

        this := @this: org.apache.fop.fo.expr.PropertyTokenizer;
        i = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex>;

     label0:
        $i0 = this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprLength>;
        if i >= $i0 goto label5;

        $r0 = this.<org.apache.fop.fo.expr.PropertyTokenizer: java.lang.String expr>;
        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i);
        lookupswitch($c1)
        {
            case 9: goto label2;
            case 10: goto label2;
            case 13: goto label2;
            case 32: goto label2;
            case 40: goto label1;
            default: goto label3;
        };

     label1:
        $i0 = i + 1;
        this.<org.apache.fop.fo.expr.PropertyTokenizer: int exprIndex> = $i0;
        return 1;

     label2:
        goto label4;

     label3:
        return 0;

     label4:
        i = i + 1;
        goto label0;

     label5:
        return 0;
    }

    private static final boolean isDigit(char)
    {
        char c;
        java.lang.String $r0;
        int $i0;
        boolean $z0;

        c := @parameter0: char;
        $r0 = "0123456789";
        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(c);
        if $i0 < 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private static final boolean isHexDigit(char)
    {
        char c;
        java.lang.String $r0;
        int $i0;
        boolean $z0;

        c := @parameter0: char;
        $r0 = "0123456789abcdefABCDEF";
        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(c);
        if $i0 < 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private static final boolean isSpace(char)
    {
        char c;

        c := @parameter0: char;
        lookupswitch(c)
        {
            case 9: goto label0;
            case 10: goto label0;
            case 13: goto label0;
            case 32: goto label0;
            default: goto label1;
        };

     label0:
        return 1;

     label1:
        return 0;
    }

    private static final boolean isNameStartChar(char)
    {
        char c;
        java.lang.String $r0;
        int $i0;
        boolean $z0;

        c := @parameter0: char;
        $r0 = "_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(c);
        if $i0 >= 0 goto label0;

        if c < 128 goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static final boolean isNameChar(char)
    {
        char c;
        java.lang.String $r0;
        int $i0;
        boolean $z0;

        c := @parameter0: char;
        $r0 = "_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(c);
        if $i0 >= 0 goto label0;

        $r0 = ".-0123456789";
        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(c);
        if $i0 >= 0 goto label0;

        if c < 128 goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
