public class org.apache.fop.render.ps.PSRenderer extends org.apache.fop.render.AbstractPathOrientedRenderer implements org.apache.fop.render.ImageAdapter, org.apache.fop.render.ps.PSSupportedFlavors
{
    private static org.apache.commons.logging.Log log;
    public static final java.lang.String MIME_TYPE;
    private static final java.lang.String AUTO_ROTATE_LANDSCAPE;
    private static final java.lang.String OPTIMIZE_RESOURCES;
    private static final java.lang.String LANGUAGE_LEVEL;
    private int currentPageNumber;
    private boolean enableComments;
    private boolean autoRotateLandscape;
    private int languageLevel;
    private java.io.OutputStream outputStream;
    private java.io.File tempFile;
    protected org.apache.xmlgraphics.ps.PSGenerator gen;
    private boolean twoPassGeneration;
    private boolean ioTrouble;
    private boolean inTextMode;
    private java.util.List setupCodeList;
    private java.util.Map fontResources;
    private java.util.Map formResources;
    private org.apache.fop.render.ps.PSPageDeviceDictionary pageDeviceDictionary;
    private boolean safeSetPageDevice;
    private boolean dscCompliant;
    private java.awt.geom.Rectangle2D documentBoundingBox;
    private java.util.Collection headerComments;
    private java.util.Collection footerComments;
    static java.lang.Class class$org$apache$fop$render$ps$PSRenderer;

    public void <init>()
    {
        org.apache.fop.render.ps.PSRenderer this;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        specialinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void <init>()>();
        this.<org.apache.fop.render.ps.PSRenderer: int currentPageNumber> = 0;
        this.<org.apache.fop.render.ps.PSRenderer: boolean enableComments> = 1;
        this.<org.apache.fop.render.ps.PSRenderer: boolean autoRotateLandscape> = 0;
        this.<org.apache.fop.render.ps.PSRenderer: int languageLevel> = 3;
        this.<org.apache.fop.render.ps.PSRenderer: boolean twoPassGeneration> = 0;
        this.<org.apache.fop.render.ps.PSRenderer: boolean ioTrouble> = 0;
        this.<org.apache.fop.render.ps.PSRenderer: boolean inTextMode> = 0;
        this.<org.apache.fop.render.ps.PSRenderer: boolean safeSetPageDevice> = 0;
        this.<org.apache.fop.render.ps.PSRenderer: boolean dscCompliant> = 1;
        return;
    }

    public void setUserAgent(org.apache.fop.apps.FOUserAgent)
    {
        org.apache.fop.render.ps.PSRenderer this;
        org.apache.fop.apps.FOUserAgent agent;
        java.lang.Object obj;
        java.util.Map $r0;
        boolean $z0;
        int $i0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        agent := @parameter0: org.apache.fop.apps.FOUserAgent;
        specialinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void setUserAgent(org.apache.fop.apps.FOUserAgent)>(agent);
        $r0 = virtualinvoke agent.<org.apache.fop.apps.FOUserAgent: java.util.Map getRendererOptions()>();
        obj = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("auto-rotate-landscape");
        if obj == null goto label0;

        $z0 = specialinvoke this.<org.apache.fop.render.ps.PSRenderer: boolean booleanValueOf(java.lang.Object)>(obj);
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void setAutoRotateLandscape(boolean)>($z0);

     label0:
        $r0 = virtualinvoke agent.<org.apache.fop.apps.FOUserAgent: java.util.Map getRendererOptions()>();
        obj = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("language-level");
        if obj == null goto label1;

        $i0 = specialinvoke this.<org.apache.fop.render.ps.PSRenderer: int intValueOf(java.lang.Object)>(obj);
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void setLanguageLevel(int)>($i0);

     label1:
        $r0 = virtualinvoke agent.<org.apache.fop.apps.FOUserAgent: java.util.Map getRendererOptions()>();
        obj = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("optimize-resources");
        if obj == null goto label2;

        $z0 = specialinvoke this.<org.apache.fop.render.ps.PSRenderer: boolean booleanValueOf(java.lang.Object)>(obj);
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void setOptimizeResources(boolean)>($z0);

     label2:
        return;
    }

    private boolean booleanValueOf(java.lang.Object)
    {
        org.apache.fop.render.ps.PSRenderer this;
        java.lang.Object obj;
        boolean $z0;
        java.lang.Boolean $r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        obj := @parameter0: java.lang.Object;
        $z0 = obj instanceof java.lang.Boolean;
        if $z0 == 0 goto label0;

        $r0 = (java.lang.Boolean) obj;
        $z0 = virtualinvoke $r0.<java.lang.Boolean: boolean booleanValue()>();
        return $z0;

     label0:
        $z0 = obj instanceof java.lang.String;
        if $z0 == 0 goto label1;

        $r1 = (java.lang.String) obj;
        $r0 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r1);
        $z0 = virtualinvoke $r0.<java.lang.Boolean: boolean booleanValue()>();
        return $z0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Boolean or \"true\" or \"false\" expected.");
        throw $r2;
    }

    private int intValueOf(java.lang.Object)
    {
        org.apache.fop.render.ps.PSRenderer this;
        java.lang.Object obj;
        boolean $z0;
        java.lang.Integer $r0;
        int $i0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        obj := @parameter0: java.lang.Object;
        $z0 = obj instanceof java.lang.Integer;
        if $z0 == 0 goto label0;

        $r0 = (java.lang.Integer) obj;
        $i0 = virtualinvoke $r0.<java.lang.Integer: int intValue()>();
        return $i0;

     label0:
        $z0 = obj instanceof java.lang.String;
        if $z0 == 0 goto label1;

        $r1 = (java.lang.String) obj;
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);
        return $i0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Integer or String with a number expected.");
        throw $r2;
    }

    public void setAutoRotateLandscape(boolean)
    {
        org.apache.fop.render.ps.PSRenderer this;
        boolean value;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        value := @parameter0: boolean;
        this.<org.apache.fop.render.ps.PSRenderer: boolean autoRotateLandscape> = value;
        return;
    }

    public boolean isAutoRotateLandscape()
    {
        org.apache.fop.render.ps.PSRenderer this;
        boolean $z0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        $z0 = this.<org.apache.fop.render.ps.PSRenderer: boolean autoRotateLandscape>;
        return $z0;
    }

    public void setLanguageLevel(int)
    {
        org.apache.fop.render.ps.PSRenderer this;
        int level;
        java.lang.IllegalArgumentException $r0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        level := @parameter0: int;
        if level == 2 goto label0;

        if level != 3 goto label1;

     label0:
        this.<org.apache.fop.render.ps.PSRenderer: int languageLevel> = level;
        goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;
        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only language levels 2 or 3 are allowed/supported");
        throw $r0;

     label2:
        return;
    }

    public int getLanguageLevel()
    {
        org.apache.fop.render.ps.PSRenderer this;
        int $i0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        $i0 = this.<org.apache.fop.render.ps.PSRenderer: int languageLevel>;
        return $i0;
    }

    public void setOptimizeResources(boolean)
    {
        org.apache.fop.render.ps.PSRenderer this;
        boolean value;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        value := @parameter0: boolean;
        this.<org.apache.fop.render.ps.PSRenderer: boolean twoPassGeneration> = value;
        return;
    }

    public boolean isOptimizeResources()
    {
        org.apache.fop.render.ps.PSRenderer this;
        boolean $z0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        $z0 = this.<org.apache.fop.render.ps.PSRenderer: boolean twoPassGeneration>;
        return $z0;
    }

    public org.apache.fop.render.Graphics2DAdapter getGraphics2DAdapter()
    {
        org.apache.fop.render.ps.PSRenderer this;
        org.apache.fop.render.ps.PSGraphics2DAdapter $r0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        $r0 = new org.apache.fop.render.ps.PSGraphics2DAdapter;
        specialinvoke $r0.<org.apache.fop.render.ps.PSGraphics2DAdapter: void <init>(org.apache.fop.render.ps.PSRenderer)>(this);
        return $r0;
    }

    public org.apache.fop.render.ImageAdapter getImageAdapter()
    {
        org.apache.fop.render.ps.PSRenderer this;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        return this;
    }

    protected void writeln(java.lang.String)
    {
        org.apache.fop.render.ps.PSRenderer this;
        java.lang.String cmd;
        java.io.IOException ioe, $r1;
        org.apache.xmlgraphics.ps.PSGenerator $r0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        cmd := @parameter0: java.lang.String;

     label0:
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void writeln(java.lang.String)>(cmd);

     label1:
        goto label3;

     label2:
        $r1 := @caughtexception;
        ioe = $r1;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void handleIOTrouble(java.io.IOException)>(ioe);

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    protected void handleIOTrouble(java.io.IOException)
    {
        org.apache.fop.render.ps.PSRenderer this;
        java.io.IOException ioe;
        boolean $z0;
        org.apache.commons.logging.Log $r0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        ioe := @parameter0: java.io.IOException;
        $z0 = this.<org.apache.fop.render.ps.PSRenderer: boolean ioTrouble>;
        if $z0 != 0 goto label0;

        $r0 = <org.apache.fop.render.ps.PSRenderer: org.apache.commons.logging.Log log>;
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("Error while writing to target file", ioe);
        this.<org.apache.fop.render.ps.PSRenderer: boolean ioTrouble> = 1;

     label0:
        return;
    }

    protected void comment(java.lang.String)
    {
        org.apache.fop.render.ps.PSRenderer this;
        java.lang.String comment, $r1;
        boolean $z0;
        java.lang.StringBuffer $r0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        comment := @parameter0: java.lang.String;
        $z0 = this.<org.apache.fop.render.ps.PSRenderer: boolean enableComments>;
        if $z0 == 0 goto label1;

        $z0 = virtualinvoke comment.<java.lang.String: boolean startsWith(java.lang.String)>("%");
        if $z0 == 0 goto label0;

        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void writeln(java.lang.String)>(comment);
        goto label1;

     label0:
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("%");
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(comment);
        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void writeln(java.lang.String)>($r1);

     label1:
        return;
    }

    protected void movetoCurrPosition()
    {
        org.apache.fop.render.ps.PSRenderer this;
        int $i0, $i1;
        float $f0, $f1;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        $i0 = this.<org.apache.fop.render.ps.PSRenderer: int currentIPPosition>;
        $f0 = (float) $i0;
        $i1 = this.<org.apache.fop.render.ps.PSRenderer: int currentBPPosition>;
        $f1 = (float) $i1;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void moveTo(float,float)>($f0, $f1);
        return;
    }

    protected void clip()
    {
        org.apache.fop.render.ps.PSRenderer this;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void writeln(java.lang.String)>("clip newpath");
        return;
    }

    protected void clipRect(float, float, float, float)
    {
        org.apache.fop.render.ps.PSRenderer this;
        float x, y, width, height;
        java.io.IOException ioe, $r1;
        org.apache.xmlgraphics.ps.PSGenerator $r0;
        double $d0, $d1, $d2, $d3;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        x := @parameter0: float;
        y := @parameter1: float;
        width := @parameter2: float;
        height := @parameter3: float;

     label0:
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $d0 = (double) x;
        $d1 = (double) y;
        $d2 = (double) width;
        $d3 = (double) height;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void defineRect(double,double,double,double)>($d0, $d1, $d2, $d3);
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void clip()>();

     label1:
        goto label3;

     label2:
        $r1 := @caughtexception;
        ioe = $r1;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void handleIOTrouble(java.io.IOException)>(ioe);

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    protected void moveTo(float, float)
    {
        org.apache.fop.render.ps.PSRenderer this;
        float x, y;
        java.lang.StringBuffer $r0;
        org.apache.xmlgraphics.ps.PSGenerator $r1;
        double $d0;
        java.lang.String $r2, $r3;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        x := @parameter0: float;
        y := @parameter1: float;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $d0 = (double) x;
        $r2 = virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: java.lang.String formatDouble(double)>($d0);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $d0 = (double) y;
        $r2 = virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: java.lang.String formatDouble(double)>($d0);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" M");
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void writeln(java.lang.String)>($r3);
        return;
    }

    protected void rmoveTo(float, float)
    {
        org.apache.fop.render.ps.PSRenderer this;
        float x, y;
        java.lang.StringBuffer $r0;
        org.apache.xmlgraphics.ps.PSGenerator $r1;
        double $d0;
        java.lang.String $r2, $r3;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        x := @parameter0: float;
        y := @parameter1: float;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $d0 = (double) x;
        $r2 = virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: java.lang.String formatDouble(double)>($d0);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $d0 = (double) y;
        $r2 = virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: java.lang.String formatDouble(double)>($d0);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" RM");
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void writeln(java.lang.String)>($r3);
        return;
    }

    protected void lineTo(float, float)
    {
        org.apache.fop.render.ps.PSRenderer this;
        float x, y;
        java.lang.StringBuffer $r0;
        org.apache.xmlgraphics.ps.PSGenerator $r1;
        double $d0;
        java.lang.String $r2, $r3;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        x := @parameter0: float;
        y := @parameter1: float;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $d0 = (double) x;
        $r2 = virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: java.lang.String formatDouble(double)>($d0);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $d0 = (double) y;
        $r2 = virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: java.lang.String formatDouble(double)>($d0);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" lineto");
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void writeln(java.lang.String)>($r3);
        return;
    }

    protected void closePath()
    {
        org.apache.fop.render.ps.PSRenderer this;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void writeln(java.lang.String)>("cp");
        return;
    }

    protected void fillRect(float, float, float, float)
    {
        org.apache.fop.render.ps.PSRenderer this;
        float x, y, width, height;
        java.io.IOException ioe, $r1;
        byte $b0;
        org.apache.xmlgraphics.ps.PSGenerator $r0;
        double $d0, $d1, $d2, $d3;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        x := @parameter0: float;
        y := @parameter1: float;
        width := @parameter2: float;
        height := @parameter3: float;
        $b0 = width cmpl 0.0F;
        if $b0 == 0 goto label3;

        $b0 = height cmpl 0.0F;
        if $b0 == 0 goto label3;

     label0:
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $d0 = (double) x;
        $d1 = (double) y;
        $d2 = (double) width;
        $d3 = (double) height;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void defineRect(double,double,double,double)>($d0, $d1, $d2, $d3);
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void writeln(java.lang.String)>("fill");

     label1:
        goto label3;

     label2:
        $r1 := @caughtexception;
        ioe = $r1;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void handleIOTrouble(java.io.IOException)>(ioe);

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    protected void updateColor(java.awt.Color, boolean)
    {
        org.apache.fop.render.ps.PSRenderer this;
        java.awt.Color col;
        boolean fill;
        java.io.IOException ioe, $r0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        col := @parameter0: java.awt.Color;
        fill := @parameter1: boolean;

     label0:
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void useColor(java.awt.Color)>(col);

     label1:
        goto label3;

     label2:
        $r0 := @caughtexception;
        ioe = $r0;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void handleIOTrouble(java.io.IOException)>(ioe);

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    protected boolean isImageInlined(java.lang.String)
    {
        org.apache.fop.render.ps.PSRenderer this;
        java.lang.String uri, $r0;
        boolean $z0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        uri := @parameter0: java.lang.String;
        $z0 = virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: boolean isOptimizeResources()>();
        if $z0 == 0 goto label0;

        if uri == null goto label0;

        $r0 = "";
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(uri);
        if $z0 == 0 goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected boolean isImageInlined(org.apache.xmlgraphics.image.loader.ImageInfo)
    {
        org.apache.fop.render.ps.PSRenderer this;
        org.apache.xmlgraphics.image.loader.ImageInfo info;
        org.apache.xmlgraphics.image.loader.ImageFlavor[] inlineFlavors, formFlavors;
        org.apache.xmlgraphics.image.loader.ImageManager manager;
        org.apache.xmlgraphics.image.loader.pipeline.ImageProviderPipeline[] inlineCandidates, formCandidates;
        org.apache.xmlgraphics.image.loader.pipeline.ImageProviderPipeline inlineChoice, formChoice;
        org.apache.xmlgraphics.image.loader.ImageFlavor inlineFlavor, formFlavor, $r5;
        java.lang.String $r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        org.apache.fop.apps.FOUserAgent $r2;
        org.apache.fop.apps.FopFactory $r3;
        org.apache.xmlgraphics.image.loader.pipeline.PipelineFactory $r4;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        info := @parameter0: org.apache.xmlgraphics.image.loader.ImageInfo;
        $r0 = virtualinvoke info.<org.apache.xmlgraphics.image.loader.ImageInfo: java.lang.String getOriginalURI()>();
        $z0 = virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: boolean isImageInlined(java.lang.String)>($r0);
        if $z0 == 0 goto label0;

        return 1;

     label0:
        $z0 = virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: boolean isOptimizeResources()>();
        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;
        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Must not get here if form support is enabled");
        throw $r1;

     label1:
        inlineFlavors = specialinvoke this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.image.loader.ImageFlavor[] getInlineFlavors()>();
        $r2 = virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.apps.FOUserAgent getUserAgent()>();
        $r3 = virtualinvoke $r2.<org.apache.fop.apps.FOUserAgent: org.apache.fop.apps.FopFactory getFactory()>();
        manager = virtualinvoke $r3.<org.apache.fop.apps.FopFactory: org.apache.xmlgraphics.image.loader.ImageManager getImageManager()>();
        $r4 = virtualinvoke manager.<org.apache.xmlgraphics.image.loader.ImageManager: org.apache.xmlgraphics.image.loader.pipeline.PipelineFactory getPipelineFactory()>();
        inlineCandidates = virtualinvoke $r4.<org.apache.xmlgraphics.image.loader.pipeline.PipelineFactory: org.apache.xmlgraphics.image.loader.pipeline.ImageProviderPipeline[] determineCandidatePipelines(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor[])>(info, inlineFlavors);
        inlineChoice = virtualinvoke manager.<org.apache.xmlgraphics.image.loader.ImageManager: org.apache.xmlgraphics.image.loader.pipeline.ImageProviderPipeline choosePipeline(org.apache.xmlgraphics.image.loader.pipeline.ImageProviderPipeline[])>(inlineCandidates);
        if inlineChoice == null goto label2;

        $r5 = virtualinvoke inlineChoice.<org.apache.xmlgraphics.image.loader.pipeline.ImageProviderPipeline: org.apache.xmlgraphics.image.loader.ImageFlavor getTargetFlavor()>();
        goto label3;

     label2:
        $r5 = null;

     label3:
        inlineFlavor = $r5;
        formFlavors = specialinvoke this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.image.loader.ImageFlavor[] getFormFlavors()>();
        $r4 = virtualinvoke manager.<org.apache.xmlgraphics.image.loader.ImageManager: org.apache.xmlgraphics.image.loader.pipeline.PipelineFactory getPipelineFactory()>();
        formCandidates = virtualinvoke $r4.<org.apache.xmlgraphics.image.loader.pipeline.PipelineFactory: org.apache.xmlgraphics.image.loader.pipeline.ImageProviderPipeline[] determineCandidatePipelines(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor[])>(info, formFlavors);
        formChoice = virtualinvoke manager.<org.apache.xmlgraphics.image.loader.ImageManager: org.apache.xmlgraphics.image.loader.pipeline.ImageProviderPipeline choosePipeline(org.apache.xmlgraphics.image.loader.pipeline.ImageProviderPipeline[])>(formCandidates);
        if formChoice == null goto label4;

        $r5 = virtualinvoke formChoice.<org.apache.xmlgraphics.image.loader.pipeline.ImageProviderPipeline: org.apache.xmlgraphics.image.loader.ImageFlavor getTargetFlavor()>();
        goto label5;

     label4:
        $r5 = null;

     label5:
        formFlavor = $r5;
        if formFlavor == null goto label6;

        $z0 = virtualinvoke formFlavor.<org.apache.xmlgraphics.image.loader.ImageFlavor: boolean equals(java.lang.Object)>(inlineFlavor);
        if $z0 != 0 goto label7;

     label6:
        $z0 = 1;
        goto label8;

     label7:
        $z0 = 0;

     label8:
        return $z0;
    }

    protected void drawImage(java.lang.String, java.awt.geom.Rectangle2D, java.util.Map)
    {
        org.apache.fop.render.ps.PSRenderer this;
        java.lang.String uri, uri, $r2, $r10;
        java.awt.geom.Rectangle2D pos, bbox;
        java.util.Map foreignAttributes, hints;
        int x, y, width, height, $i0, $i2;
        org.apache.xmlgraphics.image.loader.ImageManager manager;
        org.apache.xmlgraphics.image.loader.ImageInfo info;
        org.apache.xmlgraphics.image.loader.ImageSessionContext sessionContext;
        float ptx, pty, ptw, pth, $f0;
        org.apache.xmlgraphics.image.loader.Image img;
        org.apache.xmlgraphics.image.loader.impl.ImageGraphics2D imageG2D;
        org.apache.fop.render.RendererContext context;
        org.apache.xmlgraphics.image.loader.impl.ImageRendered imgRend;
        java.awt.image.RenderedImage ri;
        org.apache.xmlgraphics.image.loader.impl.ImageXMLDOM imgXML;
        org.apache.xmlgraphics.image.loader.impl.ImageRawStream raw;
        org.apache.xmlgraphics.image.loader.impl.ImageRawEPS eps;
        java.io.InputStream in;
        java.lang.Throwable l21, $r13;
        org.apache.xmlgraphics.image.loader.impl.ImageRawCCITTFax ccitt;
        org.apache.fop.render.ps.ImageEncoderCCITTFax encoder, $r14;
        java.awt.geom.Rectangle2D$Float targetRect, $r11, $r15;
        org.apache.xmlgraphics.image.loader.impl.ImageRawJPEG jpeg;
        org.apache.xmlgraphics.ps.PSResource form;
        org.apache.xmlgraphics.image.loader.ImageException ie, $r26;
        java.io.FileNotFoundException fe, $r27;
        java.io.IOException ioe, $r28;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        long $l1;
        org.apache.commons.logging.Log $r0;
        boolean $z0, $z1;
        java.lang.StringBuffer $r1, $r22;
        org.apache.fop.apps.FOUserAgent $r3;
        org.apache.fop.apps.FopFactory $r4;
        org.apache.xmlgraphics.image.loader.ImageFlavor[] $r5;
        org.apache.fop.render.Graphics2DAdapter $r6;
        org.apache.xmlgraphics.java2d.Graphics2DImagePainter $r7;
        org.apache.xmlgraphics.ps.PSGenerator $r8, $r12, $r19, $r25;
        org.w3c.dom.Document $r9;
        org.apache.xmlgraphics.image.loader.ImageSize $r16;
        java.awt.Dimension $r17;
        java.awt.color.ColorSpace $r18;
        org.apache.fop.render.ps.ImageEncoderJPEG $r20, encoder;
        java.lang.UnsupportedOperationException $r21;
        java.awt.geom.Rectangle2D$Double $r23, targetRect;
        java.awt.geom.Dimension2D $r24;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        uri := @parameter0: java.lang.String;
        pos := @parameter1: java.awt.geom.Rectangle2D;
        foreignAttributes := @parameter2: java.util.Map;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void endTextObject()>();
        $i0 = this.<org.apache.fop.render.ps.PSRenderer: int currentIPPosition>;
        $d0 = virtualinvoke pos.<java.awt.geom.Rectangle2D: double getX()>();
        $l1 = staticinvoke <java.lang.Math: long round(double)>($d0);
        $i2 = (int) $l1;
        x = $i0 + $i2;
        $i0 = this.<org.apache.fop.render.ps.PSRenderer: int currentBPPosition>;
        $d0 = virtualinvoke pos.<java.awt.geom.Rectangle2D: double getY()>();
        $l1 = staticinvoke <java.lang.Math: long round(double)>($d0);
        $i2 = (int) $l1;
        y = $i0 + $i2;
        uri = staticinvoke <org.apache.fop.datatypes.URISpecification: java.lang.String getURL(java.lang.String)>(uri);
        $r0 = <org.apache.fop.render.ps.PSRenderer: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label0;

        $r0 = <org.apache.fop.render.ps.PSRenderer: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Handling image: ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(uri);
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r2);

     label0:
        $r3 = virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.apps.FOUserAgent getUserAgent()>();
        $r4 = virtualinvoke $r3.<org.apache.fop.apps.FOUserAgent: org.apache.fop.apps.FopFactory getFactory()>();
        manager = virtualinvoke $r4.<org.apache.fop.apps.FopFactory: org.apache.xmlgraphics.image.loader.ImageManager getImageManager()>();
        info = null;

     label1:
        $r3 = virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.apps.FOUserAgent getUserAgent()>();
        sessionContext = virtualinvoke $r3.<org.apache.fop.apps.FOUserAgent: org.apache.xmlgraphics.image.loader.ImageSessionContext getImageSessionContext()>();
        info = virtualinvoke manager.<org.apache.xmlgraphics.image.loader.ImageManager: org.apache.xmlgraphics.image.loader.ImageInfo getImageInfo(java.lang.String,org.apache.xmlgraphics.image.loader.ImageSessionContext)>(uri, sessionContext);
        $d1 = virtualinvoke pos.<java.awt.geom.Rectangle2D: double getWidth()>();
        width = (int) $d1;
        $d1 = virtualinvoke pos.<java.awt.geom.Rectangle2D: double getHeight()>();
        height = (int) $d1;
        $f0 = (float) x;
        ptx = $f0 / 1000.0F;
        $f0 = (float) y;
        pty = $f0 / 1000.0F;
        $f0 = (float) width;
        ptw = $f0 / 1000.0F;
        $f0 = (float) height;
        pth = $f0 / 1000.0F;
        $z0 = virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: boolean isImageInlined(org.apache.xmlgraphics.image.loader.ImageInfo)>(info);
        if $z0 == 0 goto label18;

        $r0 = <org.apache.fop.render.ps.PSRenderer: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label2;

        $r0 = <org.apache.fop.render.ps.PSRenderer: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Image ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(info);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is inlined");
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r2);

     label2:
        hints = staticinvoke <org.apache.xmlgraphics.image.loader.util.ImageUtil: java.util.Map getDefaultHints(org.apache.xmlgraphics.image.loader.ImageSessionContext)>(sessionContext);
        $r5 = specialinvoke this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.image.loader.ImageFlavor[] getInlineFlavors()>();
        img = virtualinvoke manager.<org.apache.xmlgraphics.image.loader.ImageManager: org.apache.xmlgraphics.image.loader.Image getImage(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor[],java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)>(info, $r5, hints, sessionContext);
        $z0 = img instanceof org.apache.xmlgraphics.image.loader.impl.ImageGraphics2D;
        if $z0 == 0 goto label3;

        imageG2D = (org.apache.xmlgraphics.image.loader.impl.ImageGraphics2D) img;
        context = virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.render.RendererContext createRendererContext(int,int,int,int,java.util.Map)>(x, y, width, height, foreignAttributes);
        $r6 = virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.render.Graphics2DAdapter getGraphics2DAdapter()>();
        $r7 = virtualinvoke imageG2D.<org.apache.xmlgraphics.image.loader.impl.ImageGraphics2D: org.apache.xmlgraphics.java2d.Graphics2DImagePainter getGraphics2DImagePainter()>();
        interfaceinvoke $r6.<org.apache.fop.render.Graphics2DAdapter: void paintImage(org.apache.xmlgraphics.java2d.Graphics2DImagePainter,org.apache.fop.render.RendererContext,int,int,int,int)>($r7, context, x, y, width, height);
        goto label17;

     label3:
        $z0 = img instanceof org.apache.xmlgraphics.image.loader.impl.ImageRendered;
        if $z0 == 0 goto label4;

        imgRend = (org.apache.xmlgraphics.image.loader.impl.ImageRendered) img;
        ri = virtualinvoke imgRend.<org.apache.xmlgraphics.image.loader.impl.ImageRendered: java.awt.image.RenderedImage getRenderedImage()>();
        $r8 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        staticinvoke <org.apache.xmlgraphics.ps.PSImageUtils: void renderBitmapImage(java.awt.image.RenderedImage,float,float,float,float,org.apache.xmlgraphics.ps.PSGenerator)>(ri, ptx, pty, ptw, pth, $r8);
        goto label17;

     label4:
        $z0 = img instanceof org.apache.xmlgraphics.image.loader.impl.ImageXMLDOM;
        if $z0 == 0 goto label5;

        imgXML = (org.apache.xmlgraphics.image.loader.impl.ImageXMLDOM) img;
        $r9 = virtualinvoke imgXML.<org.apache.xmlgraphics.image.loader.impl.ImageXMLDOM: org.w3c.dom.Document getDocument()>();
        $r10 = virtualinvoke imgXML.<org.apache.xmlgraphics.image.loader.impl.ImageXMLDOM: java.lang.String getRootNamespace()>();
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void renderDocument(org.w3c.dom.Document,java.lang.String,java.awt.geom.Rectangle2D,java.util.Map)>($r9, $r10, pos, foreignAttributes);
        goto label17;

     label5:
        $z0 = img instanceof org.apache.xmlgraphics.image.loader.impl.ImageRawStream;
        if $z0 == 0 goto label16;

        raw = (org.apache.xmlgraphics.image.loader.impl.ImageRawStream) img;
        $z0 = raw instanceof org.apache.xmlgraphics.image.loader.impl.ImageRawEPS;
        if $z0 == 0 goto label12;

        eps = (org.apache.xmlgraphics.image.loader.impl.ImageRawEPS) raw;
        bbox = virtualinvoke eps.<org.apache.xmlgraphics.image.loader.impl.ImageRawEPS: java.awt.geom.Rectangle2D getBoundingBox()>();
        in = virtualinvoke raw.<org.apache.xmlgraphics.image.loader.impl.ImageRawStream: java.io.InputStream createInputStream()>();

     label6:
        $r11 = new java.awt.geom.Rectangle2D$Float;
        specialinvoke $r11.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>(ptx, pty, ptw, pth);
        $r12 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        staticinvoke <org.apache.xmlgraphics.ps.PSImageUtils: void renderEPS(java.io.InputStream,java.lang.String,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.apache.xmlgraphics.ps.PSGenerator)>(in, uri, $r11, bbox, $r12);

     label7:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(in);
        goto label11;

     label8:
        $r13 := @caughtexception;

     label9:
        l21 = $r13;

     label10:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(in);
        throw l21;

     label11:
        goto label15;

     label12:
        $z0 = raw instanceof org.apache.xmlgraphics.image.loader.impl.ImageRawCCITTFax;
        if $z0 == 0 goto label13;

        ccitt = (org.apache.xmlgraphics.image.loader.impl.ImageRawCCITTFax) raw;
        $r14 = new org.apache.fop.render.ps.ImageEncoderCCITTFax;
        specialinvoke $r14.<org.apache.fop.render.ps.ImageEncoderCCITTFax: void <init>(org.apache.xmlgraphics.image.loader.impl.ImageRawCCITTFax)>(ccitt);
        encoder = $r14;
        $r15 = new java.awt.geom.Rectangle2D$Float;
        specialinvoke $r15.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>(ptx, pty, ptw, pth);
        targetRect = $r15;
        $r16 = virtualinvoke info.<org.apache.xmlgraphics.image.loader.ImageInfo: org.apache.xmlgraphics.image.loader.ImageSize getSize()>();
        $r17 = virtualinvoke $r16.<org.apache.xmlgraphics.image.loader.ImageSize: java.awt.Dimension getDimensionPx()>();
        $r18 = virtualinvoke ccitt.<org.apache.xmlgraphics.image.loader.impl.ImageRawCCITTFax: java.awt.color.ColorSpace getColorSpace()>();
        $r19 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        staticinvoke <org.apache.xmlgraphics.ps.PSImageUtils: void writeImage(org.apache.xmlgraphics.ps.ImageEncoder,java.awt.Dimension,java.lang.String,java.awt.geom.Rectangle2D,java.awt.color.ColorSpace,int,boolean,org.apache.xmlgraphics.ps.PSGenerator)>(encoder, $r17, uri, targetRect, $r18, 1, 0, $r19);
        goto label15;

     label13:
        $z0 = raw instanceof org.apache.xmlgraphics.image.loader.impl.ImageRawJPEG;
        if $z0 == 0 goto label14;

        jpeg = (org.apache.xmlgraphics.image.loader.impl.ImageRawJPEG) raw;
        $r20 = new org.apache.fop.render.ps.ImageEncoderJPEG;
        specialinvoke $r20.<org.apache.fop.render.ps.ImageEncoderJPEG: void <init>(org.apache.xmlgraphics.image.loader.impl.ImageRawJPEG)>(jpeg);
        encoder = $r20;
        $r15 = new java.awt.geom.Rectangle2D$Float;
        specialinvoke $r15.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>(ptx, pty, ptw, pth);
        targetRect = $r15;
        $r16 = virtualinvoke info.<org.apache.xmlgraphics.image.loader.ImageInfo: org.apache.xmlgraphics.image.loader.ImageSize getSize()>();
        $r17 = virtualinvoke $r16.<org.apache.xmlgraphics.image.loader.ImageSize: java.awt.Dimension getDimensionPx()>();
        $r18 = virtualinvoke jpeg.<org.apache.xmlgraphics.image.loader.impl.ImageRawJPEG: java.awt.color.ColorSpace getColorSpace()>();
        $z1 = virtualinvoke jpeg.<org.apache.xmlgraphics.image.loader.impl.ImageRawJPEG: boolean isInverted()>();
        $r19 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        staticinvoke <org.apache.xmlgraphics.ps.PSImageUtils: void writeImage(org.apache.xmlgraphics.ps.ImageEncoder,java.awt.Dimension,java.lang.String,java.awt.geom.Rectangle2D,java.awt.color.ColorSpace,int,boolean,org.apache.xmlgraphics.ps.PSGenerator)>(encoder, $r17, uri, targetRect, $r18, 8, $z1, $r19);
        goto label15;

     label14:
        $r21 = new java.lang.UnsupportedOperationException;
        $r22 = new java.lang.StringBuffer;
        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();
        $r22 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported raw image: ");
        $r22 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(info);
        $r10 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r21.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r10);
        throw $r21;

     label15:
        goto label17;

     label16:
        $r21 = new java.lang.UnsupportedOperationException;
        $r22 = new java.lang.StringBuffer;
        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();
        $r22 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported image type: ");
        $r22 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(img);
        $r10 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r21.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r10);
        throw $r21;

     label17:
        goto label20;

     label18:
        $r0 = <org.apache.fop.render.ps.PSRenderer: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label19;

        $r0 = <org.apache.fop.render.ps.PSRenderer: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Image ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(info);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is embedded as a form later");
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r2);

     label19:
        form = virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSResource getFormForImage(java.lang.String)>(uri);
        $r23 = new java.awt.geom.Rectangle2D$Double;
        $d2 = (double) ptx;
        $d3 = (double) pty;
        $d4 = (double) ptw;
        $d5 = (double) pth;
        specialinvoke $r23.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d2, $d3, $d4, $d5);
        targetRect = $r23;
        $r16 = virtualinvoke info.<org.apache.xmlgraphics.image.loader.ImageInfo: org.apache.xmlgraphics.image.loader.ImageSize getSize()>();
        $r24 = virtualinvoke $r16.<org.apache.xmlgraphics.image.loader.ImageSize: java.awt.geom.Dimension2D getDimensionPt()>();
        $r25 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        staticinvoke <org.apache.xmlgraphics.ps.PSImageUtils: void paintForm(org.apache.xmlgraphics.ps.PSResource,java.awt.geom.Dimension2D,java.awt.geom.Rectangle2D,org.apache.xmlgraphics.ps.PSGenerator)>(form, $r24, targetRect, $r25);

     label20:
        goto label26;

     label21:
        $r26 := @caughtexception;
        ie = $r26;
        $r0 = <org.apache.fop.render.ps.PSRenderer: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error while processing image: ");
        if info == null goto label22;

        $r10 = virtualinvoke info.<org.apache.xmlgraphics.image.loader.ImageInfo: java.lang.String toString()>();
        goto label23;

     label22:
        $r10 = uri;

     label23:
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r2, ie);
        goto label26;

     label24:
        $r27 := @caughtexception;
        fe = $r27;
        $r0 = <org.apache.fop.render.ps.PSRenderer: org.apache.commons.logging.Log log>;
        $r2 = virtualinvoke fe.<java.io.FileNotFoundException: java.lang.String getMessage()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r2);
        goto label26;

     label25:
        $r28 := @caughtexception;
        ioe = $r28;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void handleIOTrouble(java.io.IOException)>(ioe);

     label26:
        return;

        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
        catch org.apache.xmlgraphics.image.loader.ImageException from label1 to label20 with label21;
        catch java.io.FileNotFoundException from label1 to label20 with label24;
        catch java.io.IOException from label1 to label20 with label25;
    }

    private org.apache.xmlgraphics.image.loader.ImageFlavor[] getInlineFlavors()
    {
        org.apache.fop.render.ps.PSRenderer this;
        org.apache.xmlgraphics.image.loader.ImageFlavor[] flavors;
        org.apache.xmlgraphics.ps.PSGenerator $r0;
        int $i0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $i0 = virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: int getPSLevel()>();
        if $i0 < 3 goto label0;

        flavors = <org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.image.loader.ImageFlavor[] LEVEL_3_FLAVORS_INLINE>;
        goto label1;

     label0:
        flavors = <org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.image.loader.ImageFlavor[] LEVEL_2_FLAVORS_INLINE>;

     label1:
        return flavors;
    }

    private org.apache.xmlgraphics.image.loader.ImageFlavor[] getFormFlavors()
    {
        org.apache.fop.render.ps.PSRenderer this;
        org.apache.xmlgraphics.image.loader.ImageFlavor[] flavors;
        org.apache.xmlgraphics.ps.PSGenerator $r0;
        int $i0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $i0 = virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: int getPSLevel()>();
        if $i0 < 3 goto label0;

        flavors = <org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.image.loader.ImageFlavor[] LEVEL_3_FLAVORS_FORM>;
        goto label1;

     label0:
        flavors = <org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.image.loader.ImageFlavor[] LEVEL_2_FLAVORS_FORM>;

     label1:
        return flavors;
    }

    protected org.apache.xmlgraphics.ps.PSResource getFormForImage(java.lang.String)
    {
        org.apache.fop.render.ps.PSRenderer this;
        java.lang.String uri, $r0;
        org.apache.xmlgraphics.ps.PSResource form;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        java.util.Map $r2, $r6;
        java.util.HashMap $r3;
        java.lang.Object $r4;
        org.apache.fop.render.ps.PSImageFormResource $r5;
        int $i0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        uri := @parameter0: java.lang.String;
        if uri == null goto label0;

        $r0 = "";
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(uri);
        if $z0 == 0 goto label1;

     label0:
        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("uri must not be empty or null");
        throw $r1;

     label1:
        $r2 = this.<org.apache.fop.render.ps.PSRenderer: java.util.Map formResources>;
        if $r2 != null goto label2;

        $r3 = new java.util.HashMap;
        specialinvoke $r3.<java.util.HashMap: void <init>()>();
        this.<org.apache.fop.render.ps.PSRenderer: java.util.Map formResources> = $r3;

     label2:
        $r2 = this.<org.apache.fop.render.ps.PSRenderer: java.util.Map formResources>;
        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(uri);
        form = (org.apache.xmlgraphics.ps.PSResource) $r4;
        if form != null goto label3;

        $r5 = new org.apache.fop.render.ps.PSImageFormResource;
        $r6 = this.<org.apache.fop.render.ps.PSRenderer: java.util.Map formResources>;
        $i0 = interfaceinvoke $r6.<java.util.Map: int size()>();
        $i0 = $i0 + 1;
        specialinvoke $r5.<org.apache.fop.render.ps.PSImageFormResource: void <init>(int,java.lang.String)>($i0, uri);
        form = $r5;
        $r2 = this.<org.apache.fop.render.ps.PSRenderer: java.util.Map formResources>;
        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(uri, form);

     label3:
        return form;
    }

    public void paintImage(java.awt.image.RenderedImage, org.apache.fop.render.RendererContext, int, int, int, int) throws java.io.IOException
    {
        org.apache.fop.render.ps.PSRenderer this;
        java.awt.image.RenderedImage image;
        org.apache.fop.render.RendererContext context;
        int x, y, width, height, $i0, x, y;
        float fx, fy, fw, fh, $f0, $f1;
        org.apache.xmlgraphics.ps.PSGenerator $r0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        image := @parameter0: java.awt.image.RenderedImage;
        context := @parameter1: org.apache.fop.render.RendererContext;
        x := @parameter2: int;
        y := @parameter3: int;
        width := @parameter4: int;
        height := @parameter5: int;
        $f0 = (float) x;
        fx = $f0 / 1000.0F;
        $f0 = (float) x;
        $i0 = this.<org.apache.fop.render.ps.PSRenderer: int currentIPPosition>;
        $f1 = (float) $i0;
        $f1 = $f1 / 1000.0F;
        $f0 = $f0 + $f1;
        x = (int) $f0;
        $f0 = (float) y;
        fy = $f0 / 1000.0F;
        $f0 = (float) y;
        $i0 = this.<org.apache.fop.render.ps.PSRenderer: int currentBPPosition>;
        $f1 = (float) $i0;
        $f1 = $f1 / 1000.0F;
        $f0 = $f0 + $f1;
        y = (int) $f0;
        $f0 = (float) width;
        fw = $f0 / 1000.0F;
        $f0 = (float) height;
        fh = $f0 / 1000.0F;
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        staticinvoke <org.apache.xmlgraphics.ps.PSImageUtils: void renderBitmapImage(java.awt.image.RenderedImage,float,float,float,float,org.apache.xmlgraphics.ps.PSGenerator)>(image, fx, fy, fw, fh, $r0);
        return;
    }

    private void drawLine(float, float, float, float)
    {
        org.apache.fop.render.ps.PSRenderer this;
        float startx, starty, endx, endy;
        java.lang.StringBuffer $r0;
        org.apache.xmlgraphics.ps.PSGenerator $r1;
        double $d0;
        java.lang.String $r2, $r3;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        startx := @parameter0: float;
        starty := @parameter1: float;
        endx := @parameter2: float;
        endy := @parameter3: float;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $d0 = (double) startx;
        $r2 = virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: java.lang.String formatDouble(double)>($d0);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $d0 = (double) starty;
        $r2 = virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: java.lang.String formatDouble(double)>($d0);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" M ");
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $d0 = (double) endx;
        $r2 = virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: java.lang.String formatDouble(double)>($d0);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $d0 = (double) endy;
        $r2 = virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: java.lang.String formatDouble(double)>($d0);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" lineto stroke newpath");
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void writeln(java.lang.String)>($r3);
        return;
    }

    public void saveGraphicsState()
    {
        org.apache.fop.render.ps.PSRenderer this;
        java.io.IOException ioe, $r1;
        org.apache.xmlgraphics.ps.PSGenerator $r0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void endTextObject()>();

     label0:
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void saveGraphicsState()>();

     label1:
        goto label3;

     label2:
        $r1 := @caughtexception;
        ioe = $r1;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void handleIOTrouble(java.io.IOException)>(ioe);

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public void restoreGraphicsState()
    {
        org.apache.fop.render.ps.PSRenderer this;
        java.io.IOException ioe, $r1;
        org.apache.xmlgraphics.ps.PSGenerator $r0;

        this := @this: org.apache.fop.render.ps.PSRenderer;

     label0:
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void endTextObject()>();
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: boolean restoreGraphicsState()>();

     label1:
        goto label3;

     label2:
        $r1 := @caughtexception;
        ioe = $r1;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void handleIOTrouble(java.io.IOException)>(ioe);

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    protected void concatMatrix(double, double, double, double, double, double)
    {
        org.apache.fop.render.ps.PSRenderer this;
        double a, b, c, d, e, f;
        java.io.IOException ioe, $r1;
        org.apache.xmlgraphics.ps.PSGenerator $r0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        a := @parameter0: double;
        b := @parameter1: double;
        c := @parameter2: double;
        d := @parameter3: double;
        e := @parameter4: double;
        f := @parameter5: double;

     label0:
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void concatMatrix(double,double,double,double,double,double)>(a, b, c, d, e, f);

     label1:
        goto label3;

     label2:
        $r1 := @caughtexception;
        ioe = $r1;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void handleIOTrouble(java.io.IOException)>(ioe);

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    protected void concatMatrix(double[])
    {
        org.apache.fop.render.ps.PSRenderer this;
        double[] matrix;
        java.io.IOException ioe, $r1;
        org.apache.xmlgraphics.ps.PSGenerator $r0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        matrix := @parameter0: double[];

     label0:
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void concatMatrix(double[])>(matrix);

     label1:
        goto label3;

     label2:
        $r1 := @caughtexception;
        ioe = $r1;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void handleIOTrouble(java.io.IOException)>(ioe);

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    protected void concatenateTransformationMatrix(java.awt.geom.AffineTransform)
    {
        org.apache.fop.render.ps.PSRenderer this;
        java.awt.geom.AffineTransform at;
        java.io.IOException ioe, $r1;
        org.apache.xmlgraphics.ps.PSGenerator $r0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        at := @parameter0: java.awt.geom.AffineTransform;

     label0:
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void concatMatrix(java.awt.geom.AffineTransform)>(at);

     label1:
        goto label3;

     label2:
        $r1 := @caughtexception;
        ioe = $r1;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void handleIOTrouble(java.io.IOException)>(ioe);

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    private java.lang.String getPostScriptNameForFontKey(java.lang.String)
    {
        org.apache.fop.render.ps.PSRenderer this;
        java.lang.String key, $r5, $r6;
        java.util.Map fonts;
        org.apache.fop.fonts.Typeface tf;
        java.lang.StringBuffer $r0;
        org.apache.fop.fonts.FontInfo $r1;
        java.lang.Object $r2;
        boolean $z0;
        org.apache.fop.fonts.LazyFont $r3;
        java.lang.IllegalStateException $r4;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        key := @parameter0: java.lang.String;
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.fonts.FontInfo fontInfo>;
        fonts = virtualinvoke $r1.<org.apache.fop.fonts.FontInfo: java.util.Map getFonts()>();
        $r2 = interfaceinvoke fonts.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);
        tf = (org.apache.fop.fonts.Typeface) $r2;
        $z0 = tf instanceof org.apache.fop.fonts.LazyFont;
        if $z0 == 0 goto label0;

        $r3 = (org.apache.fop.fonts.LazyFont) tf;
        tf = virtualinvoke $r3.<org.apache.fop.fonts.LazyFont: org.apache.fop.fonts.Typeface getRealFont()>();

     label0:
        if tf != null goto label1;

        $r4 = new java.lang.IllegalStateException;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Font not available: ");
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(key);
        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);
        throw $r4;

     label1:
        $r6 = virtualinvoke tf.<org.apache.fop.fonts.Typeface: java.lang.String getFontName()>();
        return $r6;
    }

    protected org.apache.xmlgraphics.ps.PSResource getPSResourceForFontKey(java.lang.String)
    {
        org.apache.fop.render.ps.PSRenderer this;
        java.lang.String key, $r4;
        org.apache.xmlgraphics.ps.PSResource res, $r3;
        java.util.Map $r0;
        java.lang.Object $r1;
        java.util.HashMap $r2;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        key := @parameter0: java.lang.String;
        res = null;
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: java.util.Map fontResources>;
        if $r0 == null goto label0;

        $r0 = this.<org.apache.fop.render.ps.PSRenderer: java.util.Map fontResources>;
        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);
        res = (org.apache.xmlgraphics.ps.PSResource) $r1;
        goto label1;

     label0:
        $r2 = new java.util.HashMap;
        specialinvoke $r2.<java.util.HashMap: void <init>()>();
        this.<org.apache.fop.render.ps.PSRenderer: java.util.Map fontResources> = $r2;

     label1:
        if res != null goto label2;

        $r3 = new org.apache.xmlgraphics.ps.PSResource;
        $r4 = specialinvoke this.<org.apache.fop.render.ps.PSRenderer: java.lang.String getPostScriptNameForFontKey(java.lang.String)>(key);
        specialinvoke $r3.<org.apache.xmlgraphics.ps.PSResource: void <init>(java.lang.String,java.lang.String)>("font", $r4);
        res = $r3;
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: java.util.Map fontResources>;
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, res);

     label2:
        return res;
    }

    protected void useFont(java.lang.String, int)
    {
        org.apache.fop.render.ps.PSRenderer this;
        java.lang.String key, $r2, $r3;
        int size;
        org.apache.xmlgraphics.ps.PSResource res;
        java.io.IOException ioe, $r5;
        org.apache.xmlgraphics.ps.PSGenerator $r0;
        java.lang.StringBuffer $r1;
        float $f0;
        org.apache.xmlgraphics.ps.dsc.ResourceTracker $r4;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        key := @parameter0: java.lang.String;
        size := @parameter1: int;

     label0:
        res = virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSResource getPSResourceForFontKey(java.lang.String)>(key);
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");
        $r2 = virtualinvoke res.<org.apache.xmlgraphics.ps.PSResource: java.lang.String getName()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        $f0 = (float) size;
        $f0 = $f0 / 1000.0F;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void useFont(java.lang.String,float)>($r3, $f0);
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r4 = virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: org.apache.xmlgraphics.ps.dsc.ResourceTracker getResourceTracker()>();
        virtualinvoke $r4.<org.apache.xmlgraphics.ps.dsc.ResourceTracker: void notifyResourceUsageOnPage(org.apache.xmlgraphics.ps.PSResource)>(res);

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        ioe = $r5;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void handleIOTrouble(java.io.IOException)>(ioe);

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    private void useColor(java.awt.Color) throws java.io.IOException
    {
        org.apache.fop.render.ps.PSRenderer this;
        java.awt.Color col;
        org.apache.xmlgraphics.ps.PSGenerator $r0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        col := @parameter0: java.awt.Color;
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void useColor(java.awt.Color)>(col);
        return;
    }

    protected void drawBackAndBorders(org.apache.fop.area.Area, float, float, float, float)
    {
        org.apache.fop.render.ps.PSRenderer this;
        org.apache.fop.area.Area area;
        float startx, starty, width, height;
        java.lang.Integer $r0;
        boolean $z0;
        java.lang.StringBuffer $r1;
        java.lang.String $r2;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        area := @parameter0: org.apache.fop.area.Area;
        startx := @parameter1: float;
        starty := @parameter2: float;
        width := @parameter3: float;
        height := @parameter4: float;
        $r0 = <org.apache.fop.area.Trait: java.lang.Integer BACKGROUND>;
        $z0 = virtualinvoke area.<org.apache.fop.area.Area: boolean hasTrait(java.lang.Object)>($r0);
        if $z0 != 0 goto label0;

        $r0 = <org.apache.fop.area.Trait: java.lang.Integer BORDER_BEFORE>;
        $z0 = virtualinvoke area.<org.apache.fop.area.Area: boolean hasTrait(java.lang.Object)>($r0);
        if $z0 != 0 goto label0;

        $r0 = <org.apache.fop.area.Trait: java.lang.Integer BORDER_AFTER>;
        $z0 = virtualinvoke area.<org.apache.fop.area.Area: boolean hasTrait(java.lang.Object)>($r0);
        if $z0 != 0 goto label0;

        $r0 = <org.apache.fop.area.Trait: java.lang.Integer BORDER_START>;
        $z0 = virtualinvoke area.<org.apache.fop.area.Area: boolean hasTrait(java.lang.Object)>($r0);
        if $z0 != 0 goto label0;

        $r0 = <org.apache.fop.area.Trait: java.lang.Integer BORDER_END>;
        $z0 = virtualinvoke area.<org.apache.fop.area.Area: boolean hasTrait(java.lang.Object)>($r0);
        if $z0 == 0 goto label1;

     label0:
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("%FOPBeginBackgroundAndBorder: ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>(startx);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>(starty);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>(width);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>(height);
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void comment(java.lang.String)>($r2);
        specialinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void drawBackAndBorders(org.apache.fop.area.Area,float,float,float,float)>(area, startx, starty, width, height);
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void comment(java.lang.String)>("%FOPEndBackgroundAndBorder");

     label1:
        return;
    }

    protected void drawBorderLine(float, float, float, float, boolean, boolean, int, java.awt.Color)
    {
        org.apache.fop.render.ps.PSRenderer this;
        float x1, y1, x2, y2, w, h, unit, ym, xm, h3, ym1, ym2, w3, xm1, xm2, colFactor, $f0, $f1, $f2, $f3, $f4;
        boolean horz, startOrBefore;
        int style, rep, $i1;
        java.awt.Color col, uppercol, lowercol, leftcol, rightcol, c;
        java.io.IOException ioe, $r5;
        byte $b0, $b2;
        org.apache.commons.logging.Log $r0;
        org.apache.xmlgraphics.ps.PSGenerator $r1;
        java.lang.StringBuffer $r2;
        java.lang.String $r3;
        double $d0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        x1 := @parameter0: float;
        y1 := @parameter1: float;
        x2 := @parameter2: float;
        y2 := @parameter3: float;
        horz := @parameter4: boolean;
        startOrBefore := @parameter5: boolean;
        style := @parameter6: int;
        col := @parameter7: java.awt.Color;

     label0:
        w = x2 - x1;
        h = y2 - y1;
        $b0 = w cmpg 0.0F;
        if $b0 < 0 goto label1;

        $b0 = h cmpg 0.0F;
        if $b0 >= 0 goto label3;

     label1:
        $r0 = <org.apache.fop.render.ps.PSRenderer: org.apache.commons.logging.Log log>;
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void error(java.lang.Object)>("Negative extent received. Border won\'t be painted.");

     label2:
        return;

     label3:
        lookupswitch(style)
        {
            case 31: goto label4;
            case 36: goto label8;
            case 37: goto label12;
            case 55: goto label14;
            case 57: goto label26;
            case 67: goto label18;
            case 101: goto label18;
            case 119: goto label14;
            default: goto label27;
        };

     label4:
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void useColor(java.awt.Color)>(col);
        if horz == 0 goto label6;

        $f0 = 2.0F * h;
        unit = staticinvoke <java.lang.Math: float abs(float)>($f0);
        $f0 = w / unit;
        rep = (int) $f0;
        $i1 = rep % 2;
        if $i1 != 0 goto label5;

        rep = rep + 1;

     label5:
        $f1 = (float) rep;
        unit = w / $f1;
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>(unit);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] 0");
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useDash(java.lang.String)>($r3);
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useLineCap(int)>(0);
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $d0 = (double) h;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useLineWidth(double)>($d0);
        $f1 = h / 2.0F;
        ym = y1 + $f1;
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void drawLine(float,float,float,float)>(x1, ym, x2, ym);
        goto label29;

     label6:
        $f0 = 2.0F * w;
        unit = staticinvoke <java.lang.Math: float abs(float)>($f0);
        $f0 = h / unit;
        rep = (int) $f0;
        $i1 = rep % 2;
        if $i1 != 0 goto label7;

        rep = rep + 1;

     label7:
        $f1 = (float) rep;
        unit = h / $f1;
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>(unit);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] 0");
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useDash(java.lang.String)>($r3);
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useLineCap(int)>(0);
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $d0 = (double) w;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useLineWidth(double)>($d0);
        $f1 = w / 2.0F;
        xm = x1 + $f1;
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void drawLine(float,float,float,float)>(xm, y1, xm, y2);
        goto label29;

     label8:
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void useColor(java.awt.Color)>(col);
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useLineCap(int)>(1);
        if horz == 0 goto label10;

        $f0 = 2.0F * h;
        unit = staticinvoke <java.lang.Math: float abs(float)>($f0);
        $f0 = w / unit;
        rep = (int) $f0;
        $i1 = rep % 2;
        if $i1 != 0 goto label9;

        rep = rep + 1;

     label9:
        $f1 = (float) rep;
        unit = w / $f1;
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[0 ");
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>(unit);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] 0");
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useDash(java.lang.String)>($r3);
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $d0 = (double) h;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useLineWidth(double)>($d0);
        $f1 = h / 2.0F;
        ym = y1 + $f1;
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void drawLine(float,float,float,float)>(x1, ym, x2, ym);
        goto label29;

     label10:
        $f0 = 2.0F * w;
        unit = staticinvoke <java.lang.Math: float abs(float)>($f0);
        $f0 = h / unit;
        rep = (int) $f0;
        $i1 = rep % 2;
        if $i1 != 0 goto label11;

        rep = rep + 1;

     label11:
        $f1 = (float) rep;
        unit = h / $f1;
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[0 ");
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>(unit);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] 0");
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useDash(java.lang.String)>($r3);
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $d0 = (double) w;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useLineWidth(double)>($d0);
        $f1 = w / 2.0F;
        xm = x1 + $f1;
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void drawLine(float,float,float,float)>(xm, y1, xm, y2);
        goto label29;

     label12:
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void useColor(java.awt.Color)>(col);
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useDash(java.lang.String)>(null);
        if horz == 0 goto label13;

        h3 = h / 3.0F;
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $d0 = (double) h3;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useLineWidth(double)>($d0);
        $f1 = h3 / 2.0F;
        ym1 = y1 + $f1;
        $f0 = ym1 + h3;
        ym2 = $f0 + h3;
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void drawLine(float,float,float,float)>(x1, ym1, x2, ym1);
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void drawLine(float,float,float,float)>(x1, ym2, x2, ym2);
        goto label29;

     label13:
        w3 = w / 3.0F;
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $d0 = (double) w3;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useLineWidth(double)>($d0);
        $f1 = w3 / 2.0F;
        xm1 = x1 + $f1;
        $f0 = xm1 + w3;
        xm2 = $f0 + w3;
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void drawLine(float,float,float,float)>(xm1, y1, xm1, y2);
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void drawLine(float,float,float,float)>(xm2, y1, xm2, y2);
        goto label29;

     label14:
        if style != 55 goto label15;

        $f0 = 0.4F;
        goto label16;

     label15:
        $f0 = -0.4F;

     label16:
        colFactor = $f0;
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useDash(java.lang.String)>(null);
        if horz == 0 goto label17;

        $f1 = neg colFactor;
        uppercol = staticinvoke <org.apache.fop.render.ps.PSRenderer: java.awt.Color lightenColor(java.awt.Color,float)>(col, $f1);
        lowercol = staticinvoke <org.apache.fop.render.ps.PSRenderer: java.awt.Color lightenColor(java.awt.Color,float)>(col, colFactor);
        h3 = h / 3.0F;
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $d0 = (double) h3;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useLineWidth(double)>($d0);
        $f1 = h3 / 2.0F;
        ym1 = y1 + $f1;
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useColor(java.awt.Color)>(uppercol);
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void drawLine(float,float,float,float)>(x1, ym1, x2, ym1);
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useColor(java.awt.Color)>(col);
        $f2 = ym1 + h3;
        $f3 = ym1 + h3;
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void drawLine(float,float,float,float)>(x1, $f2, x2, $f3);
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useColor(java.awt.Color)>(lowercol);
        $f2 = ym1 + h3;
        $f2 = $f2 + h3;
        $f3 = ym1 + h3;
        $f3 = $f3 + h3;
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void drawLine(float,float,float,float)>(x1, $f2, x2, $f3);
        goto label29;

     label17:
        $f1 = neg colFactor;
        leftcol = staticinvoke <org.apache.fop.render.ps.PSRenderer: java.awt.Color lightenColor(java.awt.Color,float)>(col, $f1);
        rightcol = staticinvoke <org.apache.fop.render.ps.PSRenderer: java.awt.Color lightenColor(java.awt.Color,float)>(col, colFactor);
        w3 = w / 3.0F;
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $d0 = (double) w3;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useLineWidth(double)>($d0);
        $f1 = w3 / 2.0F;
        xm1 = x1 + $f1;
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useColor(java.awt.Color)>(leftcol);
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void drawLine(float,float,float,float)>(xm1, y1, xm1, y2);
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useColor(java.awt.Color)>(col);
        $f1 = xm1 + w3;
        $f4 = xm1 + w3;
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void drawLine(float,float,float,float)>($f1, y1, $f4, y2);
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useColor(java.awt.Color)>(rightcol);
        $f1 = xm1 + w3;
        $f1 = $f1 + w3;
        $f4 = xm1 + w3;
        $f4 = $f4 + w3;
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void drawLine(float,float,float,float)>($f1, y1, $f4, y2);
        goto label29;

     label18:
        if style != 101 goto label19;

        $f0 = 0.4F;
        goto label20;

     label19:
        $f0 = -0.4F;

     label20:
        colFactor = $f0;
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useDash(java.lang.String)>(null);
        if horz == 0 goto label23;

        if startOrBefore == 0 goto label21;

        $b2 = 1;
        goto label22;

     label21:
        $b2 = -1;

     label22:
        $f1 = (float) $b2;
        $f1 = $f1 * colFactor;
        c = staticinvoke <org.apache.fop.render.ps.PSRenderer: java.awt.Color lightenColor(java.awt.Color,float)>(col, $f1);
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $d0 = (double) h;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useLineWidth(double)>($d0);
        $f1 = h / 2.0F;
        ym1 = y1 + $f1;
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useColor(java.awt.Color)>(c);
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void drawLine(float,float,float,float)>(x1, ym1, x2, ym1);
        goto label29;

     label23:
        if startOrBefore == 0 goto label24;

        $b2 = 1;
        goto label25;

     label24:
        $b2 = -1;

     label25:
        $f1 = (float) $b2;
        $f1 = $f1 * colFactor;
        c = staticinvoke <org.apache.fop.render.ps.PSRenderer: java.awt.Color lightenColor(java.awt.Color,float)>(col, $f1);
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $d0 = (double) w;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useLineWidth(double)>($d0);
        $f1 = w / 2.0F;
        xm1 = x1 + $f1;
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useColor(java.awt.Color)>(c);
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void drawLine(float,float,float,float)>(xm1, y1, xm1, y2);
        goto label29;

     label26:
        goto label29;

     label27:
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void useColor(java.awt.Color)>(col);
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useDash(java.lang.String)>(null);
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useLineCap(int)>(0);
        if horz == 0 goto label28;

        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $d0 = (double) h;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useLineWidth(double)>($d0);
        $f1 = h / 2.0F;
        ym = y1 + $f1;
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void drawLine(float,float,float,float)>(x1, ym, x2, ym);
        goto label29;

     label28:
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $d0 = (double) w;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void useLineWidth(double)>($d0);
        $f1 = w / 2.0F;
        xm = x1 + $f1;
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void drawLine(float,float,float,float)>(xm, y1, xm, y2);

     label29:
        goto label31;

     label30:
        $r5 := @caughtexception;
        ioe = $r5;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void handleIOTrouble(java.io.IOException)>(ioe);

     label31:
        return;

        catch java.io.IOException from label0 to label2 with label30;
        catch java.io.IOException from label3 to label29 with label30;
    }

    public void startRenderer(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.fop.render.ps.PSRenderer this;
        java.io.OutputStream outputStream, out;
        org.apache.commons.logging.Log $r0;
        java.io.FileOutputStream out, $r2;
        boolean $z0, $z1;
        java.io.File $r1, $r3;
        java.io.BufferedOutputStream $r4;
        org.apache.fop.render.ps.PSRenderer$1 $r5;
        org.apache.xmlgraphics.ps.PSGenerator $r6;
        int $i0;
        org.apache.fop.render.ps.PSPageDeviceDictionary $r7, $r8;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        outputStream := @parameter0: java.io.OutputStream;
        $r0 = <org.apache.fop.render.ps.PSRenderer: org.apache.commons.logging.Log log>;
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Rendering areas to PostScript...");
        this.<org.apache.fop.render.ps.PSRenderer: java.io.OutputStream outputStream> = outputStream;
        $z0 = virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: boolean isOptimizeResources()>();
        if $z0 == 0 goto label0;

        $r1 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("fop", null);
        this.<org.apache.fop.render.ps.PSRenderer: java.io.File tempFile> = $r1;
        $r2 = new java.io.FileOutputStream;
        $r3 = this.<org.apache.fop.render.ps.PSRenderer: java.io.File tempFile>;
        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File)>($r3);
        out = $r2;
        $r4 = new java.io.BufferedOutputStream;
        specialinvoke $r4.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>(out);
        out = $r4;
        goto label1;

     label0:
        out = this.<org.apache.fop.render.ps.PSRenderer: java.io.OutputStream outputStream>;

     label1:
        $r5 = new org.apache.fop.render.ps.PSRenderer$1;
        specialinvoke $r5.<org.apache.fop.render.ps.PSRenderer$1: void <init>(org.apache.fop.render.ps.PSRenderer,java.io.OutputStream)>(this, out);
        this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen> = $r5;
        $r6 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $i0 = virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: int getLanguageLevel()>();
        virtualinvoke $r6.<org.apache.xmlgraphics.ps.PSGenerator: void setPSLevel(int)>($i0);
        this.<org.apache.fop.render.ps.PSRenderer: int currentPageNumber> = 0;
        $r7 = new org.apache.fop.render.ps.PSPageDeviceDictionary;
        specialinvoke $r7.<org.apache.fop.render.ps.PSPageDeviceDictionary: void <init>()>();
        this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.render.ps.PSPageDeviceDictionary pageDeviceDictionary> = $r7;
        $r8 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.render.ps.PSPageDeviceDictionary pageDeviceDictionary>;
        $z1 = this.<org.apache.fop.render.ps.PSRenderer: boolean dscCompliant>;
        if $z1 != 0 goto label2;

        $z1 = 1;
        goto label3;

     label2:
        $z1 = 0;

     label3:
        virtualinvoke $r8.<org.apache.fop.render.ps.PSPageDeviceDictionary: void setFlushOnRetrieval(boolean)>($z1);
        $r8 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.render.ps.PSPageDeviceDictionary pageDeviceDictionary>;
        virtualinvoke $r8.<org.apache.fop.render.ps.PSPageDeviceDictionary: java.lang.Object put(java.lang.Object,java.lang.Object)>("/ImagingBBox", "null");
        return;
    }

    private void writeHeader() throws java.io.IOException
    {
        org.apache.fop.render.ps.PSRenderer this;
        java.util.Iterator iter;
        org.apache.fop.render.ps.extensions.PSExtensionAttachment comment;
        org.apache.xmlgraphics.ps.PSGenerator $r0, $r7, $r17;
        java.lang.String[] $r1;
        org.apache.fop.apps.FOUserAgent $r2;
        java.lang.String $r3, $r14, $r15;
        java.lang.Object[] $r4;
        java.util.Date $r5;
        java.lang.Integer $r6;
        int $i0;
        java.lang.Object $r8, $r9, $r12;
        java.awt.geom.Rectangle2D$Double $r10;
        java.util.Collection $r11;
        boolean $z0;
        java.lang.StringBuffer $r13;
        java.util.List $r16;
        org.apache.fop.fonts.FontInfo $r18;
        java.util.Map $r19;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void writeln(java.lang.String)>("%!PS-Adobe-3.0");
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r1 = newarray (java.lang.String)[1];
        $r2 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.apps.FOUserAgent userAgent>;
        $r3 = virtualinvoke $r2.<org.apache.fop.apps.FOUserAgent: java.lang.String getProducer()>();
        $r1[0] = $r3;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String,java.lang.Object[])>("Creator", $r1);
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r4 = newarray (java.lang.Object)[1];
        $r5 = new java.util.Date;
        specialinvoke $r5.<java.util.Date: void <init>()>();
        $r4[0] = $r5;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String,java.lang.Object[])>("CreationDate", $r4);
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r6 = new java.lang.Integer;
        $r7 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $i0 = virtualinvoke $r7.<org.apache.xmlgraphics.ps.PSGenerator: int getPSLevel()>();
        specialinvoke $r6.<java.lang.Integer: void <init>(int)>($i0);
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String,java.lang.Object)>("LanguageLevel", $r6);
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r4 = newarray (java.lang.Object)[1];
        $r8 = <org.apache.xmlgraphics.ps.DSCConstants: java.lang.Object ATEND>;
        $r4[0] = $r8;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String,java.lang.Object[])>("Pages", $r4);
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r9 = <org.apache.xmlgraphics.ps.DSCConstants: java.lang.Object ATEND>;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String,java.lang.Object)>("BoundingBox", $r9);
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r9 = <org.apache.xmlgraphics.ps.DSCConstants: java.lang.Object ATEND>;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String,java.lang.Object)>("HiResBoundingBox", $r9);
        $r10 = new java.awt.geom.Rectangle2D$Double;
        specialinvoke $r10.<java.awt.geom.Rectangle2D$Double: void <init>()>();
        this.<org.apache.fop.render.ps.PSRenderer: java.awt.geom.Rectangle2D documentBoundingBox> = $r10;
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r4 = newarray (java.lang.Object)[1];
        $r8 = <org.apache.xmlgraphics.ps.DSCConstants: java.lang.Object ATEND>;
        $r4[0] = $r8;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String,java.lang.Object[])>("DocumentSuppliedResources", $r4);
        $r11 = this.<org.apache.fop.render.ps.PSRenderer: java.util.Collection headerComments>;
        if $r11 == null goto label1;

        $r11 = this.<org.apache.fop.render.ps.PSRenderer: java.util.Collection headerComments>;
        iter = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        $r12 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();
        comment = (org.apache.fop.render.ps.extensions.PSExtensionAttachment) $r12;
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r13 = new java.lang.StringBuffer;
        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();
        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("%");
        $r14 = virtualinvoke comment.<org.apache.fop.render.ps.extensions.PSExtensionAttachment: java.lang.String getContent()>();
        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);
        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void writeln(java.lang.String)>($r15);
        goto label0;

     label1:
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String)>("EndComments");
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String)>("BeginDefaults");
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String)>("EndDefaults");
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String)>("BeginProlog");
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        staticinvoke <org.apache.xmlgraphics.ps.PSProcSets: void writeStdProcSet(org.apache.xmlgraphics.ps.PSGenerator)>($r0);
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        staticinvoke <org.apache.xmlgraphics.ps.PSProcSets: void writeEPSProcSet(org.apache.xmlgraphics.ps.PSGenerator)>($r0);
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String)>("EndProlog");
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String)>("BeginSetup");
        $r16 = this.<org.apache.fop.render.ps.PSRenderer: java.util.List setupCodeList>;
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void writeSetupCodeList(java.util.List,java.lang.String)>($r16, "SetupCode");
        $z0 = virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: boolean isOptimizeResources()>();
        if $z0 != 0 goto label2;

        $r17 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r18 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.fonts.FontInfo fontInfo>;
        $r19 = staticinvoke <org.apache.fop.render.ps.PSFontUtils: java.util.Map writeFontDict(org.apache.xmlgraphics.ps.PSGenerator,org.apache.fop.fonts.FontInfo)>($r17, $r18);
        this.<org.apache.fop.render.ps.PSRenderer: java.util.Map fontResources> = $r19;
        goto label3;

     label2:
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void commentln(java.lang.String)>("%FOPFontSetup");

     label3:
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String)>("EndSetup");
        return;
    }

    public void stopRenderer() throws java.io.IOException
    {
        org.apache.fop.render.ps.PSRenderer this;
        java.util.Iterator iter;
        org.apache.fop.render.ps.extensions.PSExtensionAttachment comment;
        org.apache.xmlgraphics.ps.PSGenerator $r0, $r9, $r12;
        java.util.Collection $r1;
        boolean $z0;
        java.lang.Object $r2;
        java.lang.StringBuffer $r3;
        java.lang.String $r4, $r5;
        java.lang.Integer $r6;
        int $i0;
        org.apache.xmlgraphics.ps.dsc.events.DSCCommentBoundingBox $r7;
        java.awt.geom.Rectangle2D $r8;
        org.apache.xmlgraphics.ps.dsc.events.DSCCommentHiResBoundingBox $r10;
        org.apache.xmlgraphics.ps.dsc.ResourceTracker $r11;
        org.apache.commons.logging.Log $r13;
        java.io.OutputStream $r14;
        org.apache.fop.render.ps.PSPageDeviceDictionary $r15;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String)>("Trailer");
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: java.util.Collection footerComments>;
        if $r1 == null goto label2;

        $r1 = this.<org.apache.fop.render.ps.PSRenderer: java.util.Collection footerComments>;
        iter = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();
        comment = (org.apache.fop.render.ps.extensions.PSExtensionAttachment) $r2;
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("%");
        $r4 = virtualinvoke comment.<org.apache.fop.render.ps.extensions.PSExtensionAttachment: java.lang.String getContent()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);
        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void commentln(java.lang.String)>($r5);
        goto label0;

     label1:
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: java.util.Collection footerComments>;
        interfaceinvoke $r1.<java.util.Collection: void clear()>();

     label2:
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r6 = new java.lang.Integer;
        $i0 = this.<org.apache.fop.render.ps.PSRenderer: int currentPageNumber>;
        specialinvoke $r6.<java.lang.Integer: void <init>(int)>($i0);
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String,java.lang.Object)>("Pages", $r6);
        $r7 = new org.apache.xmlgraphics.ps.dsc.events.DSCCommentBoundingBox;
        $r8 = this.<org.apache.fop.render.ps.PSRenderer: java.awt.geom.Rectangle2D documentBoundingBox>;
        specialinvoke $r7.<org.apache.xmlgraphics.ps.dsc.events.DSCCommentBoundingBox: void <init>(java.awt.geom.Rectangle2D)>($r8);
        $r9 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r7.<org.apache.xmlgraphics.ps.dsc.events.DSCCommentBoundingBox: void generate(org.apache.xmlgraphics.ps.PSGenerator)>($r9);
        $r10 = new org.apache.xmlgraphics.ps.dsc.events.DSCCommentHiResBoundingBox;
        $r8 = this.<org.apache.fop.render.ps.PSRenderer: java.awt.geom.Rectangle2D documentBoundingBox>;
        specialinvoke $r10.<org.apache.xmlgraphics.ps.dsc.events.DSCCommentHiResBoundingBox: void <init>(java.awt.geom.Rectangle2D)>($r8);
        $r9 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r10.<org.apache.xmlgraphics.ps.dsc.events.DSCCommentHiResBoundingBox: void generate(org.apache.xmlgraphics.ps.PSGenerator)>($r9);
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r11 = virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: org.apache.xmlgraphics.ps.dsc.ResourceTracker getResourceTracker()>();
        $r12 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r11.<org.apache.xmlgraphics.ps.dsc.ResourceTracker: void writeResources(boolean,org.apache.xmlgraphics.ps.PSGenerator)>(0, $r12);
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String)>("EOF");
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: void flush()>();
        $r13 = <org.apache.fop.render.ps.PSRenderer: org.apache.commons.logging.Log log>;
        interfaceinvoke $r13.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Rendering to PostScript complete.");
        $z0 = virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: boolean isOptimizeResources()>();
        if $z0 == 0 goto label3;

        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r14 = virtualinvoke $r0.<org.apache.xmlgraphics.ps.PSGenerator: java.io.OutputStream getOutputStream()>();
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r14);
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void rewritePostScriptFile()>();

     label3:
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: java.util.Collection footerComments>;
        if $r1 == null goto label4;

        $r1 = this.<org.apache.fop.render.ps.PSRenderer: java.util.Collection headerComments>;
        interfaceinvoke $r1.<java.util.Collection: void clear()>();

     label4:
        $r15 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.render.ps.PSPageDeviceDictionary pageDeviceDictionary>;
        if $r15 == null goto label5;

        $r15 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.render.ps.PSPageDeviceDictionary pageDeviceDictionary>;
        virtualinvoke $r15.<org.apache.fop.render.ps.PSPageDeviceDictionary: void clear()>();

     label5:
        return;
    }

    private void rewritePostScriptFile() throws java.io.IOException
    {
        org.apache.fop.render.ps.PSRenderer this;
        org.apache.commons.logging.Log $r0;
        long startTime, duration, $l1;
        org.apache.xmlgraphics.ps.dsc.ResourceTracker resTracker;
        java.io.FileInputStream in, $r2;
        org.apache.xmlgraphics.ps.dsc.DSCException e, $r11;
        java.lang.Throwable l6, $r17;
        org.apache.xmlgraphics.ps.PSGenerator $r1;
        java.io.File $r3, $r14;
        java.io.BufferedInputStream $r4, in;
        org.apache.fop.apps.FOUserAgent $r5;
        java.io.OutputStream $r6, $r10;
        org.apache.fop.fonts.FontInfo $r7;
        java.util.Map $r8;
        int $i0;
        java.awt.geom.Rectangle2D $r9;
        java.lang.RuntimeException $r12;
        java.lang.String $r13, $r16;
        boolean $z0;
        java.lang.StringBuffer $r15;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        $r0 = <org.apache.fop.render.ps.PSRenderer: org.apache.commons.logging.Log log>;
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Processing PostScript resources...");
        startTime = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        resTracker = virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: org.apache.xmlgraphics.ps.dsc.ResourceTracker getResourceTracker()>();
        $r2 = new java.io.FileInputStream;
        $r3 = this.<org.apache.fop.render.ps.PSRenderer: java.io.File tempFile>;
        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>($r3);
        in = $r2;
        $r4 = new java.io.BufferedInputStream;
        specialinvoke $r4.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(in);
        in = $r4;

     label0:
        $r5 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.apps.FOUserAgent userAgent>;
        $r6 = this.<org.apache.fop.render.ps.PSRenderer: java.io.OutputStream outputStream>;
        $r7 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.fonts.FontInfo fontInfo>;
        $r8 = this.<org.apache.fop.render.ps.PSRenderer: java.util.Map formResources>;
        $i0 = this.<org.apache.fop.render.ps.PSRenderer: int currentPageNumber>;
        $r9 = this.<org.apache.fop.render.ps.PSRenderer: java.awt.geom.Rectangle2D documentBoundingBox>;
        staticinvoke <org.apache.fop.render.ps.ResourceHandler: void process(org.apache.fop.apps.FOUserAgent,java.io.InputStream,java.io.OutputStream,org.apache.fop.fonts.FontInfo,org.apache.xmlgraphics.ps.dsc.ResourceTracker,java.util.Map,int,java.awt.geom.Rectangle2D)>($r5, in, $r6, $r7, resTracker, $r8, $i0, $r9);
        $r10 = this.<org.apache.fop.render.ps.PSRenderer: java.io.OutputStream outputStream>;
        virtualinvoke $r10.<java.io.OutputStream: void flush()>();

     label1:
        goto label3;

     label2:
        $r11 := @caughtexception;
        e = $r11;
        $r12 = new java.lang.RuntimeException;
        $r13 = virtualinvoke e.<org.apache.xmlgraphics.ps.dsc.DSCException: java.lang.String getMessage()>();
        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13);
        throw $r12;

     label3:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(in);
        $r14 = this.<org.apache.fop.render.ps.PSRenderer: java.io.File tempFile>;
        $z0 = virtualinvoke $r14.<java.io.File: boolean delete()>();
        if $z0 != 0 goto label8;

        $r14 = this.<org.apache.fop.render.ps.PSRenderer: java.io.File tempFile>;
        virtualinvoke $r14.<java.io.File: void deleteOnExit()>();
        $r0 = <org.apache.fop.render.ps.PSRenderer: org.apache.commons.logging.Log log>;
        $r15 = new java.lang.StringBuffer;
        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();
        $r15 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not delete temporary file: ");
        $r3 = this.<org.apache.fop.render.ps.PSRenderer: java.io.File tempFile>;
        $r15 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);
        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r16);
        goto label8;

     label4:
        $r17 := @caughtexception;

     label5:
        l6 = $r17;

     label6:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(in);
        $r14 = this.<org.apache.fop.render.ps.PSRenderer: java.io.File tempFile>;
        $z0 = virtualinvoke $r14.<java.io.File: boolean delete()>();
        if $z0 != 0 goto label7;

        $r14 = this.<org.apache.fop.render.ps.PSRenderer: java.io.File tempFile>;
        virtualinvoke $r14.<java.io.File: void deleteOnExit()>();
        $r0 = <org.apache.fop.render.ps.PSRenderer: org.apache.commons.logging.Log log>;
        $r15 = new java.lang.StringBuffer;
        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();
        $r15 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not delete temporary file: ");
        $r3 = this.<org.apache.fop.render.ps.PSRenderer: java.io.File tempFile>;
        $r15 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);
        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r16);

     label7:
        throw l6;

     label8:
        $r0 = <org.apache.fop.render.ps.PSRenderer: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label9;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        duration = $l1 - startTime;
        $r0 = <org.apache.fop.render.ps.PSRenderer: org.apache.commons.logging.Log log>;
        $r15 = new java.lang.StringBuffer;
        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();
        $r15 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Resource Processing complete in ");
        $r15 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(duration);
        $r15 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ms.");
        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r16);

     label9:
        return;

        catch org.apache.xmlgraphics.ps.dsc.DSCException from label0 to label1 with label2;
        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void processOffDocumentItem(org.apache.fop.area.OffDocumentItem)
    {
        org.apache.fop.render.ps.PSRenderer this;
        org.apache.fop.area.OffDocumentItem oDI;
        org.apache.commons.logging.Log $r0;
        java.lang.StringBuffer $r1;
        org.apache.fop.fo.extensions.ExtensionAttachment attachment;
        org.apache.fop.render.ps.extensions.PSSetPageDevice setPageDevice;
        java.lang.String content, $r2, $r3, $r5;
        org.apache.fop.render.ps.PSDictionaryFormatException e, $r10;
        boolean $z0;
        org.apache.fop.area.OffDocumentExtensionAttachment $r4;
        java.util.List $r6;
        java.util.ArrayList $r7;
        org.apache.fop.render.ps.PSPageDeviceDictionary $r8;
        org.apache.fop.render.ps.PSDictionary $r9;
        java.util.Collection $r11;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        oDI := @parameter0: org.apache.fop.area.OffDocumentItem;
        $r0 = <org.apache.fop.render.ps.PSRenderer: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label0;

        $r0 = <org.apache.fop.render.ps.PSRenderer: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Handling OffDocumentItem: ");
        $r2 = interfaceinvoke oDI.<org.apache.fop.area.OffDocumentItem: java.lang.String getName()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r3);

     label0:
        $z0 = oDI instanceof org.apache.fop.area.OffDocumentExtensionAttachment;
        if $z0 == 0 goto label11;

        $r4 = (org.apache.fop.area.OffDocumentExtensionAttachment) oDI;
        attachment = virtualinvoke $r4.<org.apache.fop.area.OffDocumentExtensionAttachment: org.apache.fop.fo.extensions.ExtensionAttachment getAttachment()>();
        if attachment == null goto label11;

        $r5 = "apache:fop:extensions:postscript";
        $r3 = interfaceinvoke attachment.<org.apache.fop.fo.extensions.ExtensionAttachment: java.lang.String getCategory()>();
        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r3);
        if $z0 == 0 goto label11;

        $z0 = attachment instanceof org.apache.fop.render.ps.extensions.PSSetupCode;
        if $z0 == 0 goto label2;

        $r6 = this.<org.apache.fop.render.ps.PSRenderer: java.util.List setupCodeList>;
        if $r6 != null goto label1;

        $r7 = new java.util.ArrayList;
        specialinvoke $r7.<java.util.ArrayList: void <init>()>();
        this.<org.apache.fop.render.ps.PSRenderer: java.util.List setupCodeList> = $r7;

     label1:
        $r6 = this.<org.apache.fop.render.ps.PSRenderer: java.util.List setupCodeList>;
        $z0 = interfaceinvoke $r6.<java.util.List: boolean contains(java.lang.Object)>(attachment);
        if $z0 != 0 goto label11;

        $r6 = this.<org.apache.fop.render.ps.PSRenderer: java.util.List setupCodeList>;
        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(attachment);
        goto label11;

     label2:
        $z0 = attachment instanceof org.apache.fop.render.ps.extensions.PSSetPageDevice;
        if $z0 == 0 goto label7;

        setPageDevice = (org.apache.fop.render.ps.extensions.PSSetPageDevice) attachment;
        content = virtualinvoke setPageDevice.<org.apache.fop.render.ps.extensions.PSSetPageDevice: java.lang.String getContent()>();
        if content == null goto label6;

     label3:
        $r8 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.render.ps.PSPageDeviceDictionary pageDeviceDictionary>;
        $r9 = staticinvoke <org.apache.fop.render.ps.PSDictionary: org.apache.fop.render.ps.PSDictionary valueOf(java.lang.String)>(content);
        virtualinvoke $r8.<org.apache.fop.render.ps.PSPageDeviceDictionary: void putAll(java.util.Map)>($r9);

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;
        e = $r10;
        $r0 = <org.apache.fop.render.ps.PSRenderer: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to parse dictionary string: ");
        $r2 = virtualinvoke e.<org.apache.fop.render.ps.PSDictionaryFormatException: java.lang.String getMessage()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", content = \'");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(content);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r3);

     label6:
        goto label11;

     label7:
        $z0 = attachment instanceof org.apache.fop.render.ps.extensions.PSCommentBefore;
        if $z0 == 0 goto label9;

        $r11 = this.<org.apache.fop.render.ps.PSRenderer: java.util.Collection headerComments>;
        if $r11 != null goto label8;

        $r7 = new java.util.ArrayList;
        specialinvoke $r7.<java.util.ArrayList: void <init>()>();
        this.<org.apache.fop.render.ps.PSRenderer: java.util.Collection headerComments> = $r7;

     label8:
        $r11 = this.<org.apache.fop.render.ps.PSRenderer: java.util.Collection headerComments>;
        interfaceinvoke $r11.<java.util.Collection: boolean add(java.lang.Object)>(attachment);
        goto label11;

     label9:
        $z0 = attachment instanceof org.apache.fop.render.ps.extensions.PSCommentAfter;
        if $z0 == 0 goto label11;

        $r11 = this.<org.apache.fop.render.ps.PSRenderer: java.util.Collection footerComments>;
        if $r11 != null goto label10;

        $r7 = new java.util.ArrayList;
        specialinvoke $r7.<java.util.ArrayList: void <init>()>();
        this.<org.apache.fop.render.ps.PSRenderer: java.util.Collection footerComments> = $r7;

     label10:
        $r11 = this.<org.apache.fop.render.ps.PSRenderer: java.util.Collection footerComments>;
        interfaceinvoke $r11.<java.util.Collection: boolean add(java.lang.Object)>(attachment);

     label11:
        specialinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void processOffDocumentItem(org.apache.fop.area.OffDocumentItem)>(oDI);
        return;

        catch org.apache.fop.render.ps.PSDictionaryFormatException from label3 to label4 with label5;
    }

    private void writeSetupCodeList(java.util.List, java.lang.String) throws java.io.IOException
    {
        org.apache.fop.render.ps.PSRenderer this;
        java.util.List setupCodeList;
        java.lang.String type, line, $r3, $r4, $r7, $r8;
        java.util.Iterator i;
        org.apache.fop.render.ps.extensions.PSSetupCode setupCode;
        java.lang.StringBuffer $r0;
        java.io.LineNumberReader reader, $r5;
        boolean $z0;
        java.lang.Object $r1;
        org.apache.xmlgraphics.ps.PSGenerator $r2;
        java.io.StringReader $r6;
        int $i0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        setupCodeList := @parameter0: java.util.List;
        type := @parameter1: java.lang.String;
        if setupCodeList == null goto label5;

        i = interfaceinvoke setupCodeList.<java.util.List: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label5;

        $r1 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();
        setupCode = (org.apache.fop.render.ps.extensions.PSSetupCode) $r1;
        $r2 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("%FOPBegin");
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(type);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": (");
        $r3 = virtualinvoke setupCode.<org.apache.fop.render.ps.extensions.PSSetupCode: java.lang.String getName()>();
        if $r3 == null goto label1;

        $r3 = virtualinvoke setupCode.<org.apache.fop.render.ps.extensions.PSSetupCode: java.lang.String getName()>();
        goto label2;

     label1:
        $r3 = "";

     label2:
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");
        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r2.<org.apache.xmlgraphics.ps.PSGenerator: void commentln(java.lang.String)>($r4);
        $r5 = new java.io.LineNumberReader;
        $r6 = new java.io.StringReader;
        $r7 = virtualinvoke setupCode.<org.apache.fop.render.ps.extensions.PSSetupCode: java.lang.String getContent()>();
        specialinvoke $r6.<java.io.StringReader: void <init>(java.lang.String)>($r7);
        specialinvoke $r5.<java.io.LineNumberReader: void <init>(java.io.Reader)>($r6);
        reader = $r5;

     label3:
        $r8 = virtualinvoke reader.<java.io.LineNumberReader: java.lang.String readLine()>();
        line = $r8;
        if $r8 == null goto label4;

        line = virtualinvoke line.<java.lang.String: java.lang.String trim()>();
        $i0 = virtualinvoke line.<java.lang.String: int length()>();
        if $i0 <= 0 goto label3;

        $r2 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r4 = virtualinvoke line.<java.lang.String: java.lang.String trim()>();
        virtualinvoke $r2.<org.apache.xmlgraphics.ps.PSGenerator: void writeln(java.lang.String)>($r4);
        goto label3;

     label4:
        $r2 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("%FOPEnd");
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(type);
        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r2.<org.apache.xmlgraphics.ps.PSGenerator: void commentln(java.lang.String)>($r4);
        interfaceinvoke i.<java.util.Iterator: void remove()>();
        goto label0;

     label5:
        return;
    }

    public void renderPage(org.apache.fop.area.PageViewport) throws java.io.IOException, org.apache.fop.apps.FOPException
    {
        org.apache.fop.render.ps.PSRenderer this;
        org.apache.fop.area.PageViewport page;
        org.apache.commons.logging.Log $r0;
        java.lang.StringBuffer $r1, $r26;
        double pageWidth, pageHeight, $d0;
        boolean rotate, $z0;
        java.util.ArrayList pageSizes, $r11;
        java.util.Iterator iter;
        org.apache.fop.fo.extensions.ExtensionAttachment attachment;
        org.apache.fop.render.ps.extensions.PSSetPageDevice setPageDevice, $r27;
        java.lang.String content, $r2, $r8, $r18;
        org.apache.fop.render.ps.PSDictionaryFormatException e, $r17;
        java.lang.Integer zero, $r9, $r21;
        java.awt.geom.Rectangle2D$Double pageBoundingBox, $r22;
        java.util.List extensionAttachments, $r15, $r19;
        int i, $i0, $i1, $i2;
        java.lang.Object attObj, $r14, $r25;
        org.apache.xmlgraphics.ps.PSGenerator $r4, $r28;
        org.apache.xmlgraphics.ps.dsc.ResourceTracker $r5;
        org.apache.xmlgraphics.ps.PSResource $r6;
        java.lang.Object[] $r7;
        java.awt.geom.Rectangle2D $r10;
        long $l3, $l5, $l6, $l7;
        float $f0;
        byte $b4;
        java.lang.Long $r12, $r23;
        org.apache.fop.render.ps.PSPageDeviceDictionary $r13;
        org.apache.fop.render.ps.PSDictionary $r16;
        java.io.IOException $r20, e;
        java.lang.Double $r24;
        org.apache.fop.render.ps.extensions.PSExtensionAttachment attachment;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        page := @parameter0: org.apache.fop.area.PageViewport;
        $r0 = <org.apache.fop.render.ps.PSRenderer: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("renderPage(): ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(page);
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r2);
        $i0 = this.<org.apache.fop.render.ps.PSRenderer: int currentPageNumber>;
        if $i0 != 0 goto label0;

        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void writeHeader()>();

     label0:
        $i1 = this.<org.apache.fop.render.ps.PSRenderer: int currentPageNumber>;
        $i1 = $i1 + 1;
        this.<org.apache.fop.render.ps.PSRenderer: int currentPageNumber> = $i1;
        $r4 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r5 = virtualinvoke $r4.<org.apache.xmlgraphics.ps.PSGenerator: org.apache.xmlgraphics.ps.dsc.ResourceTracker getResourceTracker()>();
        virtualinvoke $r5.<org.apache.xmlgraphics.ps.dsc.ResourceTracker: void notifyStartNewPage()>();
        $r4 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r5 = virtualinvoke $r4.<org.apache.xmlgraphics.ps.PSGenerator: org.apache.xmlgraphics.ps.dsc.ResourceTracker getResourceTracker()>();
        $r6 = <org.apache.xmlgraphics.ps.PSProcSets: org.apache.xmlgraphics.ps.PSResource STD_PROCSET>;
        virtualinvoke $r5.<org.apache.xmlgraphics.ps.dsc.ResourceTracker: void notifyResourceUsageOnPage(org.apache.xmlgraphics.ps.PSResource)>($r6);
        $r4 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r7 = newarray (java.lang.Object)[2];
        $r8 = virtualinvoke page.<org.apache.fop.area.PageViewport: java.lang.String getPageNumberString()>();
        $r7[0] = $r8;
        $r9 = new java.lang.Integer;
        $i2 = this.<org.apache.fop.render.ps.PSRenderer: int currentPageNumber>;
        specialinvoke $r9.<java.lang.Integer: void <init>(int)>($i2);
        $r7[1] = $r9;
        virtualinvoke $r4.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String,java.lang.Object[])>("Page", $r7);
        $r10 = virtualinvoke page.<org.apache.fop.area.PageViewport: java.awt.geom.Rectangle2D getViewArea()>();
        $d0 = virtualinvoke $r10.<java.awt.geom.Rectangle2D: double getWidth()>();
        $l3 = staticinvoke <java.lang.Math: long round(double)>($d0);
        $f0 = (float) $l3;
        $f0 = $f0 / 1000.0F;
        pageWidth = (double) $f0;
        $r10 = virtualinvoke page.<org.apache.fop.area.PageViewport: java.awt.geom.Rectangle2D getViewArea()>();
        $d0 = virtualinvoke $r10.<java.awt.geom.Rectangle2D: double getHeight()>();
        $l3 = staticinvoke <java.lang.Math: long round(double)>($d0);
        $f0 = (float) $l3;
        $f0 = $f0 / 1000.0F;
        pageHeight = (double) $f0;
        rotate = 0;
        $r11 = new java.util.ArrayList;
        specialinvoke $r11.<java.util.ArrayList: void <init>()>();
        pageSizes = $r11;
        $z0 = this.<org.apache.fop.render.ps.PSRenderer: boolean autoRotateLandscape>;
        if $z0 == 0 goto label1;

        $b4 = pageHeight cmpg pageWidth;
        if $b4 >= 0 goto label1;

        rotate = 1;
        $r12 = new java.lang.Long;
        $l5 = staticinvoke <java.lang.Math: long round(double)>(pageHeight);
        specialinvoke $r12.<java.lang.Long: void <init>(long)>($l5);
        interfaceinvoke pageSizes.<java.util.List: boolean add(java.lang.Object)>($r12);
        $r12 = new java.lang.Long;
        $l5 = staticinvoke <java.lang.Math: long round(double)>(pageWidth);
        specialinvoke $r12.<java.lang.Long: void <init>(long)>($l5);
        interfaceinvoke pageSizes.<java.util.List: boolean add(java.lang.Object)>($r12);
        goto label2;

     label1:
        $r12 = new java.lang.Long;
        $l5 = staticinvoke <java.lang.Math: long round(double)>(pageWidth);
        specialinvoke $r12.<java.lang.Long: void <init>(long)>($l5);
        interfaceinvoke pageSizes.<java.util.List: boolean add(java.lang.Object)>($r12);
        $r12 = new java.lang.Long;
        $l5 = staticinvoke <java.lang.Math: long round(double)>(pageHeight);
        specialinvoke $r12.<java.lang.Long: void <init>(long)>($l5);
        interfaceinvoke pageSizes.<java.util.List: boolean add(java.lang.Object)>($r12);

     label2:
        $r13 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.render.ps.PSPageDeviceDictionary pageDeviceDictionary>;
        virtualinvoke $r13.<org.apache.fop.render.ps.PSPageDeviceDictionary: java.lang.Object put(java.lang.Object,java.lang.Object)>("/PageSize", pageSizes);
        $z0 = virtualinvoke page.<org.apache.fop.area.PageViewport: boolean hasExtensionAttachments()>();
        if $z0 == 0 goto label8;

        $r15 = virtualinvoke page.<org.apache.fop.area.PageViewport: java.util.List getExtensionAttachments()>();
        iter = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label8;

        $r14 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();
        attachment = (org.apache.fop.fo.extensions.ExtensionAttachment) $r14;
        $z0 = attachment instanceof org.apache.fop.render.ps.extensions.PSSetPageDevice;
        if $z0 == 0 goto label7;

        setPageDevice = (org.apache.fop.render.ps.extensions.PSSetPageDevice) attachment;
        content = virtualinvoke setPageDevice.<org.apache.fop.render.ps.extensions.PSSetPageDevice: java.lang.String getContent()>();
        if content == null goto label7;

     label4:
        $r13 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.render.ps.PSPageDeviceDictionary pageDeviceDictionary>;
        $r16 = staticinvoke <org.apache.fop.render.ps.PSDictionary: org.apache.fop.render.ps.PSDictionary valueOf(java.lang.String)>(content);
        virtualinvoke $r13.<org.apache.fop.render.ps.PSPageDeviceDictionary: void putAll(java.util.Map)>($r16);

     label5:
        goto label7;

     label6:
        $r17 := @caughtexception;
        e = $r17;
        $r0 = <org.apache.fop.render.ps.PSRenderer: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("failed to parse dictionary string: ");
        $r18 = virtualinvoke e.<org.apache.fop.render.ps.PSDictionaryFormatException: java.lang.String getMessage()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", [");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(content);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r2);

     label7:
        goto label3;

     label8:
        $r15 = this.<org.apache.fop.render.ps.PSRenderer: java.util.List setupCodeList>;
        if $r15 == null goto label9;

        $r19 = this.<org.apache.fop.render.ps.PSRenderer: java.util.List setupCodeList>;
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void writeEnclosedExtensionAttachments(java.util.Collection)>($r19);
        $r15 = this.<org.apache.fop.render.ps.PSRenderer: java.util.List setupCodeList>;
        interfaceinvoke $r15.<java.util.List: void clear()>();

     label9:
        goto label11;

     label10:
        $r20 := @caughtexception;
        e = $r20;
        $r0 = <org.apache.fop.render.ps.PSRenderer: org.apache.commons.logging.Log log>;
        $r2 = virtualinvoke e.<java.io.IOException: java.lang.String getMessage()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r2);

     label11:
        $r21 = new java.lang.Integer;
        specialinvoke $r21.<java.lang.Integer: void <init>(int)>(0);
        zero = $r21;
        $r22 = new java.awt.geom.Rectangle2D$Double;
        specialinvoke $r22.<java.awt.geom.Rectangle2D$Double: void <init>()>();
        pageBoundingBox = $r22;
        if rotate == 0 goto label12;

        virtualinvoke pageBoundingBox.<java.awt.geom.Rectangle2D: void setRect(double,double,double,double)>(0.0, 0.0, pageHeight, pageWidth);
        $r4 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r7 = newarray (java.lang.Object)[4];
        $r7[0] = zero;
        $r7[1] = zero;
        $r23 = new java.lang.Long;
        $l6 = staticinvoke <java.lang.Math: long round(double)>(pageHeight);
        specialinvoke $r23.<java.lang.Long: void <init>(long)>($l6);
        $r7[2] = $r23;
        $r23 = new java.lang.Long;
        $l6 = staticinvoke <java.lang.Math: long round(double)>(pageWidth);
        specialinvoke $r23.<java.lang.Long: void <init>(long)>($l6);
        $r7[3] = $r23;
        virtualinvoke $r4.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String,java.lang.Object[])>("PageBoundingBox", $r7);
        $r4 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r7 = newarray (java.lang.Object)[4];
        $r7[0] = zero;
        $r7[1] = zero;
        $r24 = new java.lang.Double;
        specialinvoke $r24.<java.lang.Double: void <init>(double)>(pageHeight);
        $r7[2] = $r24;
        $r24 = new java.lang.Double;
        specialinvoke $r24.<java.lang.Double: void <init>(double)>(pageWidth);
        $r7[3] = $r24;
        virtualinvoke $r4.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String,java.lang.Object[])>("PageHiResBoundingBox", $r7);
        $r4 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r4.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String,java.lang.Object)>("PageOrientation", "Landscape");
        goto label13;

     label12:
        virtualinvoke pageBoundingBox.<java.awt.geom.Rectangle2D: void setRect(double,double,double,double)>(0.0, 0.0, pageWidth, pageHeight);
        $r4 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r7 = newarray (java.lang.Object)[4];
        $r7[0] = zero;
        $r7[1] = zero;
        $r23 = new java.lang.Long;
        $l6 = staticinvoke <java.lang.Math: long round(double)>(pageWidth);
        specialinvoke $r23.<java.lang.Long: void <init>(long)>($l6);
        $r7[2] = $r23;
        $r23 = new java.lang.Long;
        $l6 = staticinvoke <java.lang.Math: long round(double)>(pageHeight);
        specialinvoke $r23.<java.lang.Long: void <init>(long)>($l6);
        $r7[3] = $r23;
        virtualinvoke $r4.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String,java.lang.Object[])>("PageBoundingBox", $r7);
        $r4 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r7 = newarray (java.lang.Object)[4];
        $r7[0] = zero;
        $r7[1] = zero;
        $r24 = new java.lang.Double;
        specialinvoke $r24.<java.lang.Double: void <init>(double)>(pageWidth);
        $r7[2] = $r24;
        $r24 = new java.lang.Double;
        specialinvoke $r24.<java.lang.Double: void <init>(double)>(pageHeight);
        $r7[3] = $r24;
        virtualinvoke $r4.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String,java.lang.Object[])>("PageHiResBoundingBox", $r7);
        $z0 = this.<org.apache.fop.render.ps.PSRenderer: boolean autoRotateLandscape>;
        if $z0 == 0 goto label13;

        $r4 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r4.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String,java.lang.Object)>("PageOrientation", "Portrait");

     label13:
        $r10 = this.<org.apache.fop.render.ps.PSRenderer: java.awt.geom.Rectangle2D documentBoundingBox>;
        virtualinvoke $r10.<java.awt.geom.Rectangle2D: void add(java.awt.geom.Rectangle2D)>(pageBoundingBox);
        $r4 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r7 = newarray (java.lang.Object)[1];
        $r25 = <org.apache.xmlgraphics.ps.DSCConstants: java.lang.Object ATEND>;
        $r7[0] = $r25;
        virtualinvoke $r4.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String,java.lang.Object[])>("PageResources", $r7);
        $r4 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("%FOPSimplePageMaster: ");
        $r18 = virtualinvoke page.<org.apache.fop.area.PageViewport: java.lang.String getSimplePageMasterName()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r4.<org.apache.xmlgraphics.ps.PSGenerator: void commentln(java.lang.String)>($r2);
        $r4 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r4.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String)>("BeginPageSetup");
        $z0 = virtualinvoke page.<org.apache.fop.area.PageViewport: boolean hasExtensionAttachments()>();
        if $z0 == 0 goto label16;

        extensionAttachments = virtualinvoke page.<org.apache.fop.area.PageViewport: java.util.List getExtensionAttachments()>();
        i = 0;

     label14:
        $i1 = interfaceinvoke extensionAttachments.<java.util.List: int size()>();
        if i >= $i1 goto label16;

        attObj = interfaceinvoke extensionAttachments.<java.util.List: java.lang.Object get(int)>(i);
        $z0 = attObj instanceof org.apache.fop.render.ps.extensions.PSExtensionAttachment;
        if $z0 == 0 goto label15;

        attachment = (org.apache.fop.render.ps.extensions.PSExtensionAttachment) attObj;
        $z0 = attachment instanceof org.apache.fop.render.ps.extensions.PSCommentBefore;
        if $z0 == 0 goto label15;

        $r4 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("%");
        $r18 = virtualinvoke attachment.<org.apache.fop.render.ps.extensions.PSExtensionAttachment: java.lang.String getContent()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r4.<org.apache.xmlgraphics.ps.PSGenerator: void commentln(java.lang.String)>($r2);

     label15:
        i = i + 1;
        goto label14;

     label16:
        $r13 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.render.ps.PSPageDeviceDictionary pageDeviceDictionary>;
        $z0 = virtualinvoke $r13.<org.apache.fop.render.ps.PSPageDeviceDictionary: boolean isEmpty()>();
        if $z0 != 0 goto label19;

        $r13 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.render.ps.PSPageDeviceDictionary pageDeviceDictionary>;
        content = virtualinvoke $r13.<org.apache.fop.render.ps.PSPageDeviceDictionary: java.lang.String getContent()>();
        $z0 = this.<org.apache.fop.render.ps.PSRenderer: boolean safeSetPageDevice>;
        if $z0 == 0 goto label17;

        $r26 = new java.lang.StringBuffer;
        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();
        $r26 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(content);
        $r26 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" SSPD");
        content = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();
        goto label18;

     label17:
        $r26 = new java.lang.StringBuffer;
        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();
        $r26 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(content);
        $r26 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" setpagedevice");
        content = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

     label18:
        $r27 = new org.apache.fop.render.ps.extensions.PSSetPageDevice;
        specialinvoke $r27.<org.apache.fop.render.ps.extensions.PSSetPageDevice: void <init>(java.lang.String)>(content);
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void writeEnclosedExtensionAttachment(org.apache.fop.render.ps.extensions.PSExtensionAttachment)>($r27);

     label19:
        if rotate == 0 goto label20;

        $r4 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $l7 = staticinvoke <java.lang.Math: long round(double)>(pageHeight);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l7);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" 0 translate");
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r4.<org.apache.xmlgraphics.ps.PSGenerator: void writeln(java.lang.String)>($r2);
        $r4 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r4.<org.apache.xmlgraphics.ps.PSGenerator: void writeln(java.lang.String)>("90 rotate");

     label20:
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void concatMatrix(double,double,double,double,double,double)>(1.0, 0.0, 0.0, -1.0, 0.0, pageHeight);
        $r4 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r4.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String)>("EndPageSetup");
        specialinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void renderPage(org.apache.fop.area.PageViewport)>(page);
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void writeln(java.lang.String)>("showpage");
        $r4 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r4.<org.apache.xmlgraphics.ps.PSGenerator: void writeDSCComment(java.lang.String)>("PageTrailer");
        $z0 = virtualinvoke page.<org.apache.fop.area.PageViewport: boolean hasExtensionAttachments()>();
        if $z0 == 0 goto label23;

        extensionAttachments = virtualinvoke page.<org.apache.fop.area.PageViewport: java.util.List getExtensionAttachments()>();
        i = 0;

     label21:
        $i1 = interfaceinvoke extensionAttachments.<java.util.List: int size()>();
        if i >= $i1 goto label23;

        attObj = interfaceinvoke extensionAttachments.<java.util.List: java.lang.Object get(int)>(i);
        $z0 = attObj instanceof org.apache.fop.render.ps.extensions.PSExtensionAttachment;
        if $z0 == 0 goto label22;

        attachment = (org.apache.fop.render.ps.extensions.PSExtensionAttachment) attObj;
        $z0 = attachment instanceof org.apache.fop.render.ps.extensions.PSCommentAfter;
        if $z0 == 0 goto label22;

        $r4 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("%");
        $r18 = virtualinvoke attachment.<org.apache.fop.render.ps.extensions.PSExtensionAttachment: java.lang.String getContent()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r4.<org.apache.xmlgraphics.ps.PSGenerator: void commentln(java.lang.String)>($r2);

     label22:
        i = i + 1;
        goto label21;

     label23:
        $r4 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r5 = virtualinvoke $r4.<org.apache.xmlgraphics.ps.PSGenerator: org.apache.xmlgraphics.ps.dsc.ResourceTracker getResourceTracker()>();
        $r28 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r5.<org.apache.xmlgraphics.ps.dsc.ResourceTracker: void writeResources(boolean,org.apache.xmlgraphics.ps.PSGenerator)>(1, $r28);
        return;

        catch org.apache.fop.render.ps.PSDictionaryFormatException from label4 to label5 with label6;
        catch java.io.IOException from label8 to label9 with label10;
    }

    protected void renderRegionViewport(org.apache.fop.area.RegionViewport)
    {
        org.apache.fop.render.ps.PSRenderer this;
        org.apache.fop.area.RegionViewport port;
        java.lang.StringBuffer $r0;
        org.apache.fop.area.RegionReference $r1;
        java.lang.String $r2, $r3;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        port := @parameter0: org.apache.fop.area.RegionViewport;
        if port == null goto label0;

        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("%FOPBeginRegionViewport: ");
        $r1 = virtualinvoke port.<org.apache.fop.area.RegionViewport: org.apache.fop.area.RegionReference getRegionReference()>();
        $r2 = virtualinvoke $r1.<org.apache.fop.area.RegionReference: java.lang.String getRegionName()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void comment(java.lang.String)>($r3);
        specialinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void renderRegionViewport(org.apache.fop.area.RegionViewport)>(port);
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void comment(java.lang.String)>("%FOPEndRegionViewport");

     label0:
        return;
    }

    protected void beginTextObject()
    {
        org.apache.fop.render.ps.PSRenderer this;
        boolean $z0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        $z0 = this.<org.apache.fop.render.ps.PSRenderer: boolean inTextMode>;
        if $z0 != 0 goto label0;

        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void saveGraphicsState()>();
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void writeln(java.lang.String)>("BT");
        this.<org.apache.fop.render.ps.PSRenderer: boolean inTextMode> = 1;

     label0:
        return;
    }

    protected void endTextObject()
    {
        org.apache.fop.render.ps.PSRenderer this;
        boolean $z0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        $z0 = this.<org.apache.fop.render.ps.PSRenderer: boolean inTextMode>;
        if $z0 == 0 goto label0;

        this.<org.apache.fop.render.ps.PSRenderer: boolean inTextMode> = 0;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void writeln(java.lang.String)>("ET");
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void restoreGraphicsState()>();

     label0:
        return;
    }

    public void renderText(org.apache.fop.area.inline.TextArea)
    {
        org.apache.fop.render.ps.PSRenderer this;
        org.apache.fop.area.inline.TextArea area;
        java.lang.String fontname, $r7, $r8;
        int fontsize, rx, bl, $i0, $i1;
        org.apache.fop.fonts.Typeface tf;
        java.awt.Color ct;
        java.io.IOException ioe, $r4;
        java.lang.Integer $r0;
        org.apache.fop.fonts.FontInfo $r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.StringBuffer $r5;
        org.apache.xmlgraphics.ps.PSGenerator $r6;
        float $f0;
        double $d0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        area := @parameter0: org.apache.fop.area.inline.TextArea;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void renderInlineAreaBackAndBorders(org.apache.fop.area.inline.InlineArea)>(area);
        fontname = virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: java.lang.String getInternalFontNameForArea(org.apache.fop.area.Area)>(area);
        $r0 = <org.apache.fop.area.Trait: java.lang.Integer FONT_SIZE>;
        fontsize = virtualinvoke area.<org.apache.fop.area.inline.TextArea: int getTraitAsInteger(java.lang.Object)>($r0);
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.fonts.FontInfo fontInfo>;
        $r2 = virtualinvoke $r1.<org.apache.fop.fonts.FontInfo: java.util.Map getFonts()>();
        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(fontname);
        tf = (org.apache.fop.fonts.Typeface) $r3;
        $i0 = this.<org.apache.fop.render.ps.PSRenderer: int currentIPPosition>;
        $i1 = virtualinvoke area.<org.apache.fop.area.inline.TextArea: int getBorderAndPaddingWidthStart()>();
        rx = $i0 + $i1;
        $i0 = this.<org.apache.fop.render.ps.PSRenderer: int currentBPPosition>;
        $i1 = virtualinvoke area.<org.apache.fop.area.inline.TextArea: int getOffset()>();
        $i0 = $i0 + $i1;
        $i1 = virtualinvoke area.<org.apache.fop.area.inline.TextArea: int getBaselineOffset()>();
        bl = $i0 + $i1;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void useFont(java.lang.String,int)>(fontname, fontsize);
        $r0 = <org.apache.fop.area.Trait: java.lang.Integer COLOR>;
        $r3 = virtualinvoke area.<org.apache.fop.area.inline.TextArea: java.lang.Object getTrait(java.lang.Object)>($r0);
        ct = (java.awt.Color) $r3;
        if ct == null goto label3;

     label0:
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void useColor(java.awt.Color)>(ct);

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        ioe = $r4;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void handleIOTrouble(java.io.IOException)>(ioe);

     label3:
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void beginTextObject()>();
        $r5 = new java.lang.StringBuffer;
        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("1 0 0 -1 ");
        $r6 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $f0 = (float) rx;
        $f0 = $f0 / 1000.0F;
        $d0 = (double) $f0;
        $r7 = virtualinvoke $r6.<org.apache.xmlgraphics.ps.PSGenerator: java.lang.String formatDouble(double)>($d0);
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $r6 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $f0 = (float) bl;
        $f0 = $f0 / 1000.0F;
        $d0 = (double) $f0;
        $r7 = virtualinvoke $r6.<org.apache.xmlgraphics.ps.PSGenerator: java.lang.String formatDouble(double)>($d0);
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Tm");
        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void writeln(java.lang.String)>($r8);
        specialinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void renderText(org.apache.fop.area.inline.TextArea)>(area);
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void renderTextDecoration(org.apache.fop.fonts.FontMetrics,int,org.apache.fop.area.inline.InlineArea,int,int)>(tf, fontsize, area, bl, rx);
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    protected void renderWord(org.apache.fop.area.inline.WordArea)
    {
        org.apache.fop.render.ps.PSRenderer this;
        org.apache.fop.area.inline.WordArea word;
        org.apache.fop.area.Area $r0;
        org.apache.fop.area.inline.TextArea $r1;
        java.lang.String $r2;
        int[] $r3;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        word := @parameter0: org.apache.fop.area.inline.WordArea;
        $r0 = virtualinvoke word.<org.apache.fop.area.inline.WordArea: org.apache.fop.area.Area getParentArea()>();
        $r1 = (org.apache.fop.area.inline.TextArea) $r0;
        $r2 = virtualinvoke word.<org.apache.fop.area.inline.WordArea: java.lang.String getWord()>();
        $r3 = virtualinvoke word.<org.apache.fop.area.inline.WordArea: int[] getLetterAdjustArray()>();
        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void renderText(org.apache.fop.area.inline.AbstractTextArea,java.lang.String,int[])>($r1, $r2, $r3);
        specialinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void renderWord(org.apache.fop.area.inline.WordArea)>(word);
        return;
    }

    protected void renderSpace(org.apache.fop.area.inline.SpaceArea)
    {
        org.apache.fop.render.ps.PSRenderer this;
        org.apache.fop.area.inline.SpaceArea space;
        org.apache.fop.area.inline.AbstractTextArea textArea;
        java.lang.String s;
        char sp;
        org.apache.fop.fonts.Font font;
        int tws, $i0, $i1, $i2;
        org.apache.fop.area.Area $r0;
        boolean $z0;
        org.apache.fop.area.inline.TextArea $r1;
        float $f0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        space := @parameter0: org.apache.fop.area.inline.SpaceArea;
        $r0 = virtualinvoke space.<org.apache.fop.area.inline.SpaceArea: org.apache.fop.area.Area getParentArea()>();
        textArea = (org.apache.fop.area.inline.AbstractTextArea) $r0;
        s = virtualinvoke space.<org.apache.fop.area.inline.SpaceArea: java.lang.String getSpace()>();
        sp = virtualinvoke s.<java.lang.String: char charAt(int)>(0);
        font = virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.fonts.Font getFontFromArea(org.apache.fop.area.Area)>(textArea);
        $z0 = virtualinvoke space.<org.apache.fop.area.inline.SpaceArea: boolean isAdjustable()>();
        if $z0 == 0 goto label0;

        $r0 = virtualinvoke space.<org.apache.fop.area.inline.SpaceArea: org.apache.fop.area.Area getParentArea()>();
        $r1 = (org.apache.fop.area.inline.TextArea) $r0;
        $i0 = virtualinvoke $r1.<org.apache.fop.area.inline.TextArea: int getTextWordSpaceAdjust()>();
        $i1 = virtualinvoke textArea.<org.apache.fop.area.inline.AbstractTextArea: int getTextLetterSpaceAdjust()>();
        $i2 = 2 * $i1;
        $i0 = $i0 + $i2;
        goto label1;

     label0:
        $i0 = 0;

     label1:
        tws = $i0;
        $i2 = virtualinvoke font.<org.apache.fop.fonts.Font: int getCharWidth(char)>(sp);
        $i2 = $i2 + tws;
        $f0 = (float) $i2;
        $f0 = $f0 / 1000.0F;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void rmoveTo(float,float)>($f0, 0.0F);
        specialinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void renderSpace(org.apache.fop.area.inline.SpaceArea)>(space);
        return;
    }

    private void renderText(org.apache.fop.area.inline.AbstractTextArea, java.lang.String, int[])
    {
        org.apache.fop.render.ps.PSRenderer this;
        org.apache.fop.area.inline.AbstractTextArea area;
        java.lang.String text, $r2;
        int[] letterAdjust, offsets;
        org.apache.fop.fonts.Font font;
        org.apache.fop.fonts.Typeface tf;
        int initialSize, textLen, i, wordSpace, cw, ladj, tls, $i0, $i1, $i2;
        java.lang.StringBuffer sb, $r4;
        char c, mapped;
        org.apache.fop.fonts.FontInfo $r0;
        java.util.Map $r1;
        java.lang.Object $r3;
        boolean $z0;
        org.apache.xmlgraphics.ps.PSGenerator $r5;
        float $f0;
        double $d0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        area := @parameter0: org.apache.fop.area.inline.AbstractTextArea;
        text := @parameter1: java.lang.String;
        letterAdjust := @parameter2: int[];
        font = virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.fonts.Font getFontFromArea(org.apache.fop.area.Area)>(area);
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.fonts.FontInfo fontInfo>;
        $r1 = virtualinvoke $r0.<org.apache.fop.fonts.FontInfo: java.util.Map getFonts()>();
        $r2 = virtualinvoke font.<org.apache.fop.fonts.Font: java.lang.String getFontName()>();
        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);
        tf = (org.apache.fop.fonts.Typeface) $r3;
        initialSize = virtualinvoke text.<java.lang.String: int length()>();
        $i0 = initialSize / 2;
        initialSize = initialSize + $i0;
        $r4 = new java.lang.StringBuffer;
        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>(initialSize);
        sb = $r4;
        textLen = virtualinvoke text.<java.lang.String: int length()>();
        if letterAdjust != null goto label2;

        $i1 = virtualinvoke area.<org.apache.fop.area.inline.AbstractTextArea: int getTextLetterSpaceAdjust()>();
        if $i1 != 0 goto label2;

        $i1 = virtualinvoke area.<org.apache.fop.area.inline.AbstractTextArea: int getTextWordSpaceAdjust()>();
        if $i1 != 0 goto label2;

        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");
        i = 0;

     label0:
        if i >= textLen goto label1;

        c = virtualinvoke text.<java.lang.String: char charAt(int)>(i);
        mapped = virtualinvoke tf.<org.apache.fop.fonts.Typeface: char mapChar(char)>(c);
        staticinvoke <org.apache.xmlgraphics.ps.PSGenerator: void escapeChar(char,java.lang.StringBuffer)>(mapped, sb);
        i = i + 1;
        goto label0;

     label1:
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") t");
        goto label15;

     label2:
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");
        offsets = newarray (int)[textLen];
        i = 0;

     label3:
        if i >= textLen goto label10;

        c = virtualinvoke text.<java.lang.String: char charAt(int)>(i);
        mapped = virtualinvoke tf.<org.apache.fop.fonts.Typeface: char mapChar(char)>(c);
        $z0 = staticinvoke <org.apache.fop.util.CharUtilities: boolean isAdjustableSpace(char)>(mapped);
        if $z0 == 0 goto label4;

        wordSpace = virtualinvoke area.<org.apache.fop.area.inline.AbstractTextArea: int getTextWordSpaceAdjust()>();
        goto label5;

     label4:
        wordSpace = 0;

     label5:
        $i2 = virtualinvoke font.<org.apache.fop.fonts.Font: int getFontSize()>();
        $i1 = virtualinvoke tf.<org.apache.fop.fonts.Typeface: int getWidth(int,int)>(mapped, $i2);
        cw = $i1 / 1000;
        if letterAdjust == null goto label6;

        $i0 = textLen - 1;
        if i >= $i0 goto label6;

        $i0 = i + 1;
        $i1 = letterAdjust[$i0];
        goto label7;

     label6:
        $i1 = 0;

     label7:
        ladj = $i1;
        $i0 = textLen - 1;
        if i >= $i0 goto label8;

        $i1 = virtualinvoke area.<org.apache.fop.area.inline.AbstractTextArea: int getTextLetterSpaceAdjust()>();
        goto label9;

     label8:
        $i1 = 0;

     label9:
        tls = $i1;
        $i2 = cw + ladj;
        $i2 = $i2 + tls;
        $i2 = $i2 + wordSpace;
        offsets[i] = $i2;
        staticinvoke <org.apache.xmlgraphics.ps.PSGenerator: void escapeChar(char,java.lang.StringBuffer)>(mapped, sb);
        i = i + 1;
        goto label3;

     label10:
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")\n[");
        i = 0;

     label11:
        if i >= textLen goto label14;

        if i <= 0 goto label13;

        $i1 = i % 8;
        if $i1 != 0 goto label12;

        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);
        goto label13;

     label12:
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

     label13:
        $r5 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $i2 = offsets[i];
        $f0 = (float) $i2;
        $f0 = $f0 / 1000.0F;
        $d0 = (double) $f0;
        $r2 = virtualinvoke $r5.<org.apache.xmlgraphics.ps.PSGenerator: java.lang.String formatDouble(double)>($d0);
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        i = i + 1;
        goto label11;

     label14:
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]\nxshow");

     label15:
        $r2 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void writeln(java.lang.String)>($r2);
        return;
    }

    protected java.util.List breakOutOfStateStack()
    {
        org.apache.fop.render.ps.PSRenderer this;
        java.util.ArrayList $r0, breakOutList;
        org.apache.xmlgraphics.ps.PSState state;
        java.io.IOException ioe, $r2;
        int $i0;
        org.apache.xmlgraphics.ps.PSGenerator $r1;
        boolean $z0;

        this := @this: org.apache.fop.render.ps.PSRenderer;

     label0:
        $r0 = new java.util.ArrayList;
        specialinvoke $r0.<java.util.ArrayList: void <init>()>();
        breakOutList = $r0;

     label1:
        $i0 = interfaceinvoke breakOutList.<java.util.List: int size()>();
        if $i0 != 0 goto label2;

        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void endTextObject()>();
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void comment(java.lang.String)>("------ break out!");

     label2:
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        state = virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: org.apache.xmlgraphics.ps.PSState getCurrentState()>();
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $z0 = virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: boolean restoreGraphicsState()>();
        if $z0 != 0 goto label3;

        goto label4;

     label3:
        interfaceinvoke breakOutList.<java.util.List: void add(int,java.lang.Object)>(0, state);
        goto label1;

     label4:
        return breakOutList;

     label5:
        $r2 := @caughtexception;
        ioe = $r2;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void handleIOTrouble(java.io.IOException)>(ioe);
        return null;

        catch java.io.IOException from label0 to label4 with label5;
    }

    protected void restoreStateStackAfterBreakOut(java.util.List)
    {
        org.apache.fop.render.ps.PSRenderer this;
        java.util.List breakOutList;
        java.util.Iterator i;
        org.apache.xmlgraphics.ps.PSState state;
        java.io.IOException ioe, $r2;
        boolean $z0;
        java.lang.Object $r0;
        org.apache.xmlgraphics.ps.PSGenerator $r1;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        breakOutList := @parameter0: java.util.List;

     label0:
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void comment(java.lang.String)>("------ restoring context after break-out...");
        i = interfaceinvoke breakOutList.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r0 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();
        state = (org.apache.xmlgraphics.ps.PSState) $r0;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void saveGraphicsState()>();
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke state.<org.apache.xmlgraphics.ps.PSState: void reestablish(org.apache.xmlgraphics.ps.PSGenerator)>($r1);
        goto label1;

     label2:
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void comment(java.lang.String)>("------ done.");

     label3:
        goto label5;

     label4:
        $r2 := @caughtexception;
        ioe = $r2;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void handleIOTrouble(java.io.IOException)>(ioe);

     label5:
        return;

        catch java.io.IOException from label0 to label3 with label4;
    }

    protected void startVParea(org.apache.fop.area.CTM, java.awt.geom.Rectangle2D)
    {
        org.apache.fop.render.ps.PSRenderer this;
        org.apache.fop.area.CTM ctm;
        java.awt.geom.Rectangle2D clippingRect;
        double[] matrix;
        double $d0, $d1, $d2, $d3;
        float $f0, $f1, $f2, $f3;
        byte $b0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        ctm := @parameter0: org.apache.fop.area.CTM;
        clippingRect := @parameter1: java.awt.geom.Rectangle2D;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void saveGraphicsState()>();
        if clippingRect == null goto label0;

        $d0 = virtualinvoke clippingRect.<java.awt.geom.Rectangle2D: double getX()>();
        $f0 = (float) $d0;
        $f0 = $f0 / 1000.0F;
        $d1 = virtualinvoke clippingRect.<java.awt.geom.Rectangle2D: double getY()>();
        $f1 = (float) $d1;
        $f1 = $f1 / 1000.0F;
        $d2 = virtualinvoke clippingRect.<java.awt.geom.Rectangle2D: double getWidth()>();
        $f2 = (float) $d2;
        $f2 = $f2 / 1000.0F;
        $d3 = virtualinvoke clippingRect.<java.awt.geom.Rectangle2D: double getHeight()>();
        $f3 = (float) $d3;
        $f3 = $f3 / 1000.0F;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void clipRect(float,float,float,float)>($f0, $f1, $f2, $f3);

     label0:
        matrix = virtualinvoke ctm.<org.apache.fop.area.CTM: double[] toArray()>();
        $b0 = 4;
        $d1 = matrix[$b0];
        $d1 = $d1 / 1000.0;
        matrix[$b0] = $d1;
        $b0 = 5;
        $d1 = matrix[$b0];
        $d1 = $d1 / 1000.0;
        matrix[$b0] = $d1;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void concatMatrix(double[])>(matrix);
        return;
    }

    protected void endVParea()
    {
        org.apache.fop.render.ps.PSRenderer this;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void restoreGraphicsState()>();
        return;
    }

    protected void renderBlockViewport(org.apache.fop.area.BlockViewport, java.util.List)
    {
        org.apache.fop.render.ps.PSRenderer this;
        org.apache.fop.area.BlockViewport bv;
        java.util.List children;
        java.lang.StringBuffer $r0;
        java.lang.String $r1, $r2;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        bv := @parameter0: org.apache.fop.area.BlockViewport;
        children := @parameter1: java.util.List;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("%FOPBeginBlockViewport: ");
        $r1 = virtualinvoke bv.<org.apache.fop.area.BlockViewport: java.lang.String toString()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);
        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void comment(java.lang.String)>($r2);
        specialinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void renderBlockViewport(org.apache.fop.area.BlockViewport,java.util.List)>(bv, children);
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void comment(java.lang.String)>("%FOPEndBlockViewport");
        return;
    }

    protected void renderInlineParent(org.apache.fop.area.inline.InlineParent)
    {
        org.apache.fop.render.ps.PSRenderer this;
        org.apache.fop.area.inline.InlineParent ip;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        ip := @parameter0: org.apache.fop.area.inline.InlineParent;
        specialinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void renderInlineParent(org.apache.fop.area.inline.InlineParent)>(ip);
        return;
    }

    public void renderLeader(org.apache.fop.area.inline.Leader)
    {
        org.apache.fop.render.ps.PSRenderer this;
        org.apache.fop.area.inline.Leader area;
        int style, $i0, $i1;
        float startx, starty, endx, ruleThickness, half, $f0, $f1, $f2, $f3, $f4, $f5;
        java.awt.Color col, $r3;
        java.io.IOException ioe, $r5;
        java.lang.Integer $r0;
        java.lang.Object $r1;
        org.apache.xmlgraphics.ps.PSGenerator $r2;
        double $d0;
        java.lang.UnsupportedOperationException $r4;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        area := @parameter0: org.apache.fop.area.inline.Leader;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void renderInlineAreaBackAndBorders(org.apache.fop.area.inline.InlineArea)>(area);
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void endTextObject()>();
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void saveGraphicsState()>();
        style = virtualinvoke area.<org.apache.fop.area.inline.Leader: int getRuleStyle()>();
        $i0 = this.<org.apache.fop.render.ps.PSRenderer: int currentIPPosition>;
        $i1 = virtualinvoke area.<org.apache.fop.area.inline.Leader: int getBorderAndPaddingWidthStart()>();
        $i0 = $i0 + $i1;
        $f0 = (float) $i0;
        startx = $f0 / 1000.0F;
        $i0 = this.<org.apache.fop.render.ps.PSRenderer: int currentBPPosition>;
        $i1 = virtualinvoke area.<org.apache.fop.area.inline.Leader: int getOffset()>();
        $i0 = $i0 + $i1;
        $f0 = (float) $i0;
        starty = $f0 / 1000.0F;
        $i0 = this.<org.apache.fop.render.ps.PSRenderer: int currentIPPosition>;
        $i1 = virtualinvoke area.<org.apache.fop.area.inline.Leader: int getBorderAndPaddingWidthStart()>();
        $i0 = $i0 + $i1;
        $i1 = virtualinvoke area.<org.apache.fop.area.inline.Leader: int getIPD()>();
        $i0 = $i0 + $i1;
        $f0 = (float) $i0;
        endx = $f0 / 1000.0F;
        $i0 = virtualinvoke area.<org.apache.fop.area.inline.Leader: int getRuleThickness()>();
        $f0 = (float) $i0;
        ruleThickness = $f0 / 1000.0F;
        $r0 = <org.apache.fop.area.Trait: java.lang.Integer COLOR>;
        $r1 = virtualinvoke area.<org.apache.fop.area.inline.Leader: java.lang.Object getTrait(java.lang.Object)>($r0);
        col = (java.awt.Color) $r1;

     label0:
        lookupswitch(style)
        {
            case 31: goto label1;
            case 36: goto label2;
            case 37: goto label1;
            case 55: goto label3;
            case 119: goto label3;
            case 133: goto label1;
            default: goto label6;
        };

     label1:
        $f1 = starty + ruleThickness;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void drawBorderLine(float,float,float,float,boolean,boolean,int,java.awt.Color)>(startx, starty, endx, $f1, 1, 1, style, col);
        goto label7;

     label2:
        $f2 = endx - startx;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void clipRect(float,float,float,float)>(startx, starty, $f2, ruleThickness);
        $r2 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $f3 = ruleThickness / 2.0F;
        $d0 = (double) $f3;
        virtualinvoke $r2.<org.apache.xmlgraphics.ps.PSGenerator: void concatMatrix(double,double,double,double,double,double)>(1.0, 0.0, 0.0, 1.0, $d0, 0.0);
        $f1 = starty + ruleThickness;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void drawBorderLine(float,float,float,float,boolean,boolean,int,java.awt.Color)>(startx, starty, endx, $f1, 1, 1, style, col);
        goto label7;

     label3:
        $i0 = virtualinvoke area.<org.apache.fop.area.inline.Leader: int getRuleThickness()>();
        $f0 = (float) $i0;
        half = $f0 / 2000.0F;
        $r2 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r3 = staticinvoke <org.apache.fop.render.ps.PSRenderer: java.awt.Color lightenColor(java.awt.Color,float)>(col, 0.6F);
        virtualinvoke $r2.<org.apache.xmlgraphics.ps.PSGenerator: void useColor(java.awt.Color)>($r3);
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void moveTo(float,float)>(startx, starty);
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void lineTo(float,float)>(endx, starty);
        $f2 = 2.0F * half;
        $f4 = starty + $f2;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void lineTo(float,float)>(endx, $f4);
        $f2 = 2.0F * half;
        $f4 = starty + $f2;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void lineTo(float,float)>(startx, $f4);
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void closePath()>();
        $r2 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r2.<org.apache.xmlgraphics.ps.PSGenerator: void writeln(java.lang.String)>(" fill newpath");
        $r2 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r2.<org.apache.xmlgraphics.ps.PSGenerator: void useColor(java.awt.Color)>(col);
        if style != 55 goto label4;

        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void moveTo(float,float)>(startx, starty);
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void lineTo(float,float)>(endx, starty);
        $f4 = starty + half;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void lineTo(float,float)>(endx, $f4);
        $f5 = startx + half;
        $f4 = starty + half;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void lineTo(float,float)>($f5, $f4);
        $f2 = 2.0F * half;
        $f4 = starty + $f2;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void lineTo(float,float)>(startx, $f4);
        goto label5;

     label4:
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void moveTo(float,float)>(endx, starty);
        $f2 = 2.0F * half;
        $f4 = starty + $f2;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void lineTo(float,float)>(endx, $f4);
        $f2 = 2.0F * half;
        $f4 = starty + $f2;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void lineTo(float,float)>(startx, $f4);
        $f4 = starty + half;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void lineTo(float,float)>(startx, $f4);
        $f5 = endx - half;
        $f4 = starty + half;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void lineTo(float,float)>($f5, $f4);

     label5:
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void closePath()>();
        $r2 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r2.<org.apache.xmlgraphics.ps.PSGenerator: void writeln(java.lang.String)>(" fill newpath");
        goto label7;

     label6:
        $r4 = new java.lang.UnsupportedOperationException;
        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("rule style not supported");
        throw $r4;

     label7:
        goto label9;

     label8:
        $r5 := @caughtexception;
        ioe = $r5;
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void handleIOTrouble(java.io.IOException)>(ioe);

     label9:
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void restoreGraphicsState()>();
        specialinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: void renderLeader(org.apache.fop.area.inline.Leader)>(area);
        return;

        catch java.io.IOException from label0 to label7 with label8;
    }

    public void renderImage(org.apache.fop.area.inline.Image, java.awt.geom.Rectangle2D)
    {
        org.apache.fop.render.ps.PSRenderer this;
        org.apache.fop.area.inline.Image image;
        java.awt.geom.Rectangle2D pos;
        java.lang.String $r0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        image := @parameter0: org.apache.fop.area.inline.Image;
        pos := @parameter1: java.awt.geom.Rectangle2D;
        $r0 = virtualinvoke image.<org.apache.fop.area.inline.Image: java.lang.String getURL()>();
        virtualinvoke this.<org.apache.fop.render.ps.PSRenderer: void drawImage(java.lang.String,java.awt.geom.Rectangle2D)>($r0, pos);
        return;
    }

    protected org.apache.fop.render.RendererContext createRendererContext(int, int, int, int, java.util.Map)
    {
        org.apache.fop.render.ps.PSRenderer this;
        int x, y, width, height;
        java.util.Map foreignAttributes;
        org.apache.fop.render.RendererContext context;
        org.apache.xmlgraphics.ps.PSGenerator $r0;
        org.apache.fop.fonts.FontInfo $r1;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        x := @parameter0: int;
        y := @parameter1: int;
        width := @parameter2: int;
        height := @parameter3: int;
        foreignAttributes := @parameter4: java.util.Map;
        context = specialinvoke this.<org.apache.fop.render.AbstractPathOrientedRenderer: org.apache.fop.render.RendererContext createRendererContext(int,int,int,int,java.util.Map)>(x, y, width, height, foreignAttributes);
        $r0 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke context.<org.apache.fop.render.RendererContext: void setProperty(java.lang.String,java.lang.Object)>("psGenerator", $r0);
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.fonts.FontInfo fontInfo>;
        virtualinvoke context.<org.apache.fop.render.RendererContext: void setProperty(java.lang.String,java.lang.Object)>("psFontInfo", $r1);
        return context;
    }

    public java.lang.String getMimeType()
    {
        org.apache.fop.render.ps.PSRenderer this;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        return "application/postscript";
    }

    private void writeEnclosedExtensionAttachment(org.apache.fop.render.ps.extensions.PSExtensionAttachment) throws java.io.IOException
    {
        org.apache.fop.render.ps.PSRenderer this;
        org.apache.fop.render.ps.extensions.PSExtensionAttachment attachment;
        java.lang.String info, name, type, line, $r3, $r6, $r7;
        org.apache.fop.render.ps.extensions.PSSetupCode setupCodeAttach;
        java.io.LineNumberReader reader, $r4;
        boolean $z0;
        java.lang.StringBuffer $r0, $r2;
        org.apache.xmlgraphics.ps.PSGenerator $r1;
        java.io.StringReader $r5;
        int $i0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        attachment := @parameter0: org.apache.fop.render.ps.extensions.PSExtensionAttachment;
        info = "";
        $z0 = attachment instanceof org.apache.fop.render.ps.extensions.PSSetupCode;
        if $z0 == 0 goto label0;

        setupCodeAttach = (org.apache.fop.render.ps.extensions.PSSetupCode) attachment;
        name = virtualinvoke setupCodeAttach.<org.apache.fop.render.ps.extensions.PSSetupCode: java.lang.String getName()>();
        if name == null goto label0;

        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(info);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": (");
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(name);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");
        info = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

     label0:
        type = virtualinvoke attachment.<org.apache.fop.render.ps.extensions.PSExtensionAttachment: java.lang.String getType()>();
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("%FOPBegin");
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(type);
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(info);
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void commentln(java.lang.String)>($r3);
        $r4 = new java.io.LineNumberReader;
        $r5 = new java.io.StringReader;
        $r6 = virtualinvoke attachment.<org.apache.fop.render.ps.extensions.PSExtensionAttachment: java.lang.String getContent()>();
        specialinvoke $r5.<java.io.StringReader: void <init>(java.lang.String)>($r6);
        specialinvoke $r4.<java.io.LineNumberReader: void <init>(java.io.Reader)>($r5);
        reader = $r4;

     label1:
        $r7 = virtualinvoke reader.<java.io.LineNumberReader: java.lang.String readLine()>();
        line = $r7;
        if $r7 == null goto label2;

        line = virtualinvoke line.<java.lang.String: java.lang.String trim()>();
        $i0 = virtualinvoke line.<java.lang.String: int length()>();
        if $i0 <= 0 goto label1;

        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void writeln(java.lang.String)>(line);
        goto label1;

     label2:
        $r1 = this.<org.apache.fop.render.ps.PSRenderer: org.apache.xmlgraphics.ps.PSGenerator gen>;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("%FOPEnd");
        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(type);
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke $r1.<org.apache.xmlgraphics.ps.PSGenerator: void commentln(java.lang.String)>($r3);
        return;
    }

    private void writeEnclosedExtensionAttachments(java.util.Collection) throws java.io.IOException
    {
        org.apache.fop.render.ps.PSRenderer this;
        java.util.Collection attachmentCollection;
        java.util.Iterator iter;
        org.apache.fop.render.ps.extensions.PSExtensionAttachment attachment;
        boolean $z0;
        java.lang.Object $r0;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        attachmentCollection := @parameter0: java.util.Collection;
        iter = interfaceinvoke attachmentCollection.<java.util.Collection: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r0 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();
        attachment = (org.apache.fop.render.ps.extensions.PSExtensionAttachment) $r0;
        if attachment == null goto label1;

        specialinvoke this.<org.apache.fop.render.ps.PSRenderer: void writeEnclosedExtensionAttachment(org.apache.fop.render.ps.extensions.PSExtensionAttachment)>(attachment);

     label1:
        interfaceinvoke iter.<java.util.Iterator: void remove()>();
        goto label0;

     label2:
        return;
    }

    public void setSafeSetPageDevice(boolean)
    {
        org.apache.fop.render.ps.PSRenderer this;
        boolean safeSetPageDevice;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        safeSetPageDevice := @parameter0: boolean;
        this.<org.apache.fop.render.ps.PSRenderer: boolean safeSetPageDevice> = safeSetPageDevice;
        return;
    }

    public void setDSCCompliant(boolean)
    {
        org.apache.fop.render.ps.PSRenderer this;
        boolean dscCompliant;

        this := @this: org.apache.fop.render.ps.PSRenderer;
        dscCompliant := @parameter0: boolean;
        this.<org.apache.fop.render.ps.PSRenderer: boolean dscCompliant> = dscCompliant;
        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException l1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        l1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(l1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    static org.apache.fop.apps.FOUserAgent access$000(org.apache.fop.render.ps.PSRenderer)
    {
        org.apache.fop.render.ps.PSRenderer x0;
        org.apache.fop.apps.FOUserAgent $r0;

        x0 := @parameter0: org.apache.fop.render.ps.PSRenderer;
        $r0 = x0.<org.apache.fop.render.ps.PSRenderer: org.apache.fop.apps.FOUserAgent userAgent>;
        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.apache.commons.logging.Log $r1;

        $r0 = <org.apache.fop.render.ps.PSRenderer: java.lang.Class class$org$apache$fop$render$ps$PSRenderer>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.fop.render.ps.PSRenderer: java.lang.Class class$(java.lang.String)>("org.apache.fop.render.ps.PSRenderer");
        <org.apache.fop.render.ps.PSRenderer: java.lang.Class class$org$apache$fop$render$ps$PSRenderer> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.fop.render.ps.PSRenderer: java.lang.Class class$org$apache$fop$render$ps$PSRenderer>;

     label1:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r0);
        <org.apache.fop.render.ps.PSRenderer: org.apache.commons.logging.Log log> = $r1;
        return;
    }
}
