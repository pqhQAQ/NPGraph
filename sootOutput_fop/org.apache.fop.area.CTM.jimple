public class org.apache.fop.area.CTM extends java.lang.Object implements java.io.Serializable
{
    private double a;
    private double b;
    private double c;
    private double d;
    private double e;
    private double f;
    private static final org.apache.fop.area.CTM CTM_LRTB;
    private static final org.apache.fop.area.CTM CTM_RLTB;
    private static final org.apache.fop.area.CTM CTM_TBRL;

    public void <init>()
    {
        org.apache.fop.area.CTM this;

        this := @this: org.apache.fop.area.CTM;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<org.apache.fop.area.CTM: double a> = 1.0;
        this.<org.apache.fop.area.CTM: double b> = 0.0;
        this.<org.apache.fop.area.CTM: double c> = 0.0;
        this.<org.apache.fop.area.CTM: double d> = 1.0;
        this.<org.apache.fop.area.CTM: double e> = 0.0;
        this.<org.apache.fop.area.CTM: double f> = 0.0;
        return;
    }

    public void <init>(double, double, double, double, double, double)
    {
        org.apache.fop.area.CTM this;
        double a, b, c, d, e, f;

        this := @this: org.apache.fop.area.CTM;
        a := @parameter0: double;
        b := @parameter1: double;
        c := @parameter2: double;
        d := @parameter3: double;
        e := @parameter4: double;
        f := @parameter5: double;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<org.apache.fop.area.CTM: double a> = a;
        this.<org.apache.fop.area.CTM: double b> = b;
        this.<org.apache.fop.area.CTM: double c> = c;
        this.<org.apache.fop.area.CTM: double d> = d;
        this.<org.apache.fop.area.CTM: double e> = e;
        this.<org.apache.fop.area.CTM: double f> = f;
        return;
    }

    public void <init>(double, double)
    {
        org.apache.fop.area.CTM this;
        double x, y;

        this := @this: org.apache.fop.area.CTM;
        x := @parameter0: double;
        y := @parameter1: double;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<org.apache.fop.area.CTM: double a> = 1.0;
        this.<org.apache.fop.area.CTM: double b> = 0.0;
        this.<org.apache.fop.area.CTM: double c> = 0.0;
        this.<org.apache.fop.area.CTM: double d> = 1.0;
        this.<org.apache.fop.area.CTM: double e> = x;
        this.<org.apache.fop.area.CTM: double f> = y;
        return;
    }

    protected void <init>(org.apache.fop.area.CTM)
    {
        org.apache.fop.area.CTM this, ctm;
        double $d0;

        this := @this: org.apache.fop.area.CTM;
        ctm := @parameter0: org.apache.fop.area.CTM;
        specialinvoke this.<java.lang.Object: void <init>()>();
        $d0 = ctm.<org.apache.fop.area.CTM: double a>;
        this.<org.apache.fop.area.CTM: double a> = $d0;
        $d0 = ctm.<org.apache.fop.area.CTM: double b>;
        this.<org.apache.fop.area.CTM: double b> = $d0;
        $d0 = ctm.<org.apache.fop.area.CTM: double c>;
        this.<org.apache.fop.area.CTM: double c> = $d0;
        $d0 = ctm.<org.apache.fop.area.CTM: double d>;
        this.<org.apache.fop.area.CTM: double d> = $d0;
        $d0 = ctm.<org.apache.fop.area.CTM: double e>;
        this.<org.apache.fop.area.CTM: double e> = $d0;
        $d0 = ctm.<org.apache.fop.area.CTM: double f>;
        this.<org.apache.fop.area.CTM: double f> = $d0;
        return;
    }

    public void <init>(java.awt.geom.AffineTransform)
    {
        org.apache.fop.area.CTM this;
        java.awt.geom.AffineTransform at;
        double[] matrix;
        double $d0;

        this := @this: org.apache.fop.area.CTM;
        at := @parameter0: java.awt.geom.AffineTransform;
        specialinvoke this.<java.lang.Object: void <init>()>();
        matrix = newarray (double)[6];
        virtualinvoke at.<java.awt.geom.AffineTransform: void getMatrix(double[])>(matrix);
        $d0 = matrix[0];
        this.<org.apache.fop.area.CTM: double a> = $d0;
        $d0 = matrix[1];
        this.<org.apache.fop.area.CTM: double b> = $d0;
        $d0 = matrix[2];
        this.<org.apache.fop.area.CTM: double c> = $d0;
        $d0 = matrix[3];
        this.<org.apache.fop.area.CTM: double d> = $d0;
        $d0 = matrix[4];
        this.<org.apache.fop.area.CTM: double e> = $d0;
        $d0 = matrix[5];
        this.<org.apache.fop.area.CTM: double f> = $d0;
        return;
    }

    public static org.apache.fop.area.CTM getWMctm(int, int, int)
    {
        int wm, ipd, bpd;
        org.apache.fop.area.CTM $r0, wmctm, $r1;
        double $d0;

        wm := @parameter0: int;
        ipd := @parameter1: int;
        bpd := @parameter2: int;
        lookupswitch(wm)
        {
            case 79: goto label0;
            case 121: goto label1;
            case 140: goto label2;
            default: goto label3;
        };

     label0:
        $r1 = new org.apache.fop.area.CTM;
        $r0 = <org.apache.fop.area.CTM: org.apache.fop.area.CTM CTM_LRTB>;
        specialinvoke $r1.<org.apache.fop.area.CTM: void <init>(org.apache.fop.area.CTM)>($r0);
        return $r1;

     label1:
        $r1 = new org.apache.fop.area.CTM;
        $r0 = <org.apache.fop.area.CTM: org.apache.fop.area.CTM CTM_RLTB>;
        specialinvoke $r1.<org.apache.fop.area.CTM: void <init>(org.apache.fop.area.CTM)>($r0);
        wmctm = $r1;
        $d0 = (double) ipd;
        wmctm.<org.apache.fop.area.CTM: double e> = $d0;
        return wmctm;

     label2:
        $r1 = new org.apache.fop.area.CTM;
        $r0 = <org.apache.fop.area.CTM: org.apache.fop.area.CTM CTM_TBRL>;
        specialinvoke $r1.<org.apache.fop.area.CTM: void <init>(org.apache.fop.area.CTM)>($r0);
        wmctm = $r1;
        $d0 = (double) bpd;
        wmctm.<org.apache.fop.area.CTM: double e> = $d0;
        return wmctm;

     label3:
        return null;
    }

    public org.apache.fop.area.CTM multiply(org.apache.fop.area.CTM)
    {
        org.apache.fop.area.CTM this, premult, $r0, result;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        this := @this: org.apache.fop.area.CTM;
        premult := @parameter0: org.apache.fop.area.CTM;
        $r0 = new org.apache.fop.area.CTM;
        $d0 = premult.<org.apache.fop.area.CTM: double a>;
        $d1 = this.<org.apache.fop.area.CTM: double a>;
        $d0 = $d0 * $d1;
        $d1 = premult.<org.apache.fop.area.CTM: double b>;
        $d2 = this.<org.apache.fop.area.CTM: double c>;
        $d1 = $d1 * $d2;
        $d0 = $d0 + $d1;
        $d1 = premult.<org.apache.fop.area.CTM: double a>;
        $d2 = this.<org.apache.fop.area.CTM: double b>;
        $d1 = $d1 * $d2;
        $d2 = premult.<org.apache.fop.area.CTM: double b>;
        $d3 = this.<org.apache.fop.area.CTM: double d>;
        $d2 = $d2 * $d3;
        $d1 = $d1 + $d2;
        $d2 = premult.<org.apache.fop.area.CTM: double c>;
        $d3 = this.<org.apache.fop.area.CTM: double a>;
        $d2 = $d2 * $d3;
        $d3 = premult.<org.apache.fop.area.CTM: double d>;
        $d4 = this.<org.apache.fop.area.CTM: double c>;
        $d3 = $d3 * $d4;
        $d2 = $d2 + $d3;
        $d3 = premult.<org.apache.fop.area.CTM: double c>;
        $d4 = this.<org.apache.fop.area.CTM: double b>;
        $d3 = $d3 * $d4;
        $d4 = premult.<org.apache.fop.area.CTM: double d>;
        $d5 = this.<org.apache.fop.area.CTM: double d>;
        $d4 = $d4 * $d5;
        $d3 = $d3 + $d4;
        $d4 = premult.<org.apache.fop.area.CTM: double e>;
        $d5 = this.<org.apache.fop.area.CTM: double a>;
        $d4 = $d4 * $d5;
        $d5 = premult.<org.apache.fop.area.CTM: double f>;
        $d6 = this.<org.apache.fop.area.CTM: double c>;
        $d5 = $d5 * $d6;
        $d4 = $d4 + $d5;
        $d5 = this.<org.apache.fop.area.CTM: double e>;
        $d4 = $d4 + $d5;
        $d5 = premult.<org.apache.fop.area.CTM: double e>;
        $d6 = this.<org.apache.fop.area.CTM: double b>;
        $d5 = $d5 * $d6;
        $d6 = premult.<org.apache.fop.area.CTM: double f>;
        $d7 = this.<org.apache.fop.area.CTM: double d>;
        $d6 = $d6 * $d7;
        $d5 = $d5 + $d6;
        $d6 = this.<org.apache.fop.area.CTM: double f>;
        $d5 = $d5 + $d6;
        specialinvoke $r0.<org.apache.fop.area.CTM: void <init>(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);
        result = $r0;
        return result;
    }

    public org.apache.fop.area.CTM rotate(double)
    {
        org.apache.fop.area.CTM this, rotate, $r0;
        double angle, cos, sin, rad, $d0;
        byte $b0;

        this := @this: org.apache.fop.area.CTM;
        angle := @parameter0: double;
        $b0 = angle cmpl 90.0;
        if $b0 == 0 goto label0;

        $b0 = angle cmpl -270.0;
        if $b0 != 0 goto label1;

     label0:
        cos = 0.0;
        sin = 1.0;
        goto label6;

     label1:
        $b0 = angle cmpl 270.0;
        if $b0 == 0 goto label2;

        $b0 = angle cmpl -90.0;
        if $b0 != 0 goto label3;

     label2:
        cos = 0.0;
        sin = -1.0;
        goto label6;

     label3:
        $b0 = angle cmpl 180.0;
        if $b0 == 0 goto label4;

        $b0 = angle cmpl -180.0;
        if $b0 != 0 goto label5;

     label4:
        cos = -1.0;
        sin = 0.0;
        goto label6;

     label5:
        rad = staticinvoke <java.lang.Math: double toRadians(double)>(angle);
        cos = staticinvoke <java.lang.Math: double cos(double)>(rad);
        sin = staticinvoke <java.lang.Math: double sin(double)>(rad);

     label6:
        $r0 = new org.apache.fop.area.CTM;
        $d0 = neg sin;
        specialinvoke $r0.<org.apache.fop.area.CTM: void <init>(double,double,double,double,double,double)>(cos, $d0, sin, cos, 0.0, 0.0);
        rotate = $r0;
        $r0 = virtualinvoke this.<org.apache.fop.area.CTM: org.apache.fop.area.CTM multiply(org.apache.fop.area.CTM)>(rotate);
        return $r0;
    }

    public org.apache.fop.area.CTM translate(double, double)
    {
        org.apache.fop.area.CTM this, $r0, translate;
        double x, y;

        this := @this: org.apache.fop.area.CTM;
        x := @parameter0: double;
        y := @parameter1: double;
        $r0 = new org.apache.fop.area.CTM;
        specialinvoke $r0.<org.apache.fop.area.CTM: void <init>(double,double,double,double,double,double)>(1.0, 0.0, 0.0, 1.0, x, y);
        translate = $r0;
        $r0 = virtualinvoke this.<org.apache.fop.area.CTM: org.apache.fop.area.CTM multiply(org.apache.fop.area.CTM)>(translate);
        return $r0;
    }

    public org.apache.fop.area.CTM scale(double, double)
    {
        org.apache.fop.area.CTM this, $r0, scale;
        double x, y;

        this := @this: org.apache.fop.area.CTM;
        x := @parameter0: double;
        y := @parameter1: double;
        $r0 = new org.apache.fop.area.CTM;
        specialinvoke $r0.<org.apache.fop.area.CTM: void <init>(double,double,double,double,double,double)>(x, 0.0, 0.0, y, 0.0, 0.0);
        scale = $r0;
        $r0 = virtualinvoke this.<org.apache.fop.area.CTM: org.apache.fop.area.CTM multiply(org.apache.fop.area.CTM)>(scale);
        return $r0;
    }

    public java.awt.geom.Rectangle2D transform(java.awt.geom.Rectangle2D)
    {
        org.apache.fop.area.CTM this;
        java.awt.geom.Rectangle2D inRect;
        int x1t, y1t, x2t, y2t, tmp, $i0, $i1;
        double $d0, $d1, $d2;
        java.awt.Rectangle $r0;

        this := @this: org.apache.fop.area.CTM;
        inRect := @parameter0: java.awt.geom.Rectangle2D;
        $d0 = virtualinvoke inRect.<java.awt.geom.Rectangle2D: double getX()>();
        $d1 = this.<org.apache.fop.area.CTM: double a>;
        $d0 = $d0 * $d1;
        $d1 = virtualinvoke inRect.<java.awt.geom.Rectangle2D: double getY()>();
        $d2 = this.<org.apache.fop.area.CTM: double c>;
        $d1 = $d1 * $d2;
        $d0 = $d0 + $d1;
        $d1 = this.<org.apache.fop.area.CTM: double e>;
        $d0 = $d0 + $d1;
        x1t = (int) $d0;
        $d0 = virtualinvoke inRect.<java.awt.geom.Rectangle2D: double getX()>();
        $d1 = this.<org.apache.fop.area.CTM: double b>;
        $d0 = $d0 * $d1;
        $d1 = virtualinvoke inRect.<java.awt.geom.Rectangle2D: double getY()>();
        $d2 = this.<org.apache.fop.area.CTM: double d>;
        $d1 = $d1 * $d2;
        $d0 = $d0 + $d1;
        $d1 = this.<org.apache.fop.area.CTM: double f>;
        $d0 = $d0 + $d1;
        y1t = (int) $d0;
        $d0 = virtualinvoke inRect.<java.awt.geom.Rectangle2D: double getX()>();
        $d1 = virtualinvoke inRect.<java.awt.geom.Rectangle2D: double getWidth()>();
        $d0 = $d0 + $d1;
        $d1 = this.<org.apache.fop.area.CTM: double a>;
        $d0 = $d0 * $d1;
        $d1 = virtualinvoke inRect.<java.awt.geom.Rectangle2D: double getY()>();
        $d2 = virtualinvoke inRect.<java.awt.geom.Rectangle2D: double getHeight()>();
        $d1 = $d1 + $d2;
        $d2 = this.<org.apache.fop.area.CTM: double c>;
        $d1 = $d1 * $d2;
        $d0 = $d0 + $d1;
        $d1 = this.<org.apache.fop.area.CTM: double e>;
        $d0 = $d0 + $d1;
        x2t = (int) $d0;
        $d0 = virtualinvoke inRect.<java.awt.geom.Rectangle2D: double getX()>();
        $d1 = virtualinvoke inRect.<java.awt.geom.Rectangle2D: double getWidth()>();
        $d0 = $d0 + $d1;
        $d1 = this.<org.apache.fop.area.CTM: double b>;
        $d0 = $d0 * $d1;
        $d1 = virtualinvoke inRect.<java.awt.geom.Rectangle2D: double getY()>();
        $d2 = virtualinvoke inRect.<java.awt.geom.Rectangle2D: double getHeight()>();
        $d1 = $d1 + $d2;
        $d2 = this.<org.apache.fop.area.CTM: double d>;
        $d1 = $d1 * $d2;
        $d0 = $d0 + $d1;
        $d1 = this.<org.apache.fop.area.CTM: double f>;
        $d0 = $d0 + $d1;
        y2t = (int) $d0;
        if x1t <= x2t goto label0;

        tmp = x2t;
        x2t = x1t;
        x1t = tmp;

     label0:
        if y1t <= y2t goto label1;

        tmp = y2t;
        y2t = y1t;
        y1t = tmp;

     label1:
        $r0 = new java.awt.Rectangle;
        $i0 = x2t - x1t;
        $i1 = y2t - y1t;
        specialinvoke $r0.<java.awt.Rectangle: void <init>(int,int,int,int)>(x1t, y1t, $i0, $i1);
        return $r0;
    }

    public java.lang.String toString()
    {
        org.apache.fop.area.CTM this;
        java.lang.StringBuffer $r0;
        double $d0;
        java.lang.String $r1;

        this := @this: org.apache.fop.area.CTM;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");
        $d0 = this.<org.apache.fop.area.CTM: double a>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d0 = this.<org.apache.fop.area.CTM: double b>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d0 = this.<org.apache.fop.area.CTM: double c>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d0 = this.<org.apache.fop.area.CTM: double d>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d0 = this.<org.apache.fop.area.CTM: double e>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $d0 = this.<org.apache.fop.area.CTM: double f>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");
        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r1;
    }

    public double[] toArray()
    {
        org.apache.fop.area.CTM this;
        double[] $r0;
        double $d0;

        this := @this: org.apache.fop.area.CTM;
        $r0 = newarray (double)[6];
        $d0 = this.<org.apache.fop.area.CTM: double a>;
        $r0[0] = $d0;
        $d0 = this.<org.apache.fop.area.CTM: double b>;
        $r0[1] = $d0;
        $d0 = this.<org.apache.fop.area.CTM: double c>;
        $r0[2] = $d0;
        $d0 = this.<org.apache.fop.area.CTM: double d>;
        $r0[3] = $d0;
        $d0 = this.<org.apache.fop.area.CTM: double e>;
        $r0[4] = $d0;
        $d0 = this.<org.apache.fop.area.CTM: double f>;
        $r0[5] = $d0;
        return $r0;
    }

    public java.awt.geom.AffineTransform toAffineTransform()
    {
        org.apache.fop.area.CTM this;
        java.awt.geom.AffineTransform $r0;
        double[] $r1;

        this := @this: org.apache.fop.area.CTM;
        $r0 = new java.awt.geom.AffineTransform;
        $r1 = virtualinvoke this.<org.apache.fop.area.CTM: double[] toArray()>();
        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>(double[])>($r1);
        return $r0;
    }

    public static org.apache.fop.area.CTM getCTMandRelDims(int, int, java.awt.geom.Rectangle2D, org.apache.fop.datatypes.FODimension)
    {
        int absRefOrient, writingMode, width, height, $i0, $i1, $i2;
        java.awt.geom.Rectangle2D absVPrect;
        org.apache.fop.datatypes.FODimension reldims;
        org.apache.fop.area.CTM ctm, $r0, $r2;
        double $d0, $d1, $d2, $d3, $d4;
        java.lang.RuntimeException $r1;

        absRefOrient := @parameter0: int;
        writingMode := @parameter1: int;
        absVPrect := @parameter2: java.awt.geom.Rectangle2D;
        reldims := @parameter3: org.apache.fop.datatypes.FODimension;
        $i0 = absRefOrient % 180;
        if $i0 != 0 goto label0;

        $d0 = virtualinvoke absVPrect.<java.awt.geom.Rectangle2D: double getWidth()>();
        width = (int) $d0;
        $d0 = virtualinvoke absVPrect.<java.awt.geom.Rectangle2D: double getHeight()>();
        height = (int) $d0;
        goto label1;

     label0:
        $d0 = virtualinvoke absVPrect.<java.awt.geom.Rectangle2D: double getWidth()>();
        height = (int) $d0;
        $d0 = virtualinvoke absVPrect.<java.awt.geom.Rectangle2D: double getHeight()>();
        width = (int) $d0;

     label1:
        $r0 = new org.apache.fop.area.CTM;
        $d1 = virtualinvoke absVPrect.<java.awt.geom.Rectangle2D: double getX()>();
        $d2 = virtualinvoke absVPrect.<java.awt.geom.Rectangle2D: double getY()>();
        specialinvoke $r0.<org.apache.fop.area.CTM: void <init>(double,double)>($d1, $d2);
        ctm = $r0;
        if absRefOrient == 0 goto label7;

        lookupswitch(absRefOrient)
        {
            case -270: goto label2;
            case -180: goto label3;
            case -90: goto label4;
            case 90: goto label2;
            case 180: goto label3;
            case 270: goto label4;
            default: goto label5;
        };

     label2:
        $d3 = (double) width;
        ctm = virtualinvoke ctm.<org.apache.fop.area.CTM: org.apache.fop.area.CTM translate(double,double)>(0.0, $d3);
        goto label6;

     label3:
        $d4 = (double) width;
        $d3 = (double) height;
        ctm = virtualinvoke ctm.<org.apache.fop.area.CTM: org.apache.fop.area.CTM translate(double,double)>($d4, $d3);
        goto label6;

     label4:
        $d4 = (double) height;
        ctm = virtualinvoke ctm.<org.apache.fop.area.CTM: org.apache.fop.area.CTM translate(double,double)>($d4, 0.0);
        goto label6;

     label5:
        $r1 = new java.lang.RuntimeException;
        specialinvoke $r1.<java.lang.RuntimeException: void <init>()>();
        throw $r1;

     label6:
        $d4 = (double) absRefOrient;
        ctm = virtualinvoke ctm.<org.apache.fop.area.CTM: org.apache.fop.area.CTM rotate(double)>($d4);

     label7:
        if writingMode == 79 goto label8;

        if writingMode != 121 goto label9;

     label8:
        reldims.<org.apache.fop.datatypes.FODimension: int ipd> = width;
        reldims.<org.apache.fop.datatypes.FODimension: int bpd> = height;
        goto label10;

     label9:
        reldims.<org.apache.fop.datatypes.FODimension: int ipd> = height;
        reldims.<org.apache.fop.datatypes.FODimension: int bpd> = width;

     label10:
        $i1 = reldims.<org.apache.fop.datatypes.FODimension: int ipd>;
        $i2 = reldims.<org.apache.fop.datatypes.FODimension: int bpd>;
        $r2 = staticinvoke <org.apache.fop.area.CTM: org.apache.fop.area.CTM getWMctm(int,int,int)>(writingMode, $i1, $i2);
        $r0 = virtualinvoke ctm.<org.apache.fop.area.CTM: org.apache.fop.area.CTM multiply(org.apache.fop.area.CTM)>($r2);
        return $r0;
    }

    static void <clinit>()
    {
        org.apache.fop.area.CTM $r0;

        $r0 = new org.apache.fop.area.CTM;
        specialinvoke $r0.<org.apache.fop.area.CTM: void <init>(double,double,double,double,double,double)>(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
        <org.apache.fop.area.CTM: org.apache.fop.area.CTM CTM_LRTB> = $r0;
        $r0 = new org.apache.fop.area.CTM;
        specialinvoke $r0.<org.apache.fop.area.CTM: void <init>(double,double,double,double,double,double)>(-1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
        <org.apache.fop.area.CTM: org.apache.fop.area.CTM CTM_RLTB> = $r0;
        $r0 = new org.apache.fop.area.CTM;
        specialinvoke $r0.<org.apache.fop.area.CTM: void <init>(double,double,double,double,double,double)>(0.0, 1.0, -1.0, 0.0, 0.0, 0.0);
        <org.apache.fop.area.CTM: org.apache.fop.area.CTM CTM_TBRL> = $r0;
        return;
    }
}
