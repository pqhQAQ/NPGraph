public class org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords extends java.lang.Object
{
    private static final double INFINITE_DEMERITS;
    private double[] bestDemerits;
    private org.apache.fop.layoutmgr.BreakingAlgorithm$KnuthNode[] bestNode;
    private double[] bestAdjust;
    private int[] bestDifference;
    private int[] bestAvailableShrink;
    private int[] bestAvailableStretch;
    private int bestIndex;
    private final org.apache.fop.layoutmgr.BreakingAlgorithm this$0;

    public void <init>(org.apache.fop.layoutmgr.BreakingAlgorithm)
    {
        org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords this;
        org.apache.fop.layoutmgr.BreakingAlgorithm this$0;
        double[] $r0;
        org.apache.fop.layoutmgr.BreakingAlgorithm$KnuthNode[] $r1;
        int[] $r2;

        this := @this: org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords;
        this$0 := @parameter0: org.apache.fop.layoutmgr.BreakingAlgorithm;
        this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: org.apache.fop.layoutmgr.BreakingAlgorithm this$0> = this$0;
        specialinvoke this.<java.lang.Object: void <init>()>();
        $r0 = newarray (double)[4];
        this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: double[] bestDemerits> = $r0;
        $r1 = newarray (org.apache.fop.layoutmgr.BreakingAlgorithm$KnuthNode)[4];
        this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: org.apache.fop.layoutmgr.BreakingAlgorithm$KnuthNode[] bestNode> = $r1;
        $r0 = newarray (double)[4];
        this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: double[] bestAdjust> = $r0;
        $r2 = newarray (int)[4];
        this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: int[] bestDifference> = $r2;
        $r2 = newarray (int)[4];
        this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: int[] bestAvailableShrink> = $r2;
        $r2 = newarray (int)[4];
        this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: int[] bestAvailableStretch> = $r2;
        this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: int bestIndex> = -1;
        virtualinvoke this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: void reset()>();
        return;
    }

    public void addRecord(double, org.apache.fop.layoutmgr.BreakingAlgorithm$KnuthNode, double, int, int, int, int)
    {
        org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords this;
        double demerits, adjust, $d0;
        org.apache.fop.layoutmgr.BreakingAlgorithm$KnuthNode node;
        int availableShrink, availableStretch, difference, fitness, $i1, $i2;
        double[] $r0, $r2;
        byte $b0;
        org.apache.commons.logging.Log $r1;
        org.apache.fop.layoutmgr.BreakingAlgorithm$KnuthNode[] $r3;
        int[] $r4;

        this := @this: org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords;
        demerits := @parameter0: double;
        node := @parameter1: org.apache.fop.layoutmgr.BreakingAlgorithm$KnuthNode;
        adjust := @parameter2: double;
        availableShrink := @parameter3: int;
        availableStretch := @parameter4: int;
        difference := @parameter5: int;
        fitness := @parameter6: int;
        $r0 = this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: double[] bestDemerits>;
        $d0 = $r0[fitness];
        $b0 = demerits cmpl $d0;
        if $b0 <= 0 goto label0;

        $r1 = <org.apache.fop.layoutmgr.BreakingAlgorithm: org.apache.commons.logging.Log log>;
        interfaceinvoke $r1.<org.apache.commons.logging.Log: void error(java.lang.Object)>("New demerits value greater than the old one");

     label0:
        $r2 = this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: double[] bestDemerits>;
        $r2[fitness] = demerits;
        $r3 = this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: org.apache.fop.layoutmgr.BreakingAlgorithm$KnuthNode[] bestNode>;
        $r3[fitness] = node;
        $r2 = this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: double[] bestAdjust>;
        $r2[fitness] = adjust;
        $r4 = this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: int[] bestAvailableShrink>;
        $r4[fitness] = availableShrink;
        $r4 = this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: int[] bestAvailableStretch>;
        $r4[fitness] = availableStretch;
        $r4 = this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: int[] bestDifference>;
        $r4[fitness] = difference;
        $i1 = this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: int bestIndex>;
        if $i1 == -1 goto label1;

        $r0 = this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: double[] bestDemerits>;
        $i2 = this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: int bestIndex>;
        $d0 = $r0[$i2];
        $b0 = demerits cmpg $d0;
        if $b0 >= 0 goto label2;

     label1:
        this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: int bestIndex> = fitness;

     label2:
        return;
    }

    public boolean hasRecords()
    {
        org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords this;
        int $i0;
        boolean $z0;

        this := @this: org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords;
        $i0 = this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: int bestIndex>;
        if $i0 == -1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean notInfiniteDemerits(int)
    {
        org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords this;
        int fitness;
        double[] $r0;
        double $d0;
        byte $b0;
        boolean $z0;

        this := @this: org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords;
        fitness := @parameter0: int;
        $r0 = this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: double[] bestDemerits>;
        $d0 = $r0[fitness];
        $b0 = $d0 cmpl #Infinity;
        if $b0 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public double getDemerits(int)
    {
        org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords this;
        int fitness;
        double[] $r0;
        double $d0;

        this := @this: org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords;
        fitness := @parameter0: int;
        $r0 = this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: double[] bestDemerits>;
        $d0 = $r0[fitness];
        return $d0;
    }

    public org.apache.fop.layoutmgr.BreakingAlgorithm$KnuthNode getNode(int)
    {
        org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords this;
        int fitness;
        org.apache.fop.layoutmgr.BreakingAlgorithm$KnuthNode[] $r0;
        org.apache.fop.layoutmgr.BreakingAlgorithm$KnuthNode $r1;

        this := @this: org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords;
        fitness := @parameter0: int;
        $r0 = this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: org.apache.fop.layoutmgr.BreakingAlgorithm$KnuthNode[] bestNode>;
        $r1 = $r0[fitness];
        return $r1;
    }

    public double getAdjust(int)
    {
        org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords this;
        int fitness;
        double[] $r0;
        double $d0;

        this := @this: org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords;
        fitness := @parameter0: int;
        $r0 = this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: double[] bestAdjust>;
        $d0 = $r0[fitness];
        return $d0;
    }

    public int getAvailableShrink(int)
    {
        org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords this;
        int fitness, $i0;
        int[] $r0;

        this := @this: org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords;
        fitness := @parameter0: int;
        $r0 = this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: int[] bestAvailableShrink>;
        $i0 = $r0[fitness];
        return $i0;
    }

    public int getAvailableStretch(int)
    {
        org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords this;
        int fitness, $i0;
        int[] $r0;

        this := @this: org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords;
        fitness := @parameter0: int;
        $r0 = this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: int[] bestAvailableStretch>;
        $i0 = $r0[fitness];
        return $i0;
    }

    public int getDifference(int)
    {
        org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords this;
        int fitness, $i0;
        int[] $r0;

        this := @this: org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords;
        fitness := @parameter0: int;
        $r0 = this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: int[] bestDifference>;
        $i0 = $r0[fitness];
        return $i0;
    }

    public double getMinDemerits()
    {
        org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords this;
        int $i0, $i1;
        double $d0;

        this := @this: org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords;
        $i0 = this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: int bestIndex>;
        if $i0 == -1 goto label0;

        $i1 = this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: int bestIndex>;
        $d0 = virtualinvoke this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: double getDemerits(int)>($i1);
        return $d0;

     label0:
        return #Infinity;
    }

    public void reset()
    {
        org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords this;
        int i;
        double[] $r0;

        this := @this: org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords;
        i = 0;

     label0:
        if i >= 4 goto label1;

        $r0 = this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: double[] bestDemerits>;
        $r0[i] = #Infinity;
        i = i + 1;
        goto label0;

     label1:
        this.<org.apache.fop.layoutmgr.BreakingAlgorithm$BestRecords: int bestIndex> = -1;
        return;
    }
}
