class org.apache.fop.fo.XMLWhiteSpaceHandler$EOLchecker extends java.lang.Object
{
    private boolean nextIsEOL;
    private org.apache.fop.fo.RecursiveCharIterator charIter;
    private final org.apache.fop.fo.XMLWhiteSpaceHandler this$0;

    void <init>(org.apache.fop.fo.XMLWhiteSpaceHandler, org.apache.fop.fo.CharIterator)
    {
        org.apache.fop.fo.XMLWhiteSpaceHandler$EOLchecker this;
        org.apache.fop.fo.XMLWhiteSpaceHandler l1;
        org.apache.fop.fo.CharIterator charIter;
        org.apache.fop.fo.RecursiveCharIterator $r0;

        this := @this: org.apache.fop.fo.XMLWhiteSpaceHandler$EOLchecker;
        l1 := @parameter0: org.apache.fop.fo.XMLWhiteSpaceHandler;
        charIter := @parameter1: org.apache.fop.fo.CharIterator;
        this.<org.apache.fop.fo.XMLWhiteSpaceHandler$EOLchecker: org.apache.fop.fo.XMLWhiteSpaceHandler this$0> = l1;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<org.apache.fop.fo.XMLWhiteSpaceHandler$EOLchecker: boolean nextIsEOL> = 0;
        $r0 = (org.apache.fop.fo.RecursiveCharIterator) charIter;
        this.<org.apache.fop.fo.XMLWhiteSpaceHandler$EOLchecker: org.apache.fop.fo.RecursiveCharIterator charIter> = $r0;
        return;
    }

    boolean beforeLinefeed()
    {
        org.apache.fop.fo.XMLWhiteSpaceHandler$EOLchecker this;
        org.apache.fop.fo.CharIterator lfIter;
        int charClass, $i1;
        boolean $z0, $z1;
        org.apache.fop.fo.RecursiveCharIterator $r0;
        char $c0;
        org.apache.fop.fo.XMLWhiteSpaceHandler $r1, $r3;

        this := @this: org.apache.fop.fo.XMLWhiteSpaceHandler$EOLchecker;
        $z0 = this.<org.apache.fop.fo.XMLWhiteSpaceHandler$EOLchecker: boolean nextIsEOL>;
        if $z0 != 0 goto label7;

        $r0 = this.<org.apache.fop.fo.XMLWhiteSpaceHandler$EOLchecker: org.apache.fop.fo.RecursiveCharIterator charIter>;
        lfIter = virtualinvoke $r0.<org.apache.fop.fo.RecursiveCharIterator: org.apache.fop.fo.CharIterator mark()>();

     label0:
        $z0 = virtualinvoke lfIter.<org.apache.fop.fo.CharIterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        $c0 = virtualinvoke lfIter.<org.apache.fop.fo.CharIterator: char nextChar()>();
        charClass = staticinvoke <org.apache.fop.util.CharUtilities: int classOf(char)>($c0);
        if charClass != 1 goto label1;

        $r1 = this.<org.apache.fop.fo.XMLWhiteSpaceHandler$EOLchecker: org.apache.fop.fo.XMLWhiteSpaceHandler this$0>;
        $i1 = staticinvoke <org.apache.fop.fo.XMLWhiteSpaceHandler: int access$000(org.apache.fop.fo.XMLWhiteSpaceHandler)>($r1);
        if $i1 != 108 goto label2;

        this.<org.apache.fop.fo.XMLWhiteSpaceHandler$EOLchecker: boolean nextIsEOL> = 1;
        $z0 = this.<org.apache.fop.fo.XMLWhiteSpaceHandler$EOLchecker: boolean nextIsEOL>;
        return $z0;

     label1:
        if charClass == 4 goto label2;

        $z0 = this.<org.apache.fop.fo.XMLWhiteSpaceHandler$EOLchecker: boolean nextIsEOL>;
        return $z0;

     label2:
        goto label0;

     label3:
        $r3 = this.<org.apache.fop.fo.XMLWhiteSpaceHandler$EOLchecker: org.apache.fop.fo.XMLWhiteSpaceHandler this$0>;
        $z1 = staticinvoke <org.apache.fop.fo.XMLWhiteSpaceHandler: boolean access$100(org.apache.fop.fo.XMLWhiteSpaceHandler)>($r3);
        if $z1 != 0 goto label4;

        $r3 = this.<org.apache.fop.fo.XMLWhiteSpaceHandler$EOLchecker: org.apache.fop.fo.XMLWhiteSpaceHandler this$0>;
        $z1 = staticinvoke <org.apache.fop.fo.XMLWhiteSpaceHandler: boolean access$200(org.apache.fop.fo.XMLWhiteSpaceHandler)>($r3);
        if $z1 == 0 goto label5;

     label4:
        $z1 = 1;
        goto label6;

     label5:
        $z1 = 0;

     label6:
        this.<org.apache.fop.fo.XMLWhiteSpaceHandler$EOLchecker: boolean nextIsEOL> = $z1;

     label7:
        $z0 = this.<org.apache.fop.fo.XMLWhiteSpaceHandler$EOLchecker: boolean nextIsEOL>;
        return $z0;
    }

    void reset()
    {
        org.apache.fop.fo.XMLWhiteSpaceHandler$EOLchecker this;

        this := @this: org.apache.fop.fo.XMLWhiteSpaceHandler$EOLchecker;
        this.<org.apache.fop.fo.XMLWhiteSpaceHandler$EOLchecker: boolean nextIsEOL> = 0;
        return;
    }
}
