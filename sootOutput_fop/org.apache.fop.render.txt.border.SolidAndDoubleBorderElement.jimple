public class org.apache.fop.render.txt.border.SolidAndDoubleBorderElement extends org.apache.fop.render.txt.border.AbstractBorderElement
{
    private static final char LIGHT_HORIZONTAL;
    private static final char LIGHT_VERTICAL;
    private static final char LIGHT_DOWN_AND_RIGHT;
    private static final char LIGHT_DOWN_AND_LEFT;
    private static final char LIGHT_UP_AND_RIGHT;
    private static final char LIGHT_UP_AND_LEFT;
    private static final char LIGHT_VERTICAL_AND_RIGHT;
    private static final char LIGHT_VERTICAL_AND_LEFT;
    private static final char LIGHT_DOWN_AND_HORIZONTAL;
    private static final char LIGHT_UP_AND_HORIZONTAL;
    private static final char LIGHT_VERTICAL_AND_HORIZONTAL;
    private static final char DOUBLE_HORIZONTAL;
    private static final char DOUBLE_VERTICAL;
    private static final char DOUBLE_DOWN_AND_RIGHT;
    private static final char DOUBLE_DOWN_AND_LEFT;
    private static final char DOUBLE_UP_AND_RIGHT;
    private static final char DOUBLE_UP_AND_LEFT;
    private static final char DOUBLE_VERTICAL_AND_RIGHT;
    private static final char DOUBLE_VERTICAL_AND_LEFT;
    private static final char DOUBLE_DOWN_AND_HORIZONTAL;
    private static final char DOUBLE_UP_AND_HORIZONTAL;
    private static final char DOUBLE_VERTICAL_AND_HORIZONTAL;
    private static final char DOWN_SINGLE_AND_RIGHT_DOUBLE;
    private static final char DOWN_DOUBLE_AND_RIGHT_SINGLE;
    private static final char DOWN_SINGLE_AND_LEFT_DOUBLE;
    private static final char DOWN_DOUBLE_AND_LEFT_SINGLE;
    private static final char UP_SINGLE_AND_RIGHT_DOUBLE;
    private static final char UP_DOUBLE_AND_RIGHT_SINGLE;
    private static final char UP_SINGLE_AND_LEFT_DOUBLE;
    private static final char UP_DOUBLE_AND_LEFT_SINGLE;
    private static final char VERTICAL_SINGLE_AND_RIGHT_DOUBLE;
    private static final char VERTICAL_DOUBLE_AND_RIGHT_SINGLE;
    private static final char VERTICAL_SINGLE_AND_LEFT_DOUBLE;
    private static final char VERTICAL_DOUBLE_AND_LEFT_SINGLE;
    private static final char DOWN_SINGLE_AND_HORIZONTAL_DOUBLE;
    private static final char DOWN_DOUBLE_AND_HORIZONTAL_SINGLE;
    private static final char UP_SINGLE_AND_HORIZONTAL_DOUBLE;
    private static final char UP_DOUBLE_AND_HORIZONTAL_SINGLE;
    private static final char VERTICAL_SINGLE_AND_HORIZONTAL_DOUBLE;
    private static final char VERTICAL_DOUBLE_AND_HORIZONTAL_SINGLE;
    private static final char UNDEFINED;
    private static final int UP3;
    private static final int DOWN3;
    private static final int LEFT3;
    private static final int RIGHT3;
    private static final char[] MAP;

    public void <init>()
    {
        org.apache.fop.render.txt.border.SolidAndDoubleBorderElement this;

        this := @this: org.apache.fop.render.txt.border.SolidAndDoubleBorderElement;
        specialinvoke this.<org.apache.fop.render.txt.border.AbstractBorderElement: void <init>()>();
        return;
    }

    public void <init>(int, int)
    {
        org.apache.fop.render.txt.border.SolidAndDoubleBorderElement this;
        int style, type, i, $i1;
        int[] $r0;

        this := @this: org.apache.fop.render.txt.border.SolidAndDoubleBorderElement;
        style := @parameter0: int;
        type := @parameter1: int;
        specialinvoke this.<org.apache.fop.render.txt.border.AbstractBorderElement: void <init>(int)>(type);
        if style != 37 goto label1;

        i = 0;

     label0:
        if i >= 4 goto label1;

        $r0 = this.<org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: int[] data>;
        $i1 = $r0[i];
        $i1 = $i1 * 2;
        $r0[i] = $i1;
        i = i + 1;
        goto label0;

     label1:
        return;
    }

    public org.apache.fop.render.txt.border.AbstractBorderElement mergeSolid(org.apache.fop.render.txt.border.SolidAndDoubleBorderElement)
    {
        org.apache.fop.render.txt.border.SolidAndDoubleBorderElement this, sde, $r0, e;
        int i, $i0, $i1;
        int[] $r1;

        this := @this: org.apache.fop.render.txt.border.SolidAndDoubleBorderElement;
        sde := @parameter0: org.apache.fop.render.txt.border.SolidAndDoubleBorderElement;
        $r0 = new org.apache.fop.render.txt.border.SolidAndDoubleBorderElement;
        specialinvoke $r0.<org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: void <init>(int,int)>(133, 0);
        e = $r0;
        i = 0;

     label0:
        if i >= 4 goto label3;

        $i0 = virtualinvoke sde.<org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: int getData(int)>(i);
        if $i0 == 0 goto label1;

        $i1 = virtualinvoke sde.<org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: int getData(int)>(i);
        virtualinvoke e.<org.apache.fop.render.txt.border.AbstractBorderElement: void setData(int,int)>(i, $i1);
        goto label2;

     label1:
        $r1 = this.<org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: int[] data>;
        $i1 = $r1[i];
        virtualinvoke e.<org.apache.fop.render.txt.border.AbstractBorderElement: void setData(int,int)>(i, $i1);

     label2:
        i = i + 1;
        goto label0;

     label3:
        return e;
    }

    public org.apache.fop.render.txt.border.AbstractBorderElement merge(org.apache.fop.render.txt.border.AbstractBorderElement)
    {
        org.apache.fop.render.txt.border.SolidAndDoubleBorderElement this, $r0;
        org.apache.fop.render.txt.border.AbstractBorderElement e, abe;
        boolean $z0;

        this := @this: org.apache.fop.render.txt.border.SolidAndDoubleBorderElement;
        e := @parameter0: org.apache.fop.render.txt.border.AbstractBorderElement;
        abe = this;
        $z0 = e instanceof org.apache.fop.render.txt.border.SolidAndDoubleBorderElement;
        if $z0 == 0 goto label0;

        $r0 = (org.apache.fop.render.txt.border.SolidAndDoubleBorderElement) e;
        abe = virtualinvoke this.<org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: org.apache.fop.render.txt.border.AbstractBorderElement mergeSolid(org.apache.fop.render.txt.border.SolidAndDoubleBorderElement)>($r0);
        goto label2;

     label0:
        $z0 = e instanceof org.apache.fop.render.txt.border.DottedBorderElement;
        if $z0 == 0 goto label1;

        abe = e;
        goto label2;

     label1:
        $z0 = e instanceof org.apache.fop.render.txt.border.DashedBorderElement;
        if $z0 == 0 goto label2;

        abe = virtualinvoke e.<org.apache.fop.render.txt.border.AbstractBorderElement: org.apache.fop.render.txt.border.AbstractBorderElement merge(org.apache.fop.render.txt.border.AbstractBorderElement)>(this);

     label2:
        return abe;
    }

    private char map2Char()
    {
        org.apache.fop.render.txt.border.SolidAndDoubleBorderElement this;
        byte key;
        int[] $r0;
        int $i0, key;
        char[] $r1;
        char $c1;

        this := @this: org.apache.fop.render.txt.border.SolidAndDoubleBorderElement;
        key = 0;
        $r0 = this.<org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: int[] data>;
        $i0 = $r0[0];
        $i0 = $i0 * 1;
        key = key + $i0;
        $r0 = this.<org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: int[] data>;
        $i0 = $r0[3];
        $i0 = $i0 * 9;
        key = key + $i0;
        $r0 = this.<org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: int[] data>;
        $i0 = $r0[2];
        $i0 = $i0 * 3;
        key = key + $i0;
        $r0 = this.<org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: int[] data>;
        $i0 = $r0[1];
        $i0 = $i0 * 27;
        key = key + $i0;
        $r1 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $c1 = $r1[key];
        return $c1;
    }

    private void modifyData()
    {
        org.apache.fop.render.txt.border.SolidAndDoubleBorderElement this;
        int c1, c2, i, $i0, $i1, $i4, $i5, $i6;
        byte m, $b2, $b3;
        int[] p, $r0, $r1, $r2;

        this := @this: org.apache.fop.render.txt.border.SolidAndDoubleBorderElement;
        c1 = 0;
        c2 = 0;
        i = 0;

     label0:
        if i >= 4 goto label5;

        $i0 = c1;
        $r0 = this.<org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: int[] data>;
        $i1 = $r0[i];
        if $i1 != 1 goto label1;

        $b2 = 1;
        goto label2;

     label1:
        $b2 = 0;

     label2:
        c1 = $i0 + $b2;
        $i0 = c2;
        $r0 = this.<org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: int[] data>;
        $i1 = $r0[i];
        if $i1 != 2 goto label3;

        $b2 = 1;
        goto label4;

     label3:
        $b2 = 0;

     label4:
        c2 = $i0 + $b2;
        i = i + 1;
        goto label0;

     label5:
        if c1 <= c2 goto label6;

        $b3 = 1;
        goto label7;

     label6:
        $b3 = 0;

     label7:
        m = $b3;
        $r1 = newarray (int)[3];
        $r1[0] = 0;
        $r1[1] = m;
        $i4 = 1 - m;
        $i5 = 2 * $i4;
        $r1[2] = $i5;
        p = $r1;
        i = 0;

     label8:
        if i >= 4 goto label9;

        $r1 = this.<org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: int[] data>;
        $r2 = this.<org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: int[] data>;
        $i5 = $r2[i];
        $i6 = p[$i5];
        $r1[i] = $i6;
        i = i + 1;
        goto label8;

     label9:
        return;
    }

    public char convert2Char()
    {
        org.apache.fop.render.txt.border.SolidAndDoubleBorderElement this;
        char ch;

        this := @this: org.apache.fop.render.txt.border.SolidAndDoubleBorderElement;
        ch = specialinvoke this.<org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char map2Char()>();
        if ch != 63 goto label0;

        specialinvoke this.<org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: void modifyData()>();
        ch = specialinvoke this.<org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char map2Char()>();

     label0:
        return ch;
    }

    static void <clinit>()
    {
        char[] $r0;

        $r0 = newarray (char)[100];
        <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP> = $r0;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        staticinvoke <java.util.Arrays: void fill(char[],char)>($r0, 63);
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[0] = 32;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[1] = 9474;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[3] = 9474;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[27] = 9472;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[9] = 9472;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[4] = 9474;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[36] = 9472;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[10] = 9496;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[12] = 9488;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[30] = 9484;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[28] = 9492;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[31] = 9500;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[13] = 9508;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[39] = 9516;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[37] = 9524;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[40] = 9532;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[2] = 9553;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[6] = 9553;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[54] = 9552;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[18] = 9552;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[8] = 9553;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[72] = 9552;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[20] = 9565;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[24] = 9559;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[60] = 9556;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[56] = 9562;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[62] = 9568;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[26] = 9571;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[78] = 9574;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[74] = 9577;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[80] = 9580;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[57] = 9554;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[33] = 9555;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[21] = 9557;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[15] = 9558;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[55] = 9560;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[29] = 9561;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[19] = 9563;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[11] = 9564;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[58] = 9566;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[35] = 9567;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[22] = 9569;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[17] = 9570;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[75] = 9572;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[42] = 9573;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[73] = 9575;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[38] = 9576;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[76] = 9578;
        $r0 = <org.apache.fop.render.txt.border.SolidAndDoubleBorderElement: char[] MAP>;
        $r0[44] = 9579;
        return;
    }
}
