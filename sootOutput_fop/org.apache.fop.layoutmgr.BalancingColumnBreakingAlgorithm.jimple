public class org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm extends org.apache.fop.layoutmgr.PageBreakingAlgorithm
{
    private org.apache.commons.logging.Log log;
    private int columnCount;
    private int fullLen;
    private int idealPartLen;
    static java.lang.Class class$org$apache$fop$layoutmgr$BalancingColumnBreakingAlgorithm;

    public void <init>(org.apache.fop.layoutmgr.LayoutManager, org.apache.fop.layoutmgr.PageProvider, org.apache.fop.layoutmgr.PageBreakingAlgorithm$PageBreakingLayoutListener, int, int, org.apache.fop.traits.MinOptMax, boolean, int)
    {
        org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm this;
        org.apache.fop.layoutmgr.LayoutManager topLevelLM;
        org.apache.fop.layoutmgr.PageProvider pageProvider;
        org.apache.fop.layoutmgr.PageBreakingAlgorithm$PageBreakingLayoutListener layoutListener;
        int alignment, alignmentLast, columnCount;
        org.apache.fop.traits.MinOptMax footnoteSeparatorLength;
        boolean partOverflowRecovery;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;

        this := @this: org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm;
        topLevelLM := @parameter0: org.apache.fop.layoutmgr.LayoutManager;
        pageProvider := @parameter1: org.apache.fop.layoutmgr.PageProvider;
        layoutListener := @parameter2: org.apache.fop.layoutmgr.PageBreakingAlgorithm$PageBreakingLayoutListener;
        alignment := @parameter3: int;
        alignmentLast := @parameter4: int;
        footnoteSeparatorLength := @parameter5: org.apache.fop.traits.MinOptMax;
        partOverflowRecovery := @parameter6: boolean;
        columnCount := @parameter7: int;
        specialinvoke this.<org.apache.fop.layoutmgr.PageBreakingAlgorithm: void <init>(org.apache.fop.layoutmgr.LayoutManager,org.apache.fop.layoutmgr.PageProvider,org.apache.fop.layoutmgr.PageBreakingAlgorithm$PageBreakingLayoutListener,int,int,org.apache.fop.traits.MinOptMax,boolean,boolean,boolean)>(topLevelLM, pageProvider, layoutListener, alignment, alignmentLast, footnoteSeparatorLength, partOverflowRecovery, 0, 0);
        $r1 = <org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: java.lang.Class class$org$apache$fop$layoutmgr$BalancingColumnBreakingAlgorithm>;
        if $r1 != null goto label0;

        $r1 = staticinvoke <org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: java.lang.Class class$(java.lang.String)>("org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm");
        <org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: java.lang.Class class$org$apache$fop$layoutmgr$BalancingColumnBreakingAlgorithm> = $r1;
        goto label1;

     label0:
        $r1 = <org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: java.lang.Class class$org$apache$fop$layoutmgr$BalancingColumnBreakingAlgorithm>;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);
        this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: org.apache.commons.logging.Log log> = $r2;
        this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: int columnCount> = columnCount;
        this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: boolean considerTooShort> = 1;
        return;
    }

    protected double computeDemerits(org.apache.fop.layoutmgr.BreakingAlgorithm$KnuthNode, org.apache.fop.layoutmgr.KnuthElement, int, double)
    {
        org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm this;
        org.apache.fop.layoutmgr.BreakingAlgorithm$KnuthNode activeNode;
        org.apache.fop.layoutmgr.KnuthElement element;
        int fitnessClass, remParts, curPos, partLen, restLen, avgRestLen, $i0, $i1, $i2, $i3;
        double r, dem, balance, absBalance, $d0;
        org.apache.commons.logging.Log $r0;
        boolean $z0;
        java.lang.StringBuffer $r1;
        org.apache.fop.layoutmgr.KnuthSequence $r2, $r4, $r5, $r6;
        java.lang.String $r3;
        float $f0, $f1;
        byte $b4;

        this := @this: org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm;
        activeNode := @parameter0: org.apache.fop.layoutmgr.BreakingAlgorithm$KnuthNode;
        element := @parameter1: org.apache.fop.layoutmgr.KnuthElement;
        fitnessClass := @parameter2: int;
        r := @parameter3: double;
        dem = specialinvoke this.<org.apache.fop.layoutmgr.PageBreakingAlgorithm: double computeDemerits(org.apache.fop.layoutmgr.BreakingAlgorithm$KnuthNode,org.apache.fop.layoutmgr.KnuthElement,int,double)>(activeNode, element, fitnessClass, r);
        $r0 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();
        if $z0 == 0 goto label0;

        $r0 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("original demerit=");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>(dem);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $i0 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: int totalWidth>;
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" line=");
        $i0 = activeNode.<org.apache.fop.layoutmgr.BreakingAlgorithm$KnuthNode: int line>;
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");
        $i0 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: int columnCount>;
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" pos=");
        $i0 = activeNode.<org.apache.fop.layoutmgr.BreakingAlgorithm$KnuthNode: int position>;
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");
        $r2 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: org.apache.fop.layoutmgr.KnuthSequence par>;
        $i0 = virtualinvoke $r2.<org.apache.fop.layoutmgr.KnuthSequence: int size()>();
        $i0 = $i0 - 1;
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r3);

     label0:
        $i1 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: int columnCount>;
        $i2 = activeNode.<org.apache.fop.layoutmgr.BreakingAlgorithm$KnuthNode: int line>;
        remParts = $i1 - $i2;
        $r4 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: org.apache.fop.layoutmgr.KnuthSequence par>;
        curPos = virtualinvoke $r4.<org.apache.fop.layoutmgr.KnuthSequence: int indexOf(java.lang.Object)>(element);
        $i1 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: int fullLen>;
        if $i1 != 0 goto label1;

        $r5 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: org.apache.fop.layoutmgr.KnuthSequence par>;
        $i0 = activeNode.<org.apache.fop.layoutmgr.BreakingAlgorithm$KnuthNode: int position>;
        $r6 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: org.apache.fop.layoutmgr.KnuthSequence par>;
        $i3 = virtualinvoke $r6.<org.apache.fop.layoutmgr.KnuthSequence: int size()>();
        $i3 = $i3 - 1;
        $i2 = staticinvoke <org.apache.fop.layoutmgr.ElementListUtils: int calcContentLength(java.util.List,int,int)>($r5, $i0, $i3);
        this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: int fullLen> = $i2;
        $i2 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: int fullLen>;
        $i0 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: int columnCount>;
        $i2 = $i2 / $i0;
        this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: int idealPartLen> = $i2;

     label1:
        $r4 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: org.apache.fop.layoutmgr.KnuthSequence par>;
        $i2 = activeNode.<org.apache.fop.layoutmgr.BreakingAlgorithm$KnuthNode: int position>;
        $i0 = curPos - 1;
        partLen = staticinvoke <org.apache.fop.layoutmgr.ElementListUtils: int calcContentLength(java.util.List,int,int)>($r4, $i2, $i0);
        $r4 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: org.apache.fop.layoutmgr.KnuthSequence par>;
        $i2 = curPos - 1;
        $r2 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: org.apache.fop.layoutmgr.KnuthSequence par>;
        $i0 = virtualinvoke $r2.<org.apache.fop.layoutmgr.KnuthSequence: int size()>();
        $i0 = $i0 - 1;
        restLen = staticinvoke <org.apache.fop.layoutmgr.ElementListUtils: int calcContentLength(java.util.List,int,int)>($r4, $i2, $i0);
        avgRestLen = 0;
        if remParts <= 0 goto label2;

        avgRestLen = restLen / remParts;

     label2:
        $r0 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();
        if $z0 == 0 goto label3;

        $r0 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("remaining parts: ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(remParts);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" rest len: ");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(restLen);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" avg=");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(avgRestLen);
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r3);

     label3:
        $i1 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: int idealPartLen>;
        $i1 = $i1 - partLen;
        $f0 = (float) $i1;
        $f0 = $f0 / 1000.0F;
        balance = (double) $f0;
        $r0 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();
        if $z0 == 0 goto label4;

        $r0 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("balance=");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>(balance);
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r3);

     label4:
        absBalance = staticinvoke <java.lang.Math: double abs(double)>(balance);
        dem = absBalance;
        $i1 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: int columnCount>;
        if $i1 <= 2 goto label5;

        $b4 = balance cmpl 0.0;
        if $b4 <= 0 goto label6;

        dem = dem * 1.2000000476837158;
        goto label6;

     label5:
        $b4 = balance cmpg 0.0;
        if $b4 >= 0 goto label6;

        dem = dem * 1.2000000476837158;

     label6:
        $f1 = (float) avgRestLen;
        $f1 = $f1 / 1000.0F;
        $d0 = (double) $f1;
        dem = dem + $d0;
        $i1 = activeNode.<org.apache.fop.layoutmgr.BreakingAlgorithm$KnuthNode: int line>;
        $i2 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: int columnCount>;
        if $i1 < $i2 goto label7;

        dem = 1.7976931348623157E308;

     label7:
        $r0 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();
        if $z0 == 0 goto label8;

        $r0 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: org.apache.commons.logging.Log log>;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("effective dem=");
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>(dem);
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $i0 = this.<org.apache.fop.layoutmgr.BalancingColumnBreakingAlgorithm: int totalWidth>;
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r3);

     label8:
        return dem;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException l1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        l1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(l1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }
}
