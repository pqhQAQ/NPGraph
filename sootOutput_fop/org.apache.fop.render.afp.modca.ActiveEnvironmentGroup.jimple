public final class org.apache.fop.render.afp.modca.ActiveEnvironmentGroup extends org.apache.fop.render.afp.modca.AbstractNamedAFPObject
{
    private static final java.lang.String DEFAULT_NAME;
    private java.util.ArrayList mapCodedFonts;
    private org.apache.fop.render.afp.modca.ObjectAreaDescriptor objectAreaDescriptor;
    private org.apache.fop.render.afp.modca.ObjectAreaPosition objectAreaPosition;
    private org.apache.fop.render.afp.modca.PresentationTextDescriptor presentationTextDataDescriptor;
    private org.apache.fop.render.afp.modca.PageDescriptor pageDescriptor;
    private java.util.ArrayList mapPageOverlays;

    public void <init>(int, int, int, int)
    {
        org.apache.fop.render.afp.modca.ActiveEnvironmentGroup this;
        int width, height, widthResolution, heightResolution;

        this := @this: org.apache.fop.render.afp.modca.ActiveEnvironmentGroup;
        width := @parameter0: int;
        height := @parameter1: int;
        widthResolution := @parameter2: int;
        heightResolution := @parameter3: int;
        specialinvoke this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: void <init>(java.lang.String,int,int,int,int)>("AEG00001", width, height, widthResolution, heightResolution);
        return;
    }

    public void <init>(java.lang.String, int, int, int, int)
    {
        org.apache.fop.render.afp.modca.ActiveEnvironmentGroup this;
        java.lang.String name;
        int width, height, widthResolution, heightResolution;
        java.util.ArrayList $r0;
        org.apache.fop.render.afp.modca.PageDescriptor $r1;
        org.apache.fop.render.afp.modca.ObjectAreaDescriptor $r2;
        org.apache.fop.render.afp.modca.PresentationTextDescriptor $r3;

        this := @this: org.apache.fop.render.afp.modca.ActiveEnvironmentGroup;
        name := @parameter0: java.lang.String;
        width := @parameter1: int;
        height := @parameter2: int;
        widthResolution := @parameter3: int;
        heightResolution := @parameter4: int;
        specialinvoke this.<org.apache.fop.render.afp.modca.AbstractNamedAFPObject: void <init>(java.lang.String)>(name);
        $r0 = new java.util.ArrayList;
        specialinvoke $r0.<java.util.ArrayList: void <init>()>();
        this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: java.util.ArrayList mapCodedFonts> = $r0;
        this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: org.apache.fop.render.afp.modca.ObjectAreaDescriptor objectAreaDescriptor> = null;
        this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: org.apache.fop.render.afp.modca.ObjectAreaPosition objectAreaPosition> = null;
        this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: org.apache.fop.render.afp.modca.PresentationTextDescriptor presentationTextDataDescriptor> = null;
        this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: org.apache.fop.render.afp.modca.PageDescriptor pageDescriptor> = null;
        $r0 = new java.util.ArrayList;
        specialinvoke $r0.<java.util.ArrayList: void <init>()>();
        this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: java.util.ArrayList mapPageOverlays> = $r0;
        $r1 = new org.apache.fop.render.afp.modca.PageDescriptor;
        specialinvoke $r1.<org.apache.fop.render.afp.modca.PageDescriptor: void <init>(int,int,int,int)>(width, height, widthResolution, heightResolution);
        this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: org.apache.fop.render.afp.modca.PageDescriptor pageDescriptor> = $r1;
        $r2 = new org.apache.fop.render.afp.modca.ObjectAreaDescriptor;
        specialinvoke $r2.<org.apache.fop.render.afp.modca.ObjectAreaDescriptor: void <init>(int,int,int,int)>(width, height, widthResolution, heightResolution);
        this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: org.apache.fop.render.afp.modca.ObjectAreaDescriptor objectAreaDescriptor> = $r2;
        $r3 = new org.apache.fop.render.afp.modca.PresentationTextDescriptor;
        specialinvoke $r3.<org.apache.fop.render.afp.modca.PresentationTextDescriptor: void <init>(int,int,int,int)>(width, height, widthResolution, heightResolution);
        this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: org.apache.fop.render.afp.modca.PresentationTextDescriptor presentationTextDataDescriptor> = $r3;
        return;
    }

    public void setPosition(int, int, int)
    {
        org.apache.fop.render.afp.modca.ActiveEnvironmentGroup this;
        int x, y, rotation;
        org.apache.fop.render.afp.modca.ObjectAreaPosition $r0;

        this := @this: org.apache.fop.render.afp.modca.ActiveEnvironmentGroup;
        x := @parameter0: int;
        y := @parameter1: int;
        rotation := @parameter2: int;
        $r0 = new org.apache.fop.render.afp.modca.ObjectAreaPosition;
        specialinvoke $r0.<org.apache.fop.render.afp.modca.ObjectAreaPosition: void <init>(int,int,int)>(x, y, rotation);
        this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: org.apache.fop.render.afp.modca.ObjectAreaPosition objectAreaPosition> = $r0;
        return;
    }

    public org.apache.fop.render.afp.modca.PageDescriptor getPageDescriptor()
    {
        org.apache.fop.render.afp.modca.ActiveEnvironmentGroup this;
        org.apache.fop.render.afp.modca.PageDescriptor $r0;

        this := @this: org.apache.fop.render.afp.modca.ActiveEnvironmentGroup;
        $r0 = this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: org.apache.fop.render.afp.modca.PageDescriptor pageDescriptor>;
        return $r0;
    }

    public org.apache.fop.render.afp.modca.PresentationTextDescriptor getPresentationTextDataDescriptor()
    {
        org.apache.fop.render.afp.modca.ActiveEnvironmentGroup this;
        org.apache.fop.render.afp.modca.PresentationTextDescriptor $r0;

        this := @this: org.apache.fop.render.afp.modca.ActiveEnvironmentGroup;
        $r0 = this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: org.apache.fop.render.afp.modca.PresentationTextDescriptor presentationTextDataDescriptor>;
        return $r0;
    }

    public void writeDataStream(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.fop.render.afp.modca.ActiveEnvironmentGroup this;
        java.io.OutputStream os;
        java.util.ArrayList $r0;
        org.apache.fop.render.afp.modca.PageDescriptor $r1;
        org.apache.fop.render.afp.modca.ObjectAreaDescriptor $r2;
        org.apache.fop.render.afp.modca.ObjectAreaPosition $r3;
        org.apache.fop.render.afp.modca.PresentationTextDescriptor $r4;

        this := @this: org.apache.fop.render.afp.modca.ActiveEnvironmentGroup;
        os := @parameter0: java.io.OutputStream;
        specialinvoke this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: void writeStart(java.io.OutputStream)>(os);
        $r0 = this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: java.util.ArrayList mapCodedFonts>;
        virtualinvoke this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: void writeObjectList(java.util.List,java.io.OutputStream)>($r0, os);
        $r0 = this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: java.util.ArrayList mapPageOverlays>;
        virtualinvoke this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: void writeObjectList(java.util.List,java.io.OutputStream)>($r0, os);
        $r1 = this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: org.apache.fop.render.afp.modca.PageDescriptor pageDescriptor>;
        virtualinvoke $r1.<org.apache.fop.render.afp.modca.PageDescriptor: void writeDataStream(java.io.OutputStream)>(os);
        $r2 = this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: org.apache.fop.render.afp.modca.ObjectAreaDescriptor objectAreaDescriptor>;
        if $r2 == null goto label0;

        $r3 = this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: org.apache.fop.render.afp.modca.ObjectAreaPosition objectAreaPosition>;
        if $r3 == null goto label0;

        $r2 = this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: org.apache.fop.render.afp.modca.ObjectAreaDescriptor objectAreaDescriptor>;
        virtualinvoke $r2.<org.apache.fop.render.afp.modca.ObjectAreaDescriptor: void writeDataStream(java.io.OutputStream)>(os);
        $r3 = this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: org.apache.fop.render.afp.modca.ObjectAreaPosition objectAreaPosition>;
        virtualinvoke $r3.<org.apache.fop.render.afp.modca.ObjectAreaPosition: void writeDataStream(java.io.OutputStream)>(os);

     label0:
        $r4 = this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: org.apache.fop.render.afp.modca.PresentationTextDescriptor presentationTextDataDescriptor>;
        virtualinvoke $r4.<org.apache.fop.render.afp.modca.PresentationTextDescriptor: void writeDataStream(java.io.OutputStream)>(os);
        specialinvoke this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: void writeEnd(java.io.OutputStream)>(os);
        return;
    }

    private void writeStart(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.fop.render.afp.modca.ActiveEnvironmentGroup this;
        java.io.OutputStream os;
        byte[] data, $r0, $r1;
        int i, $i0;
        byte $b1;

        this := @this: org.apache.fop.render.afp.modca.ActiveEnvironmentGroup;
        os := @parameter0: java.io.OutputStream;
        data = newarray (byte)[17];
        data[0] = 90;
        data[1] = 0;
        data[2] = 16;
        data[3] = -45;
        data[4] = -88;
        data[5] = -55;
        data[6] = 0;
        data[7] = 0;
        data[8] = 0;
        i = 0;

     label0:
        $r0 = this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: byte[] nameBytes>;
        $i0 = lengthof $r0;
        if i >= $i0 goto label1;

        $i0 = 9 + i;
        $r1 = this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: byte[] nameBytes>;
        $b1 = $r1[i];
        data[$i0] = $b1;
        i = i + 1;
        goto label0;

     label1:
        virtualinvoke os.<java.io.OutputStream: void write(byte[])>(data);
        return;
    }

    private void writeEnd(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.fop.render.afp.modca.ActiveEnvironmentGroup this;
        java.io.OutputStream os;
        byte[] data, $r0, $r1;
        int i, $i0;
        byte $b1;

        this := @this: org.apache.fop.render.afp.modca.ActiveEnvironmentGroup;
        os := @parameter0: java.io.OutputStream;
        data = newarray (byte)[17];
        data[0] = 90;
        data[1] = 0;
        data[2] = 16;
        data[3] = -45;
        data[4] = -87;
        data[5] = -55;
        data[6] = 0;
        data[7] = 0;
        data[8] = 0;
        i = 0;

     label0:
        $r0 = this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: byte[] nameBytes>;
        $i0 = lengthof $r0;
        if i >= $i0 goto label1;

        $i0 = 9 + i;
        $r1 = this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: byte[] nameBytes>;
        $b1 = $r1[i];
        data[$i0] = $b1;
        i = i + 1;
        goto label0;

     label1:
        virtualinvoke os.<java.io.OutputStream: void write(byte[])>(data);
        return;
    }

    public void createFont(byte, org.apache.fop.render.afp.fonts.AFPFont, int, int)
    {
        org.apache.fop.render.afp.modca.ActiveEnvironmentGroup this;
        byte fontReference;
        org.apache.fop.render.afp.fonts.AFPFont font;
        int size, orientation;
        org.apache.fop.render.afp.modca.MapCodedFont mcf, $r0;
        org.apache.fop.render.afp.modca.MaximumSizeExceededException msee, ex, $r2, $r3;
        java.util.ArrayList $r1;
        org.apache.commons.logging.Log $r4;

        this := @this: org.apache.fop.render.afp.modca.ActiveEnvironmentGroup;
        fontReference := @parameter0: byte;
        font := @parameter1: org.apache.fop.render.afp.fonts.AFPFont;
        size := @parameter2: int;
        orientation := @parameter3: int;
        mcf = specialinvoke this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: org.apache.fop.render.afp.modca.MapCodedFont getCurrentMapCodedFont()>();
        if mcf != null goto label0;

        $r0 = new org.apache.fop.render.afp.modca.MapCodedFont;
        specialinvoke $r0.<org.apache.fop.render.afp.modca.MapCodedFont: void <init>()>();
        mcf = $r0;
        $r1 = this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: java.util.ArrayList mapCodedFonts>;
        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>(mcf);

     label0:
        virtualinvoke mcf.<org.apache.fop.render.afp.modca.MapCodedFont: void addFont(int,org.apache.fop.render.afp.fonts.AFPFont,int,int)>(fontReference, font, size, orientation);

     label1:
        goto label6;

     label2:
        $r2 := @caughtexception;
        msee = $r2;
        $r0 = new org.apache.fop.render.afp.modca.MapCodedFont;
        specialinvoke $r0.<org.apache.fop.render.afp.modca.MapCodedFont: void <init>()>();
        mcf = $r0;
        $r1 = this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: java.util.ArrayList mapCodedFonts>;
        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>(mcf);

     label3:
        virtualinvoke mcf.<org.apache.fop.render.afp.modca.MapCodedFont: void addFont(int,org.apache.fop.render.afp.fonts.AFPFont,int,int)>(fontReference, font, size, orientation);

     label4:
        goto label6;

     label5:
        $r3 := @caughtexception;
        ex = $r3;
        $r4 = <org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: org.apache.commons.logging.Log log>;
        interfaceinvoke $r4.<org.apache.commons.logging.Log: void error(java.lang.Object)>("createFont():: resulted in a MaximumSizeExceededException");

     label6:
        return;

        catch org.apache.fop.render.afp.modca.MaximumSizeExceededException from label0 to label1 with label2;
        catch org.apache.fop.render.afp.modca.MaximumSizeExceededException from label3 to label4 with label5;
    }

    public void createOverlay(java.lang.String)
    {
        org.apache.fop.render.afp.modca.ActiveEnvironmentGroup this;
        java.lang.String name;
        org.apache.fop.render.afp.modca.MapPageOverlay mpo, $r0;
        org.apache.fop.render.afp.modca.MaximumSizeExceededException msee, ex, $r2, $r3;
        java.util.ArrayList $r1;
        org.apache.commons.logging.Log $r4;

        this := @this: org.apache.fop.render.afp.modca.ActiveEnvironmentGroup;
        name := @parameter0: java.lang.String;
        mpo = specialinvoke this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: org.apache.fop.render.afp.modca.MapPageOverlay getCurrentMapPageOverlay()>();
        if mpo != null goto label0;

        $r0 = new org.apache.fop.render.afp.modca.MapPageOverlay;
        specialinvoke $r0.<org.apache.fop.render.afp.modca.MapPageOverlay: void <init>()>();
        mpo = $r0;
        $r1 = this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: java.util.ArrayList mapPageOverlays>;
        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>(mpo);

     label0:
        virtualinvoke mpo.<org.apache.fop.render.afp.modca.MapPageOverlay: void addOverlay(java.lang.String)>(name);

     label1:
        goto label6;

     label2:
        $r2 := @caughtexception;
        msee = $r2;
        $r0 = new org.apache.fop.render.afp.modca.MapPageOverlay;
        specialinvoke $r0.<org.apache.fop.render.afp.modca.MapPageOverlay: void <init>()>();
        mpo = $r0;
        $r1 = this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: java.util.ArrayList mapPageOverlays>;
        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>(mpo);

     label3:
        virtualinvoke mpo.<org.apache.fop.render.afp.modca.MapPageOverlay: void addOverlay(java.lang.String)>(name);

     label4:
        goto label6;

     label5:
        $r3 := @caughtexception;
        ex = $r3;
        $r4 = <org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: org.apache.commons.logging.Log log>;
        interfaceinvoke $r4.<org.apache.commons.logging.Log: void error(java.lang.Object)>("createOverlay():: resulted in a MaximumSizeExceededException");

     label6:
        return;

        catch org.apache.fop.render.afp.modca.MaximumSizeExceededException from label0 to label1 with label2;
        catch org.apache.fop.render.afp.modca.MaximumSizeExceededException from label3 to label4 with label5;
    }

    private org.apache.fop.render.afp.modca.MapCodedFont getCurrentMapCodedFont()
    {
        org.apache.fop.render.afp.modca.ActiveEnvironmentGroup this;
        int size, $i0;
        java.util.ArrayList $r0, $r1;
        java.lang.Object $r2;
        org.apache.fop.render.afp.modca.MapCodedFont $r3;

        this := @this: org.apache.fop.render.afp.modca.ActiveEnvironmentGroup;
        $r0 = this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: java.util.ArrayList mapCodedFonts>;
        size = virtualinvoke $r0.<java.util.ArrayList: int size()>();
        if size <= 0 goto label0;

        $r0 = this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: java.util.ArrayList mapCodedFonts>;
        $r1 = this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: java.util.ArrayList mapCodedFonts>;
        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();
        $i0 = $i0 - 1;
        $r2 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>($i0);
        $r3 = (org.apache.fop.render.afp.modca.MapCodedFont) $r2;
        return $r3;

     label0:
        return null;
    }

    private org.apache.fop.render.afp.modca.MapPageOverlay getCurrentMapPageOverlay()
    {
        org.apache.fop.render.afp.modca.ActiveEnvironmentGroup this;
        int size, $i0;
        java.util.ArrayList $r0, $r1;
        java.lang.Object $r2;
        org.apache.fop.render.afp.modca.MapPageOverlay $r3;

        this := @this: org.apache.fop.render.afp.modca.ActiveEnvironmentGroup;
        $r0 = this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: java.util.ArrayList mapPageOverlays>;
        size = virtualinvoke $r0.<java.util.ArrayList: int size()>();
        if size <= 0 goto label0;

        $r0 = this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: java.util.ArrayList mapPageOverlays>;
        $r1 = this.<org.apache.fop.render.afp.modca.ActiveEnvironmentGroup: java.util.ArrayList mapPageOverlays>;
        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();
        $i0 = $i0 - 1;
        $r2 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>($i0);
        $r3 = (org.apache.fop.render.afp.modca.MapPageOverlay) $r2;
        return $r3;

     label0:
        return null;
    }
}
