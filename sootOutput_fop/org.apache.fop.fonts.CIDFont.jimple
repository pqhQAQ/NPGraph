public abstract class org.apache.fop.fonts.CIDFont extends org.apache.fop.fonts.CustomFont
{
    public java.util.Map usedGlyphs;
    public java.util.Map usedGlyphsIndex;
    public int usedGlyphsCount;
    public java.util.Map usedCharsIndex;
    public int[] width;

    public void <init>()
    {
        org.apache.fop.fonts.CIDFont this;
        java.util.HashMap $r0;

        this := @this: org.apache.fop.fonts.CIDFont;
        specialinvoke this.<org.apache.fop.fonts.CustomFont: void <init>()>();
        $r0 = new java.util.HashMap;
        specialinvoke $r0.<java.util.HashMap: void <init>()>();
        this.<org.apache.fop.fonts.CIDFont: java.util.Map usedGlyphs> = $r0;
        $r0 = new java.util.HashMap;
        specialinvoke $r0.<java.util.HashMap: void <init>()>();
        this.<org.apache.fop.fonts.CIDFont: java.util.Map usedGlyphsIndex> = $r0;
        this.<org.apache.fop.fonts.CIDFont: int usedGlyphsCount> = 0;
        $r0 = new java.util.HashMap;
        specialinvoke $r0.<java.util.HashMap: void <init>()>();
        this.<org.apache.fop.fonts.CIDFont: java.util.Map usedCharsIndex> = $r0;
        this.<org.apache.fop.fonts.CIDFont: int[] width> = null;
        return;
    }

    public abstract org.apache.fop.fonts.CIDFontType getCIDType();

    public abstract java.lang.String getRegistry();

    public abstract java.lang.String getOrdering();

    public abstract int getSupplement();

    public int getDefaultWidth()
    {
        org.apache.fop.fonts.CIDFont this;

        this := @this: org.apache.fop.fonts.CIDFont;
        return 0;
    }

    public boolean isMultiByte()
    {
        org.apache.fop.fonts.CIDFont this;

        this := @this: org.apache.fop.fonts.CIDFont;
        return 1;
    }

    public abstract char[] getCharsUsed();
}
