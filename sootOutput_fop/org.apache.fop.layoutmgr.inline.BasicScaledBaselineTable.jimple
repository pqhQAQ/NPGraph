public class org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable extends java.lang.Object implements org.apache.fop.layoutmgr.inline.ScaledBaselineTable, org.apache.fop.fo.Constants
{
    protected org.apache.commons.logging.Log log;
    private int altitude;
    private int depth;
    private int xHeight;
    private int dominantBaselineIdentifier;
    private int writingMode;
    private int dominantBaselineOffset;
    private int beforeEdgeOffset;
    private int afterEdgeOffset;
    private static final float HANGING_BASELINE_FACTOR;
    private static final float MATHEMATICAL_BASELINE_FACTOR;
    static java.lang.Class class$org$apache$fop$layoutmgr$inline$BasicScaledBaselineTable;

    public void <init>(int, int, int, int, int)
    {
        org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable this;
        int altitude, depth, xHeight, dominantBaselineIdentifier, writingMode, $i0, $i1;
        java.lang.Class $r0;
        org.apache.commons.logging.Log $r2;

        this := @this: org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable;
        altitude := @parameter0: int;
        depth := @parameter1: int;
        xHeight := @parameter2: int;
        dominantBaselineIdentifier := @parameter3: int;
        writingMode := @parameter4: int;
        specialinvoke this.<java.lang.Object: void <init>()>();
        $r0 = <org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: java.lang.Class class$org$apache$fop$layoutmgr$inline$BasicScaledBaselineTable>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: java.lang.Class class$(java.lang.String)>("org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable");
        <org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: java.lang.Class class$org$apache$fop$layoutmgr$inline$BasicScaledBaselineTable> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: java.lang.Class class$org$apache$fop$layoutmgr$inline$BasicScaledBaselineTable>;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r0);
        this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: org.apache.commons.logging.Log log> = $r2;
        this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int altitude> = altitude;
        this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int depth> = depth;
        this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int xHeight> = xHeight;
        this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int dominantBaselineIdentifier> = dominantBaselineIdentifier;
        this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int writingMode> = writingMode;
        $i0 = this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int dominantBaselineIdentifier>;
        $i1 = specialinvoke this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int getBaselineDefaultOffset(int)>($i0);
        this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int dominantBaselineOffset> = $i1;
        $i0 = this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int dominantBaselineOffset>;
        $i1 = altitude - $i0;
        this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int beforeEdgeOffset> = $i1;
        $i0 = this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int dominantBaselineOffset>;
        $i1 = depth - $i0;
        this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int afterEdgeOffset> = $i1;
        return;
    }

    public int getDominantBaselineIdentifier()
    {
        org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable this;
        int $i0;

        this := @this: org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable;
        $i0 = this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int dominantBaselineIdentifier>;
        return $i0;
    }

    public int getWritingMode()
    {
        org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable this;
        int $i0;

        this := @this: org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable;
        $i0 = this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int writingMode>;
        return $i0;
    }

    public int getBaseline(int)
    {
        org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable this;
        int baselineIdentifier, offset, $i0, $i1;
        boolean $z0;
        org.apache.commons.logging.Log $r0;

        this := @this: org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable;
        baselineIdentifier := @parameter0: int;
        offset = 0;
        $z0 = specialinvoke this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: boolean isHorizontalWritingMode()>();
        if $z0 != 0 goto label1;

        lookupswitch(baselineIdentifier)
        {
            case 20: goto label0;
            case 143: goto label0;
            case 144: goto label0;
            case 145: goto label0;
            default: goto label1;
        };

     label0:
        $r0 = this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: org.apache.commons.logging.Log log>;
        interfaceinvoke $r0.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("The given baseline is only supported for horizontal writing modes");
        return 0;

     label1:
        lookupswitch(baselineIdentifier)
        {
            case 4: goto label4;
            case 6: goto label3;
            case 14: goto label2;
            case 20: goto label4;
            case 24: goto label3;
            case 56: goto label3;
            case 59: goto label3;
            case 82: goto label3;
            case 84: goto label3;
            case 141: goto label3;
            case 142: goto label3;
            case 143: goto label3;
            case 144: goto label3;
            case 145: goto label2;
            default: goto label5;
        };

     label2:
        offset = this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int beforeEdgeOffset>;
        goto label5;

     label3:
        $i0 = specialinvoke this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int getBaselineDefaultOffset(int)>(baselineIdentifier);
        $i1 = this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int dominantBaselineOffset>;
        offset = $i0 - $i1;
        goto label5;

     label4:
        offset = this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int afterEdgeOffset>;

     label5:
        return offset;
    }

    private boolean isHorizontalWritingMode()
    {
        org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable this;
        int $i0;
        boolean $z0;

        this := @this: org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable;
        $i0 = this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int writingMode>;
        if $i0 == 79 goto label0;

        $i0 = this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int writingMode>;
        if $i0 != 121 goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private int getBaselineDefaultOffset(int)
    {
        org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable this;
        int baselineIdentifier, offset, $i0, $i1;
        float $f0;

        this := @this: org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable;
        baselineIdentifier := @parameter0: int;
        offset = 0;
        lookupswitch(baselineIdentifier)
        {
            case 6: goto label5;
            case 24: goto label2;
            case 56: goto label1;
            case 59: goto label6;
            case 82: goto label4;
            case 84: goto label3;
            case 141: goto label6;
            case 142: goto label0;
            default: goto label7;
        };

     label0:
        offset = this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int altitude>;
        goto label7;

     label1:
        $i0 = this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int altitude>;
        $f0 = (float) $i0;
        $f0 = $f0 * 0.8F;
        offset = staticinvoke <java.lang.Math: int round(float)>($f0);
        goto label7;

     label2:
        $i0 = this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int altitude>;
        $i1 = this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int depth>;
        $i0 = $i0 - $i1;
        $i0 = $i0 / 2;
        $i1 = this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int depth>;
        offset = $i0 + $i1;
        goto label7;

     label3:
        $i0 = this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int xHeight>;
        offset = $i0 / 2;
        goto label7;

     label4:
        $i0 = this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int altitude>;
        $f0 = (float) $i0;
        $f0 = $f0 * 0.5F;
        offset = staticinvoke <java.lang.Math: int round(float)>($f0);
        goto label7;

     label5:
        offset = 0;
        goto label7;

     label6:
        offset = this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int depth>;

     label7:
        return offset;
    }

    public void setBeforeAndAfterBaselines(int, int)
    {
        org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable this;
        int beforeBaseline, afterBaseline;

        this := @this: org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable;
        beforeBaseline := @parameter0: int;
        afterBaseline := @parameter1: int;
        this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int beforeEdgeOffset> = beforeBaseline;
        this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int afterEdgeOffset> = afterBaseline;
        return;
    }

    public org.apache.fop.layoutmgr.inline.ScaledBaselineTable deriveScaledBaselineTable(int)
    {
        org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable this, $r0, bac;
        int baselineIdentifier, $i0, $i1, $i2, $i3;

        this := @this: org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable;
        baselineIdentifier := @parameter0: int;
        $r0 = new org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable;
        $i0 = this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int altitude>;
        $i1 = this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int depth>;
        $i2 = this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int xHeight>;
        $i3 = this.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: int writingMode>;
        specialinvoke $r0.<org.apache.fop.layoutmgr.inline.BasicScaledBaselineTable: void <init>(int,int,int,int,int)>($i0, $i1, $i2, baselineIdentifier, $i3);
        bac = $r0;
        return bac;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException l1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        l1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(l1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }
}
