public class org.apache.fop.fo.ElementMappingRegistry extends java.lang.Object
{
    protected org.apache.commons.logging.Log log;
    protected java.util.Map fobjTable;
    protected java.util.Map namespaces;
    static java.lang.Class class$org$apache$fop$fo$ElementMappingRegistry;
    static java.lang.Class class$org$apache$fop$fo$ElementMapping;

    public void <init>(org.apache.fop.apps.FopFactory)
    {
        org.apache.fop.fo.ElementMappingRegistry this;
        org.apache.fop.apps.FopFactory factory;
        java.lang.Class $r0;
        org.apache.commons.logging.Log $r2;
        java.util.HashMap $r3;

        this := @this: org.apache.fop.fo.ElementMappingRegistry;
        factory := @parameter0: org.apache.fop.apps.FopFactory;
        specialinvoke this.<java.lang.Object: void <init>()>();
        $r0 = <org.apache.fop.fo.ElementMappingRegistry: java.lang.Class class$org$apache$fop$fo$ElementMappingRegistry>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.fop.fo.ElementMappingRegistry: java.lang.Class class$(java.lang.String)>("org.apache.fop.fo.ElementMappingRegistry");
        <org.apache.fop.fo.ElementMappingRegistry: java.lang.Class class$org$apache$fop$fo$ElementMappingRegistry> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.fop.fo.ElementMappingRegistry: java.lang.Class class$org$apache$fop$fo$ElementMappingRegistry>;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r0);
        this.<org.apache.fop.fo.ElementMappingRegistry: org.apache.commons.logging.Log log> = $r2;
        $r3 = new java.util.HashMap;
        specialinvoke $r3.<java.util.HashMap: void <init>()>();
        this.<org.apache.fop.fo.ElementMappingRegistry: java.util.Map fobjTable> = $r3;
        $r3 = new java.util.HashMap;
        specialinvoke $r3.<java.util.HashMap: void <init>()>();
        this.<org.apache.fop.fo.ElementMappingRegistry: java.util.Map namespaces> = $r3;
        specialinvoke this.<org.apache.fop.fo.ElementMappingRegistry: void setupDefaultMappings()>();
        return;
    }

    private void setupDefaultMappings()
    {
        org.apache.fop.fo.ElementMappingRegistry this;
        java.lang.Class $r0;
        java.util.Iterator providers;
        java.lang.String mapping;
        java.lang.IllegalArgumentException e, $r2;
        boolean $z0;
        java.lang.Object $r1;
        org.apache.commons.logging.Log $r3;

        this := @this: org.apache.fop.fo.ElementMappingRegistry;
        $r0 = <org.apache.fop.fo.ElementMappingRegistry: java.lang.Class class$org$apache$fop$fo$ElementMapping>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.fop.fo.ElementMappingRegistry: java.lang.Class class$(java.lang.String)>("org.apache.fop.fo.ElementMapping");
        <org.apache.fop.fo.ElementMappingRegistry: java.lang.Class class$org$apache$fop$fo$ElementMapping> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.fop.fo.ElementMappingRegistry: java.lang.Class class$org$apache$fop$fo$ElementMapping>;

     label1:
        providers = staticinvoke <org.apache.xmlgraphics.util.Service: java.util.Iterator providers(java.lang.Class,boolean)>($r0, 0);
        if providers == null goto label7;

     label2:
        $z0 = interfaceinvoke providers.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label7;

        $r1 = interfaceinvoke providers.<java.util.Iterator: java.lang.Object next()>();
        mapping = (java.lang.String) $r1;

     label3:
        virtualinvoke this.<org.apache.fop.fo.ElementMappingRegistry: void addElementMapping(java.lang.String)>(mapping);

     label4:
        goto label6;

     label5:
        $r2 := @caughtexception;
        e = $r2;
        $r3 = this.<org.apache.fop.fo.ElementMappingRegistry: org.apache.commons.logging.Log log>;
        interfaceinvoke $r3.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>("Error while adding element mapping", e);

     label6:
        goto label2;

     label7:
        return;

        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
    }

    public void addElementMapping(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.apache.fop.fo.ElementMappingRegistry this;
        java.lang.String mappingClassName, $r5;
        org.apache.fop.fo.ElementMapping mapping;
        java.lang.ClassNotFoundException e, $r3;
        java.lang.StringBuffer $r0;
        java.lang.Class $r1;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r4;
        java.lang.InstantiationException $r6, e;
        java.lang.IllegalAccessException $r7, e;
        java.lang.ClassCastException $r8, e;

        this := @this: org.apache.fop.fo.ElementMappingRegistry;
        mappingClassName := @parameter0: java.lang.String;

     label0:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(mappingClassName);
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();
        mapping = (org.apache.fop.fo.ElementMapping) $r2;
        virtualinvoke this.<org.apache.fop.fo.ElementMappingRegistry: void addElementMapping(org.apache.fop.fo.ElementMapping)>(mapping);

     label1:
        goto label6;

     label2:
        $r3 := @caughtexception;
        e = $r3;
        $r4 = new java.lang.IllegalArgumentException;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not find ");
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(mappingClassName);
        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r4;

     label3:
        $r6 := @caughtexception;
        e = $r6;
        $r4 = new java.lang.IllegalArgumentException;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not instantiate ");
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(mappingClassName);
        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r4;

     label4:
        $r7 := @caughtexception;
        e = $r7;
        $r4 = new java.lang.IllegalArgumentException;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not access ");
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(mappingClassName);
        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r4;

     label5:
        $r8 := @caughtexception;
        e = $r8;
        $r4 = new java.lang.IllegalArgumentException;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(mappingClassName);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not an ElementMapping");
        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r4;

     label6:
        return;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
        catch java.lang.InstantiationException from label0 to label1 with label3;
        catch java.lang.IllegalAccessException from label0 to label1 with label4;
        catch java.lang.ClassCastException from label0 to label1 with label5;
    }

    public void addElementMapping(org.apache.fop.fo.ElementMapping)
    {
        org.apache.fop.fo.ElementMappingRegistry this;
        org.apache.fop.fo.ElementMapping mapping;
        java.util.Map $r0;
        java.lang.String $r1;
        java.util.HashMap $r2;

        this := @this: org.apache.fop.fo.ElementMappingRegistry;
        mapping := @parameter0: org.apache.fop.fo.ElementMapping;
        $r0 = this.<org.apache.fop.fo.ElementMappingRegistry: java.util.Map fobjTable>;
        $r1 = virtualinvoke mapping.<org.apache.fop.fo.ElementMapping: java.lang.String getNamespaceURI()>();
        $r2 = virtualinvoke mapping.<org.apache.fop.fo.ElementMapping: java.util.HashMap getTable()>();
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);
        $r0 = this.<org.apache.fop.fo.ElementMappingRegistry: java.util.Map namespaces>;
        $r1 = virtualinvoke mapping.<org.apache.fop.fo.ElementMapping: java.lang.String getNamespaceURI()>();
        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String intern()>();
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, mapping);
        return;
    }

    public org.apache.fop.fo.ElementMapping$Maker findFOMaker(java.lang.String, java.lang.String, org.xml.sax.Locator) throws org.apache.fop.apps.FOPException
    {
        org.apache.fop.fo.ElementMappingRegistry this;
        java.lang.String namespaceURI, localName, $r3, $r5, $r6;
        org.xml.sax.Locator locator;
        java.util.Map table, $r1;
        org.apache.fop.fo.ElementMapping$Maker fobjMaker;
        java.lang.StringBuffer $r0, $r8;
        java.lang.Object $r2;
        boolean $z0;
        org.apache.fop.apps.FOPException $r4;
        org.apache.commons.logging.Log $r7;
        org.apache.fop.fo.UnknownXMLObj$Maker $r9;

        this := @this: org.apache.fop.fo.ElementMappingRegistry;
        namespaceURI := @parameter0: java.lang.String;
        localName := @parameter1: java.lang.String;
        locator := @parameter2: org.xml.sax.Locator;
        $r1 = this.<org.apache.fop.fo.ElementMappingRegistry: java.util.Map fobjTable>;
        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(namespaceURI);
        table = (java.util.Map) $r2;
        fobjMaker = null;
        if table == null goto label0;

        $r2 = interfaceinvoke table.<java.util.Map: java.lang.Object get(java.lang.Object)>(localName);
        fobjMaker = (org.apache.fop.fo.ElementMapping$Maker) $r2;
        if fobjMaker != null goto label0;

        $r2 = interfaceinvoke table.<java.util.Map: java.lang.Object get(java.lang.Object)>("<default>");
        fobjMaker = (org.apache.fop.fo.ElementMapping$Maker) $r2;

     label0:
        if fobjMaker != null goto label2;

        $r1 = this.<org.apache.fop.fo.ElementMappingRegistry: java.util.Map namespaces>;
        $r3 = virtualinvoke namespaceURI.<java.lang.String: java.lang.String intern()>();
        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);
        if $z0 == 0 goto label1;

        $r4 = new org.apache.fop.apps.FOPException;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r5 = staticinvoke <org.apache.fop.fo.FONode: java.lang.String errorText(org.xml.sax.Locator)>(locator);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No element mapping definition found for ");
        $r5 = staticinvoke <org.apache.fop.fo.FONode: java.lang.String getNodeString(java.lang.String,java.lang.String)>(namespaceURI, localName);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r6 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r4.<org.apache.fop.apps.FOPException: void <init>(java.lang.String,org.xml.sax.Locator)>($r6, locator);
        throw $r4;

     label1:
        $r7 = this.<org.apache.fop.fo.ElementMappingRegistry: org.apache.commons.logging.Log log>;
        $r8 = new java.lang.StringBuffer;
        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown formatting object ");
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(namespaceURI);
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("^");
        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(localName);
        $r3 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r7.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r3);
        $r9 = new org.apache.fop.fo.UnknownXMLObj$Maker;
        specialinvoke $r9.<org.apache.fop.fo.UnknownXMLObj$Maker: void <init>(java.lang.String)>(namespaceURI);
        fobjMaker = $r9;

     label2:
        return fobjMaker;
    }

    public org.w3c.dom.DOMImplementation getDOMImplementationForNamespace(java.lang.String)
    {
        org.apache.fop.fo.ElementMappingRegistry this;
        java.lang.String namespaceURI;
        org.apache.fop.fo.ElementMapping mapping;
        java.util.Map $r0;
        java.lang.Object $r1;
        org.w3c.dom.DOMImplementation $r2;

        this := @this: org.apache.fop.fo.ElementMappingRegistry;
        namespaceURI := @parameter0: java.lang.String;
        $r0 = this.<org.apache.fop.fo.ElementMappingRegistry: java.util.Map namespaces>;
        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(namespaceURI);
        mapping = (org.apache.fop.fo.ElementMapping) $r1;
        if mapping != null goto label0;

        return null;

     label0:
        $r2 = virtualinvoke mapping.<org.apache.fop.fo.ElementMapping: org.w3c.dom.DOMImplementation getDOMImplementation()>();
        return $r2;
    }

    public org.apache.fop.fo.ElementMapping getElementMapping(java.lang.String)
    {
        org.apache.fop.fo.ElementMappingRegistry this;
        java.lang.String namespaceURI;
        java.util.Map $r0;
        java.lang.Object $r1;
        org.apache.fop.fo.ElementMapping $r2;

        this := @this: org.apache.fop.fo.ElementMappingRegistry;
        namespaceURI := @parameter0: java.lang.String;
        $r0 = this.<org.apache.fop.fo.ElementMappingRegistry: java.util.Map namespaces>;
        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(namespaceURI);
        $r2 = (org.apache.fop.fo.ElementMapping) $r1;
        return $r2;
    }

    public boolean isKnownNamespace(java.lang.String)
    {
        org.apache.fop.fo.ElementMappingRegistry this;
        java.lang.String namespaceURI;
        java.util.Map $r0;
        boolean $z0;

        this := @this: org.apache.fop.fo.ElementMappingRegistry;
        namespaceURI := @parameter0: java.lang.String;
        $r0 = this.<org.apache.fop.fo.ElementMappingRegistry: java.util.Map namespaces>;
        $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>(namespaceURI);
        return $z0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException l1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        l1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(l1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }
}
