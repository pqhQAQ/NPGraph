public class org.apache.fop.fonts.autodetect.FontFileFinder extends org.apache.commons.io.DirectoryWalker implements org.apache.fop.fonts.autodetect.FontFinder
{
    private final org.apache.commons.logging.Log log;
    public static final int DEFAULT_DEPTH_LIMIT;
    static java.lang.Class class$org$apache$fop$fonts$autodetect$FontFileFinder;

    public void <init>()
    {
        org.apache.fop.fonts.autodetect.FontFileFinder this;
        org.apache.commons.io.filefilter.IOFileFilter $r0, $r1;
        java.lang.Class $r3;
        org.apache.commons.logging.Log $r4;

        this := @this: org.apache.fop.fonts.autodetect.FontFileFinder;
        $r0 = staticinvoke <org.apache.fop.fonts.autodetect.FontFileFinder: org.apache.commons.io.filefilter.IOFileFilter getDirectoryFilter()>();
        $r1 = staticinvoke <org.apache.fop.fonts.autodetect.FontFileFinder: org.apache.commons.io.filefilter.IOFileFilter getFileFilter()>();
        specialinvoke this.<org.apache.commons.io.DirectoryWalker: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)>($r0, $r1, -1);
        $r3 = <org.apache.fop.fonts.autodetect.FontFileFinder: java.lang.Class class$org$apache$fop$fonts$autodetect$FontFileFinder>;
        if $r3 != null goto label0;

        $r3 = staticinvoke <org.apache.fop.fonts.autodetect.FontFileFinder: java.lang.Class class$(java.lang.String)>("org.apache.fop.fonts.autodetect.FontFileFinder");
        <org.apache.fop.fonts.autodetect.FontFileFinder: java.lang.Class class$org$apache$fop$fonts$autodetect$FontFileFinder> = $r3;
        goto label1;

     label0:
        $r3 = <org.apache.fop.fonts.autodetect.FontFileFinder: java.lang.Class class$org$apache$fop$fonts$autodetect$FontFileFinder>;

     label1:
        $r4 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r3);
        this.<org.apache.fop.fonts.autodetect.FontFileFinder: org.apache.commons.logging.Log log> = $r4;
        return;
    }

    public void <init>(int)
    {
        org.apache.fop.fonts.autodetect.FontFileFinder this;
        int depthLimit;
        org.apache.commons.io.filefilter.IOFileFilter $r0, $r1;
        java.lang.Class $r3;
        org.apache.commons.logging.Log $r4;

        this := @this: org.apache.fop.fonts.autodetect.FontFileFinder;
        depthLimit := @parameter0: int;
        $r0 = staticinvoke <org.apache.fop.fonts.autodetect.FontFileFinder: org.apache.commons.io.filefilter.IOFileFilter getDirectoryFilter()>();
        $r1 = staticinvoke <org.apache.fop.fonts.autodetect.FontFileFinder: org.apache.commons.io.filefilter.IOFileFilter getFileFilter()>();
        specialinvoke this.<org.apache.commons.io.DirectoryWalker: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter,int)>($r0, $r1, depthLimit);
        $r3 = <org.apache.fop.fonts.autodetect.FontFileFinder: java.lang.Class class$org$apache$fop$fonts$autodetect$FontFileFinder>;
        if $r3 != null goto label0;

        $r3 = staticinvoke <org.apache.fop.fonts.autodetect.FontFileFinder: java.lang.Class class$(java.lang.String)>("org.apache.fop.fonts.autodetect.FontFileFinder");
        <org.apache.fop.fonts.autodetect.FontFileFinder: java.lang.Class class$org$apache$fop$fonts$autodetect$FontFileFinder> = $r3;
        goto label1;

     label0:
        $r3 = <org.apache.fop.fonts.autodetect.FontFileFinder: java.lang.Class class$org$apache$fop$fonts$autodetect$FontFileFinder>;

     label1:
        $r4 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r3);
        this.<org.apache.fop.fonts.autodetect.FontFileFinder: org.apache.commons.logging.Log log> = $r4;
        return;
    }

    protected static org.apache.commons.io.filefilter.IOFileFilter getDirectoryFilter()
    {
        org.apache.commons.io.filefilter.IOFileFilter $r0, $r1;

        $r0 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter directoryFileFilter()>();
        $r1 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String)>(".");
        $r1 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>($r1);
        $r0 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>($r0, $r1);
        return $r0;
    }

    protected static org.apache.commons.io.filefilter.IOFileFilter getFileFilter()
    {
        org.apache.commons.io.filefilter.IOFileFilter $r0;
        org.apache.commons.io.filefilter.WildcardFileFilter $r1;
        java.lang.String[] $r2;
        org.apache.commons.io.IOCase $r3;

        $r0 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter fileFileFilter()>();
        $r1 = new org.apache.commons.io.filefilter.WildcardFileFilter;
        $r2 = newarray (java.lang.String)[3];
        $r2[0] = "*.ttf";
        $r2[1] = "*.otf";
        $r2[2] = "*.pfb";
        $r3 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;
        specialinvoke $r1.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)>($r2, $r3);
        $r0 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>($r0, $r1);
        return $r0;
    }

    protected boolean handleDirectory(java.io.File, int, java.util.Collection)
    {
        org.apache.fop.fonts.autodetect.FontFileFinder this;
        java.io.File directory;
        int depth;
        java.util.Collection results;

        this := @this: org.apache.fop.fonts.autodetect.FontFileFinder;
        directory := @parameter0: java.io.File;
        depth := @parameter1: int;
        results := @parameter2: java.util.Collection;
        return 1;
    }

    protected void handleFile(java.io.File, int, java.util.Collection)
    {
        org.apache.fop.fonts.autodetect.FontFileFinder this;
        java.io.File file;
        int depth;
        java.util.Collection results;
        java.net.MalformedURLException e, $r2;
        java.net.URI $r0;
        java.net.URL $r1;
        org.apache.commons.logging.Log $r3;
        java.lang.StringBuffer $r4;
        java.lang.String $r5, $r6;

        this := @this: org.apache.fop.fonts.autodetect.FontFileFinder;
        file := @parameter0: java.io.File;
        depth := @parameter1: int;
        results := @parameter2: java.util.Collection;

     label0:
        $r0 = virtualinvoke file.<java.io.File: java.net.URI toURI()>();
        $r1 = virtualinvoke $r0.<java.net.URI: java.net.URL toURL()>();
        interfaceinvoke results.<java.util.Collection: boolean add(java.lang.Object)>($r1);

     label1:
        goto label3;

     label2:
        $r2 := @caughtexception;
        e = $r2;
        $r3 = this.<org.apache.fop.fonts.autodetect.FontFileFinder: org.apache.commons.logging.Log log>;
        $r4 = new java.lang.StringBuffer;
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("MalformedURLException");
        $r5 = virtualinvoke e.<java.net.MalformedURLException: java.lang.String getMessage()>();
        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r6);

     label3:
        return;

        catch java.net.MalformedURLException from label0 to label1 with label2;
    }

    protected void handleDirectoryEnd(java.io.File, int, java.util.Collection)
    {
        org.apache.fop.fonts.autodetect.FontFileFinder this;
        java.io.File directory;
        int depth, $i0;
        java.util.Collection results;
        java.lang.StringBuffer $r0;
        org.apache.commons.logging.Log $r1;
        boolean $z0;
        java.lang.String $r2, $r3;

        this := @this: org.apache.fop.fonts.autodetect.FontFileFinder;
        directory := @parameter0: java.io.File;
        depth := @parameter1: int;
        results := @parameter2: java.util.Collection;
        $r1 = this.<org.apache.fop.fonts.autodetect.FontFileFinder: org.apache.commons.logging.Log log>;
        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label2;

        $r1 = this.<org.apache.fop.fonts.autodetect.FontFileFinder: org.apache.commons.logging.Log log>;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(directory);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": found ");
        $i0 = interfaceinvoke results.<java.util.Collection: int size()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" font");
        $i0 = interfaceinvoke results.<java.util.Collection: int size()>();
        if $i0 != 1 goto label0;

        $r2 = "";
        goto label1;

     label0:
        $r2 = "s";

     label1:
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r3);

     label2:
        return;
    }

    public java.util.List find() throws java.io.IOException
    {
        org.apache.fop.fonts.autodetect.FontFileFinder this;
        java.lang.String osName;
        org.apache.fop.fonts.autodetect.FontFinder fontDirFinder;
        java.util.List fontDirs;
        java.util.ArrayList results, $r3;
        java.util.Iterator iter;
        java.io.File dir;
        boolean $z0;
        org.apache.fop.fonts.autodetect.WindowsFontDirFinder $r0;
        org.apache.fop.fonts.autodetect.MacFontDirFinder $r1;
        org.apache.fop.fonts.autodetect.UnixFontDirFinder $r2;
        java.lang.Object $r4;

        this := @this: org.apache.fop.fonts.autodetect.FontFileFinder;
        osName = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");
        $z0 = virtualinvoke osName.<java.lang.String: boolean startsWith(java.lang.String)>("Windows");
        if $z0 == 0 goto label0;

        $r0 = new org.apache.fop.fonts.autodetect.WindowsFontDirFinder;
        specialinvoke $r0.<org.apache.fop.fonts.autodetect.WindowsFontDirFinder: void <init>()>();
        fontDirFinder = $r0;
        goto label2;

     label0:
        $z0 = virtualinvoke osName.<java.lang.String: boolean startsWith(java.lang.String)>("Mac");
        if $z0 == 0 goto label1;

        $r1 = new org.apache.fop.fonts.autodetect.MacFontDirFinder;
        specialinvoke $r1.<org.apache.fop.fonts.autodetect.MacFontDirFinder: void <init>()>();
        fontDirFinder = $r1;
        goto label2;

     label1:
        $r2 = new org.apache.fop.fonts.autodetect.UnixFontDirFinder;
        specialinvoke $r2.<org.apache.fop.fonts.autodetect.UnixFontDirFinder: void <init>()>();
        fontDirFinder = $r2;

     label2:
        fontDirs = interfaceinvoke fontDirFinder.<org.apache.fop.fonts.autodetect.FontFinder: java.util.List find()>();
        $r3 = new java.util.ArrayList;
        specialinvoke $r3.<java.util.ArrayList: void <init>()>();
        results = $r3;
        iter = interfaceinvoke fontDirs.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();
        dir = (java.io.File) $r4;
        specialinvoke this.<org.apache.commons.io.DirectoryWalker: void walk(java.io.File,java.util.Collection)>(dir, results);
        goto label3;

     label4:
        return results;
    }

    public java.util.List find(java.lang.String) throws java.io.IOException
    {
        org.apache.fop.fonts.autodetect.FontFileFinder this;
        java.lang.String dir;
        java.util.ArrayList $r0, results;
        java.io.File $r1;

        this := @this: org.apache.fop.fonts.autodetect.FontFileFinder;
        dir := @parameter0: java.lang.String;
        $r0 = new java.util.ArrayList;
        specialinvoke $r0.<java.util.ArrayList: void <init>()>();
        results = $r0;
        $r1 = new java.io.File;
        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(dir);
        specialinvoke this.<org.apache.commons.io.DirectoryWalker: void walk(java.io.File,java.util.Collection)>($r1, results);
        return results;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException l1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        l1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(l1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }
}
