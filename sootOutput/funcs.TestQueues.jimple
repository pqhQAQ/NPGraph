public class funcs.TestQueues extends java.lang.Object
{
    funcs.TestQueue[] queues;

    public void <init>()
    {
        funcs.TestQueues this;
        int i;
        funcs.TestQueue $r0;
        funcs.TestQueue[] $r1, $r2;

        this := @this: funcs.TestQueues;
        specialinvoke this.<java.lang.Object: void <init>()>();
        $r1 = newarray (funcs.TestQueue)[16];
        this.<funcs.TestQueues: funcs.TestQueue[] queues> = $r1;
        i = 0;
        goto label1;

     label0:
        $r2 = this.<funcs.TestQueues: funcs.TestQueue[] queues>;
        $r0 = new funcs.TestQueue;
        specialinvoke $r0.<funcs.TestQueue: void <init>()>();
        $r2[i] = $r0;
        i = i + 1;

     label1:
        if i < 16 goto label0;

        return;
    }

    public boolean add(funcs.TestFunction$TestThread, java.lang.String)
    {
        funcs.TestQueues this;
        funcs.TestFunction$TestThread thread;
        java.lang.String number, $r2;
        int i, $i0;
        funcs.TestQueue[] $r0, $r3;
        funcs.TestQueue $r1;
        boolean $z0;

        this := @this: funcs.TestQueues;
        thread := @parameter0: funcs.TestFunction$TestThread;
        number := @parameter1: java.lang.String;
        i = 0;
        goto label3;

     label0:
        $r0 = this.<funcs.TestQueues: funcs.TestQueue[] queues>;
        $r1 = $r0[i];
        $r2 = $r1.<funcs.TestQueue: java.lang.String number>;
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(number);
        if $z0 == 0 goto label2;

        $r0 = this.<funcs.TestQueues: funcs.TestQueue[] queues>;
        $r1 = $r0[i];
        $z0 = virtualinvoke $r1.<funcs.TestQueue: boolean isEmpty()>();
        if $z0 == 0 goto label1;

        virtualinvoke thread.<funcs.TestFunction$TestThread: void start()>();

     label1:
        $r0 = this.<funcs.TestQueues: funcs.TestQueue[] queues>;
        $r1 = $r0[i];
        $z0 = virtualinvoke $r1.<funcs.TestQueue: boolean add(funcs.TestFunction$TestThread)>(thread);
        return $z0;

     label2:
        i = i + 1;

     label3:
        $r3 = this.<funcs.TestQueues: funcs.TestQueue[] queues>;
        $i0 = lengthof $r3;
        if i < $i0 goto label0;

        return 0;
    }

    public void next(java.lang.String)
    {
        funcs.TestQueues this;
        java.lang.String number, $r2;
        int i, $i0;
        funcs.TestQueue[] $r0, $r3;
        funcs.TestQueue $r1;
        boolean $z0;

        this := @this: funcs.TestQueues;
        number := @parameter0: java.lang.String;
        i = 0;
        goto label2;

     label0:
        $r0 = this.<funcs.TestQueues: funcs.TestQueue[] queues>;
        $r1 = $r0[i];
        $r2 = $r1.<funcs.TestQueue: java.lang.String number>;
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(number);
        if $z0 == 0 goto label1;

        $r0 = this.<funcs.TestQueues: funcs.TestQueue[] queues>;
        $r1 = $r0[i];
        virtualinvoke $r1.<funcs.TestQueue: void next()>();

     label1:
        i = i + 1;

     label2:
        $r3 = this.<funcs.TestQueues: funcs.TestQueue[] queues>;
        $i0 = lengthof $r3;
        if i < $i0 goto label0;

        return;
    }

    public void addDevice(java.lang.String)
    {
        funcs.TestQueues this;
        java.lang.String number, $r2;
        funcs.TestQueue $r0, q;
        int i, $i0;
        funcs.TestQueue[] $r1, $r3;
        boolean $z0;

        this := @this: funcs.TestQueues;
        number := @parameter0: java.lang.String;
        $r0 = new funcs.TestQueue;
        specialinvoke $r0.<funcs.TestQueue: void <init>(java.lang.String)>(number);
        q = $r0;
        i = 0;
        goto label2;

     label0:
        $r1 = this.<funcs.TestQueues: funcs.TestQueue[] queues>;
        $r0 = $r1[i];
        $r2 = $r0.<funcs.TestQueue: java.lang.String number>;
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");
        if $z0 == 0 goto label1;

        $r1 = this.<funcs.TestQueues: funcs.TestQueue[] queues>;
        $r1[i] = q;
        goto label3;

     label1:
        i = i + 1;

     label2:
        $r3 = this.<funcs.TestQueues: funcs.TestQueue[] queues>;
        $i0 = lengthof $r3;
        if i < $i0 goto label0;

     label3:
        return;
    }

    public void removeDevice(java.lang.String)
    {
        funcs.TestQueues this;
        java.lang.String number, $r2;
        int i, j, $i0;
        funcs.TestQueue[] $r0, $r3, $r5;
        funcs.TestQueue $r1, $r4;
        boolean $z0;

        this := @this: funcs.TestQueues;
        number := @parameter0: java.lang.String;
        i = 0;
        goto label4;

     label0:
        $r0 = this.<funcs.TestQueues: funcs.TestQueue[] queues>;
        $r1 = $r0[i];
        $r2 = $r1.<funcs.TestQueue: java.lang.String number>;
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(number);
        if $z0 == 0 goto label3;

        j = i + 1;
        goto label2;

     label1:
        $r0 = this.<funcs.TestQueues: funcs.TestQueue[] queues>;
        $i0 = j - 1;
        $r3 = this.<funcs.TestQueues: funcs.TestQueue[] queues>;
        $r4 = $r3[j];
        $r0[$i0] = $r4;
        j = j + 1;

     label2:
        $r5 = this.<funcs.TestQueues: funcs.TestQueue[] queues>;
        $i0 = lengthof $r5;
        if j < $i0 goto label1;

     label3:
        i = i + 1;

     label4:
        $r5 = this.<funcs.TestQueues: funcs.TestQueue[] queues>;
        $i0 = lengthof $r5;
        if i < $i0 goto label0;

        return;
    }

    public void updateQueueDevice(java.util.ArrayList)
    {
        funcs.TestQueues this;
        java.util.ArrayList AllDevices;

        this := @this: funcs.TestQueues;
        AllDevices := @parameter0: java.util.ArrayList;
        return;
    }
}
