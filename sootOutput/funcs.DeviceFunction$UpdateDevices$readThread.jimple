class funcs.DeviceFunction$UpdateDevices$readThread extends java.lang.Thread
{
    java.io.BufferedReader in;
    java.io.PrintWriter out;
    java.lang.Process proc;
    final funcs.DeviceFunction$UpdateDevices this$1;

    public void <init>(funcs.DeviceFunction$UpdateDevices, java.lang.Process)
    {
        funcs.DeviceFunction$UpdateDevices$readThread this;
        funcs.DeviceFunction$UpdateDevices l1;
        java.lang.Process p;
        java.io.InputStreamReader $r0;
        java.io.BufferedReader $r1;
        java.io.InputStream $r2;
        java.io.PrintWriter $r3;
        java.io.BufferedWriter $r4;
        java.io.OutputStreamWriter $r5;
        java.io.OutputStream $r6;

        this := @this: funcs.DeviceFunction$UpdateDevices$readThread;
        l1 := @parameter0: funcs.DeviceFunction$UpdateDevices;
        p := @parameter1: java.lang.Process;
        this.<funcs.DeviceFunction$UpdateDevices$readThread: funcs.DeviceFunction$UpdateDevices this$1> = l1;
        specialinvoke this.<java.lang.Thread: void <init>()>();
        $r1 = new java.io.BufferedReader;
        $r0 = new java.io.InputStreamReader;
        $r2 = virtualinvoke p.<java.lang.Process: java.io.InputStream getInputStream()>();
        specialinvoke $r0.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r2);
        specialinvoke $r1.<java.io.BufferedReader: void <init>(java.io.Reader)>($r0);
        this.<funcs.DeviceFunction$UpdateDevices$readThread: java.io.BufferedReader in> = $r1;
        $r3 = new java.io.PrintWriter;
        $r4 = new java.io.BufferedWriter;
        $r5 = new java.io.OutputStreamWriter;
        $r6 = virtualinvoke p.<java.lang.Process: java.io.OutputStream getOutputStream()>();
        specialinvoke $r5.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r6);
        specialinvoke $r4.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r5);
        specialinvoke $r3.<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>($r4, 1);
        this.<funcs.DeviceFunction$UpdateDevices$readThread: java.io.PrintWriter out> = $r3;
        this.<funcs.DeviceFunction$UpdateDevices$readThread: java.lang.Process proc> = p;
        return;
    }

    public void run()
    {
        funcs.DeviceFunction$UpdateDevices$readThread this;
        java.lang.String line, name, dimension, release, serialNumber, $r4;
        java.lang.String[] Name, releaseSplit, serials, manufacturer, location;
        int i, index, $i0, $i1;
        data.MyDevice device, $r1;
        java.lang.Exception e, $r8;
        java.io.BufferedReader $r0;
        funcs.DeviceFunction$UpdateDevices $r2;
        java.util.ArrayList $r3;
        funcs.DeviceFunction $r5;
        java.lang.Process $r6;
        java.io.PrintWriter $r7;

        this := @this: funcs.DeviceFunction$UpdateDevices$readThread;

     label0:
        $r0 = this.<funcs.DeviceFunction$UpdateDevices$readThread: java.io.BufferedReader in>;
        line = virtualinvoke $r0.<java.io.BufferedReader: java.lang.String readLine()>();
        if line == null goto label3;

        Name = virtualinvoke line.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");
        $i0 = lengthof Name;
        $i0 = $i0 - 1;
        name = Name[$i0];
        $i1 = virtualinvoke name.<java.lang.String: int length()>();
        $i1 = $i1 - 1;
        dimension = virtualinvoke name.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);
        i = 0;
        goto label2;

     label1:
        $r0 = this.<funcs.DeviceFunction$UpdateDevices$readThread: java.io.BufferedReader in>;
        line = virtualinvoke $r0.<java.io.BufferedReader: java.lang.String readLine()>();
        i = i + 1;

     label2:
        if i < 4 goto label1;

        releaseSplit = virtualinvoke line.<java.lang.String: java.lang.String[] split(java.lang.String)>("Version: ");
        release = releaseSplit[1];
        $r0 = this.<funcs.DeviceFunction$UpdateDevices$readThread: java.io.BufferedReader in>;
        line = virtualinvoke $r0.<java.io.BufferedReader: java.lang.String readLine()>();
        serials = virtualinvoke line.<java.lang.String: java.lang.String[] split(java.lang.String)>("Serial Number: ");
        serialNumber = serials[1];
        $r1 = new data.MyDevice;
        specialinvoke $r1.<data.MyDevice: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(serialNumber, "Online", "\u8bbe\u5907", dimension, release, "iOS");
        device = $r1;
        $r2 = this.<funcs.DeviceFunction$UpdateDevices$readThread: funcs.DeviceFunction$UpdateDevices this$1>;
        $r3 = $r2.<funcs.DeviceFunction$UpdateDevices: java.util.ArrayList temp>;
        $r4 = device.<data.MyDevice: java.lang.String SerialNumber>;
        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);
        $r2 = this.<funcs.DeviceFunction$UpdateDevices$readThread: funcs.DeviceFunction$UpdateDevices this$1>;
        $r5 = staticinvoke <funcs.DeviceFunction$UpdateDevices: funcs.DeviceFunction access$0(funcs.DeviceFunction$UpdateDevices)>($r2);
        $r4 = device.<data.MyDevice: java.lang.String SerialNumber>;
        index = virtualinvoke $r5.<funcs.DeviceFunction: int getIndex(java.lang.String)>($r4);
        if index != -1 goto label3;

        $r2 = this.<funcs.DeviceFunction$UpdateDevices$readThread: funcs.DeviceFunction$UpdateDevices this$1>;
        $r5 = staticinvoke <funcs.DeviceFunction$UpdateDevices: funcs.DeviceFunction access$0(funcs.DeviceFunction$UpdateDevices)>($r2);
        $r3 = staticinvoke <funcs.DeviceFunction: java.util.ArrayList access$0(funcs.DeviceFunction)>($r5);
        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(device);
        $r3 = <funcs.DeviceFunction: java.util.ArrayList iosDevices>;
        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(device);
        $r2 = this.<funcs.DeviceFunction$UpdateDevices$readThread: funcs.DeviceFunction$UpdateDevices this$1>;
        $r2.<funcs.DeviceFunction$UpdateDevices: boolean change> = 1;
        $r0 = this.<funcs.DeviceFunction$UpdateDevices$readThread: java.io.BufferedReader in>;
        virtualinvoke $r0.<java.io.BufferedReader: java.lang.String readLine()>();
        $r0 = this.<funcs.DeviceFunction$UpdateDevices$readThread: java.io.BufferedReader in>;
        line = virtualinvoke $r0.<java.io.BufferedReader: java.lang.String readLine()>();
        manufacturer = virtualinvoke line.<java.lang.String: java.lang.String[] split(java.lang.String)>("Manufacturer: ");
        $r4 = manufacturer[1];
        device.<data.MyDevice: java.lang.String Manufacturer> = $r4;
        $r0 = this.<funcs.DeviceFunction$UpdateDevices$readThread: java.io.BufferedReader in>;
        line = virtualinvoke $r0.<java.io.BufferedReader: java.lang.String readLine()>();
        location = virtualinvoke line.<java.lang.String: java.lang.String[] split(java.lang.String)>("Location ID: ");
        $r4 = location[1];
        device.<data.MyDevice: java.lang.String Battery> = $r4;

     label3:
        $r6 = this.<funcs.DeviceFunction$UpdateDevices$readThread: java.lang.Process proc>;
        virtualinvoke $r6.<java.lang.Process: int waitFor()>();
        $r0 = this.<funcs.DeviceFunction$UpdateDevices$readThread: java.io.BufferedReader in>;
        virtualinvoke $r0.<java.io.BufferedReader: void close()>();
        $r7 = this.<funcs.DeviceFunction$UpdateDevices$readThread: java.io.PrintWriter out>;
        virtualinvoke $r7.<java.io.PrintWriter: void close()>();
        $r6 = this.<funcs.DeviceFunction$UpdateDevices$readThread: java.lang.Process proc>;
        virtualinvoke $r6.<java.lang.Process: void destroy()>();

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;
        e = $r8;
        virtualinvoke e.<java.lang.Exception: void printStackTrace()>();

     label6:
        return;

        catch java.lang.Exception from label0 to label4 with label5;
    }
}
