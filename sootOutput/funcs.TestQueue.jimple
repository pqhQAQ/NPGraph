class funcs.TestQueue extends java.lang.Object
{
    public java.util.Queue queue;
    java.lang.String number;

    public void <init>(java.lang.String)
    {
        funcs.TestQueue this;
        java.lang.String number;
        java.util.LinkedList $r0;

        this := @this: funcs.TestQueue;
        number := @parameter0: java.lang.String;
        specialinvoke this.<java.lang.Object: void <init>()>();
        $r0 = new java.util.LinkedList;
        specialinvoke $r0.<java.util.LinkedList: void <init>()>();
        this.<funcs.TestQueue: java.util.Queue queue> = $r0;
        this.<funcs.TestQueue: java.lang.String number> = number;
        return;
    }

    public void <init>()
    {
        funcs.TestQueue this;
        java.util.LinkedList $r0;

        this := @this: funcs.TestQueue;
        specialinvoke this.<java.lang.Object: void <init>()>();
        $r0 = new java.util.LinkedList;
        specialinvoke $r0.<java.util.LinkedList: void <init>()>();
        this.<funcs.TestQueue: java.util.Queue queue> = $r0;
        this.<funcs.TestQueue: java.lang.String number> = "";
        return;
    }

    public boolean add(funcs.TestFunction$TestThread)
    {
        funcs.TestQueue this;
        funcs.TestFunction$TestThread thread;
        java.util.Queue $r0;
        boolean $z0;

        this := @this: funcs.TestQueue;
        thread := @parameter0: funcs.TestFunction$TestThread;
        $r0 = this.<funcs.TestQueue: java.util.Queue queue>;
        $z0 = interfaceinvoke $r0.<java.util.Queue: boolean offer(java.lang.Object)>(thread);
        if $z0 == 0 goto label0;

        return 1;

     label0:
        return 0;
    }

    public boolean remove()
    {
        funcs.TestQueue this;
        java.util.Queue $r0;
        java.lang.Object $r1;

        this := @this: funcs.TestQueue;
        $r0 = this.<funcs.TestQueue: java.util.Queue queue>;
        $r1 = interfaceinvoke $r0.<java.util.Queue: java.lang.Object poll()>();
        if $r1 == null goto label0;

        return 1;

     label0:
        return 0;
    }

    public void next()
    {
        funcs.TestQueue this;
        java.util.Queue $r0;
        java.lang.Object $r1;
        funcs.TestFunction$TestThread $r2;

        this := @this: funcs.TestQueue;
        virtualinvoke this.<funcs.TestQueue: boolean remove()>();
        $r0 = this.<funcs.TestQueue: java.util.Queue queue>;
        $r1 = interfaceinvoke $r0.<java.util.Queue: java.lang.Object peek()>();
        if $r1 == null goto label0;

        $r0 = this.<funcs.TestQueue: java.util.Queue queue>;
        $r1 = interfaceinvoke $r0.<java.util.Queue: java.lang.Object peek()>();
        $r2 = (funcs.TestFunction$TestThread) $r1;
        virtualinvoke $r2.<funcs.TestFunction$TestThread: void start()>();

     label0:
        return;
    }

    public boolean isEmpty()
    {
        funcs.TestQueue this;
        java.util.Queue $r0;
        boolean $z0;

        this := @this: funcs.TestQueue;
        $r0 = this.<funcs.TestQueue: java.util.Queue queue>;
        $z0 = interfaceinvoke $r0.<java.util.Queue: boolean isEmpty()>();
        return $z0;
    }

    public void setNumber(java.lang.String)
    {
        funcs.TestQueue this;
        java.lang.String number;

        this := @this: funcs.TestQueue;
        number := @parameter0: java.lang.String;
        this.<funcs.TestQueue: java.lang.String number> = number;
        return;
    }
}
