public class funcs.TestFunction extends java.lang.Object
{
    public java.util.ArrayList AllDevices;
    public javax.swing.DefaultListModel list;
    public java.lang.Boolean[][] isCheck;
    public java.lang.Boolean[] isCheck2;
    public java.lang.String apk_Path;
    public java.lang.String pkt_Name;
    public java.lang.String apk_Testpath;
    public java.lang.String Testpkt_Name;
    funcs.TestFunction$TestThread thread1;
    public static int TestCount;
    public static funcs.TestQueues testqueues;
    public java.lang.String Dir;

    static void <clinit>()
    {
        funcs.TestQueues $r0;

        <funcs.TestFunction: int TestCount> = 0;
        $r0 = new funcs.TestQueues;
        specialinvoke $r0.<funcs.TestQueues: void <init>()>();
        <funcs.TestFunction: funcs.TestQueues testqueues> = $r0;
        return;
    }

    public void <init>(java.util.ArrayList, java.lang.Boolean[][], java.lang.Boolean[])
    {
        funcs.TestFunction this;
        java.util.ArrayList AllDevices, $r1;
        java.lang.Boolean[][] isCheck, $r3;
        java.lang.Boolean[] isCheck2, $r4;
        javax.swing.DefaultListModel $r0;
        java.lang.Object $r2;
        int $i0;

        this := @this: funcs.TestFunction;
        AllDevices := @parameter0: java.util.ArrayList;
        isCheck := @parameter1: java.lang.Boolean[][];
        isCheck2 := @parameter2: java.lang.Boolean[];
        specialinvoke this.<java.lang.Object: void <init>()>();
        $r0 = new javax.swing.DefaultListModel;
        specialinvoke $r0.<javax.swing.DefaultListModel: void <init>()>();
        this.<funcs.TestFunction: javax.swing.DefaultListModel list> = $r0;
        this.<funcs.TestFunction: java.lang.String Dir> = "";
        $r1 = new java.util.ArrayList;
        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(AllDevices);
        this.<funcs.TestFunction: java.util.ArrayList AllDevices> = $r1;
        $r2 = virtualinvoke isCheck.<java.lang.Object: java.lang.Object clone()>();
        $r3 = (java.lang.Boolean[][]) $r2;
        this.<funcs.TestFunction: java.lang.Boolean[][] isCheck> = $r3;
        $r2 = virtualinvoke isCheck2.<java.lang.Object: java.lang.Object clone()>();
        $r4 = (java.lang.Boolean[]) $r2;
        this.<funcs.TestFunction: java.lang.Boolean[] isCheck2> = $r4;
        virtualinvoke this.<funcs.TestFunction: void MakeDir()>();
        $i0 = <funcs.TestFunction: int TestCount>;
        $i0 = $i0 + 1;
        <funcs.TestFunction: int TestCount> = $i0;
        return;
    }

    public void MakeDir()
    {
        funcs.TestFunction this;
        java.text.SimpleDateFormat $r0, df;
        java.lang.String date, $r3, $r5;
        java.io.File f, $r4;
        java.util.Date $r1;
        java.lang.StringBuilder $r2;

        this := @this: funcs.TestFunction;
        $r0 = new java.text.SimpleDateFormat;
        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd-HH:mm:ss");
        df = $r0;
        $r1 = new java.util.Date;
        specialinvoke $r1.<java.util.Date: void <init>()>();
        date = virtualinvoke df.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r1);
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("result/");
        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(date);
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();
        this.<funcs.TestFunction: java.lang.String Dir> = $r3;
        $r4 = new java.io.File;
        $r5 = this.<funcs.TestFunction: java.lang.String Dir>;
        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r5);
        f = $r4;
        virtualinvoke f.<java.io.File: boolean mkdir()>();
        return;
    }

    public void setPath(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        funcs.TestFunction this;
        java.lang.String apk_Path, pkt_Name, apk_Testpath, Testpkt_Name;

        this := @this: funcs.TestFunction;
        apk_Path := @parameter0: java.lang.String;
        pkt_Name := @parameter1: java.lang.String;
        apk_Testpath := @parameter2: java.lang.String;
        Testpkt_Name := @parameter3: java.lang.String;
        this.<funcs.TestFunction: java.lang.String apk_Path> = apk_Path;
        this.<funcs.TestFunction: java.lang.String pkt_Name> = pkt_Name;
        this.<funcs.TestFunction: java.lang.String apk_Testpath> = apk_Testpath;
        this.<funcs.TestFunction: java.lang.String Testpkt_Name> = Testpkt_Name;
        return;
    }

    public void testRun(int) throws com.android.ddmlib.TimeoutException, com.android.ddmlib.AdbCommandRejectedException, java.io.IOException, com.android.ddmlib.ShellCommandUnresponsiveException
    {
        funcs.TestFunction this;
        int Type, i, $i0;
        java.lang.String number, $r5, $r9, $r10, $r11, $r15;
        java.util.ArrayList $r0, $r6, $r17;
        java.lang.Object $r1, $r7;
        data.MyDevice $r2, $r8;
        javax.swing.DefaultListModel $r3;
        java.lang.StringBuilder $r4;
        boolean $z0;
        java.lang.Boolean[] $r12;
        java.lang.Boolean $r13;
        funcs.TestFunction$TestThread $r14;
        funcs.TestQueues $r16;

        this := @this: funcs.TestFunction;
        Type := @parameter0: int;
        i = 0;
        goto label2;

     label0:
        $r0 = this.<funcs.TestFunction: java.util.ArrayList AllDevices>;
        $r1 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>(i);
        $r2 = (data.MyDevice) $r1;
        number = $r2.<data.MyDevice: java.lang.String SerialNumber>;
        $r3 = this.<funcs.TestFunction: javax.swing.DefaultListModel list>;
        $r4 = new java.lang.StringBuilder;
        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(number);
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");
        $r6 = this.<funcs.TestFunction: java.util.ArrayList AllDevices>;
        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i);
        $r8 = (data.MyDevice) $r7;
        $r9 = $r8.<data.MyDevice: java.lang.String Type>;
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");
        $r6 = this.<funcs.TestFunction: java.util.ArrayList AllDevices>;
        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i);
        $r8 = (data.MyDevice) $r7;
        $r9 = $r8.<data.MyDevice: java.lang.String State>;
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r3.<javax.swing.DefaultListModel: void addElement(java.lang.Object)>($r10);
        $r0 = this.<funcs.TestFunction: java.util.ArrayList AllDevices>;
        $r1 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>(i);
        $r2 = (data.MyDevice) $r1;
        $r11 = $r2.<data.MyDevice: java.lang.String State>;
        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("Offline");
        if $z0 != 0 goto label1;

        $r12 = this.<funcs.TestFunction: java.lang.Boolean[] isCheck2>;
        $r13 = $r12[i];
        $z0 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>();
        if $z0 == 0 goto label1;

        $r14 = new funcs.TestFunction$TestThread;
        $r15 = this.<funcs.TestFunction: java.lang.String Dir>;
        specialinvoke $r14.<funcs.TestFunction$TestThread: void <init>(funcs.TestFunction,java.lang.String,int,int,java.lang.String)>(this, number, i, Type, $r15);
        this.<funcs.TestFunction: funcs.TestFunction$TestThread thread1> = $r14;
        $r16 = <funcs.TestFunction: funcs.TestQueues testqueues>;
        $r14 = this.<funcs.TestFunction: funcs.TestFunction$TestThread thread1>;
        virtualinvoke $r16.<funcs.TestQueues: boolean add(funcs.TestFunction$TestThread,java.lang.String)>($r14, number);

     label1:
        i = i + 1;

     label2:
        $r17 = this.<funcs.TestFunction: java.util.ArrayList AllDevices>;
        $i0 = virtualinvoke $r17.<java.util.ArrayList: int size()>();
        if i < $i0 goto label0;

        return;
    }

    public void stopTest()
    {
        funcs.TestFunction this;
        funcs.TestFunction$TestThread $r0;

        this := @this: funcs.TestFunction;
        $r0 = this.<funcs.TestFunction: funcs.TestFunction$TestThread thread1>;
        if $r0 != null goto label0;

        return;

     label0:
        $r0 = this.<funcs.TestFunction: funcs.TestFunction$TestThread thread1>;
        virtualinvoke $r0.<funcs.TestFunction$TestThread: void stop()>();
        $r0 = this.<funcs.TestFunction: funcs.TestFunction$TestThread thread1>;
        virtualinvoke $r0.<funcs.TestFunction$TestThread: void TestStop()>();
        return;
    }
}
